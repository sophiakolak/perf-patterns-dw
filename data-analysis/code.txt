class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT answer = 0 NEW_LINE arr = [ ] NEW_LINE for i in range ( len ( nums1 ) ) : NEW_LINE INDENT arr . append ( nums1 [ i ] ) NEW_LINE DEDENT for i in range ( len ( nums2 ) ) : NEW_LINE INDENT arr . append ( nums2 [ i ] ) NEW_LINE DEDENT sorted_arr = sorted ( arr ) NEW_LINE if len ( sorted_arr ) % 2 == 0 : NEW_LINE INDENT answer = ( ( sorted_arr [ len ( sorted_arr ) // 2 ] + sorted_arr [ len ( sorted_arr ) // 2 - 1 ] ) / 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT answer = sorted_arr [ len ( sorted_arr ) // 2 ] NEW_LINE DEDENT return answer NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT n = len ( nums1 ) NEW_LINE m = len ( nums2 ) NEW_LINE merged = nums1 + nums2 NEW_LINE merged = sorted ( merged ) NEW_LINE if ( n + m ) % 2 : NEW_LINE INDENT return merged [ ( n + m ) // 2 ] NEW_LINE DEDENT else : NEW_LINE INDENT return ( merged [ ( n + m ) // 2 ] + merged [ ( n + m ) // 2 - 1 ] ) / 2 NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT l = nums1 + nums2 NEW_LINE l . sort ( ) NEW_LINE if len ( l ) % 2 == 0 : NEW_LINE INDENT return ( l [ len ( l ) // 2 - 1 ] + l [ len ( l ) // 2 ] ) / 2 NEW_LINE DEDENT else : NEW_LINE INDENT return ( l [ len ( l ) // 2 ] ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT nums = nums1 + nums2 NEW_LINE num = sorted ( nums ) NEW_LINE n = len ( num ) NEW_LINE if n % 2 != 0 : NEW_LINE INDENT m = n // 2 NEW_LINE return num [ m ] NEW_LINE DEDENT if n % 2 == 0 : NEW_LINE INDENT m = n // 2 NEW_LINE o = n // 2 - 1 NEW_LINE x = ( num [ m ] + num [ o ] ) / 2.0 NEW_LINE return x NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT nums1 = nums1 or [ ] NEW_LINE nums2 = nums2 or [ ] NEW_LINE a , b = nums1 , nums2 NEW_LINE if len ( a ) > len ( b ) : NEW_LINE INDENT a , b = b , a NEW_LINE DEDENT aLen = len ( a ) NEW_LINE bLen = len ( b ) NEW_LINE leftHalfLen = ( aLen + bLen + 1 ) // 2 NEW_LINE aMinCount = 0 NEW_LINE aMaxCount = aLen NEW_LINE while aMinCount <= aMaxCount : NEW_LINE INDENT aCount = ( aMinCount + aMaxCount ) // 2 NEW_LINE bCount = leftHalfLen - aCount NEW_LINE if aCount > 0 and a [ aCount - 1 ] > b [ bCount ] : NEW_LINE INDENT aMaxCount = aCount - 1 NEW_LINE DEDENT elif aCount < aLen and b [ bCount - 1 ] > a [ aCount ] : NEW_LINE INDENT aMinCount = aCount + 1 NEW_LINE DEDENT else : NEW_LINE INDENT if aCount == 0 : NEW_LINE INDENT leftHalfEnd = b [ bCount - 1 ] NEW_LINE DEDENT elif bCount == 0 : NEW_LINE INDENT leftHalfEnd = a [ aCount - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT leftHalfEnd = max ( a [ aCount - 1 ] , b [ bCount - 1 ] ) NEW_LINE DEDENT if ( aLen + bLen ) % 2 == 1 : NEW_LINE INDENT return leftHalfEnd NEW_LINE DEDENT if aCount == aLen : NEW_LINE INDENT rightHalfStart = b [ bCount ] NEW_LINE DEDENT elif bCount == bLen : NEW_LINE INDENT rightHalfStart = a [ aCount ] NEW_LINE DEDENT else : NEW_LINE INDENT rightHalfStart = min ( a [ aCount ] , b [ bCount ] ) NEW_LINE DEDENT return ( leftHalfEnd + rightHalfStart ) / 2 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT nums = [ ] NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE while i < len ( nums1 ) and j < len ( nums2 ) : NEW_LINE INDENT if ( nums1 [ i ] <= nums2 [ j ] ) : NEW_LINE INDENT nums . append ( nums1 [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums . append ( nums2 [ j ] ) NEW_LINE j += 1 NEW_LINE DEDENT DEDENT while i < len ( nums1 ) : NEW_LINE INDENT nums . append ( nums1 [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT while j < len ( nums2 ) : NEW_LINE INDENT nums . append ( nums2 [ j ] ) NEW_LINE j += 1 NEW_LINE DEDENT if len ( nums ) % 2 == 0 : NEW_LINE INDENT return ( nums [ len ( nums ) // 2 - 1 ] + nums [ len ( nums ) // 2 ] ) / 2 NEW_LINE DEDENT else : NEW_LINE INDENT return nums [ len ( nums ) // 2 ] NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT x = nums1 NEW_LINE y = nums2 NEW_LINE if ( len ( nums1 ) > len ( nums2 ) ) : NEW_LINE INDENT x = nums2 NEW_LINE y = nums1 NEW_LINE DEDENT totalLen = len ( nums1 ) + len ( nums2 ) NEW_LINE def findMedianHelper ( start , end ) : NEW_LINE INDENT partitionX = ( start + end ) // 2 NEW_LINE partitionY = ( ( totalLen + 1 ) // 2 ) - partitionX NEW_LINE maxLeftX = float ( "-inf" ) if ( partitionX == 0 ) else x [ partitionX - 1 ] NEW_LINE minRightX = float ( "inf" ) if ( partitionX == len ( x ) ) else x [ partitionX ] NEW_LINE maxLeftY = float ( "-inf" ) if ( partitionY == 0 ) else y [ partitionY - 1 ] NEW_LINE minRightY = float ( "inf" ) if ( partitionY == len ( y ) ) else y [ partitionY ] NEW_LINE if ( maxLeftX <= minRightY ) and ( maxLeftY <= minRightX ) : NEW_LINE INDENT if ( totalLen % 2 == 0 ) : NEW_LINE INDENT return ( max ( maxLeftX , maxLeftY ) + min ( minRightX , minRightY ) ) / 2 NEW_LINE DEDENT else : NEW_LINE INDENT return ( max ( maxLeftX , maxLeftY ) ) NEW_LINE DEDENT DEDENT elif ( maxLeftX > minRightY ) : NEW_LINE INDENT return findMedianHelper ( start , partitionX - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT return findMedianHelper ( partitionX + 1 , end ) NEW_LINE DEDENT DEDENT return findMedianHelper ( 0 , len ( x ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT mergedNums = [ ] NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE while ( i < len ( nums1 ) or j < len ( nums2 ) ) : NEW_LINE INDENT if ( i == len ( nums1 ) ) : NEW_LINE INDENT mergedNums . append ( nums2 [ j ] ) NEW_LINE j += 1 NEW_LINE DEDENT elif ( j == len ( nums2 ) ) : NEW_LINE INDENT mergedNums . append ( nums1 [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT elif ( nums1 [ i ] < nums2 [ j ] ) : NEW_LINE INDENT mergedNums . append ( nums1 [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT mergedNums . append ( nums2 [ j ] ) NEW_LINE j += 1 NEW_LINE DEDENT DEDENT mid = len ( mergedNums ) // 2 NEW_LINE if ( len ( mergedNums ) % 2 == 0 ) : NEW_LINE INDENT return ( mergedNums [ mid - 1 ] + mergedNums [ mid ] ) / 2 NEW_LINE DEDENT else : NEW_LINE INDENT return mergedNums [ mid ] NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , A : List [ int ] , B : List [ int ] ) -> float : NEW_LINE INDENT def kth ( a , b , k ) : NEW_LINE INDENT if not a : NEW_LINE INDENT return b [ k ] NEW_LINE DEDENT if not b : NEW_LINE INDENT return a [ k ] NEW_LINE DEDENT m = ( len ( a ) - 1 ) // 2 NEW_LINE n = ( len ( b ) - 1 ) // 2 NEW_LINE if m + n <= k - 1 : NEW_LINE INDENT if a [ m ] <= b [ n ] : NEW_LINE INDENT return kth ( a [ m + 1 : ] , b , k - m - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT return kth ( a , b [ n + 1 : ] , k - n - 1 ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if a [ m ] <= b [ n ] : NEW_LINE INDENT return kth ( a , b [ : n ] , k ) NEW_LINE DEDENT else : NEW_LINE INDENT return kth ( a [ : m ] , b , k ) NEW_LINE DEDENT DEDENT DEDENT k = ( len ( A ) + len ( B ) ) // 2 NEW_LINE if ( len ( A ) + len ( B ) ) % 2 == 1 : NEW_LINE INDENT return kth ( A , B , k ) NEW_LINE DEDENT else : NEW_LINE INDENT res1 = kth ( A , B , k - 1 ) NEW_LINE res2 = kth ( A , B , k ) NEW_LINE return ( res1 + res2 ) / 2.0 NEW_LINE DEDENT DEDENT DEDENT
NEW_LINE class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT if len ( nums1 ) > len ( nums2 ) : NEW_LINE INDENT return self . findMedianSortedArrays ( nums2 , nums1 ) NEW_LINE DEDENT x = len ( nums1 ) NEW_LINE y = len ( nums2 ) NEW_LINE low = 0 NEW_LINE high = x NEW_LINE while low <= high : NEW_LINE INDENT partitionX = ( low + high ) // 2 NEW_LINE partitionY = ( x + y + 1 ) // 2 - partitionX NEW_LINE maxLeftX = float ( "-inf" ) if partitionX == 0 else nums1 [ partitionX - 1 ] NEW_LINE minRightX = float ( "inf" ) if partitionX == x else nums1 [ partitionX ] NEW_LINE maxLeftY = float ( "-inf" ) if partitionY == 0 else nums2 [ partitionY - 1 ] NEW_LINE minRightY = float ( "inf" ) if partitionY == y else nums2 [ partitionY ] NEW_LINE if maxLeftX <= minRightY and maxLeftY <= minRightX : NEW_LINE INDENT if ( x + y ) % 2 == 0 : NEW_LINE INDENT return ( max ( maxLeftX , maxLeftY ) + min ( minRightX , minRightY ) ) / 2 NEW_LINE DEDENT else : NEW_LINE INDENT return max ( maxLeftX , maxLeftY ) NEW_LINE DEDENT DEDENT elif maxLeftX > minRightY : NEW_LINE INDENT high = partitionX NEW_LINE DEDENT else : NEW_LINE INDENT low = partitionX + 1 NEW_LINE DEDENT DEDENT return "0" NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT merged = [ ] NEW_LINE index1 , index2 = 0 , 0 NEW_LINE while ( index1 < len ( nums1 ) and index2 < len ( nums2 ) ) : NEW_LINE INDENT if nums1 [ index1 ] <= nums2 [ index2 ] : NEW_LINE INDENT merged . append ( nums1 [ index1 ] ) NEW_LINE index1 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT merged . append ( nums2 [ index2 ] ) NEW_LINE index2 += 1 NEW_LINE DEDENT DEDENT if index1 != len ( nums1 ) : NEW_LINE INDENT merged . extend ( nums1 [ index1 : ] ) NEW_LINE DEDENT else : NEW_LINE INDENT merged . extend ( nums2 [ index2 : ] ) NEW_LINE DEDENT return ( 1 / 2 ) * ( merged [ ( len ( merged ) - 1 ) // 2 ] + merged [ len ( merged ) // 2 ] ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , A , B ) : NEW_LINE INDENT if len ( A ) > len ( B ) : NEW_LINE INDENT A , B = B , A NEW_LINE DEDENT total = len ( A ) + len ( B ) NEW_LINE lo = 0 NEW_LINE hi = len ( A ) NEW_LINE while lo <= hi : NEW_LINE INDENT midA = ( hi + lo ) // 2 NEW_LINE A_left = A [ midA - 1 ] if midA != 0 else float ( '-inf' ) NEW_LINE A_right = A [ midA ] if len ( A ) != midA else float ( 'inf' ) NEW_LINE midB = total // 2 - midA NEW_LINE B_left = B [ midB - 1 ] if midB != 0 else float ( '-inf' ) NEW_LINE B_right = B [ midB ] if len ( B ) != midB else float ( 'inf' ) NEW_LINE if A_left <= B_right and B_left <= A_right : NEW_LINE INDENT if total % 2 == 0 : NEW_LINE INDENT return max ( A_left , B_left ) / 2.0 + min ( A_right , B_right ) / 2.0 NEW_LINE DEDENT else : NEW_LINE INDENT return min ( A_right , B_right ) NEW_LINE DEDENT DEDENT elif A_left > B_right : NEW_LINE INDENT hi = midA - 1 NEW_LINE DEDENT elif A_left < B_right : NEW_LINE INDENT lo = midA + 1 NEW_LINE DEDENT DEDENT return None NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , A , B ) : NEW_LINE INDENT l = len ( A ) + len ( B ) NEW_LINE if l % 2 == 1 : NEW_LINE INDENT return self . findKth ( A , B , l // 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT return ( self . findKth ( A , B , l // 2 - 1 ) + self . findKth ( A , B , l // 2 ) ) / 2.0 NEW_LINE DEDENT DEDENT def findKth ( self , A , B , k ) : NEW_LINE INDENT if len ( A ) > len ( B ) : NEW_LINE INDENT A , B = B , A NEW_LINE DEDENT if not A : NEW_LINE INDENT return B [ k ] NEW_LINE DEDENT if k == len ( A ) + len ( B ) - 1 : NEW_LINE INDENT return max ( A [ - 1 ] , B [ - 1 ] ) NEW_LINE DEDENT i = len ( A ) // 2 NEW_LINE j = k - i NEW_LINE if A [ i ] > B [ j ] : NEW_LINE INDENT return self . findKth ( A [ : i ] , B [ j : ] , i ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . findKth ( A [ i : ] , B [ : j ] , j ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , A : List [ int ] , B : List [ int ] ) -> float : NEW_LINE INDENT m , n = len ( A ) , len ( B ) NEW_LINE if m > n : NEW_LINE INDENT A , B , m , n = B , A , n , m NEW_LINE DEDENT if n == 0 : NEW_LINE INDENT raise ValueError NEW_LINE DEDENT imin , imax , half_len = 0 , m , ( m + n + 1 ) // 2 NEW_LINE while imin <= imax : NEW_LINE INDENT i = ( imin + imax ) // 2 NEW_LINE j = half_len - i NEW_LINE if i < m and B [ j - 1 ] > A [ i ] : NEW_LINE INDENT imin = i + 1 NEW_LINE DEDENT elif i > 0 and A [ i - 1 ] > B [ j ] : NEW_LINE INDENT imax = i - 1 NEW_LINE DEDENT else : NEW_LINE INDENT if i == 0 : max_of_left = B [ j - 1 ] NEW_LINE elif j == 0 : max_of_left = A [ i - 1 ] NEW_LINE else : max_of_left = max ( A [ i - 1 ] , B [ j - 1 ] ) NEW_LINE if ( m + n ) % 2 == 1 : NEW_LINE INDENT return max_of_left NEW_LINE DEDENT if i == m : min_of_right = B [ j ] NEW_LINE elif j == n : min_of_right = A [ i ] NEW_LINE else : min_of_right = min ( A [ i ] , B [ j ] ) NEW_LINE return ( max_of_left + min_of_right ) / 2 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT final = nums1 NEW_LINE final . extend ( nums2 ) NEW_LINE final . sort ( ) NEW_LINE l = len ( final ) NEW_LINE if l % 2 == 0 : NEW_LINE INDENT return ( final [ int ( ( l / 2 ) - 1 ) ] + final [ int ( ( l / 2 ) ) ] ) / 2 NEW_LINE DEDENT else : NEW_LINE INDENT return ( final [ math . floor ( l / 2 ) ] ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT num1_pointer = 0 NEW_LINE num2_pointer = 0 NEW_LINE merged_array = [ ] NEW_LINE merging = True NEW_LINE while merging : NEW_LINE INDENT num1 = nums1 [ num1_pointer ] if len ( nums1 ) - 1 >= num1_pointer else None NEW_LINE num2 = nums2 [ num2_pointer ] if len ( nums2 ) - 1 >= num2_pointer else None NEW_LINE print ( num1 ) NEW_LINE print ( num2 ) NEW_LINE if num1 is None and num2 is None : NEW_LINE INDENT merging = False NEW_LINE break NEW_LINE DEDENT if num1 is not None and num2 is None : NEW_LINE INDENT merged_array . append ( num1 ) NEW_LINE num1_pointer += 1 NEW_LINE continue NEW_LINE DEDENT if num2 is not None and num1 is None : NEW_LINE INDENT merged_array . append ( num2 ) NEW_LINE num2_pointer += 1 NEW_LINE continue NEW_LINE DEDENT if num1 == num2 : NEW_LINE INDENT merged_array . append ( num1 ) NEW_LINE merged_array . append ( num2 ) NEW_LINE num1_pointer += 1 NEW_LINE num2_pointer += 1 NEW_LINE DEDENT elif num1 < num2 : NEW_LINE INDENT merged_array . append ( num1 ) NEW_LINE num1_pointer += 1 NEW_LINE DEDENT else : NEW_LINE INDENT merged_array . append ( num2 ) NEW_LINE num2_pointer += 1 NEW_LINE DEDENT DEDENT if ( len ( merged_array ) - 1 ) % 2 is 0 : NEW_LINE INDENT return merged_array [ ( len ( merged_array ) - 1 ) // 2 ] NEW_LINE DEDENT else : NEW_LINE INDENT mid = ( len ( merged_array ) - 1 ) / 2 NEW_LINE low = math . floor ( mid ) NEW_LINE high = math . ceil ( mid ) NEW_LINE return ( merged_array [ low ] + merged_array [ high ] ) / 2 NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT ret = nums1 + nums2 NEW_LINE ret . sort ( ) NEW_LINE length = len ( ret ) NEW_LINE if length % 2 == 0 : NEW_LINE INDENT return ( ret [ int ( length / 2 ) ] + ret [ int ( length / 2 - 1 ) ] ) / 2 NEW_LINE DEDENT else : NEW_LINE INDENT return ret [ int ( length / 2 ) ] NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT i , j = 0 , 0 NEW_LINE num3 = [ ] NEW_LINE while i < len ( nums1 ) and j < len ( nums2 ) : NEW_LINE INDENT if nums1 [ i ] < nums2 [ j ] : NEW_LINE INDENT num3 . append ( nums1 [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT num3 . append ( nums2 [ j ] ) NEW_LINE j += 1 NEW_LINE DEDENT DEDENT if i < len ( nums1 ) : NEW_LINE INDENT num3 = num3 + nums1 [ i : ] NEW_LINE DEDENT if j < len ( nums2 ) : NEW_LINE INDENT num3 = num3 + nums2 [ j : ] NEW_LINE DEDENT n = len ( num3 ) NEW_LINE if n % 2 == 0 : NEW_LINE INDENT m_i = n // 2 NEW_LINE median = ( num3 [ m_i ] + num3 [ m_i - 1 ] ) / 2 NEW_LINE return median NEW_LINE DEDENT else : NEW_LINE INDENT m_i = n // 2 NEW_LINE median = num3 [ m_i ] NEW_LINE return float ( median ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT A , B = nums1 , nums2 NEW_LINE m , n = len ( A ) , len ( B ) NEW_LINE if m > n : NEW_LINE INDENT A , B = B , A NEW_LINE m , n = n , m NEW_LINE DEDENT half_len = ( m + n + 1 ) // 2 NEW_LINE imin , imax = 0 , m NEW_LINE while imin <= imax : NEW_LINE INDENT i = ( imin + imax ) // 2 NEW_LINE j = half_len - i NEW_LINE if i < m and B [ j - 1 ] > A [ i ] : NEW_LINE INDENT imin = i + 1 NEW_LINE DEDENT elif i > 0 and A [ i - 1 ] > B [ j ] : NEW_LINE INDENT imax = i - 1 NEW_LINE DEDENT else : NEW_LINE INDENT if i == 0 : max_left = B [ j - 1 ] NEW_LINE elif j == 0 : max_left = A [ i - 1 ] NEW_LINE else : max_left = max ( A [ i - 1 ] , B [ j - 1 ] ) NEW_LINE if ( m + n ) % 2 == 1 : NEW_LINE INDENT return max_left NEW_LINE DEDENT if i == m : min_right = B [ j ] NEW_LINE elif j == n : min_right = A [ i ] NEW_LINE else : min_right = min ( A [ i ] , B [ j ] ) NEW_LINE return ( max_left + min_right ) / 2.0 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT nums = nums1 + nums2 NEW_LINE nums . sort ( ) NEW_LINE l = len ( nums ) NEW_LINE if l % 2 == 0 : NEW_LINE INDENT return ( nums [ ( l // 2 ) ] + nums [ ( l // 2 ) - 1 ] ) * 0.5 NEW_LINE DEDENT else : NEW_LINE INDENT return nums [ ( l // 2 ) ] NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT len_num_1 = len ( nums1 ) NEW_LINE len_num_2 = len ( nums2 ) NEW_LINE num3 = list ( ) NEW_LINE idx = 0 NEW_LINE j = 0 NEW_LINE if ( len_num_1 == 0 and len_num_2 == 0 ) : NEW_LINE INDENT return "expected 'm + n' to have value from 1 to 2000 only" NEW_LINE DEDENT elif len_num_1 == 0 : NEW_LINE INDENT print ( "here" ) NEW_LINE num3 = nums2 NEW_LINE DEDENT elif len_num_2 == 0 : NEW_LINE INDENT num3 = nums1 NEW_LINE DEDENT else : NEW_LINE INDENT while True : NEW_LINE INDENT print ( idx , "idx" , j , "j" ) NEW_LINE if j < len_num_2 : NEW_LINE INDENT if ( nums1 [ idx ] <= nums2 [ j ] ) : NEW_LINE INDENT num3 . append ( nums1 [ idx ] ) NEW_LINE idx = idx + 1 NEW_LINE if idx >= len_num_1 : NEW_LINE INDENT num3 = num3 + nums2 [ j : ] NEW_LINE print ( "new break here" , nums2 [ j : ] ) NEW_LINE break NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT num3 . append ( nums2 [ j ] ) NEW_LINE j = j + 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT num3 = num3 + nums1 [ idx : ] NEW_LINE print ( "break here" ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT print ( len_num_1 + len_num_2 , "total len" , num3 ) NEW_LINE if ( len_num_1 + len_num_2 ) % 2 == 0 : NEW_LINE INDENT print ( num3 [ int ( ( len_num_1 + len_num_2 ) / 2 ) - 1 ] , num3 [ int ( ( len_num_1 + len_num_2 + 2 ) / 2 ) - 1 ] ) NEW_LINE return ( num3 [ int ( ( len_num_1 + len_num_2 ) / 2 ) - 1 ] + num3 [ int ( ( len_num_1 + len_num_2 + 2 ) / 2 - 1 ) ] ) / 2 NEW_LINE DEDENT else : NEW_LINE INDENT return ( num3 [ int ( ( len_num_1 + len_num_2 + 1 ) / 2 ) - 1 ] ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 , nums2 ) : NEW_LINE INDENT self . A = nums1 NEW_LINE self . B = nums2 NEW_LINE l = len ( self . A ) + len ( self . B ) NEW_LINE m = ( l + 1 ) // 2 NEW_LINE if l % 2 == 0 : NEW_LINE INDENT return ( self . findKth ( m ) + self . findKth ( m + 1 ) ) / 2.0 NEW_LINE DEDENT else : NEW_LINE INDENT return self . findKth ( m ) NEW_LINE DEDENT DEDENT def findKth ( self , k , i = 0 , j = 0 ) : NEW_LINE INDENT if i >= len ( self . A ) : NEW_LINE INDENT return self . B [ j + k - 1 ] NEW_LINE DEDENT elif j >= len ( self . B ) : NEW_LINE INDENT return self . A [ i + k - 1 ] NEW_LINE DEDENT elif k == 1 : NEW_LINE INDENT return min ( self . A [ i ] , self . B [ j ] ) NEW_LINE DEDENT m = k // 2 NEW_LINE ii = i + m NEW_LINE jj = j + m NEW_LINE a = self . A [ ii - 1 ] if ii - 1 < len ( self . A ) else float ( 'Inf' ) NEW_LINE b = self . B [ jj - 1 ] if jj - 1 < len ( self . B ) else float ( 'Inf' ) NEW_LINE if a < b : NEW_LINE INDENT i = ii NEW_LINE DEDENT else : NEW_LINE INDENT j = jj NEW_LINE DEDENT return self . findKth ( k - m , i , j ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT merged = ( nums1 + nums2 ) NEW_LINE merged . sort ( ) NEW_LINE return ( merged [ len ( merged ) // 2 - 1 ] + merged [ len ( merged ) // 2 ] ) / 2 if len ( merged ) % 2 == 0 else merged [ len ( merged ) // 2 ] NEW_LINE DEDENT DEDENT
import sys NEW_LINE from typing import List NEW_LINE class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT m , n = len ( nums1 ) , len ( nums2 ) NEW_LINE k1 , k2 = ( m + n + 1 ) // 2 , ( m + n + 2 ) // 2 NEW_LINE return ( self . find_kth ( nums1 , 0 , nums2 , 0 , k1 ) + self . find_kth ( nums1 , 0 , nums2 , 0 , k2 ) ) / 2 NEW_LINE DEDENT def find_kth ( self , nums1 : List [ int ] , i : int , nums2 : List [ int ] , j : int , k : int ) -> int : NEW_LINE INDENT if i >= len ( nums1 ) : NEW_LINE INDENT return nums2 [ j + k - 1 ] NEW_LINE DEDENT if j >= len ( nums2 ) : NEW_LINE INDENT return nums1 [ i + k - 1 ] NEW_LINE DEDENT if k == 1 : NEW_LINE INDENT return min ( nums1 [ i ] , nums2 [ j ] ) NEW_LINE DEDENT middle_value1 = nums1 [ i + k // 2 - 1 ] if i + k // 2 - 1 < len ( nums1 ) else sys . maxsize NEW_LINE middle_value2 = nums2 [ j + k // 2 - 1 ] if j + k // 2 - 1 < len ( nums2 ) else sys . maxsize NEW_LINE if middle_value1 < middle_value2 : NEW_LINE INDENT return self . find_kth ( nums1 , i + k // 2 , nums2 , j , k - k // 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . find_kth ( nums1 , i , nums2 , j + k // 2 , k - k // 2 ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findMedianSortedArrays ( self , nums1 : List [ int ] , nums2 : List [ int ] ) -> float : NEW_LINE INDENT nums1 = nums1 + nums2 NEW_LINE nums1 = sorted ( nums1 ) NEW_LINE return nums1 [ len ( nums1 ) // 2 ] if len ( nums1 ) % 2 == 1 else ( nums1 [ len ( nums1 ) // 2 - 1 ] + nums1 [ len ( nums1 ) // 2 ] ) / 2 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 or min ( nums ) > 0 or max ( nums ) < 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT res = [ ] NEW_LINE count = defaultdict ( int ) NEW_LINE for num in nums : NEW_LINE INDENT count [ num ] += 1 NEW_LINE DEDENT nums = sorted ( count ) NEW_LINE for idx , num in enumerate ( nums ) : NEW_LINE INDENT if num > 0 : NEW_LINE INDENT break NEW_LINE DEDENT two_sum = - num NEW_LINE num2_min , num2_max = two_sum - nums [ - 1 ] , two_sum / 2 NEW_LINE i = bisect_left ( nums , num2_min , idx + 1 ) NEW_LINE j = bisect_left ( nums , num2_max , i ) NEW_LINE for num2 in nums [ i : j ] : NEW_LINE INDENT num3 = two_sum - num2 NEW_LINE if num3 in count : NEW_LINE INDENT res . append ( ( num , num2 , num3 ) ) NEW_LINE DEDENT DEDENT DEDENT for num in nums : NEW_LINE INDENT if count [ num ] > 1 : NEW_LINE INDENT if num == 0 and count [ num ] >= 3 : NEW_LINE INDENT res . append ( ( num , num , num ) ) NEW_LINE DEDENT elif num != 0 and 0 - 2 * num in count : NEW_LINE INDENT res . append ( ( num , num , 0 - 2 * num ) ) NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 or min ( nums ) > 0 or max ( nums ) < 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT res = [ ] NEW_LINE count = defaultdict ( int ) NEW_LINE for num in nums : NEW_LINE INDENT count [ num ] += 1 NEW_LINE DEDENT nums = sorted ( count ) NEW_LINE for idx , num in enumerate ( nums ) : NEW_LINE INDENT if num > 0 : NEW_LINE INDENT break NEW_LINE DEDENT two_sum = - num NEW_LINE num2_min , num2_max = two_sum - nums [ - 1 ] , two_sum / 2 NEW_LINE i = bisect_left ( nums , num2_min , idx + 1 ) NEW_LINE j = bisect_left ( nums , num2_max , i ) NEW_LINE for num2 in nums [ i : j ] : NEW_LINE INDENT num3 = two_sum - num2 NEW_LINE if num3 in count : NEW_LINE INDENT res . append ( ( num , num2 , num3 ) ) NEW_LINE DEDENT DEDENT DEDENT for num in nums : NEW_LINE INDENT if count [ num ] > 1 : NEW_LINE INDENT if num == 0 and count [ num ] >= 3 : NEW_LINE INDENT res . append ( ( num , num , num ) ) NEW_LINE DEDENT elif num != 0 and 0 - 2 * num in count : NEW_LINE INDENT res . append ( ( num , num , 0 - 2 * num ) ) NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
import bisect NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 or min ( nums ) > 0 or max ( nums ) < 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT res = [ ] NEW_LINE count = defaultdict ( int ) NEW_LINE for num in nums : NEW_LINE INDENT count [ num ] += 1 NEW_LINE DEDENT nums = sorted ( count ) NEW_LINE for idx , num in enumerate ( nums ) : NEW_LINE INDENT if num < - 2 * nums [ - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT if num > 0 : NEW_LINE INDENT break NEW_LINE DEDENT two_sum = 0 - num NEW_LINE num2_min , num2_max = two_sum - nums [ - 1 ] , two_sum / 2 NEW_LINE i = bisect_left ( nums , num2_min , idx + 1 ) NEW_LINE j = bisect_left ( nums , num2_max , i ) NEW_LINE for num2 in nums [ i : j ] : NEW_LINE INDENT num3 = two_sum - num2 NEW_LINE if num3 in count : NEW_LINE INDENT res . append ( ( num , num2 , num3 ) ) NEW_LINE DEDENT DEDENT DEDENT for num in nums : NEW_LINE INDENT if count [ num ] > 1 : NEW_LINE INDENT if num == 0 and count [ num ] >= 3 : NEW_LINE INDENT res . append ( ( num , num , num ) ) NEW_LINE DEDENT elif num != 0 and 0 - 2 * num in count : NEW_LINE INDENT res . append ( ( num , num , 0 - 2 * num ) ) NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE def three_target_sum ( target = 0 ) : NEW_LINE INDENT count_hash = { } NEW_LINE for num in nums : NEW_LINE INDENT try : NEW_LINE INDENT count_hash [ num ] += 1 NEW_LINE DEDENT except : NEW_LINE INDENT count_hash [ num ] = 1 NEW_LINE DEDENT DEDENT res_list = [ ] NEW_LINE sorted_nums = sorted ( count_hash ) NEW_LINE for idx , num in enumerate ( sorted_nums ) : NEW_LINE INDENT if count_hash [ num ] >= 2 : NEW_LINE INDENT if count_hash [ num ] >= 3 and num == target / 3 : NEW_LINE INDENT res_list . append ( [ num , num , num ] ) NEW_LINE DEDENT if num != target / 3 and target - 2 * num in count_hash : NEW_LINE INDENT res_list . append ( [ num , num , target - 2 * num ] ) NEW_LINE DEDENT DEDENT two_sum = target - num NEW_LINE left = bisect . bisect_left ( sorted_nums , two_sum - sorted_nums [ - 1 ] , idx + 1 ) NEW_LINE right = bisect . bisect_left ( sorted_nums , two_sum / 2 , left ) NEW_LINE for num2 in sorted_nums [ left : right ] : NEW_LINE INDENT num3 = two_sum - num2 NEW_LINE if num3 in count_hash : NEW_LINE INDENT res_list . append ( [ num , num2 , num3 ] ) NEW_LINE DEDENT DEDENT DEDENT return res_list NEW_LINE DEDENT return three_target_sum ( ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 or min ( nums ) > 0 or max ( nums ) < 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT res = [ ] NEW_LINE count = defaultdict ( int ) NEW_LINE for num in nums : NEW_LINE INDENT count [ num ] += 1 NEW_LINE DEDENT nums = sorted ( count ) NEW_LINE for idx , num in enumerate ( nums ) : NEW_LINE INDENT if num > 0 : NEW_LINE INDENT break NEW_LINE DEDENT two_sum = - num NEW_LINE num2_min , num2_max = two_sum - nums [ - 1 ] , two_sum / 2 NEW_LINE i = bisect_left ( nums , num2_min , idx + 1 ) NEW_LINE j = bisect_left ( nums , num2_max , i ) NEW_LINE for num2 in nums [ i : j ] : NEW_LINE INDENT num3 = two_sum - num2 NEW_LINE if num3 in count : NEW_LINE INDENT res . append ( ( num , num2 , num3 ) ) NEW_LINE DEDENT DEDENT DEDENT for num in nums : NEW_LINE INDENT if count [ num ] > 1 : NEW_LINE INDENT if num == 0 and count [ num ] >= 3 : NEW_LINE INDENT res . append ( ( num , num , num ) ) NEW_LINE DEDENT elif num != 0 and 0 - 2 * num in count : NEW_LINE INDENT res . append ( ( num , num , 0 - 2 * num ) ) NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
from collections import Counter , OrderedDict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT counts = { } NEW_LINE for num in nums : NEW_LINE INDENT counts [ num ] = counts . get ( num , 0 ) + 1 NEW_LINE DEDENT nums = sorted ( counts ) NEW_LINE answer = set ( ) NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT if num == 0 : NEW_LINE INDENT if counts [ num ] > 2 : NEW_LINE INDENT answer . add ( ( 0 , 0 , 0 ) ) NEW_LINE DEDENT DEDENT elif counts [ num ] > 1 and - 2 * num in counts : NEW_LINE INDENT answer . add ( ( num , num , - 2 * num ) ) NEW_LINE DEDENT if num < 0 : NEW_LINE INDENT opposite = - num NEW_LINE left = bisect . bisect_left ( nums , opposite - nums [ - 1 ] , i + 1 ) NEW_LINE right = bisect . bisect_right ( nums , opposite / 2 , left ) NEW_LINE for a in nums [ left : right ] : NEW_LINE INDENT b = opposite - a NEW_LINE if b in counts and a != b : NEW_LINE INDENT answer . add ( ( num , a , b ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return answer NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 or min ( nums ) > 0 or max ( nums ) < 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT res = [ ] NEW_LINE count = defaultdict ( int ) NEW_LINE for num in nums : NEW_LINE INDENT count [ num ] += 1 NEW_LINE DEDENT nums = sorted ( count ) NEW_LINE for idx , num in enumerate ( nums ) : NEW_LINE INDENT if num > 0 : NEW_LINE INDENT break NEW_LINE DEDENT two_sum = - num NEW_LINE num2_min , num2_max = two_sum - nums [ - 1 ] , two_sum / 2 NEW_LINE i = bisect_left ( nums , num2_min , idx + 1 ) NEW_LINE j = bisect_left ( nums , num2_max , i ) NEW_LINE for num2 in nums [ i : j ] : NEW_LINE INDENT num3 = two_sum - num2 NEW_LINE if num3 in count : NEW_LINE INDENT res . append ( ( num , num2 , num3 ) ) NEW_LINE DEDENT DEDENT DEDENT for num in nums : NEW_LINE INDENT if count [ num ] > 1 : NEW_LINE INDENT if num == 0 and count [ num ] >= 3 : NEW_LINE INDENT res . append ( ( num , num , num ) ) NEW_LINE DEDENT elif num != 0 and 0 - 2 * num in count : NEW_LINE INDENT res . append ( ( num , num , 0 - 2 * num ) ) NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 or min ( nums ) > 0 or max ( nums ) < 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT res = [ ] NEW_LINE count = defaultdict ( int ) NEW_LINE for num in nums : NEW_LINE INDENT count [ num ] += 1 NEW_LINE DEDENT nums = sorted ( count ) NEW_LINE for idx , num in enumerate ( nums ) : NEW_LINE INDENT if num > 0 : NEW_LINE INDENT break NEW_LINE DEDENT two_sum = - num NEW_LINE num2_min , num2_max = two_sum - nums [ - 1 ] , two_sum / 2 NEW_LINE i = bisect_left ( nums , num2_min , idx + 1 ) NEW_LINE j = bisect_left ( nums , num2_max , i ) NEW_LINE for num2 in nums [ i : j ] : NEW_LINE INDENT num3 = two_sum - num2 NEW_LINE if num3 in count : NEW_LINE INDENT res . append ( ( num , num2 , num3 ) ) NEW_LINE DEDENT DEDENT DEDENT for num in nums : NEW_LINE INDENT if count [ num ] > 1 : NEW_LINE INDENT if num == 0 and count [ num ] >= 3 : NEW_LINE INDENT res . append ( ( num , num , num ) ) NEW_LINE DEDENT elif num != 0 and 0 - 2 * num in count : NEW_LINE INDENT res . append ( ( num , num , 0 - 2 * num ) ) NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT counter = { } NEW_LINE for num in nums : NEW_LINE INDENT counter [ num ] = counter . get ( num , 0 ) + 1 NEW_LINE DEDENT nums = sorted ( counter . keys ( ) ) NEW_LINE n = len ( nums ) NEW_LINE ret = [ ] NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT if num == 0 : NEW_LINE INDENT if counter [ num ] > 2 : NEW_LINE INDENT ret . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT DEDENT elif counter [ num ] > 1 and - 2 * num in counter : NEW_LINE INDENT ret . append ( [ num , num , - 2 * num ] ) NEW_LINE DEDENT if num < 0 : NEW_LINE INDENT opposite = - num NEW_LINE s = i + 1 NEW_LINE e = n - 1 NEW_LINE left_target = opposite - nums [ - 1 ] NEW_LINE while s < e : NEW_LINE INDENT m = ( s + e ) // 2 NEW_LINE if nums [ m ] >= left_target : NEW_LINE INDENT e = m NEW_LINE DEDENT else : NEW_LINE INDENT s = m + 1 NEW_LINE DEDENT DEDENT left = s NEW_LINE s = left NEW_LINE e = n - 1 NEW_LINE right_target = opposite / 2 NEW_LINE while s < e : NEW_LINE INDENT m = ( s + e ) // 2 NEW_LINE if nums [ m ] <= right_target : NEW_LINE INDENT s = m + 1 NEW_LINE DEDENT else : NEW_LINE INDENT e = m NEW_LINE DEDENT DEDENT right = s NEW_LINE for a in nums [ left : right ] : NEW_LINE INDENT b = opposite - a NEW_LINE if a != b and b in counter : NEW_LINE INDENT ret . append ( [ num , a , b ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT counter = collections . Counter ( nums ) NEW_LINE nums = sorted ( counter ) NEW_LINE ret = [ ] NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT if num == 0 : NEW_LINE INDENT if counter [ num ] > 2 : NEW_LINE INDENT ret . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT DEDENT elif counter [ num ] > 1 and - 2 * num in counter : NEW_LINE INDENT ret . append ( [ num , num , - 2 * num ] ) NEW_LINE DEDENT if num < 0 : NEW_LINE INDENT opposite = - num NEW_LINE left = bisect_left ( nums , opposite - nums [ - 1 ] , i + 1 ) NEW_LINE right = bisect_right ( nums , opposite / 2 , left ) NEW_LINE for a in nums [ left : right ] : NEW_LINE INDENT b = opposite - a NEW_LINE if b in counter and a != b : NEW_LINE INDENT ret . append ( [ num , a , b ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT dct = defaultdict ( int ) NEW_LINE for num in nums : NEW_LINE INDENT dct [ num ] += 1 NEW_LINE DEDENT nums = sorted ( dct . keys ( ) ) NEW_LINE res = [ ] NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT if num == 0 : NEW_LINE INDENT if dct [ num ] > 2 : NEW_LINE INDENT res . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT DEDENT elif dct [ num ] > 1 and - 2 * num in dct : NEW_LINE INDENT res . append ( [ num , num , - 2 * num ] ) NEW_LINE DEDENT if num < 0 : NEW_LINE INDENT opposite = - num NEW_LINE s = i + 1 NEW_LINE e = len ( nums ) - 1 NEW_LINE left_target = opposite - nums [ - 1 ] NEW_LINE while s < e : NEW_LINE INDENT m = ( s + e ) // 2 NEW_LINE if nums [ m ] >= left_target : NEW_LINE INDENT e = m NEW_LINE DEDENT else : NEW_LINE INDENT s = m + 1 NEW_LINE DEDENT DEDENT left = s NEW_LINE e = len ( nums ) - 1 NEW_LINE right_target = opposite / 2 NEW_LINE while s < e : NEW_LINE INDENT m = ( s + e ) // 2 NEW_LINE if nums [ m ] <= right_target : NEW_LINE INDENT s = m + 1 NEW_LINE DEDENT else : NEW_LINE INDENT e = m NEW_LINE DEDENT DEDENT right = s NEW_LINE for a in nums [ left : right ] : NEW_LINE INDENT b = opposite - a NEW_LINE if a != b and b in dct : NEW_LINE INDENT res . append ( [ num , a , b ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT counter = { } NEW_LINE for num in nums : NEW_LINE INDENT counter [ num ] = counter . get ( num , 0 ) + 1 NEW_LINE DEDENT nums = sorted ( counter . keys ( ) ) NEW_LINE n = len ( nums ) NEW_LINE ret = [ ] NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT if num == 0 : NEW_LINE INDENT if counter [ num ] > 2 : NEW_LINE INDENT ret . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT DEDENT elif counter [ num ] > 1 and - 2 * num in counter : NEW_LINE INDENT ret . append ( [ num , num , - 2 * num ] ) NEW_LINE DEDENT if num < 0 : NEW_LINE INDENT opposite = - num NEW_LINE s = i + 1 NEW_LINE e = n - 1 NEW_LINE left_target = opposite - nums [ - 1 ] NEW_LINE while s < e : NEW_LINE INDENT m = ( s + e ) // 2 NEW_LINE if nums [ m ] >= left_target : NEW_LINE INDENT e = m NEW_LINE DEDENT else : NEW_LINE INDENT s = m + 1 NEW_LINE DEDENT DEDENT left = s NEW_LINE s = left NEW_LINE e = n - 1 NEW_LINE right_target = opposite / 2 NEW_LINE while s < e : NEW_LINE INDENT m = ( s + e ) // 2 NEW_LINE if nums [ m ] <= right_target : NEW_LINE INDENT s = m + 1 NEW_LINE DEDENT else : NEW_LINE INDENT e = m NEW_LINE DEDENT DEDENT right = s NEW_LINE for a in nums [ left : right ] : NEW_LINE INDENT b = opposite - a NEW_LINE if a != b and b in counter : NEW_LINE INDENT ret . append ( [ num , a , b ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT dct = defaultdict ( int ) NEW_LINE for num in nums : NEW_LINE INDENT dct [ num ] += 1 NEW_LINE DEDENT nums = sorted ( dct . keys ( ) ) NEW_LINE res = [ ] NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT if num == 0 : NEW_LINE INDENT if dct [ num ] > 2 : NEW_LINE INDENT res . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT DEDENT elif dct [ num ] > 1 and - 2 * num in dct : NEW_LINE INDENT res . append ( [ num , num , - 2 * num ] ) NEW_LINE DEDENT if num < 0 : NEW_LINE INDENT opposite = - num NEW_LINE s = i + 1 NEW_LINE e = len ( nums ) - 1 NEW_LINE left_target = opposite - nums [ - 1 ] NEW_LINE while s < e : NEW_LINE INDENT m = ( s + e ) // 2 NEW_LINE n = nums [ m ] NEW_LINE if n > left_target : NEW_LINE INDENT e = m NEW_LINE DEDENT elif n == left_target : NEW_LINE INDENT s = m NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT s = m + 1 NEW_LINE DEDENT DEDENT left = s NEW_LINE e = len ( nums ) - 1 NEW_LINE right_target = opposite / 2 NEW_LINE while s < e : NEW_LINE INDENT m = ( s + e ) // 2 NEW_LINE n = nums [ m ] NEW_LINE if n < right_target : NEW_LINE INDENT s = m + 1 NEW_LINE DEDENT elif n == right_target : NEW_LINE INDENT s = m NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT e = m NEW_LINE DEDENT DEDENT right = s NEW_LINE for a in nums [ left : right ] : NEW_LINE INDENT b = opposite - a NEW_LINE if a != b and b in dct : NEW_LINE INDENT res . append ( [ num , a , b ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT dct = defaultdict ( int ) NEW_LINE for num in nums : NEW_LINE INDENT dct [ num ] += 1 NEW_LINE DEDENT nums = sorted ( dct . keys ( ) ) NEW_LINE def narrow_down ( target , s , e ) : NEW_LINE INDENT while s < e : NEW_LINE INDENT m = ( s + e ) // 2 NEW_LINE if nums [ m ] == target : NEW_LINE INDENT s = m NEW_LINE break NEW_LINE DEDENT elif nums [ m ] > target : NEW_LINE INDENT e = m NEW_LINE DEDENT else : NEW_LINE INDENT s = m + 1 NEW_LINE DEDENT DEDENT return s NEW_LINE DEDENT res = [ ] NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT if num == 0 : NEW_LINE INDENT if dct [ num ] > 2 : NEW_LINE INDENT res . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT DEDENT elif dct [ num ] > 1 and - 2 * num in dct : NEW_LINE INDENT res . append ( [ num , num , - 2 * num ] ) NEW_LINE DEDENT if num < 0 : NEW_LINE INDENT opposite = - num NEW_LINE left_target = opposite - nums [ - 1 ] NEW_LINE left = narrow_down ( left_target , s = i + 1 , e = len ( nums ) - 1 ) NEW_LINE right_target = opposite / 2 NEW_LINE right = narrow_down ( right_target , s = left , e = len ( nums ) - 1 ) NEW_LINE for a in nums [ left : right ] : NEW_LINE INDENT b = opposite - a NEW_LINE if a != b and b in dct : NEW_LINE INDENT res . append ( [ num , a , b ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT C = collections . Counter ( nums ) NEW_LINE finds , results , bisl = sorted ( C ) , set ( [ ( 0 , 0 , 0 ) ] ) if C [ 0 ] >= 3 else set ( ) , bisect . bisect_left NEW_LINE for i , k1 in enumerate ( finds ) : NEW_LINE INDENT if C [ k1 ] > 1 and - 2 * k1 in C and k1 : results . add ( ( k1 , k1 , - 2 * k1 ) ) NEW_LINE if k1 < 0 : NEW_LINE INDENT for k2 in finds [ bisl ( finds , - finds [ - 1 ] - k1 , i + 1 ) : bisl ( finds , math . ceil ( - k1 / 2 ) , i + 1 ) ] : NEW_LINE INDENT if - ( k1 + k2 ) in C : results . add ( ( k1 , k2 , - k1 - k2 ) ) NEW_LINE DEDENT DEDENT DEDENT return results NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : 'List[int]' ) -> 'List[List[int]]' : NEW_LINE INDENT from bisect import bisect_left , bisect_right NEW_LINE target = 0 NEW_LINE result = [ ] NEW_LINE length = len ( nums ) NEW_LINE if length < 3 : NEW_LINE INDENT return result NEW_LINE DEDENT count = { } NEW_LINE for n in nums : NEW_LINE INDENT if n in count : NEW_LINE INDENT count [ n ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT count [ n ] = 1 NEW_LINE DEDENT DEDENT keys = list ( count . keys ( ) ) NEW_LINE keys . sort ( ) NEW_LINE t3 = target // 3 NEW_LINE if t3 in keys and count [ t3 ] >= 3 : NEW_LINE INDENT result . append ( [ t3 , t3 , t3 ] ) NEW_LINE DEDENT begin = bisect_left ( keys , target - keys [ - 1 ] * 2 ) NEW_LINE end = bisect_left ( keys , target * 3 ) NEW_LINE for i in range ( begin , end ) : NEW_LINE INDENT a = keys [ i ] NEW_LINE if count [ a ] >= 2 and target - 2 * a in keys : NEW_LINE INDENT result . append ( [ a , a , target - 2 * a ] ) NEW_LINE DEDENT max_b = ( target - a ) // 2 NEW_LINE min_b = target - a - keys [ - 1 ] NEW_LINE b_begin = max ( i + 1 , bisect_left ( keys , min_b ) ) NEW_LINE b_end = bisect_right ( keys , max_b ) NEW_LINE for j in range ( b_begin , b_end ) : NEW_LINE INDENT b = keys [ j ] NEW_LINE c = target - a - b NEW_LINE if c in count and b <= c : NEW_LINE INDENT if b < c or count [ b ] >= 2 : NEW_LINE INDENT result . append ( [ a , b , c ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , n : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT f = { } NEW_LINE for i in n : f [ i ] = f . get ( i , 0 ) + 1 NEW_LINE n = sorted ( f ) NEW_LINE a = [ ] NEW_LINE for i , I in enumerate ( n ) : NEW_LINE INDENT if not I : NEW_LINE INDENT if f [ I ] > 2 : a . append ( ( 0 , 0 , 0 ) ) NEW_LINE DEDENT elif f [ I ] > 1 and - 2 * I in f : a . append ( ( I , I , - 2 * I ) ) NEW_LINE if I < 0 : NEW_LINE INDENT t = - I NEW_LINE l = i + 1 NEW_LINE r = bisect_right ( n , t // 2 , l ) NEW_LINE for J in n [ l : r ] : NEW_LINE INDENT K = t - J NEW_LINE if K in f and K != J : a . append ( ( I , J , K ) ) NEW_LINE DEDENT DEDENT DEDENT return a NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , n : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT f = { } NEW_LINE for i in n : f [ i ] = f . get ( i , 0 ) + 1 NEW_LINE n = sorted ( f ) NEW_LINE a = [ ] NEW_LINE for i , I in enumerate ( n ) : NEW_LINE INDENT if not I : NEW_LINE INDENT if f [ I ] > 2 : a . append ( ( 0 , 0 , 0 ) ) NEW_LINE DEDENT elif f [ I ] > 1 and - 2 * I in f : a . append ( ( I , I , - 2 * I ) ) NEW_LINE if I < 0 : NEW_LINE INDENT t = - I NEW_LINE l = i + 1 NEW_LINE r = bisect_right ( n , t // 2 , l ) NEW_LINE for J in n [ l : r ] : NEW_LINE INDENT K = t - J NEW_LINE if K in f and K != J : a . append ( ( I , J , K ) ) NEW_LINE DEDENT DEDENT DEDENT return a NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums ) : NEW_LINE INDENT nums . sort ( ) NEW_LINE res , N = set ( ) , len ( nums ) NEW_LINE for i in range ( N - 2 ) : NEW_LINE INDENT j , k = i + 1 , N - 1 NEW_LINE while j < k : NEW_LINE INDENT total = nums [ i ] + nums [ j ] + nums [ k ] NEW_LINE if total < 0 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT elif total > 0 : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . add ( ( nums [ i ] , nums [ j ] , nums [ k ] ) ) NEW_LINE j += 1 NEW_LINE k -= 1 NEW_LINE DEDENT DEDENT DEDENT return map ( list , res ) NEW_LINE DEDENT DEDENT class Solution : NEW_LINE INDENT def threeSum ( self , nums ) : NEW_LINE INDENT if not nums : return [ ] NEW_LINE cnt = dict ( ) NEW_LINE for v in nums : NEW_LINE INDENT cnt [ v ] = cnt . get ( v , 0 ) + 1 NEW_LINE DEDENT pos = sorted ( [ x for x in cnt if x >= 0 ] ) NEW_LINE neg = sorted ( [ x for x in cnt if x < 0 ] , reverse = True ) NEW_LINE res = [ ] NEW_LINE if 0 in cnt and cnt [ 0 ] >= 3 : res . append ( [ 0 , 0 , 0 ] ) NEW_LINE for p in pos : NEW_LINE INDENT for n in neg : NEW_LINE INDENT target = - p - n NEW_LINE if target in cnt : NEW_LINE INDENT if target in ( p , n ) and cnt [ target ] > 1 : NEW_LINE INDENT res . append ( [ n , target , p ] ) NEW_LINE DEDENT elif target < n : NEW_LINE INDENT res . append ( [ target , n , p ] ) NEW_LINE DEDENT elif target > p : NEW_LINE INDENT res . append ( [ n , p , target ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT dct = defaultdict ( int ) NEW_LINE for num in nums : NEW_LINE INDENT dct [ num ] += 1 NEW_LINE DEDENT nums = sorted ( dct . keys ( ) ) NEW_LINE res = [ ] NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT if num == 0 : NEW_LINE INDENT if dct [ num ] > 2 : NEW_LINE INDENT res . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT DEDENT elif dct [ num ] > 1 and - 2 * num in dct : NEW_LINE INDENT res . append ( [ num , num , - 2 * num ] ) NEW_LINE DEDENT if num < 0 : NEW_LINE INDENT opposite = - num NEW_LINE s = i + 1 NEW_LINE e = len ( nums ) - 1 NEW_LINE left_target = opposite - nums [ - 1 ] NEW_LINE while s < e : NEW_LINE INDENT m = ( s + e ) // 2 NEW_LINE if nums [ m ] > left_target : NEW_LINE INDENT e = m NEW_LINE DEDENT elif nums [ m ] == left_target : NEW_LINE INDENT s = m NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT s = m + 1 NEW_LINE DEDENT DEDENT left = s NEW_LINE e = len ( nums ) - 1 NEW_LINE right_target = opposite / 2 NEW_LINE while s < e : NEW_LINE INDENT m = ( s + e ) // 2 NEW_LINE if nums [ m ] < right_target : NEW_LINE INDENT s = m + 1 NEW_LINE DEDENT elif nums [ m ] == right_target : NEW_LINE INDENT s = m NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT e = m NEW_LINE DEDENT DEDENT right = s NEW_LINE for a in nums [ left : right ] : NEW_LINE INDENT b = opposite - a NEW_LINE if a != b and b in dct : NEW_LINE INDENT res . append ( [ num , a , b ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not nums or len ( nums ) < 3 : NEW_LINE INDENT return list ( ) NEW_LINE DEDENT nums . sort ( ) NEW_LINE index = sum ( [ 1 if num < 0 else 0 for num in nums ] ) NEW_LINE neg_nums , pos_nums = dict ( ) , dict ( ) NEW_LINE max_num , min_num = nums [ - 1 ] , nums [ 0 ] NEW_LINE solutions = list ( ) NEW_LINE if index and index < len ( nums ) : NEW_LINE INDENT for num_range , num_dict in zip ( [ nums [ : index ] , nums [ index : ] ] , [ neg_nums , pos_nums ] ) : NEW_LINE INDENT for n in num_range : NEW_LINE INDENT if n in num_dict : NEW_LINE INDENT num_dict [ n ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT num_dict [ n ] = 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT else : NEW_LINE INDENT if nums [ 2 ] == 0 : NEW_LINE INDENT return [ [ 0 , 0 , 0 ] ] NEW_LINE DEDENT else : NEW_LINE INDENT return list ( ) NEW_LINE DEDENT DEDENT if len ( neg_nums ) >= 2 : NEW_LINE INDENT for i , left_n in enumerate ( list ( neg_nums . keys ( ) ) [ : - 1 ] ) : NEW_LINE INDENT if - left_n >= max_num : NEW_LINE INDENT continue NEW_LINE DEDENT if neg_nums [ left_n ] > 1 and - 2 * left_n in pos_nums : NEW_LINE INDENT solutions . append ( [ left_n , left_n , ( - 2 * left_n ) ] ) NEW_LINE DEDENT for right_n in list ( neg_nums . keys ( ) ) [ : i : - 1 ] : NEW_LINE INDENT if - left_n - right_n > max_num : NEW_LINE INDENT break NEW_LINE DEDENT elif - left_n - right_n in pos_nums : NEW_LINE INDENT solutions . append ( [ left_n , right_n , - left_n - right_n ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT if neg_nums [ list ( neg_nums . keys ( ) ) [ - 1 ] ] > 1 and - 2 * list ( neg_nums . keys ( ) ) [ - 1 ] in pos_nums : NEW_LINE INDENT solutions . append ( [ list ( neg_nums . keys ( ) ) [ - 1 ] , list ( neg_nums . keys ( ) ) [ - 1 ] , - 2 * list ( neg_nums . keys ( ) ) [ - 1 ] ] ) NEW_LINE DEDENT if 0 in pos_nums and pos_nums [ 0 ] >= 3 : NEW_LINE INDENT solutions . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT if len ( pos_nums ) >= 2 : NEW_LINE INDENT for i , left_n in enumerate ( list ( pos_nums . keys ( ) ) [ : - 1 ] ) : NEW_LINE INDENT if - left_n < min_num : NEW_LINE INDENT continue NEW_LINE DEDENT if pos_nums [ left_n ] > 1 and - 2 * left_n in neg_nums : NEW_LINE INDENT solutions . append ( [ left_n , left_n , - 2 * left_n ] ) NEW_LINE DEDENT for right_n in list ( pos_nums . keys ( ) ) [ i + 1 : ] : NEW_LINE INDENT if - left_n - right_n < min_num : NEW_LINE INDENT break NEW_LINE DEDENT elif - left_n - right_n in neg_nums : NEW_LINE INDENT solutions . append ( [ - left_n - right_n , left_n , right_n ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT if pos_nums [ list ( pos_nums . keys ( ) ) [ - 1 ] ] > 1 and - 2 * list ( pos_nums . keys ( ) ) [ - 1 ] in neg_nums : NEW_LINE INDENT solutions . append ( [ - 2 * list ( pos_nums . keys ( ) ) [ - 1 ] , list ( pos_nums . keys ( ) ) [ - 1 ] , list ( pos_nums . keys ( ) ) [ - 1 ] ] ) NEW_LINE DEDENT return solutions NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT dct = defaultdict ( int ) NEW_LINE for num in nums : NEW_LINE INDENT dct [ num ] += 1 NEW_LINE DEDENT nums = sorted ( dct . keys ( ) ) NEW_LINE res = [ ] NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT if num == 0 : NEW_LINE INDENT if dct [ num ] > 2 : NEW_LINE INDENT res . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT DEDENT elif dct [ num ] > 1 and - 2 * num in dct : NEW_LINE INDENT res . append ( [ num , num , - 2 * num ] ) NEW_LINE DEDENT if num < 0 : NEW_LINE INDENT opposite = - num NEW_LINE s = i + 1 NEW_LINE e = len ( nums ) - 1 NEW_LINE left_target = opposite - nums [ - 1 ] NEW_LINE while s < e : NEW_LINE INDENT m = ( s + e ) // 2 NEW_LINE if nums [ m ] == left_target : NEW_LINE INDENT s = m NEW_LINE break NEW_LINE DEDENT elif nums [ m ] > left_target : NEW_LINE INDENT e = m NEW_LINE DEDENT else : NEW_LINE INDENT s = m + 1 NEW_LINE DEDENT DEDENT left = s NEW_LINE e = len ( nums ) - 1 NEW_LINE right_target = opposite / 2 NEW_LINE while s < e : NEW_LINE INDENT m = ( s + e ) // 2 NEW_LINE if nums [ m ] == right_target : NEW_LINE INDENT s = m NEW_LINE break NEW_LINE DEDENT elif nums [ m ] < right_target : NEW_LINE INDENT s = m + 1 NEW_LINE DEDENT else : NEW_LINE INDENT e = m NEW_LINE DEDENT DEDENT right = s NEW_LINE for a in nums [ left : right ] : NEW_LINE INDENT b = opposite - a NEW_LINE if a != b and b in dct : NEW_LINE INDENT res . append ( [ num , a , b ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = [ ] NEW_LINE counter = dict ( ) NEW_LINE for num in nums : NEW_LINE INDENT counter [ num ] = counter . get ( num , 0 ) + 1 NEW_LINE DEDENT pos = [ x for x in counter if x > 0 ] NEW_LINE neg = [ x for x in counter if x < 0 ] NEW_LINE if 0 in counter and counter [ 0 ] >= 3 : NEW_LINE INDENT res . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT for p in pos : NEW_LINE INDENT for n in neg : NEW_LINE INDENT target = 0 - p - n NEW_LINE if target in counter : NEW_LINE INDENT if target == 0 or ( target in [ p , n ] and counter [ target ] >= 2 ) : NEW_LINE INDENT res . append ( [ n , target , p ] ) NEW_LINE DEDENT elif target < n : NEW_LINE INDENT res . append ( [ target , n , p ] ) NEW_LINE DEDENT elif target > p : NEW_LINE INDENT res . append ( [ n , p , target ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT ans = [ ] NEW_LINE if nums . count ( 0 ) >= 3 : NEW_LINE INDENT ans . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT negm = { } NEW_LINE posm = { } NEW_LINE zero = False NEW_LINE for num in nums : NEW_LINE INDENT if num < 0 : NEW_LINE INDENT if - num in negm : NEW_LINE INDENT negm [ - num ] = True NEW_LINE DEDENT else : NEW_LINE INDENT negm [ - num ] = False NEW_LINE DEDENT DEDENT elif num > 0 : NEW_LINE INDENT if num in posm : NEW_LINE INDENT posm [ num ] = True NEW_LINE DEDENT else : NEW_LINE INDENT posm [ num ] = False NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT zero = True NEW_LINE DEDENT DEDENT negs = list ( negm ) NEW_LINE poss = list ( posm ) NEW_LINE negset = set ( negs ) NEW_LINE posset = set ( poss ) NEW_LINE for i in range ( len ( negs ) ) : NEW_LINE INDENT n1 = negs [ i ] NEW_LINE if negm [ n1 ] == True : NEW_LINE INDENT p = n1 * 2 NEW_LINE if p in posset : NEW_LINE INDENT ans . append ( [ - n1 , - n1 , p ] ) NEW_LINE DEDENT DEDENT for j in range ( i + 1 , len ( negs ) ) : NEW_LINE INDENT n2 = negs [ j ] NEW_LINE p = n1 + n2 NEW_LINE if p in posset : NEW_LINE INDENT ans . append ( [ - n1 , - n2 , p ] ) NEW_LINE DEDENT DEDENT DEDENT for i in range ( len ( poss ) ) : NEW_LINE INDENT p1 = poss [ i ] NEW_LINE if posm [ p1 ] == True : NEW_LINE INDENT n = p1 * 2 NEW_LINE if n in negset : NEW_LINE INDENT ans . append ( [ - n , p1 , p1 ] ) NEW_LINE DEDENT DEDENT for j in range ( i + 1 , len ( poss ) ) : NEW_LINE INDENT p2 = poss [ j ] NEW_LINE n = p1 + p2 NEW_LINE if n in negset : NEW_LINE INDENT ans . append ( [ - n , p1 , p2 ] ) NEW_LINE DEDENT DEDENT DEDENT if zero : NEW_LINE INDENT common = posset & negset NEW_LINE for c in common : NEW_LINE INDENT ans . append ( [ - c , 0 , c ] ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE from itertools import combinations NEW_LINE def genKey ( first , second ) : NEW_LINE INDENT if first < second : NEW_LINE INDENT return first , second , - first - second NEW_LINE DEDENT return second , first , - first - second NEW_LINE DEDENT class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT results = set ( ) NEW_LINE positives = [ ] NEW_LINE negatives = [ ] NEW_LINE unique_positive_numbers = defaultdict ( int ) NEW_LINE unique_negative_numbers = defaultdict ( int ) NEW_LINE zeros = 0 NEW_LINE for n in nums : NEW_LINE INDENT if n > 0 : NEW_LINE INDENT if unique_positive_numbers [ n ] < 2 : NEW_LINE INDENT positives . append ( n ) NEW_LINE unique_positive_numbers [ n ] += 1 NEW_LINE DEDENT DEDENT elif n < 0 : NEW_LINE INDENT if unique_negative_numbers [ - n ] < 2 : NEW_LINE INDENT negatives . append ( n ) NEW_LINE unique_negative_numbers [ - n ] += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT zeros += 1 NEW_LINE DEDENT DEDENT if zeros >= 3 : NEW_LINE INDENT results . add ( ( 0 , 0 , 0 ) ) NEW_LINE DEDENT if unique_positive_numbers and unique_negative_numbers : NEW_LINE INDENT for first , second in combinations ( negatives , 2 ) : NEW_LINE INDENT if - first - second in unique_positive_numbers : NEW_LINE INDENT results . add ( genKey ( first , second ) ) NEW_LINE DEDENT DEDENT for first , second in combinations ( positives , 2 ) : NEW_LINE INDENT if first + second in unique_negative_numbers : NEW_LINE INDENT results . add ( genKey ( first , second ) ) NEW_LINE DEDENT DEDENT if zeros > 0 : NEW_LINE INDENT for n in unique_positive_numbers . keys ( ) : NEW_LINE INDENT if n in unique_negative_numbers : NEW_LINE INDENT results . add ( ( - n , 0 , n ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return results NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , A ) : NEW_LINE INDENT import collections NEW_LINE ct = collections . Counter ( A ) NEW_LINE res = [ ] if ct [ 0 ] < 3 else [ [ 0 , 0 , 0 ] ] NEW_LINE positive = sorted ( [ x for x in ct if x >= 0 ] , reverse = True ) NEW_LINE negative = sorted ( [ x for x in ct if x < 0 ] ) NEW_LINE for neg in negative : NEW_LINE INDENT for pos in positive : NEW_LINE INDENT need = - ( pos + neg ) NEW_LINE if need in ct : NEW_LINE INDENT if ( need == pos or need == neg ) and ct [ need ] > 1 : NEW_LINE INDENT res . append ( [ neg , need , pos ] ) NEW_LINE DEDENT elif need > pos : NEW_LINE INDENT res . append ( [ neg , pos , need ] ) NEW_LINE DEDENT elif need < neg : NEW_LINE INDENT res . append ( [ need , neg , pos ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not nums or len ( nums ) < 3 : NEW_LINE INDENT return list ( ) NEW_LINE DEDENT nums . sort ( ) NEW_LINE index = sum ( [ 1 if num < 0 else 0 for num in nums ] ) NEW_LINE neg_nums , pos_nums = dict ( ) , dict ( ) NEW_LINE max_num , min_num = nums [ - 1 ] , nums [ 0 ] NEW_LINE solutions = list ( ) NEW_LINE if index and index < len ( nums ) : NEW_LINE INDENT for num_range , num_dict in zip ( [ nums [ : index ] , nums [ index : ] ] , [ neg_nums , pos_nums ] ) : NEW_LINE INDENT for n in num_range : NEW_LINE INDENT if n in num_dict : NEW_LINE INDENT num_dict [ n ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT num_dict [ n ] = 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT else : NEW_LINE INDENT if nums [ 2 ] == 0 : NEW_LINE INDENT return [ [ 0 , 0 , 0 ] ] NEW_LINE DEDENT else : NEW_LINE INDENT return list ( ) NEW_LINE DEDENT DEDENT def neg_two_pointer_sum ( ) : NEW_LINE INDENT if len ( neg_nums ) >= 2 : NEW_LINE INDENT for i , left_n in enumerate ( list ( neg_nums . keys ( ) ) [ : 0 : - 1 ] ) : NEW_LINE INDENT if - left_n >= max_num : NEW_LINE INDENT break NEW_LINE DEDENT if neg_nums [ left_n ] > 1 and - 2 * left_n in pos_nums : NEW_LINE INDENT solutions . append ( [ left_n , left_n , ( - 2 * left_n ) ] ) NEW_LINE DEDENT for right_n in list ( neg_nums . keys ( ) ) [ - 2 - i : : - 1 ] : NEW_LINE INDENT if - left_n - right_n > max_num : NEW_LINE INDENT break NEW_LINE DEDENT elif - left_n - right_n in pos_nums : NEW_LINE INDENT solutions . append ( [ left_n , right_n , - left_n - right_n ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT if neg_nums [ list ( neg_nums . keys ( ) ) [ 0 ] ] > 1 and - 2 * list ( neg_nums . keys ( ) ) [ 0 ] in pos_nums : NEW_LINE INDENT solutions . append ( [ list ( neg_nums . keys ( ) ) [ 0 ] , list ( neg_nums . keys ( ) ) [ 0 ] , - 2 * list ( neg_nums . keys ( ) ) [ 0 ] ] ) NEW_LINE DEDENT DEDENT def pos_two_pointer_sum ( ) : NEW_LINE INDENT if len ( pos_nums ) >= 2 : NEW_LINE INDENT for i , left_n in enumerate ( list ( pos_nums . keys ( ) ) [ : - 1 ] ) : NEW_LINE INDENT if - left_n < min_num : NEW_LINE INDENT break NEW_LINE DEDENT if pos_nums [ left_n ] > 1 and - 2 * left_n in neg_nums : NEW_LINE INDENT solutions . append ( [ left_n , left_n , - 2 * left_n ] ) NEW_LINE DEDENT for right_n in list ( pos_nums . keys ( ) ) [ i + 1 : ] : NEW_LINE INDENT if - left_n - right_n < min_num : NEW_LINE INDENT break NEW_LINE DEDENT elif - left_n - right_n in neg_nums : NEW_LINE INDENT solutions . append ( [ - left_n - right_n , left_n , right_n ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT if pos_nums [ list ( pos_nums . keys ( ) ) [ - 1 ] ] > 1 and - 2 * list ( pos_nums . keys ( ) ) [ - 1 ] in neg_nums : NEW_LINE INDENT solutions . append ( [ - 2 * list ( pos_nums . keys ( ) ) [ - 1 ] , list ( pos_nums . keys ( ) ) [ - 1 ] , list ( pos_nums . keys ( ) ) [ - 1 ] ] ) NEW_LINE DEDENT DEDENT neg_two_pointer_sum ( ) NEW_LINE if 0 in pos_nums and pos_nums [ 0 ] >= 3 : NEW_LINE INDENT solutions . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT pos_two_pointer_sum ( ) NEW_LINE return solutions NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT num_cnt = len ( nums ) NEW_LINE if num_cnt < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT rslt = [ ] NEW_LINE nums . sort ( ) NEW_LINE dic = { nums [ 0 ] : 1 } NEW_LINE dedup = [ nums [ 0 ] ] NEW_LINE prev = nums [ 0 ] NEW_LINE for i in range ( 1 , num_cnt ) : NEW_LINE INDENT if nums [ i ] == prev : NEW_LINE INDENT dic [ nums [ i ] ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT prev = nums [ i ] NEW_LINE dic [ nums [ i ] ] = 1 NEW_LINE dedup . append ( nums [ i ] ) NEW_LINE DEDENT DEDENT rslt = [ ] NEW_LINE dedup_cnt = len ( dedup ) NEW_LINE for i in range ( dedup_cnt ) : NEW_LINE INDENT val1 = dedup [ i ] NEW_LINE cnt = dic [ val1 ] NEW_LINE if val1 == 0 and cnt >= 3 : NEW_LINE INDENT rslt . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT if val1 < 0 : NEW_LINE INDENT if cnt >= 2 : NEW_LINE INDENT val2 = - 2 * val1 NEW_LINE if val2 in dic : NEW_LINE INDENT rslt . append ( [ val1 , val1 , val2 ] ) NEW_LINE DEDENT DEDENT if val1 % 2 == 0 : NEW_LINE INDENT val2 = - val1 // 2 NEW_LINE if val2 in dic and dic [ val2 ] >= 2 : NEW_LINE INDENT rslt . append ( [ val1 , val2 , val2 ] ) NEW_LINE DEDENT DEDENT DEDENT for j in range ( i + 1 , dedup_cnt - 1 ) : NEW_LINE INDENT val2 = dedup [ j ] NEW_LINE val3 = - val1 - val2 NEW_LINE if val3 > val2 : NEW_LINE INDENT if val3 in dic : NEW_LINE INDENT rslt . append ( [ val1 , val2 , val3 ] ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT return rslt NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not nums or len ( nums ) < 3 : NEW_LINE INDENT return list ( ) NEW_LINE DEDENT nums . sort ( ) NEW_LINE index = sum ( [ 1 if num < 0 else 0 for num in nums ] ) NEW_LINE neg_nums , pos_nums = dict ( ) , dict ( ) NEW_LINE max_num , min_num = nums [ - 1 ] , nums [ 0 ] NEW_LINE solutions = list ( ) NEW_LINE if index and index < len ( nums ) : NEW_LINE INDENT for num_range , num_dict in zip ( [ nums [ : index ] , nums [ index : ] ] , [ neg_nums , pos_nums ] ) : NEW_LINE INDENT for n in num_range : NEW_LINE INDENT if n in num_dict : NEW_LINE INDENT num_dict [ n ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT num_dict [ n ] = 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT else : NEW_LINE INDENT if nums [ 2 ] == 0 : NEW_LINE INDENT return [ [ 0 , 0 , 0 ] ] NEW_LINE DEDENT else : NEW_LINE INDENT return list ( ) NEW_LINE DEDENT DEDENT def neg_two_pointer_sum ( ) : NEW_LINE INDENT if len ( neg_nums ) >= 2 : NEW_LINE INDENT for i , left_n in enumerate ( list ( neg_nums . keys ( ) ) [ : 0 : - 1 ] ) : NEW_LINE INDENT if - left_n >= max_num : NEW_LINE INDENT break NEW_LINE DEDENT if neg_nums [ left_n ] > 1 and - 2 * left_n in pos_nums : NEW_LINE INDENT solutions . append ( [ left_n , left_n , ( - 2 * left_n ) ] ) NEW_LINE DEDENT for right_n in list ( neg_nums . keys ( ) ) [ - 2 - i : : - 1 ] : NEW_LINE INDENT if - left_n - right_n > max_num : NEW_LINE INDENT break NEW_LINE DEDENT elif - left_n - right_n in pos_nums : NEW_LINE INDENT solutions . append ( [ left_n , right_n , - left_n - right_n ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT if neg_nums [ list ( neg_nums . keys ( ) ) [ 0 ] ] > 1 and - 2 * list ( neg_nums . keys ( ) ) [ 0 ] in pos_nums : NEW_LINE INDENT solutions . append ( [ list ( neg_nums . keys ( ) ) [ 0 ] , list ( neg_nums . keys ( ) ) [ 0 ] , - 2 * list ( neg_nums . keys ( ) ) [ 0 ] ] ) NEW_LINE DEDENT DEDENT def pos_two_pointer_sum ( ) : NEW_LINE INDENT if len ( pos_nums ) >= 2 : NEW_LINE INDENT for i , left_n in enumerate ( list ( pos_nums . keys ( ) ) [ : - 1 ] ) : NEW_LINE INDENT if - left_n < min_num : NEW_LINE INDENT break NEW_LINE DEDENT if pos_nums [ left_n ] > 1 and - 2 * left_n in neg_nums : NEW_LINE INDENT solutions . append ( [ left_n , left_n , - 2 * left_n ] ) NEW_LINE DEDENT for right_n in list ( pos_nums . keys ( ) ) [ i + 1 : ] : NEW_LINE INDENT if - left_n - right_n < min_num : NEW_LINE INDENT break NEW_LINE DEDENT elif - left_n - right_n in neg_nums : NEW_LINE INDENT solutions . append ( [ - left_n - right_n , left_n , right_n ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT if pos_nums [ list ( pos_nums . keys ( ) ) [ - 1 ] ] > 1 and - 2 * list ( pos_nums . keys ( ) ) [ - 1 ] in neg_nums : NEW_LINE INDENT solutions . append ( [ - 2 * list ( pos_nums . keys ( ) ) [ - 1 ] , list ( pos_nums . keys ( ) ) [ - 1 ] , list ( pos_nums . keys ( ) ) [ - 1 ] ] ) NEW_LINE DEDENT DEDENT neg_two_pointer_sum ( ) NEW_LINE if 0 in pos_nums and pos_nums [ 0 ] >= 3 : NEW_LINE INDENT solutions . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT pos_two_pointer_sum ( ) NEW_LINE return solutions NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = [ ] NEW_LINE c_nums = Counter ( nums ) NEW_LINE if c_nums [ 0 ] >= 3 : NEW_LINE INDENT res . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT if c_nums [ 0 ] >= 1 : NEW_LINE INDENT c_nums [ 0 ] = 1 NEW_LINE DEDENT s_nums = sorted ( c_nums . keys ( ) ) NEW_LINE for i , num in enumerate ( s_nums ) : NEW_LINE INDENT if c_nums [ num ] > 1 and - 2 * num in c_nums : NEW_LINE INDENT res . append ( [ num , num , - 2 * num ] ) NEW_LINE DEDENT for left in s_nums [ : i ] : NEW_LINE INDENT if ( right : = - left - num ) <= num : NEW_LINE INDENT break NEW_LINE DEDENT if right in c_nums : NEW_LINE INDENT res . append ( [ left , num , right ] ) NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT instances = { } NEW_LINE for n in nums : NEW_LINE INDENT if n in instances : NEW_LINE INDENT instances [ n ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT instances [ n ] = 1 NEW_LINE DEDENT DEDENT values = [ ] NEW_LINE result = [ ] NEW_LINE for n , count in sorted ( instances . items ( ) ) : NEW_LINE INDENT values . append ( n ) NEW_LINE if n == 0 and count >= 3 : NEW_LINE INDENT result . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT elif n != 0 and count >= 2 : NEW_LINE INDENT third = - 2 * n NEW_LINE if third in instances : NEW_LINE INDENT if n < third : NEW_LINE INDENT result . append ( [ n , n , third ] ) NEW_LINE DEDENT else : NEW_LINE INDENT result . append ( [ third , n , n ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT nvalues = len ( values ) NEW_LINE while nvalues >= 3 : NEW_LINE INDENT floor = - ( values [ nvalues - 1 ] + values [ nvalues - 2 ] ) NEW_LINE ceiling = - ( values [ 0 ] + values [ 1 ] ) NEW_LINE if floor > ceiling : NEW_LINE INDENT return [ ] NEW_LINE DEDENT iLeft = nvalues NEW_LINE iRight = - 1 NEW_LINE for i in range ( nvalues ) : NEW_LINE INDENT if values [ i ] >= floor : NEW_LINE INDENT iLeft = i NEW_LINE break NEW_LINE DEDENT DEDENT for i in range ( nvalues - 1 , - 1 , - 1 ) : NEW_LINE INDENT if values [ i ] <= ceiling : NEW_LINE INDENT iRight = i NEW_LINE break NEW_LINE DEDENT DEDENT if iLeft == 0 and iRight == nvalues - 1 : NEW_LINE INDENT break NEW_LINE DEDENT values = values [ iLeft : iRight + 1 ] NEW_LINE nvalues = len ( values ) NEW_LINE DEDENT if nvalues < 3 : NEW_LINE INDENT return result NEW_LINE DEDENT for i in range ( nvalues - 2 ) : NEW_LINE INDENT v1 = values [ i ] NEW_LINE if v1 >= 0 : NEW_LINE INDENT break NEW_LINE DEDENT for j in range ( i + 1 , nvalues - 1 ) : NEW_LINE INDENT v2 = values [ j ] NEW_LINE v3 = - ( v1 + v2 ) NEW_LINE if v3 <= v2 : NEW_LINE INDENT break NEW_LINE DEDENT if v3 in instances : NEW_LINE INDENT result . append ( [ v1 , v2 , v3 ] ) NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT def genKey ( first , second ) : NEW_LINE INDENT if first < second : NEW_LINE INDENT return first , second , - ( first + second ) NEW_LINE DEDENT return second , first , - ( first + second ) NEW_LINE DEDENT results = set ( ) NEW_LINE positives = [ ] NEW_LINE negatives = [ ] NEW_LINE unique_positive_numbers = set ( ) NEW_LINE unique_negative_numbers = dict ( ) NEW_LINE zeros = 0 NEW_LINE for n in nums : NEW_LINE INDENT if n > 0 : NEW_LINE INDENT positives . append ( n ) NEW_LINE unique_positive_numbers . add ( n ) NEW_LINE DEDENT elif n < 0 : NEW_LINE INDENT negatives . append ( - n ) NEW_LINE unique_negative_numbers [ - n ] = True NEW_LINE DEDENT else : NEW_LINE INDENT zeros += 1 NEW_LINE DEDENT DEDENT if zeros >= 3 : NEW_LINE INDENT results . add ( ( 0 , 0 , 0 ) ) NEW_LINE DEDENT if unique_positive_numbers and unique_negative_numbers : NEW_LINE INDENT for i , first in enumerate ( negatives ) : NEW_LINE INDENT for second in negatives [ i + 1 : ] : NEW_LINE INDENT if first + second in unique_positive_numbers : NEW_LINE INDENT results . add ( genKey ( - first , - second ) ) NEW_LINE DEDENT DEDENT DEDENT for i , first in enumerate ( positives ) : NEW_LINE INDENT for second in positives [ i + 1 : ] : NEW_LINE INDENT if first + second in unique_negative_numbers : NEW_LINE INDENT results . add ( genKey ( first , second ) ) NEW_LINE DEDENT DEDENT DEDENT if zeros > 0 : NEW_LINE INDENT for n in unique_positive_numbers : NEW_LINE INDENT if n in unique_negative_numbers : NEW_LINE INDENT results . add ( ( - n , 0 , n ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return results NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT def genKey ( first , second ) : NEW_LINE INDENT if first < second : NEW_LINE INDENT return first , second , - first - second NEW_LINE DEDENT return second , first , - first - second NEW_LINE DEDENT results = set ( ) NEW_LINE positives = [ ] NEW_LINE negatives = [ ] NEW_LINE unique_positive_numbers = set ( ) NEW_LINE unique_negative_numbers = dict ( ) NEW_LINE zeros = 0 NEW_LINE for n in nums : NEW_LINE INDENT if n > 0 : NEW_LINE INDENT positives . append ( n ) NEW_LINE unique_positive_numbers . add ( n ) NEW_LINE DEDENT elif n < 0 : NEW_LINE INDENT negatives . append ( n ) NEW_LINE unique_negative_numbers [ - n ] = True NEW_LINE DEDENT else : NEW_LINE INDENT zeros += 1 NEW_LINE DEDENT DEDENT if zeros >= 3 : NEW_LINE INDENT results . add ( ( 0 , 0 , 0 ) ) NEW_LINE DEDENT if unique_positive_numbers and unique_negative_numbers : NEW_LINE INDENT for i , first in enumerate ( negatives ) : NEW_LINE INDENT for second in negatives [ i + 1 : ] : NEW_LINE INDENT if - first - second in unique_positive_numbers : NEW_LINE INDENT results . add ( genKey ( first , second ) ) NEW_LINE DEDENT DEDENT DEDENT for i , first in enumerate ( positives ) : NEW_LINE INDENT for second in positives [ i + 1 : ] : NEW_LINE INDENT if first + second in unique_negative_numbers : NEW_LINE INDENT results . add ( genKey ( first , second ) ) NEW_LINE DEDENT DEDENT DEDENT if zeros > 0 : NEW_LINE INDENT for n in unique_positive_numbers : NEW_LINE INDENT if n in unique_negative_numbers : NEW_LINE INDENT results . add ( ( - n , 0 , n ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return results NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT ctr = collections . Counter ( nums ) NEW_LINE res = set ( ) if ctr [ 0 ] < 3 else { ( 0 , 0 , 0 ) } NEW_LINE ps = [ n for n in ctr if n > 0 ] NEW_LINE ns = [ n for n in ctr if n <= 0 ] NEW_LINE for p in ps : NEW_LINE INDENT for n in ns : NEW_LINE INDENT x = - n - p NEW_LINE if x in ctr : NEW_LINE INDENT if x in ( n , p ) and ctr [ x ] > 1 or n < x < p : NEW_LINE INDENT res . add ( ( n , x , p ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum2 ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = set ( ) NEW_LINE nums . sort ( ) NEW_LINE n = len ( nums ) NEW_LINE for i in range ( 0 , n - 2 ) : NEW_LINE INDENT l = i + 1 NEW_LINE r = n - 1 NEW_LINE while l < r : NEW_LINE INDENT currSum = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if currSum == 0 : NEW_LINE INDENT res . add ( tuple ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) ) NEW_LINE DEDENT if currSum < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT ans = set ( ) NEW_LINE if len ( nums ) < 3 : return ans NEW_LINE if nums . count ( 0 ) >= 3 : ans . add ( ( 0 , 0 , 0 ) ) NEW_LINE nums_set = set ( nums ) NEW_LINE numMax , numMin = max ( nums_set ) , min ( nums_set ) NEW_LINE if numMax <= 0 or numMin >= 0 : return ans NEW_LINE setP = set ( num for num in nums_set if ( num > 0 and num <= - 2 * numMin ) ) NEW_LINE setN = set ( num for num in nums_set if ( num < 0 and num >= - 2 * numMax ) ) NEW_LINE count = collections . Counter ( nums ) NEW_LINE for numP in setP : NEW_LINE INDENT for numN in setN : NEW_LINE INDENT numD = - numP - numN NEW_LINE if numD in nums_set : NEW_LINE INDENT val = tuple ( sorted ( [ numD , numP , numN ] ) ) NEW_LINE if val . count ( numD ) <= count [ numD ] and val . count ( numP ) <= count [ numP ] and val . count ( numN ) <= count [ numN ] : NEW_LINE INDENT ans . add ( val ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT sol = Solution ( ) NEW_LINE print ( sol . threeSum ( [ - 1 , 0 , 1 , 2 , - 1 , - 4 ] ) ) NEW_LINE
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT def genKey ( first , second ) : NEW_LINE INDENT if first < second : NEW_LINE INDENT return first , second , - ( first + second ) NEW_LINE DEDENT return second , first , - ( first + second ) NEW_LINE DEDENT results = set ( ) NEW_LINE positives = [ ] NEW_LINE negatives = [ ] NEW_LINE unique_positive_numbers = set ( ) NEW_LINE unique_negative_numbers = dict ( ) NEW_LINE zeros = 0 NEW_LINE for n in nums : NEW_LINE INDENT if n > 0 : NEW_LINE INDENT positives . append ( n ) NEW_LINE unique_positive_numbers . add ( n ) NEW_LINE DEDENT elif n < 0 : NEW_LINE INDENT negatives . append ( - n ) NEW_LINE unique_negative_numbers [ - n ] = True NEW_LINE DEDENT else : NEW_LINE INDENT zeros += 1 NEW_LINE DEDENT DEDENT if zeros >= 3 : NEW_LINE INDENT results . add ( ( 0 , 0 , 0 ) ) NEW_LINE DEDENT if unique_positive_numbers and unique_negative_numbers : NEW_LINE INDENT for i , first in enumerate ( negatives ) : NEW_LINE INDENT for second in negatives [ i + 1 : ] : NEW_LINE INDENT if first + second in unique_positive_numbers : NEW_LINE INDENT results . add ( genKey ( - first , - second ) ) NEW_LINE DEDENT DEDENT DEDENT for i , first in enumerate ( positives ) : NEW_LINE INDENT for second in positives [ i + 1 : ] : NEW_LINE INDENT if first + second in unique_negative_numbers : NEW_LINE INDENT results . add ( genKey ( first , second ) ) NEW_LINE DEDENT DEDENT DEDENT if zeros > 0 : NEW_LINE INDENT for n in unique_positive_numbers : NEW_LINE INDENT if n in unique_negative_numbers : NEW_LINE INDENT results . add ( ( - n , 0 , n ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return results NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT import collections NEW_LINE count = collections . Counter ( nums ) NEW_LINE ans = [ ] NEW_LINE if count [ 0 ] > 2 : NEW_LINE INDENT ans . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT for key in count . keys ( ) : NEW_LINE INDENT if count [ key ] > 1 and count [ - key * 2 ] > 0 and key != 0 : NEW_LINE INDENT ans . append ( [ key , key , - 2 * key ] ) NEW_LINE DEDENT DEDENT keys = list ( count . keys ( ) ) NEW_LINE keys . sort ( ) NEW_LINE s = set ( keys ) NEW_LINE for i in range ( len ( keys ) - 1 ) : NEW_LINE INDENT for j in range ( i + 1 , len ( keys ) ) : NEW_LINE INDENT num = - keys [ i ] - keys [ j ] NEW_LINE if num <= keys [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT if num in s : NEW_LINE INDENT ans . append ( [ keys [ i ] , keys [ j ] , num ] ) NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums_set = set ( nums ) NEW_LINE re = set ( ) NEW_LINE if len ( nums ) < 3 : return re NEW_LINE max_nums = max ( nums_set ) NEW_LINE min_nums = min ( nums_set ) NEW_LINE if max_nums < 0 or min_nums > 0 : NEW_LINE INDENT return re NEW_LINE DEDENT if nums . count ( 0 ) >= 3 : NEW_LINE INDENT re . add ( ( 0 , 0 , 0 ) ) NEW_LINE DEDENT list_p = set ( i for i in nums if i > 0 ) NEW_LINE list_n = set ( i for i in nums if i < 0 ) NEW_LINE import collections NEW_LINE count = collections . Counter ( nums ) NEW_LINE for p in list_p : NEW_LINE INDENT for n in list_n : NEW_LINE INDENT remains = 0 - p - n NEW_LINE if remains in nums_set : NEW_LINE INDENT val = tuple ( sorted ( [ p , n , remains ] ) ) NEW_LINE if val . count ( remains ) <= count [ remains ] and val . count ( p ) <= count [ p ] and val . count ( n ) <= count [ n ] : re . add ( val ) NEW_LINE DEDENT DEDENT DEDENT return re NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT results = set ( ) NEW_LINE positives = [ ] NEW_LINE negatives = [ ] NEW_LINE unique_positive_numbers = defaultdict ( int ) NEW_LINE unique_negative_numbers = defaultdict ( int ) NEW_LINE zeros = 0 NEW_LINE for n in nums : NEW_LINE INDENT if n > 0 : NEW_LINE INDENT positives . append ( n ) NEW_LINE unique_positive_numbers [ n ] += 1 NEW_LINE DEDENT elif n < 0 : NEW_LINE INDENT negatives . append ( - n ) NEW_LINE unique_negative_numbers [ - n ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT zeros += 1 NEW_LINE DEDENT DEDENT if zeros >= 3 : NEW_LINE INDENT results . add ( ( 0 , 0 , 0 ) ) NEW_LINE DEDENT for i , first in enumerate ( negatives ) : NEW_LINE INDENT for second in negatives [ i + 1 : ] : NEW_LINE INDENT if first + second in unique_positive_numbers : NEW_LINE INDENT results . add ( ( min ( - first , - second ) , max ( - first , - second ) , first + second ) ) NEW_LINE DEDENT DEDENT DEDENT for i , first in enumerate ( positives ) : NEW_LINE INDENT for second in positives [ i + 1 : ] : NEW_LINE INDENT if first + second in unique_negative_numbers : NEW_LINE INDENT results . add ( ( - ( first + second ) , min ( first , second ) , max ( first , second ) ) ) NEW_LINE DEDENT DEDENT DEDENT for n in unique_negative_numbers . keys ( ) : NEW_LINE INDENT if zeros > 0 : NEW_LINE INDENT if n in unique_positive_numbers : NEW_LINE INDENT results . add ( ( - n , 0 , n ) ) NEW_LINE DEDENT DEDENT DEDENT return results NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT count = collections . Counter ( nums ) NEW_LINE ans = [ ] NEW_LINE if count [ 0 ] > 2 : NEW_LINE INDENT ans . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT for key in count . keys ( ) : NEW_LINE INDENT if count [ key ] > 1 and count [ - key * 2 ] > 0 and key != 0 : NEW_LINE INDENT ans . append ( [ key , key , - 2 * key ] ) NEW_LINE DEDENT DEDENT sorted_keys = list ( count . keys ( ) ) NEW_LINE sorted_keys . sort ( ) NEW_LINE key_set = set ( sorted_keys ) NEW_LINE for i in range ( len ( sorted_keys ) - 1 ) : NEW_LINE INDENT for j in range ( i + 1 , len ( sorted_keys ) ) : NEW_LINE INDENT num = - sorted_keys [ i ] - sorted_keys [ j ] NEW_LINE if num <= sorted_keys [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT if num in key_set : NEW_LINE INDENT ans . append ( [ sorted_keys [ i ] , sorted_keys [ j ] , num ] ) NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not nums : NEW_LINE INDENT return [ ] NEW_LINE DEDENT posDic , negDic = set ( ) , set ( ) NEW_LINE posNums , negNums = [ ] , [ ] NEW_LINE posDupNums , negDupNums = set ( ) , set ( ) NEW_LINE zeroCnt = 0 NEW_LINE for num in nums : NEW_LINE INDENT if num > 0 : NEW_LINE INDENT if num in posDic : NEW_LINE INDENT posDupNums . add ( num ) NEW_LINE DEDENT else : NEW_LINE INDENT posNums . append ( num ) NEW_LINE posDic . add ( num ) NEW_LINE DEDENT DEDENT elif num < 0 : NEW_LINE INDENT if num in negDic : NEW_LINE INDENT negDupNums . add ( num ) NEW_LINE DEDENT else : NEW_LINE INDENT negNums . append ( num ) NEW_LINE negDic . add ( num ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT zeroCnt += 1 NEW_LINE DEDENT DEDENT ret = [ [ 0 , 0 , 0 ] ] if zeroCnt >= 3 else [ ] NEW_LINE if zeroCnt > 0 : NEW_LINE INDENT for num in posNums : NEW_LINE INDENT if - num in negDic : NEW_LINE INDENT ret . append ( [ num , 0 , - num ] ) NEW_LINE DEDENT DEDENT DEDENT for num in posDupNums : NEW_LINE INDENT if ( - 2 ) * num in negDic : NEW_LINE INDENT ret . append ( [ num , num , ( - 2 ) * num ] ) NEW_LINE DEDENT DEDENT for num in negDupNums : NEW_LINE INDENT if ( - 2 ) * num in posDic : NEW_LINE INDENT ret . append ( [ num , num , ( - 2 ) * num ] ) NEW_LINE DEDENT DEDENT posCnt , negCnt = len ( posNums ) , len ( negNums ) NEW_LINE for i in range ( posCnt - 1 ) : NEW_LINE INDENT for j in range ( i + 1 , posCnt ) : NEW_LINE INDENT n = - ( posNums [ i ] + posNums [ j ] ) NEW_LINE if n in negDic : NEW_LINE INDENT ret . append ( [ posNums [ i ] , posNums [ j ] , n ] ) NEW_LINE DEDENT DEDENT DEDENT for i in range ( negCnt - 1 ) : NEW_LINE INDENT for j in range ( i + 1 , negCnt ) : NEW_LINE INDENT n = - ( negNums [ i ] + negNums [ j ] ) NEW_LINE if n in posDic : NEW_LINE INDENT ret . append ( [ negNums [ i ] , negNums [ j ] , n ] ) NEW_LINE DEDENT DEDENT DEDENT return ret NEW_LINE DEDENT DEDENT
from itertools import combinations NEW_LINE from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT def genKey ( first , second ) : NEW_LINE INDENT if first < second : NEW_LINE INDENT return first , second , - first - second NEW_LINE DEDENT return second , first , - first - second NEW_LINE DEDENT results = set ( ) NEW_LINE positives = [ ] NEW_LINE negatives = [ ] NEW_LINE unique_positive_numbers = set ( ) NEW_LINE unique_negative_numbers = dict ( ) NEW_LINE zeros = 0 NEW_LINE for n in nums : NEW_LINE INDENT if n > 0 : NEW_LINE INDENT positives . append ( n ) NEW_LINE unique_positive_numbers . add ( n ) NEW_LINE DEDENT elif n < 0 : NEW_LINE INDENT negatives . append ( - n ) NEW_LINE unique_negative_numbers [ - n ] = True NEW_LINE DEDENT else : NEW_LINE INDENT zeros += 1 NEW_LINE DEDENT DEDENT if zeros >= 3 : NEW_LINE INDENT results . add ( ( 0 , 0 , 0 ) ) NEW_LINE DEDENT if unique_positive_numbers and unique_negative_numbers : NEW_LINE INDENT for first , second in combinations ( negatives , 2 ) : NEW_LINE INDENT if first + second in unique_positive_numbers : NEW_LINE INDENT results . add ( genKey ( - first , - second ) ) NEW_LINE DEDENT DEDENT for first , second in combinations ( positives , 2 ) : NEW_LINE INDENT if first + second in unique_negative_numbers : NEW_LINE INDENT results . add ( genKey ( first , second ) ) NEW_LINE DEDENT DEDENT if zeros > 0 : NEW_LINE INDENT for n in unique_positive_numbers : NEW_LINE INDENT if n in unique_negative_numbers : NEW_LINE INDENT results . add ( ( - n , 0 , n ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return results NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE pGroup , nGroup , zGroup , res = [ ] , [ ] , [ ] , [ ] NEW_LINE for n in nums : NEW_LINE INDENT if n > 0 : NEW_LINE INDENT pGroup . append ( n ) NEW_LINE DEDENT elif n == 0 : NEW_LINE INDENT zGroup . append ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT nGroup . append ( n ) NEW_LINE DEDENT DEDENT if len ( zGroup ) > 0 : NEW_LINE INDENT pGroup . append ( 0 ) NEW_LINE if len ( zGroup ) >= 3 : res . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT nlen , plen = len ( nGroup ) , len ( pGroup ) NEW_LINE pSet , nSet = set ( pGroup ) , set ( nGroup ) NEW_LINE if len ( nGroup ) >= 2 : NEW_LINE INDENT previous_a = None NEW_LINE for i in range ( nlen - 1 ) : NEW_LINE INDENT a = nGroup [ i ] NEW_LINE previous_b = None NEW_LINE if previous_a == a : NEW_LINE INDENT continue NEW_LINE DEDENT for j in range ( i + 1 , nlen ) : NEW_LINE INDENT b = nGroup [ j ] NEW_LINE if previous_b == b : NEW_LINE INDENT continue NEW_LINE DEDENT if - ( a + b ) in pSet : NEW_LINE INDENT res . append ( [ - ( a + b ) , a , b ] ) NEW_LINE DEDENT previous_b = b NEW_LINE DEDENT previous_a = a NEW_LINE DEDENT DEDENT if len ( pGroup ) >= 2 : NEW_LINE INDENT previous_a = None NEW_LINE for i in range ( plen - 1 ) : NEW_LINE INDENT a = pGroup [ i ] NEW_LINE previous_b = None NEW_LINE if previous_a == a : NEW_LINE INDENT continue NEW_LINE DEDENT for j in range ( i + 1 , plen ) : NEW_LINE INDENT b = pGroup [ j ] NEW_LINE if previous_b == b : NEW_LINE INDENT continue NEW_LINE DEDENT if - ( a + b ) in nSet : NEW_LINE INDENT res . append ( [ - ( a + b ) , a , b ] ) NEW_LINE DEDENT previous_b = b NEW_LINE DEDENT previous_a = a NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT NEW_LINE
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE pGroup , nGroup , zGroup , res = [ ] , [ ] , [ ] , [ ] NEW_LINE for n in nums : NEW_LINE INDENT if n > 0 : NEW_LINE INDENT pGroup . append ( n ) NEW_LINE DEDENT elif n == 0 : NEW_LINE INDENT zGroup . append ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT nGroup . append ( n ) NEW_LINE DEDENT DEDENT if len ( zGroup ) > 0 : NEW_LINE INDENT pGroup . append ( 0 ) NEW_LINE if len ( zGroup ) >= 3 : res . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT nlen , plen = len ( nGroup ) , len ( pGroup ) NEW_LINE pSet , nSet = set ( pGroup ) , set ( nGroup ) NEW_LINE if len ( nGroup ) >= 2 : NEW_LINE INDENT previous_a = None NEW_LINE for i in range ( nlen - 1 ) : NEW_LINE INDENT a = nGroup [ i ] NEW_LINE previous_b = None NEW_LINE if previous_a == a : NEW_LINE INDENT continue NEW_LINE DEDENT for j in range ( i + 1 , nlen ) : NEW_LINE INDENT b = nGroup [ j ] NEW_LINE if previous_b == b : NEW_LINE INDENT continue NEW_LINE DEDENT if - ( a + b ) in pSet : NEW_LINE INDENT res . append ( [ - ( a + b ) , a , b ] ) NEW_LINE DEDENT previous_b = b NEW_LINE DEDENT previous_a = a NEW_LINE DEDENT DEDENT if len ( pGroup ) >= 2 : NEW_LINE INDENT previous_a = None NEW_LINE for i in range ( plen - 1 ) : NEW_LINE INDENT a = pGroup [ i ] NEW_LINE previous_b = None NEW_LINE if previous_a == a : NEW_LINE INDENT continue NEW_LINE DEDENT for j in range ( i + 1 , plen ) : NEW_LINE INDENT b = pGroup [ j ] NEW_LINE if previous_b == b : NEW_LINE INDENT continue NEW_LINE DEDENT if - ( a + b ) in nSet : NEW_LINE INDENT res . append ( [ - ( a + b ) , a , b ] ) NEW_LINE DEDENT previous_b = b NEW_LINE DEDENT previous_a = a NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT NEW_LINE
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE pGroup , nGroup , zGroup , res = [ ] , [ ] , [ ] , [ ] NEW_LINE for n in nums : NEW_LINE INDENT if n > 0 : NEW_LINE INDENT pGroup . append ( n ) NEW_LINE DEDENT elif n == 0 : NEW_LINE INDENT zGroup . append ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT nGroup . append ( n ) NEW_LINE DEDENT DEDENT zlen = len ( zGroup ) NEW_LINE if zlen > 0 : NEW_LINE INDENT pGroup . append ( 0 ) NEW_LINE if zlen >= 3 : res . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT nlen , plen = len ( nGroup ) , len ( pGroup ) NEW_LINE pSet , nSet = set ( pGroup ) , set ( nGroup ) NEW_LINE if len ( nGroup ) >= 2 : NEW_LINE INDENT previous_a = None NEW_LINE for i in range ( nlen - 1 ) : NEW_LINE INDENT a = nGroup [ i ] NEW_LINE previous_b = None NEW_LINE if previous_a == a : NEW_LINE INDENT continue NEW_LINE DEDENT for j in range ( i + 1 , nlen ) : NEW_LINE INDENT b = nGroup [ j ] NEW_LINE if previous_b == b : NEW_LINE INDENT continue NEW_LINE DEDENT if - ( a + b ) in pSet : NEW_LINE INDENT res . append ( [ - ( a + b ) , a , b ] ) NEW_LINE DEDENT previous_b = b NEW_LINE DEDENT previous_a = a NEW_LINE DEDENT DEDENT if len ( pGroup ) >= 2 : NEW_LINE INDENT previous_a = None NEW_LINE for i in range ( plen - 1 ) : NEW_LINE INDENT a = pGroup [ i ] NEW_LINE previous_b = None NEW_LINE if previous_a == a : NEW_LINE INDENT continue NEW_LINE DEDENT for j in range ( i + 1 , plen ) : NEW_LINE INDENT b = pGroup [ j ] NEW_LINE if previous_b == b : NEW_LINE INDENT continue NEW_LINE DEDENT if - ( a + b ) in nSet : NEW_LINE INDENT res . append ( [ - ( a + b ) , a , b ] ) NEW_LINE DEDENT previous_b = b NEW_LINE DEDENT previous_a = a NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT NEW_LINE
import json NEW_LINE class Solution : NEW_LINE INDENT def threeSum1 ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT tDict = { } NEW_LINE VList = [ ] NEW_LINE nums . sort ( ) NEW_LINE Total = nums [ 0 ] + nums [ 1 ] NEW_LINE for i in nums : NEW_LINE INDENT if i > 0 and - Total < i : NEW_LINE INDENT break NEW_LINE DEDENT if i in tDict : NEW_LINE INDENT tDict [ i ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT tDict [ i ] = 1 NEW_LINE VList += [ i ] NEW_LINE DEDENT DEDENT out = set ( ) NEW_LINE if 0 in tDict : NEW_LINE INDENT if tDict [ 0 ] > 2 : NEW_LINE INDENT out . add ( tuple ( [ 0 , 0 , 0 ] ) ) NEW_LINE DEDENT tDict [ 0 ] = 1 NEW_LINE DEDENT if len ( VList ) < 2 or VList [ 0 ] + VList [ 1 ] > 0 : NEW_LINE INDENT return out NEW_LINE DEDENT for i in range ( len ( VList ) ) : NEW_LINE INDENT if VList [ i ] >= 0 : NEW_LINE INDENT break NEW_LINE DEDENT if tDict [ VList [ i ] ] > 1 and - 2 * VList [ i ] in tDict : NEW_LINE INDENT out . add ( tuple ( sorted ( [ VList [ i ] , VList [ i ] , - 2 * VList [ i ] ] ) ) ) NEW_LINE tDict [ VList [ i ] ] = 1 NEW_LINE DEDENT if VList [ i ] / - 2 in tDict and tDict [ VList [ i ] / - 2 ] > 1 : NEW_LINE INDENT out . add ( tuple ( sorted ( [ VList [ i ] , int ( VList [ i ] / - 2 ) , int ( VList [ i ] / - 2 ) ] ) ) ) NEW_LINE tDict [ VList [ i ] / - 2 ] = 1 NEW_LINE DEDENT for j in range ( i + 1 , len ( VList ) ) : NEW_LINE INDENT x = VList [ i ] + VList [ j ] NEW_LINE if x > 0 : NEW_LINE INDENT break NEW_LINE DEDENT if - x in tDict and - x != VList [ j ] : NEW_LINE INDENT out . add ( tuple ( sorted ( [ VList [ i ] , VList [ j ] , - x ] ) ) ) NEW_LINE DEDENT DEDENT DEDENT return out NEW_LINE DEDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT n1dict = { } NEW_LINE for i in nums : NEW_LINE INDENT n1dict [ i ] = n1dict . get ( i , 0 ) + 1 NEW_LINE DEDENT out = set ( ) NEW_LINE nums = sorted ( n1dict . keys ( ) ) NEW_LINE if 0 in n1dict : NEW_LINE INDENT if n1dict [ 0 ] > 2 : NEW_LINE INDENT out . add ( tuple ( [ 0 , 0 , 0 ] ) ) NEW_LINE DEDENT n1dict [ 0 ] = 1 NEW_LINE DEDENT for i , v in enumerate ( nums ) : NEW_LINE INDENT if n1dict [ v ] > 1 and - 2 * v in n1dict : NEW_LINE INDENT out . add ( tuple ( sorted ( [ v , v , - 2 * v ] ) ) ) NEW_LINE n1dict [ v ] = 1 NEW_LINE DEDENT if nums [ i ] / - 2 in n1dict and n1dict [ v / - 2 ] > 1 : NEW_LINE INDENT out . add ( tuple ( sorted ( [ v , int ( v / - 2 ) , int ( v / - 2 ) ] ) ) ) NEW_LINE n1dict [ v / - 2 ] = 1 NEW_LINE DEDENT for j in range ( i + 1 , len ( nums ) ) : NEW_LINE INDENT element = nums [ j ] + v NEW_LINE if element > 0 : NEW_LINE INDENT break NEW_LINE DEDENT if - element in n1dict and - element != nums [ j ] : NEW_LINE INDENT out . add ( tuple ( sorted ( [ v , nums [ j ] , - element ] ) ) ) NEW_LINE DEDENT DEDENT DEDENT return sorted ( out ) NEW_LINE DEDENT DEDENT
from itertools import combinations NEW_LINE from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT def genKey ( first , second ) : NEW_LINE INDENT if first < second : NEW_LINE INDENT return first , second , - first - second NEW_LINE DEDENT return second , first , - first - second NEW_LINE DEDENT results = set ( ) NEW_LINE positives = [ ] NEW_LINE negatives = [ ] NEW_LINE unique_positive_numbers = set ( ) NEW_LINE unique_negative_numbers = dict ( ) NEW_LINE zeros = 0 NEW_LINE for n in nums : NEW_LINE INDENT if n > 0 : NEW_LINE INDENT positives . append ( n ) NEW_LINE unique_positive_numbers . add ( n ) NEW_LINE DEDENT elif n < 0 : NEW_LINE INDENT negatives . append ( n ) NEW_LINE unique_negative_numbers [ - n ] = True NEW_LINE DEDENT else : NEW_LINE INDENT zeros += 1 NEW_LINE DEDENT DEDENT if zeros >= 3 : NEW_LINE INDENT results . add ( ( 0 , 0 , 0 ) ) NEW_LINE DEDENT if unique_positive_numbers and unique_negative_numbers : NEW_LINE INDENT for first , second in combinations ( negatives , 2 ) : NEW_LINE INDENT if - first - second in unique_positive_numbers : NEW_LINE INDENT results . add ( genKey ( first , second ) ) NEW_LINE DEDENT DEDENT for first , second in combinations ( positives , 2 ) : NEW_LINE INDENT if first + second in unique_negative_numbers : NEW_LINE INDENT results . add ( genKey ( first , second ) ) NEW_LINE DEDENT DEDENT if zeros > 0 : NEW_LINE INDENT for n in unique_positive_numbers : NEW_LINE INDENT if n in unique_negative_numbers : NEW_LINE INDENT results . add ( ( - n , 0 , n ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return results NEW_LINE DEDENT DEDENT
import json NEW_LINE class Solution : NEW_LINE INDENT def threeSum1 ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT tDict = { } NEW_LINE VList = [ ] NEW_LINE nums . sort ( ) NEW_LINE Total = nums [ 0 ] + nums [ 1 ] NEW_LINE for i in nums : NEW_LINE INDENT if i > 0 and - Total < i : NEW_LINE INDENT break NEW_LINE DEDENT if i in tDict : NEW_LINE INDENT tDict [ i ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT tDict [ i ] = 1 NEW_LINE VList += [ i ] NEW_LINE DEDENT DEDENT out = set ( ) NEW_LINE if 0 in tDict : NEW_LINE INDENT if tDict [ 0 ] > 2 : NEW_LINE INDENT out . add ( tuple ( [ 0 , 0 , 0 ] ) ) NEW_LINE DEDENT tDict [ 0 ] = 1 NEW_LINE DEDENT if len ( VList ) < 2 or VList [ 0 ] + VList [ 1 ] > 0 : NEW_LINE INDENT return out NEW_LINE DEDENT for i in range ( len ( VList ) ) : NEW_LINE INDENT if VList [ i ] >= 0 : NEW_LINE INDENT break NEW_LINE DEDENT if tDict [ VList [ i ] ] > 1 and - 2 * VList [ i ] in tDict : NEW_LINE INDENT out . add ( tuple ( sorted ( [ VList [ i ] , VList [ i ] , - 2 * VList [ i ] ] ) ) ) NEW_LINE tDict [ VList [ i ] ] = 1 NEW_LINE DEDENT if VList [ i ] / - 2 in tDict and tDict [ VList [ i ] / - 2 ] > 1 : NEW_LINE INDENT out . add ( tuple ( sorted ( [ VList [ i ] , int ( VList [ i ] / - 2 ) , int ( VList [ i ] / - 2 ) ] ) ) ) NEW_LINE tDict [ VList [ i ] / - 2 ] = 1 NEW_LINE DEDENT for j in range ( i + 1 , len ( VList ) ) : NEW_LINE INDENT x = VList [ i ] + VList [ j ] NEW_LINE if x > 0 : NEW_LINE INDENT break NEW_LINE DEDENT if - x in tDict and - x != VList [ j ] : NEW_LINE INDENT out . add ( tuple ( sorted ( [ VList [ i ] , VList [ j ] , - x ] ) ) ) NEW_LINE DEDENT DEDENT DEDENT return out NEW_LINE DEDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT n1dict = { } NEW_LINE for i in nums : NEW_LINE INDENT n1dict [ i ] = n1dict . get ( i , 0 ) + 1 NEW_LINE DEDENT out = set ( ) NEW_LINE nums = sorted ( n1dict . keys ( ) ) NEW_LINE if 0 in n1dict : NEW_LINE INDENT if n1dict [ 0 ] > 2 : NEW_LINE INDENT out . add ( tuple ( [ 0 , 0 , 0 ] ) ) NEW_LINE DEDENT n1dict [ 0 ] = 1 NEW_LINE DEDENT for i , v in enumerate ( nums ) : NEW_LINE INDENT if n1dict [ v ] > 1 and - 2 * v in n1dict : NEW_LINE INDENT out . add ( tuple ( sorted ( [ v , v , - 2 * v ] ) ) ) NEW_LINE n1dict [ v ] = 1 NEW_LINE DEDENT for j in range ( i + 1 , len ( nums ) ) : NEW_LINE INDENT element = nums [ j ] + v NEW_LINE if element > 0 : NEW_LINE INDENT break NEW_LINE DEDENT if - element in n1dict and ( - element != nums [ j ] or n1dict [ - element ] > 1 ) : NEW_LINE INDENT out . add ( tuple ( sorted ( [ v , nums [ j ] , - element ] ) ) ) NEW_LINE DEDENT DEDENT DEDENT return sorted ( out ) NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE from itertools import combinations , product NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE res , vals = [ ] , Counter ( nums ) NEW_LINE if vals . get ( 0 , 0 ) >= 3 : res . append ( [ 0 , 0 , 0 ] ) NEW_LINE pos , neg = filter ( lambda x : x > 0 , vals ) , filter ( lambda x : x < 0 , vals ) NEW_LINE for p , n in product ( pos , neg ) : NEW_LINE INDENT x = - ( p + n ) NEW_LINE if x not in vals or ( x in ( p , n ) and vals [ x ] < 2 ) : continue NEW_LINE if n <= x <= p : res . append ( [ n , x , p ] ) NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
import json NEW_LINE class Solution : NEW_LINE INDENT def threeSum1 ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT tDict = { } NEW_LINE VList = [ ] NEW_LINE nums . sort ( ) NEW_LINE Total = nums [ 0 ] + nums [ 1 ] NEW_LINE for i in nums : NEW_LINE INDENT if i > 0 and - Total < i : NEW_LINE INDENT break NEW_LINE DEDENT if i in tDict : NEW_LINE INDENT tDict [ i ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT tDict [ i ] = 1 NEW_LINE VList += [ i ] NEW_LINE DEDENT DEDENT out = set ( ) NEW_LINE if 0 in tDict : NEW_LINE INDENT if tDict [ 0 ] > 2 : NEW_LINE INDENT out . add ( tuple ( [ 0 , 0 , 0 ] ) ) NEW_LINE DEDENT tDict [ 0 ] = 1 NEW_LINE DEDENT if len ( VList ) < 2 or VList [ 0 ] + VList [ 1 ] > 0 : NEW_LINE INDENT return out NEW_LINE DEDENT for i in range ( len ( VList ) ) : NEW_LINE INDENT if VList [ i ] >= 0 : NEW_LINE INDENT break NEW_LINE DEDENT if tDict [ VList [ i ] ] > 1 and - 2 * VList [ i ] in tDict : NEW_LINE INDENT out . add ( tuple ( sorted ( [ VList [ i ] , VList [ i ] , - 2 * VList [ i ] ] ) ) ) NEW_LINE tDict [ VList [ i ] ] = 1 NEW_LINE DEDENT if VList [ i ] / - 2 in tDict and tDict [ VList [ i ] / - 2 ] > 1 : NEW_LINE INDENT out . add ( tuple ( sorted ( [ VList [ i ] , int ( VList [ i ] / - 2 ) , int ( VList [ i ] / - 2 ) ] ) ) ) NEW_LINE tDict [ VList [ i ] / - 2 ] = 1 NEW_LINE DEDENT for j in range ( i + 1 , len ( VList ) ) : NEW_LINE INDENT x = VList [ i ] + VList [ j ] NEW_LINE if x > 0 : NEW_LINE INDENT break NEW_LINE DEDENT if - x in tDict and - x != VList [ j ] : NEW_LINE INDENT out . add ( tuple ( sorted ( [ VList [ i ] , VList [ j ] , - x ] ) ) ) NEW_LINE DEDENT DEDENT DEDENT return out NEW_LINE DEDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT n1dict = { } NEW_LINE for i in nums : NEW_LINE INDENT n1dict [ i ] = n1dict . get ( i , 0 ) + 1 NEW_LINE DEDENT out = set ( ) NEW_LINE nums = sorted ( n1dict . keys ( ) ) NEW_LINE if 0 in n1dict : NEW_LINE INDENT if n1dict [ 0 ] > 2 : NEW_LINE INDENT out . add ( tuple ( [ 0 , 0 , 0 ] ) ) NEW_LINE DEDENT n1dict [ 0 ] = 1 NEW_LINE DEDENT for i , v in enumerate ( nums ) : NEW_LINE INDENT if n1dict [ v ] > 1 and - 2 * v in n1dict : NEW_LINE INDENT out . add ( tuple ( sorted ( [ v , v , - 2 * v ] ) ) ) NEW_LINE n1dict [ v ] = 1 NEW_LINE DEDENT if nums [ i ] / - 2 in n1dict and n1dict [ v / - 2 ] > 1 : NEW_LINE INDENT out . add ( tuple ( sorted ( [ v , int ( v / - 2 ) , int ( v / - 2 ) ] ) ) ) NEW_LINE n1dict [ v / - 2 ] = 1 NEW_LINE DEDENT for j in range ( i + 1 , len ( nums ) ) : NEW_LINE INDENT element = nums [ j ] + v NEW_LINE if element > 0 : NEW_LINE INDENT break NEW_LINE DEDENT if - element in n1dict and - element != nums [ j ] : NEW_LINE INDENT out . add ( tuple ( sorted ( [ v , nums [ j ] , - element ] ) ) ) NEW_LINE DEDENT DEDENT DEDENT return sorted ( out ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , num : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT results = [ ] NEW_LINE hashsets = [ set ( ) , set ( ) ] NEW_LINE duplicates = set ( ) NEW_LINE for n in num : NEW_LINE INDENT if n == 0 and 0 in hashsets [ 1 ] and 0 in duplicates and len ( results ) == 0 : NEW_LINE INDENT results . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT if n < 0 : NEW_LINE INDENT if n in hashsets [ 0 ] : NEW_LINE INDENT duplicates . add ( n ) NEW_LINE DEDENT else : NEW_LINE INDENT hashsets [ 0 ] . add ( n ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if n in hashsets [ 1 ] : NEW_LINE INDENT duplicates . add ( n ) NEW_LINE DEDENT else : NEW_LINE INDENT hashsets [ 1 ] . add ( n ) NEW_LINE DEDENT DEDENT DEDENT sortedLists = [ sorted ( hashsets [ 0 ] ) , sorted ( hashsets [ 1 ] ) ] NEW_LINE for x in range ( len ( sortedLists [ 0 ] ) ) : NEW_LINE INDENT if sortedLists [ 0 ] [ x ] in duplicates : NEW_LINE INDENT if - 2 * sortedLists [ 0 ] [ x ] in hashsets [ 1 ] : NEW_LINE INDENT results . append ( [ sortedLists [ 0 ] [ x ] , sortedLists [ 0 ] [ x ] , - 2 * sortedLists [ 0 ] [ x ] ] ) NEW_LINE DEDENT DEDENT for y in range ( x + 1 , len ( sortedLists [ 0 ] ) ) : NEW_LINE INDENT if - ( sortedLists [ 0 ] [ x ] + sortedLists [ 0 ] [ y ] ) in hashsets [ 1 ] : NEW_LINE INDENT results . append ( [ sortedLists [ 0 ] [ x ] , sortedLists [ 0 ] [ y ] , - sortedLists [ 0 ] [ x ] - sortedLists [ 0 ] [ y ] ] ) NEW_LINE DEDENT DEDENT DEDENT for x in range ( len ( sortedLists [ 1 ] ) ) : NEW_LINE INDENT if sortedLists [ 1 ] [ x ] in duplicates : NEW_LINE INDENT if - 2 * sortedLists [ 1 ] [ x ] in hashsets [ 0 ] : NEW_LINE INDENT results . append ( [ - 2 * sortedLists [ 1 ] [ x ] , sortedLists [ 1 ] [ x ] , sortedLists [ 1 ] [ x ] ] ) NEW_LINE DEDENT DEDENT for y in range ( x + 1 , len ( sortedLists [ 1 ] ) ) : NEW_LINE INDENT if - ( sortedLists [ 1 ] [ x ] + sortedLists [ 1 ] [ y ] ) in hashsets [ 0 ] : NEW_LINE INDENT results . append ( [ - sortedLists [ 1 ] [ x ] - sortedLists [ 1 ] [ y ] , sortedLists [ 1 ] [ x ] , sortedLists [ 1 ] [ y ] ] ) NEW_LINE DEDENT DEDENT DEDENT return results NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT results = dict ( ) NEW_LINE positives = [ ] NEW_LINE negatives = [ ] NEW_LINE unique_positive_numbers = set ( ) NEW_LINE unique_negative_numbers = set ( ) NEW_LINE zeros = 0 NEW_LINE for n in nums : NEW_LINE INDENT if n > 0 : NEW_LINE INDENT positives . append ( n ) NEW_LINE unique_positive_numbers . add ( n ) NEW_LINE DEDENT elif n < 0 : NEW_LINE INDENT negatives . append ( - n ) NEW_LINE unique_negative_numbers . add ( - n ) NEW_LINE DEDENT else : NEW_LINE INDENT zeros += 1 NEW_LINE DEDENT DEDENT if zeros >= 3 : NEW_LINE INDENT results [ ( 0 , 0 , 0 ) ] = True NEW_LINE DEDENT n_count = len ( negatives ) NEW_LINE p_count = len ( positives ) NEW_LINE for i , first in enumerate ( negatives ) : NEW_LINE INDENT for j in range ( i + 1 , n_count ) : NEW_LINE INDENT second = negatives [ j ] NEW_LINE if first + second in unique_positive_numbers : NEW_LINE INDENT results [ tuple ( sorted ( ( - first , - second , first + second ) ) ) ] = True NEW_LINE DEDENT DEDENT DEDENT for i , first in enumerate ( positives ) : NEW_LINE INDENT for j in range ( i + 1 , p_count ) : NEW_LINE INDENT second = positives [ j ] NEW_LINE if first + second in unique_negative_numbers : NEW_LINE INDENT results [ tuple ( sorted ( ( - ( first + second ) , first , second ) ) ) ] = True NEW_LINE DEDENT DEDENT DEDENT for n in unique_negative_numbers : NEW_LINE INDENT if zeros > 0 : NEW_LINE INDENT if n in unique_positive_numbers : NEW_LINE INDENT results [ ( - n , 0 , n ) ] = True NEW_LINE DEDENT DEDENT DEDENT return results . keys ( ) NEW_LINE DEDENT DEDENT
import json NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT tDict = { } NEW_LINE VList = [ ] NEW_LINE nums . sort ( ) NEW_LINE Total = nums [ 0 ] + nums [ 1 ] NEW_LINE for i in nums : NEW_LINE INDENT if i > 0 and - Total < i : NEW_LINE INDENT break NEW_LINE DEDENT if i in tDict : NEW_LINE INDENT tDict [ i ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT tDict [ i ] = 1 NEW_LINE VList += [ i ] NEW_LINE DEDENT DEDENT out = set ( ) NEW_LINE if 0 in tDict : NEW_LINE INDENT if tDict [ 0 ] > 2 : NEW_LINE INDENT out . add ( tuple ( [ 0 , 0 , 0 ] ) ) NEW_LINE DEDENT tDict [ 0 ] = 1 NEW_LINE DEDENT if len ( VList ) < 2 or VList [ 0 ] + VList [ 1 ] > 0 : NEW_LINE INDENT return out NEW_LINE DEDENT for i in range ( len ( VList ) ) : NEW_LINE INDENT if VList [ i ] >= 0 : NEW_LINE INDENT break NEW_LINE DEDENT if tDict [ VList [ i ] ] > 1 and - 2 * VList [ i ] in tDict : NEW_LINE INDENT out . add ( tuple ( sorted ( [ VList [ i ] , VList [ i ] , - 2 * VList [ i ] ] ) ) ) NEW_LINE tDict [ VList [ i ] ] = 1 NEW_LINE DEDENT if VList [ i ] / - 2 in tDict and tDict [ VList [ i ] / - 2 ] > 1 : NEW_LINE INDENT out . add ( tuple ( sorted ( [ VList [ i ] , int ( VList [ i ] / - 2 ) , int ( VList [ i ] / - 2 ) ] ) ) ) NEW_LINE tDict [ VList [ i ] / - 2 ] = 1 NEW_LINE DEDENT for j in range ( i + 1 , len ( VList ) ) : NEW_LINE INDENT x = VList [ i ] + VList [ j ] NEW_LINE if x > 0 : NEW_LINE INDENT break NEW_LINE DEDENT if - x in tDict and - x != VList [ j ] : NEW_LINE INDENT out . add ( tuple ( sorted ( [ VList [ i ] , VList [ j ] , - x ] ) ) ) NEW_LINE DEDENT DEDENT DEDENT return out NEW_LINE DEDENT def threeSum1 ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT n1dict = { } NEW_LINE nums . sort ( ) NEW_LINE if nums [ 0 ] < 0 and nums [ 1 ] < 0 : NEW_LINE INDENT maxi = - ( nums [ 0 ] + nums [ 1 ] ) NEW_LINE DEDENT elif nums [ 0 ] < 0 : NEW_LINE INDENT maxi = - ( nums [ 0 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT maxi = 0 NEW_LINE DEDENT if nums [ - 1 ] > 0 and nums [ - 2 ] > 0 : NEW_LINE INDENT mini = - ( nums [ - 1 ] + nums [ - 2 ] ) NEW_LINE DEDENT elif nums [ - 1 ] > 0 : NEW_LINE INDENT mini = - ( nums [ - 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT mini = 0 NEW_LINE DEDENT mini = - ( min ( - mini , maxi ) ) NEW_LINE maxi = - mini NEW_LINE for i in nums : NEW_LINE INDENT if i >= mini and i <= maxi : NEW_LINE INDENT n1dict [ i ] = n1dict . get ( i , 0 ) + 1 NEW_LINE DEDENT DEDENT out = set ( ) NEW_LINE nums = list ( n1dict . keys ( ) ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT n1dict [ nums [ i ] ] -= 1 NEW_LINE if nums [ i ] == 0 : NEW_LINE INDENT if n1dict [ nums [ i ] ] > 1 : NEW_LINE INDENT out . add ( json . dumps ( sorted ( [ 0 , 0 , 0 ] ) ) ) NEW_LINE DEDENT break ; NEW_LINE DEDENT for j in range ( i + 1 , len ( nums ) ) : NEW_LINE INDENT n1dict [ nums [ j ] ] -= 1 NEW_LINE element = - ( nums [ j ] + nums [ i ] ) NEW_LINE if element in n1dict and n1dict [ element ] > 0 : NEW_LINE INDENT out . add ( tuple ( sorted ( [ nums [ i ] , nums [ j ] , element ] ) ) ) NEW_LINE DEDENT n1dict [ nums [ j ] ] += 1 NEW_LINE DEDENT n1dict [ nums [ i ] ] += 1 NEW_LINE DEDENT return out NEW_LINE DEDENT DEDENT
import bisect NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT output_list = set ( ) NEW_LINE if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if nums . count ( 0 ) >= 3 : NEW_LINE INDENT output_list . add ( ( 0 , 0 , 0 ) ) NEW_LINE DEDENT nums . sort ( ) NEW_LINE zero = False NEW_LINE if 0 in nums : NEW_LINE INDENT zero = True NEW_LINE nums = [ j for j in nums if j != 0 ] NEW_LINE DEDENT i = None NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] >= 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if not i : NEW_LINE INDENT return list ( output_list ) NEW_LINE DEDENT negs = nums [ : i ] NEW_LINE negs = [ - x for x in negs ] NEW_LINE poss = nums [ i : ] NEW_LINE negset = set ( negs ) NEW_LINE posset = set ( poss ) NEW_LINE if not negs or not poss : NEW_LINE INDENT return list ( output_list ) NEW_LINE DEDENT if zero : NEW_LINE INDENT union = ( negset & posset ) NEW_LINE for u in union : NEW_LINE INDENT output_list . add ( ( - u , 0 , u ) ) NEW_LINE DEDENT DEDENT for i in range ( len ( negs ) ) : NEW_LINE INDENT for j in range ( i + 1 , len ( negs ) ) : NEW_LINE INDENT n = negs [ i ] + negs [ j ] NEW_LINE if n in posset : NEW_LINE INDENT output_list . add ( ( - negs [ i ] , - negs [ j ] , n ) ) NEW_LINE DEDENT DEDENT DEDENT for i in range ( len ( poss ) ) : NEW_LINE INDENT for j in range ( i + 1 , len ( poss ) ) : NEW_LINE INDENT p = poss [ i ] + poss [ j ] NEW_LINE if p in negset : NEW_LINE INDENT output_list . add ( ( - p , poss [ i ] , poss [ j ] ) ) NEW_LINE DEDENT DEDENT DEDENT return list ( output_list ) NEW_LINE DEDENT DEDENT
import json NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT tDict = { } NEW_LINE VList = [ ] NEW_LINE nums . sort ( ) NEW_LINE Total = nums [ 0 ] + nums [ 1 ] NEW_LINE for i in nums : NEW_LINE INDENT if i > 0 and - Total < i : NEW_LINE INDENT break NEW_LINE DEDENT if i in tDict : NEW_LINE INDENT tDict [ i ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT tDict [ i ] = 1 NEW_LINE VList += [ i ] NEW_LINE DEDENT DEDENT out = set ( ) NEW_LINE if 0 in tDict : NEW_LINE INDENT if tDict [ 0 ] > 2 : NEW_LINE INDENT out . add ( tuple ( [ 0 , 0 , 0 ] ) ) NEW_LINE DEDENT tDict [ 0 ] = 1 NEW_LINE DEDENT if len ( VList ) < 2 or VList [ 0 ] + VList [ 1 ] > 0 : NEW_LINE INDENT return out NEW_LINE DEDENT for i in range ( len ( VList ) ) : NEW_LINE INDENT if VList [ i ] >= 0 : NEW_LINE INDENT break NEW_LINE DEDENT if tDict [ VList [ i ] ] > 1 and - 2 * VList [ i ] in tDict : NEW_LINE INDENT out . add ( tuple ( sorted ( [ VList [ i ] , VList [ i ] , - 2 * VList [ i ] ] ) ) ) NEW_LINE tDict [ VList [ i ] ] = 1 NEW_LINE DEDENT if VList [ i ] / - 2 in tDict and tDict [ VList [ i ] / - 2 ] > 1 : NEW_LINE INDENT out . add ( tuple ( sorted ( [ VList [ i ] , int ( VList [ i ] / - 2 ) , int ( VList [ i ] / - 2 ) ] ) ) ) NEW_LINE tDict [ VList [ i ] / - 2 ] = 1 NEW_LINE DEDENT for j in range ( i + 1 , len ( VList ) ) : NEW_LINE INDENT x = VList [ i ] + VList [ j ] NEW_LINE if x > 0 : NEW_LINE INDENT break NEW_LINE DEDENT if - x in tDict and - x != VList [ j ] : NEW_LINE INDENT out . add ( tuple ( sorted ( [ VList [ i ] , VList [ j ] , - x ] ) ) ) NEW_LINE DEDENT DEDENT DEDENT return out NEW_LINE DEDENT def threeSum1 ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT n1dict = { } NEW_LINE for i in nums : NEW_LINE INDENT n1dict [ i ] = n1dict . get ( i , 0 ) + 1 NEW_LINE DEDENT out = set ( ) NEW_LINE nums = sorted ( n1dict . keys ( ) ) NEW_LINE if 0 in n1dict : NEW_LINE INDENT if n1dict [ 0 ] > 2 : NEW_LINE INDENT out . add ( tuple ( [ 0 , 0 , 0 ] ) ) NEW_LINE DEDENT n1dict [ 0 ] = 1 NEW_LINE DEDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT if n1dict [ nums [ i ] ] > 1 and - 2 * nums [ i ] in n1dict : NEW_LINE INDENT out . add ( tuple ( sorted ( [ nums [ i ] , nums [ i ] , - 2 * nums [ i ] ] ) ) ) NEW_LINE n1dict [ nums [ i ] ] = 1 NEW_LINE DEDENT if nums [ i ] / - 2 in n1dict and n1dict [ nums [ i ] / - 2 ] > 1 : NEW_LINE INDENT out . add ( tuple ( sorted ( [ nums [ i ] , int ( nums [ i ] / - 2 ) , int ( nums [ i ] / - 2 ) ] ) ) ) NEW_LINE n1dict [ nums [ i ] / - 2 ] = 1 NEW_LINE DEDENT n1dict [ nums [ i ] ] -= 1 NEW_LINE for j in range ( i + 1 , len ( nums ) ) : NEW_LINE INDENT element = nums [ j ] + nums [ i ] NEW_LINE if element > 0 : NEW_LINE INDENT break NEW_LINE DEDENT n1dict [ nums [ j ] ] -= 1 NEW_LINE if - element in n1dict and n1dict [ - element ] > 0 : NEW_LINE INDENT out . add ( tuple ( sorted ( [ nums [ i ] , nums [ j ] , - element ] ) ) ) NEW_LINE DEDENT n1dict [ nums [ j ] ] += 1 NEW_LINE DEDENT n1dict [ nums [ i ] ] += 1 NEW_LINE DEDENT return sorted ( out ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT pos = defaultdict ( int ) NEW_LINE neg = defaultdict ( int ) NEW_LINE for n in nums : NEW_LINE INDENT if n >= 0 : NEW_LINE INDENT pos [ n ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT neg [ n ] += 1 NEW_LINE DEDENT DEDENT res = [ ] NEW_LINE if pos [ 0 ] >= 3 : NEW_LINE INDENT res . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT elif pos [ 0 ] == 0 : NEW_LINE INDENT pos . pop ( 0 ) NEW_LINE DEDENT ln = list ( neg . keys ( ) ) NEW_LINE lp = list ( pos . keys ( ) ) NEW_LINE for i , v1 in enumerate ( ln ) : NEW_LINE INDENT pos_copy = pos . copy ( ) NEW_LINE for j , v2 in enumerate ( lp ) : NEW_LINE INDENT v3 = - ( v1 + v2 ) NEW_LINE if v3 in pos_copy and ( v3 != v2 or pos_copy [ v3 ] > 1 ) : NEW_LINE INDENT res . append ( [ v1 , v2 , v3 ] ) NEW_LINE pos_copy . pop ( v2 ) NEW_LINE DEDENT elif v3 in neg and ( v3 != v1 or neg [ v3 ] > 1 ) : NEW_LINE INDENT res . append ( [ v1 , v2 , v3 ] ) NEW_LINE DEDENT DEDENT neg . pop ( v1 ) NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT positiveNums = [ ] NEW_LINE negativeNums = [ ] NEW_LINE numCount = { } NEW_LINE numZeroes = 0 NEW_LINE for num in nums : NEW_LINE INDENT if num == 0 : NEW_LINE INDENT numZeroes += 1 NEW_LINE continue NEW_LINE DEDENT if num in numCount : NEW_LINE INDENT numCount [ num ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if num > 0 : NEW_LINE INDENT positiveNums . append ( num ) NEW_LINE DEDENT else : NEW_LINE INDENT negativeNums . append ( num ) NEW_LINE DEDENT numCount [ num ] = 1 NEW_LINE DEDENT DEDENT print ( numCount ) NEW_LINE triplets = [ [ 0 , 0 , 0 ] ] if numZeroes >= 3 else [ ] NEW_LINE shorterList , longerList = ( negativeNums , positiveNums ) if positiveNums > negativeNums else ( positiveNums , negativeNums ) NEW_LINE if numZeroes > 0 : NEW_LINE INDENT for num in shorterList : NEW_LINE INDENT negativeOfNum = num * - 1 NEW_LINE if negativeOfNum in longerList : NEW_LINE INDENT triplets . append ( [ num , negativeOfNum , 0 ] ) NEW_LINE DEDENT DEDENT DEDENT for segmentedNums in [ positiveNums , negativeNums ] : NEW_LINE INDENT for i in range ( len ( segmentedNums ) - 1 ) : NEW_LINE INDENT first = segmentedNums [ i ] NEW_LINE for j in range ( i + 1 , len ( segmentedNums ) ) : NEW_LINE INDENT second = segmentedNums [ j ] NEW_LINE negativeSum = - 1 * ( first + second ) NEW_LINE if negativeSum in numCount : NEW_LINE INDENT triplets . append ( [ first , second , negativeSum ] ) NEW_LINE DEDENT DEDENT DEDENT for i in range ( len ( segmentedNums ) ) : NEW_LINE INDENT first = segmentedNums [ i ] NEW_LINE if numCount [ first ] >= 2 : NEW_LINE INDENT second = first NEW_LINE negativeSum = - 1 * ( first + second ) NEW_LINE if negativeSum in numCount : NEW_LINE INDENT triplets . append ( [ first , second , negativeSum ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return triplets NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : return [ ] NEW_LINE nums = sorted ( nums ) NEW_LINE nums = [ n for i , n in enumerate ( nums ) if nums [ i + 3 : i + 4 ] != [ n ] ] NEW_LINE d = { n : i for i , n in enumerate ( nums ) } NEW_LINE r = set ( ) NEW_LINE for i , x in enumerate ( nums ) : NEW_LINE INDENT if x > 0 : break NEW_LINE for j , y in enumerate ( nums [ i + 1 : ] ) : NEW_LINE INDENT if x + 2 * y > 0 : break NEW_LINE if - ( x + y ) in d and d [ - ( x + y ) ] > i + j + 1 : NEW_LINE INDENT r . add ( tuple ( sorted ( [ x , y , - ( x + y ) ] ) ) ) NEW_LINE DEDENT DEDENT DEDENT return r NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT results = [ ] NEW_LINE hashsets = [ set ( ) , set ( ) ] NEW_LINE duplicates = set ( ) NEW_LINE for n in nums : NEW_LINE INDENT if n == 0 and 0 in hashsets [ 1 ] and 0 in duplicates and len ( results ) == 0 : NEW_LINE INDENT results . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT if n < 0 : NEW_LINE INDENT if n in hashsets [ 0 ] : NEW_LINE INDENT duplicates . add ( n ) NEW_LINE DEDENT else : NEW_LINE INDENT hashsets [ 0 ] . add ( n ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if n in hashsets [ 1 ] : NEW_LINE INDENT duplicates . add ( n ) NEW_LINE DEDENT else : NEW_LINE INDENT hashsets [ 1 ] . add ( n ) NEW_LINE DEDENT DEDENT DEDENT sortedLists = [ sorted ( hashsets [ 0 ] ) , sorted ( hashsets [ 1 ] ) ] NEW_LINE for x in range ( len ( sortedLists [ 0 ] ) ) : NEW_LINE INDENT if sortedLists [ 0 ] [ x ] in duplicates : NEW_LINE INDENT if - 2 * sortedLists [ 0 ] [ x ] in hashsets [ 1 ] : NEW_LINE INDENT results . append ( [ sortedLists [ 0 ] [ x ] , sortedLists [ 0 ] [ x ] , - 2 * sortedLists [ 0 ] [ x ] ] ) NEW_LINE DEDENT DEDENT for y in range ( x + 1 , len ( sortedLists [ 0 ] ) ) : NEW_LINE INDENT if - ( sortedLists [ 0 ] [ x ] + sortedLists [ 0 ] [ y ] ) in hashsets [ 1 ] : NEW_LINE INDENT results . append ( [ sortedLists [ 0 ] [ x ] , sortedLists [ 0 ] [ y ] , - sortedLists [ 0 ] [ x ] - sortedLists [ 0 ] [ y ] ] ) NEW_LINE DEDENT DEDENT DEDENT for x in range ( len ( sortedLists [ 1 ] ) ) : NEW_LINE INDENT if sortedLists [ 1 ] [ x ] in duplicates : NEW_LINE INDENT if - 2 * sortedLists [ 1 ] [ x ] in hashsets [ 0 ] : NEW_LINE INDENT results . append ( [ - 2 * sortedLists [ 1 ] [ x ] , sortedLists [ 1 ] [ x ] , sortedLists [ 1 ] [ x ] ] ) NEW_LINE DEDENT DEDENT for y in range ( x + 1 , len ( sortedLists [ 1 ] ) ) : NEW_LINE INDENT if - ( sortedLists [ 1 ] [ x ] + sortedLists [ 1 ] [ y ] ) in hashsets [ 0 ] : NEW_LINE INDENT results . append ( [ - sortedLists [ 1 ] [ x ] - sortedLists [ 1 ] [ y ] , sortedLists [ 1 ] [ x ] , sortedLists [ 1 ] [ y ] ] ) NEW_LINE DEDENT DEDENT DEDENT return results NEW_LINE DEDENT DEDENT
from typing import List , Set , Tuple NEW_LINE import collections NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT size = len ( nums ) NEW_LINE if size < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT ret : List [ List [ int ] ] = [ ] NEW_LINE nums = sorted ( nums ) NEW_LINE unique = set ( nums ) NEW_LINE index1 = 0 NEW_LINE prev1 = None NEW_LINE while index1 <= size - 3 : NEW_LINE INDENT val1 = nums [ index1 ] NEW_LINE index1 += 1 NEW_LINE if val1 == prev1 : NEW_LINE INDENT continue NEW_LINE DEDENT prev1 = val1 NEW_LINE if val1 >= 0 : NEW_LINE INDENT if val1 == 0 and nums [ index1 ] == 0 and nums [ index1 + 1 ] == 0 : NEW_LINE INDENT ret . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT break NEW_LINE DEDENT index2 = index1 NEW_LINE prev2 = None NEW_LINE while index2 < size - 1 : NEW_LINE INDENT val2 = nums [ index2 ] NEW_LINE index2 += 1 NEW_LINE val3 = - ( val1 + val2 ) NEW_LINE if val3 < val2 : NEW_LINE INDENT break NEW_LINE DEDENT if val2 == prev2 : NEW_LINE INDENT continue NEW_LINE DEDENT prev2 = val2 NEW_LINE if val3 not in unique : NEW_LINE INDENT continue NEW_LINE DEDENT if val2 == val3 : NEW_LINE INDENT if index2 >= len ( nums ) or val2 != nums [ index2 ] : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT ret . append ( [ val1 , val2 , val3 ] ) NEW_LINE DEDENT DEDENT return [ list ( x ) for x in ret ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : [ int ] ) -> [ [ int ] ] : NEW_LINE INDENT result = [ ] NEW_LINE neg_list = [ ] NEW_LINE pos_list = [ ] NEW_LINE zero_num = 0 NEW_LINE for n in nums : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT zero_num = zero_num + 1 NEW_LINE DEDENT elif n > 0 : NEW_LINE INDENT pos_list . append ( n ) NEW_LINE DEDENT else : NEW_LINE INDENT neg_list . append ( n ) NEW_LINE DEDENT DEDENT pos_list . sort ( ) NEW_LINE neg_list . sort ( ) NEW_LINE pos_set = set ( pos_list ) NEW_LINE neg_set = set ( neg_list ) NEW_LINE if zero_num >= 3 : NEW_LINE INDENT result . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT if zero_num > 0 : NEW_LINE INDENT for neg in neg_set : NEW_LINE INDENT if - neg in pos_set : NEW_LINE INDENT result . append ( [ neg , 0 , - neg ] ) NEW_LINE DEDENT DEDENT DEDENT for pos in pos_set : NEW_LINE INDENT for neg in neg_set : NEW_LINE INDENT if - 2 * neg > pos : NEW_LINE INDENT continue NEW_LINE DEDENT if - ( pos + neg ) in neg_set : NEW_LINE INDENT if - ( pos + neg ) == neg : NEW_LINE INDENT if neg_list . count ( neg ) < 2 : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT result . append ( [ pos , neg , - ( pos + neg ) ] ) NEW_LINE DEDENT DEDENT DEDENT for neg in neg_set : NEW_LINE INDENT for pos in pos_set : NEW_LINE INDENT if 2 * pos > - neg : NEW_LINE INDENT continue NEW_LINE DEDENT if - ( pos + neg ) in pos_set : NEW_LINE INDENT if - ( pos + neg ) == pos : NEW_LINE INDENT if pos_list . count ( pos ) < 2 : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT result . append ( [ pos , neg , - ( pos + neg ) ] ) NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
import itertools NEW_LINE class Solution : NEW_LINE INDENT NEW_LINE def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT ans = set ( ) NEW_LINE if len ( nums ) < 3 : return ans NEW_LINE if nums . count ( 0 ) >= 3 : ans . add ( ( 0 , 0 , 0 ) ) NEW_LINE nums_set = set ( nums ) NEW_LINE numMax , numMin = max ( nums_set ) , min ( nums_set ) NEW_LINE if numMax <= 0 or numMin >= 0 : return ans NEW_LINE setP = set ( num for num in nums_set if ( num > 0 and num <= - 2 * numMin ) ) NEW_LINE setN = set ( num for num in nums_set if ( num < 0 and num >= - 2 * numMax ) ) NEW_LINE count = collections . Counter ( nums ) NEW_LINE for numP in setP : NEW_LINE INDENT for numN in setN : NEW_LINE INDENT numD = - numP - numN NEW_LINE if numD in nums_set : NEW_LINE INDENT val = tuple ( sorted ( [ numD , numP , numN ] ) ) NEW_LINE if val . count ( numD ) <= count [ numD ] and val . count ( numP ) <= count [ numP ] and val . count ( numN ) <= count [ numN ] : NEW_LINE INDENT ans . add ( val ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT NEW_LINE ndict = { } NEW_LINE for n in nums : NEW_LINE INDENT if n not in ndict : ndict [ n ] = 0 NEW_LINE ndict [ n ] += 1 NEW_LINE DEDENT len_nums = len ( nums ) NEW_LINE ite_nums = 0 NEW_LINE output = { } NEW_LINE while ite_nums < len_nums - 2 : NEW_LINE INDENT a = - nums [ ite_nums ] NEW_LINE ndict [ nums [ ite_nums ] ] -= 1 NEW_LINE if ndict [ nums [ ite_nums ] ] == 0 : NEW_LINE INDENT del ndict [ nums [ ite_nums ] ] NEW_LINE DEDENT for n in ndict : NEW_LINE INDENT if a - n in ndict : NEW_LINE INDENT if a - n != n : NEW_LINE INDENT arr = [ - a , n , a - n ] NEW_LINE arr . sort ( ) NEW_LINE output [ ( arr [ 0 ] , arr [ 1 ] , arr [ 2 ] ) ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT if ndict [ a - n ] > 1 : NEW_LINE INDENT arr = [ - a , n , a - n ] NEW_LINE arr . sort ( ) NEW_LINE output [ ( arr [ 0 ] , arr [ 1 ] , arr [ 2 ] ) ] = 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT ite_nums += 1 NEW_LINE DEDENT output_arr = [ ] NEW_LINE for o in output : NEW_LINE INDENT output_arr . append ( [ o [ 0 ] , o [ 1 ] , o [ 2 ] ] ) NEW_LINE DEDENT return output_arr NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums ) : NEW_LINE INDENT nums . sort ( ) NEW_LINE dic = collections . defaultdict ( int ) NEW_LINE for n in nums : dic [ n ] += 1 NEW_LINE res = set ( ) NEW_LINE for i , n in enumerate ( nums [ : - 2 ] ) : NEW_LINE INDENT dic [ n ] -= 1 NEW_LINE if dic [ n ] == 0 : del dic [ n ] NEW_LINE rest = dic . keys ( ) NEW_LINE for a in rest : NEW_LINE INDENT if - n - a in rest and ( - n - a != a or dic [ a ] > 1 ) : NEW_LINE INDENT res . add ( tuple ( sorted ( [ n , a , - n - a ] ) ) ) NEW_LINE DEDENT DEDENT DEDENT return [ list ( tri ) for tri in res ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE dic = collections . defaultdict ( int ) NEW_LINE for n in nums : dic [ n ] += 1 NEW_LINE res = set ( ) NEW_LINE for i , n in enumerate ( nums [ : - 2 ] ) : NEW_LINE INDENT dic [ n ] -= 1 NEW_LINE if dic [ n ] == 0 : del dic [ n ] NEW_LINE rest = dic . keys ( ) NEW_LINE for a in rest : NEW_LINE INDENT if - n - a in rest and ( - n - a != a or dic [ a ] > 1 ) : NEW_LINE INDENT res . add ( tuple ( sorted ( [ n , a , - n - a ] ) ) ) NEW_LINE DEDENT DEDENT DEDENT return [ list ( tri ) for tri in res ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = [ ] NEW_LINE nums . sort ( ) NEW_LINE length = len ( nums ) NEW_LINE for i in range ( length - 2 ) : NEW_LINE INDENT if ( i > 0 and nums [ i ] == nums [ i - 1 ] ) : NEW_LINE INDENT continue NEW_LINE DEDENT l = i + 1 NEW_LINE r = length - 1 NEW_LINE while l < r : NEW_LINE INDENT total = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if total < 0 : NEW_LINE INDENT l = l + 1 NEW_LINE DEDENT elif total > 0 : NEW_LINE INDENT r = r - 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) NEW_LINE while ( l < r and nums [ l ] == nums [ l + 1 ] ) : NEW_LINE INDENT l = l + 1 NEW_LINE DEDENT while ( l < r and nums [ r ] == nums [ r - 1 ] ) : NEW_LINE INDENT r = r - 1 NEW_LINE DEDENT l = l + 1 NEW_LINE r = r - 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT triplets = [ ] NEW_LINE nums . sort ( ) NEW_LINE for k in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if k > 0 and nums [ k ] == nums [ k - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT i = k + 1 NEW_LINE j = len ( nums ) - 1 NEW_LINE while i < j : NEW_LINE INDENT result = nums [ i ] + nums [ j ] + nums [ k ] NEW_LINE if result > 0 : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT elif result < 0 : NEW_LINE INDENT i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT triplets . append ( [ nums [ i ] , nums [ j ] , nums [ k ] ] ) NEW_LINE while i < j and nums [ i ] == nums [ i + 1 ] : NEW_LINE INDENT i += 1 NEW_LINE DEDENT while j > i and nums [ j ] == nums [ j - 1 ] : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT i += 1 NEW_LINE j -= 1 NEW_LINE DEDENT DEDENT DEDENT return triplets NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT output = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 1 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT low , high = i + 1 , len ( nums ) - 1 NEW_LINE while low < high : NEW_LINE INDENT total = nums [ i ] + nums [ low ] + nums [ high ] NEW_LINE if total < 0 : NEW_LINE INDENT low += 1 NEW_LINE DEDENT elif total > 0 : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT output . append ( ( nums [ i ] , nums [ low ] , nums [ high ] ) ) NEW_LINE if nums [ low ] == nums [ low + 1 ] : NEW_LINE INDENT low += 1 NEW_LINE DEDENT while low < high and nums [ high ] == nums [ high - 1 ] : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT low += 1 NEW_LINE high -= 1 NEW_LINE DEDENT DEDENT DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE res = [ ] NEW_LINE for i , val in enumerate ( nums ) : NEW_LINE INDENT if i > 0 and val == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT left = i + 1 NEW_LINE right = len ( nums ) - 1 NEW_LINE while left < right : NEW_LINE INDENT sums = nums [ left ] + nums [ right ] + val NEW_LINE if sums == 0 : NEW_LINE INDENT res . append ( [ val , nums [ left ] , nums [ right ] ] ) NEW_LINE temp = nums [ left ] NEW_LINE while left < right and nums [ left ] == temp : NEW_LINE INDENT left += 1 NEW_LINE DEDENT temp = nums [ right ] NEW_LINE while left < right and nums [ right ] == temp : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT elif sums > 0 : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT left += 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i == 0 or nums [ i ] != nums [ i - 1 ] : NEW_LINE INDENT left = i + 1 NEW_LINE right = len ( nums ) - 1 NEW_LINE while left < right : NEW_LINE INDENT currSum = nums [ i ] + nums [ left ] + nums [ right ] NEW_LINE if currSum < 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT elif currSum > 0 : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ left ] , nums [ right ] ] ) NEW_LINE right -= 1 NEW_LINE left += 1 NEW_LINE while left < right and nums [ left ] == nums [ left - 1 ] : NEW_LINE INDENT left += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res , dups = set ( ) , set ( ) NEW_LINE seen = { } NEW_LINE for i , val1 in enumerate ( nums ) : NEW_LINE INDENT if val1 not in dups : NEW_LINE INDENT dups . add ( val1 ) NEW_LINE for j , val2 in enumerate ( nums [ i + 1 : ] ) : NEW_LINE INDENT complement = - val1 - val2 NEW_LINE if complement in seen and seen [ complement ] == i : NEW_LINE INDENT res . add ( tuple ( sorted ( ( val1 , val2 , complement ) ) ) ) NEW_LINE DEDENT seen [ val2 ] = i NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if nums is None or len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT nums . sort ( ) NEW_LINE solutions = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i == 0 or nums [ i - 1 ] != nums [ i ] : NEW_LINE INDENT lo = i + 1 NEW_LINE hi = len ( nums ) - 1 NEW_LINE while lo < hi : NEW_LINE INDENT sum = nums [ i ] + nums [ lo ] + nums [ hi ] NEW_LINE if sum < 0 : NEW_LINE INDENT lo += 1 NEW_LINE DEDENT elif sum > 0 : NEW_LINE INDENT hi -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT solutions . append ( [ nums [ i ] , nums [ lo ] , nums [ hi ] ] ) NEW_LINE lo += 1 NEW_LINE hi -= 1 NEW_LINE while lo < hi and nums [ lo ] == nums [ lo - 1 ] : NEW_LINE INDENT lo += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return solutions NEW_LINE return solutions NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE length = len ( nums ) NEW_LINE result = [ ] NEW_LINE for i in range ( length - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l = i + 1 NEW_LINE r = length - 1 NEW_LINE while l < r : NEW_LINE INDENT sum = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if sum < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif sum > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) NEW_LINE while l < length - 1 and nums [ l ] == nums [ l + 1 ] : l += 1 NEW_LINE while r > 0 and nums [ r ] == nums [ r - 1 ] : r -= 1 NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l , r = i + 1 , len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT s = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if s < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif s > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( ( nums [ i ] , nums [ l ] , nums [ r ] ) ) NEW_LINE while l < r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while l < r and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT l += 1 ; r -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = [ ] NEW_LINE target = 0 NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT j = i + 1 NEW_LINE k = len ( nums ) - 1 NEW_LINE while j < k : NEW_LINE INDENT local_sum = nums [ i ] + nums [ j ] + nums [ k ] NEW_LINE if local_sum < target : NEW_LINE INDENT j += 1 NEW_LINE DEDENT elif local_sum > target : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ j ] , nums [ k ] ] ) NEW_LINE while j < k and nums [ j ] == nums [ j + 1 ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT while j < k and nums [ k ] == nums [ k - 1 ] : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT j += 1 NEW_LINE k -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT ans , dup = set ( ) , set ( ) NEW_LINE seen = { } NEW_LINE for i , val1 in enumerate ( nums ) : NEW_LINE INDENT if val1 not in dup : NEW_LINE INDENT dup . add ( val1 ) NEW_LINE for j , val2 in enumerate ( nums [ i + 1 : ] ) : NEW_LINE INDENT rem = - val1 - val2 NEW_LINE if rem in seen and seen [ rem ] == i : NEW_LINE INDENT ans . add ( tuple ( sorted ( ( val1 , rem , val2 ) ) ) ) NEW_LINE DEDENT seen [ val2 ] = i NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT length = len ( nums ) NEW_LINE if length < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT nums . sort ( ) NEW_LINE ret = [ ] NEW_LINE for i in range ( length - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l , r = i + 1 , length - 1 NEW_LINE while l < r : NEW_LINE INDENT total = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if total == 0 : NEW_LINE INDENT ret . append ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE while l < r and nums [ l ] == nums [ l - 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while l < r and nums [ r ] == nums [ r + 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT elif total < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT return ret NEW_LINE DEDENT DEDENT
import collections NEW_LINE class Solution : NEW_LINE INDENT def twoSum ( self , nums : List [ int ] , target : int ) -> List [ List [ int ] ] : NEW_LINE INDENT ans = set ( ) NEW_LINE dictionary = set ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if ( nums [ i ] in dictionary ) : NEW_LINE INDENT ans . add ( nums [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT dictionary . add ( target - nums [ i ] ) NEW_LINE DEDENT DEDENT res = [ ] NEW_LINE for i in list ( ans ) : NEW_LINE INDENT res . append ( [ - target , i , target - i ] ) NEW_LINE DEDENT return ( res ) NEW_LINE DEDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE ans = [ ] NEW_LINE seen = set ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if ( nums [ i ] in seen ) : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT seen . add ( nums [ i ] ) NEW_LINE ans += self . twoSum ( nums [ i + 1 : ] , - nums [ i ] ) NEW_LINE DEDENT DEDENT return ( ans ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT dup , res = set ( ) , set ( ) NEW_LINE seen = { } NEW_LINE for i , v1 in enumerate ( nums ) : NEW_LINE INDENT if v1 in dup : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT dup . add ( v1 ) NEW_LINE for j in range ( i + 1 , len ( nums ) ) : NEW_LINE INDENT v2 = nums [ j ] NEW_LINE comp = ( v1 + v2 ) * - 1 NEW_LINE if comp in seen and seen [ comp ] == i : NEW_LINE INDENT res . add ( tuple ( sorted ( [ v1 , v2 , comp ] ) ) ) NEW_LINE DEDENT seen [ v2 ] = i NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE res = [ ] NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l , r = i + 1 , len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT s = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if s == 0 : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) NEW_LINE while l < r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while l < r and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT elif s > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT l = len ( nums ) NEW_LINE if l < 3 : return [ ] NEW_LINE result = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( l - 2 ) : NEW_LINE INDENT if ( i == 0 or nums [ i ] != nums [ i - 1 ] ) : NEW_LINE INDENT j , k = i + 1 , l - 1 NEW_LINE while j < k : NEW_LINE INDENT sum = nums [ i ] + nums [ j ] + nums [ k ] NEW_LINE if sum == 0 : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ j ] , nums [ k ] ] ) NEW_LINE while ( j < k ) and nums [ j ] == nums [ j + 1 ] : j += 1 NEW_LINE while ( j < k ) and nums [ k ] == nums [ k - 1 ] : k -= 1 NEW_LINE j , k = j + 1 , k - 1 NEW_LINE DEDENT elif sum > 0 : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT j += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE l = len ( nums ) NEW_LINE result = [ ] NEW_LINE for i in range ( l - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT left = i + 1 NEW_LINE right = l - 1 NEW_LINE while left < right : NEW_LINE INDENT total = nums [ i ] + nums [ left ] + nums [ right ] NEW_LINE if total < 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT elif total > 0 : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ left ] , nums [ right ] ] ) NEW_LINE while left < right and nums [ left ] == nums [ left + 1 ] : NEW_LINE INDENT left += 1 NEW_LINE DEDENT while left < right and nums [ right ] == nums [ right - 1 ] : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT left += 1 NEW_LINE right -= 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT lst = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT val = nums [ l ] + nums [ r ] + nums [ i ] NEW_LINE if val == 0 : NEW_LINE INDENT lst . append ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) NEW_LINE while l < r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while l < r and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT elif val < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT return lst NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE prev = float ( 'inf' ) NEW_LINE result = [ ] NEW_LINE for i in range ( 0 , len ( nums ) - 2 ) : NEW_LINE INDENT num_pass = nums [ i ] NEW_LINE if num_pass == prev : NEW_LINE INDENT continue NEW_LINE DEDENT prev = num_pass NEW_LINE rem = nums [ i + 1 : ] NEW_LINE res = self . twosum ( num_pass , rem ) NEW_LINE if len ( res ) > 0 : NEW_LINE INDENT for j in res : NEW_LINE INDENT result . append ( j ) NEW_LINE DEDENT DEDENT DEDENT final = set ( result ) NEW_LINE return list ( final ) NEW_LINE DEDENT def twosum ( self , num , rem ) : NEW_LINE INDENT h = { } NEW_LINE a = set ( ) NEW_LINE for i in rem : NEW_LINE INDENT lis = [ ] NEW_LINE val = i + num NEW_LINE tar = 0 - val NEW_LINE if tar in h : NEW_LINE INDENT lis . append ( num ) NEW_LINE lis . append ( tar ) NEW_LINE lis . append ( i ) NEW_LINE a . add ( tuple ( lis ) ) NEW_LINE DEDENT h [ i ] = 1 NEW_LINE DEDENT return list ( a ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = [ ] NEW_LINE length = len ( nums ) NEW_LINE nums = sorted ( nums , reverse = False ) NEW_LINE for i in range ( length - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : continue NEW_LINE l = i + 1 ; r = length - 1 NEW_LINE while l < r : NEW_LINE INDENT total = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if total == 0 : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) NEW_LINE l = l + 1 NEW_LINE while l < r and nums [ l ] == nums [ l - 1 ] : l = l + 1 NEW_LINE r = r - 1 NEW_LINE while l < r and nums [ r ] == nums [ r + 1 ] : r = r - 1 NEW_LINE DEDENT elif total > 0 : NEW_LINE INDENT r = r - 1 NEW_LINE DEDENT else : NEW_LINE INDENT l = l + 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT NEW_LINE out = [ ] NEW_LINE nums . sort ( ) NEW_LINE N = len ( nums ) NEW_LINE for curr in range ( N - 2 ) : NEW_LINE INDENT if curr and nums [ curr ] == nums [ curr - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT low , high = curr + 1 , N - 1 NEW_LINE while low < high : NEW_LINE INDENT if nums [ low ] + nums [ high ] > - nums [ curr ] : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT elif nums [ low ] + nums [ high ] < - nums [ curr ] : NEW_LINE INDENT low += 1 NEW_LINE DEDENT else : NEW_LINE INDENT out . append ( [ nums [ curr ] , nums [ low ] , nums [ high ] ] ) NEW_LINE while low < N - 1 and nums [ low ] == nums [ low + 1 ] : NEW_LINE INDENT low += 1 NEW_LINE DEDENT while high > 1 and nums [ high ] == nums [ high - 1 ] : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT low += 1 NEW_LINE high -= 1 NEW_LINE DEDENT DEDENT DEDENT return out NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums = sorted ( nums ) NEW_LINE result = [ ] NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT j , k = i + 1 , len ( nums ) - 1 NEW_LINE while j < k : NEW_LINE INDENT s = nums [ i ] + nums [ j ] + nums [ k ] NEW_LINE if s < 0 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT elif s > 0 : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ j ] , nums [ k ] ] ) NEW_LINE while j < k and nums [ j ] == nums [ j + 1 ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT while k < j and nums [ k ] == nums [ k - 1 ] : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT j += 1 NEW_LINE k -= 1 NEW_LINE DEDENT DEDENT DEDENT return ( result ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT ans = set ( ) NEW_LINE nums = sorted ( nums ) NEW_LINE for i , x in enumerate ( nums ) : NEW_LINE INDENT if i > 0 and x == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT waited = set ( ) NEW_LINE for j , y in enumerate ( nums [ i + 1 : ] ) : NEW_LINE INDENT if y in waited : NEW_LINE INDENT ans . add ( ( x , y , - x - y ) ) NEW_LINE DEDENT else : NEW_LINE INDENT waited . add ( - x - y ) NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE N , result = len ( nums ) , [ ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT target = nums [ i ] * - 1 NEW_LINE s , e = i + 1 , N - 1 NEW_LINE while s < e : NEW_LINE INDENT if nums [ s ] + nums [ e ] == target : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ s ] , nums [ e ] ] ) NEW_LINE s = s + 1 NEW_LINE while s < e and nums [ s ] == nums [ s - 1 ] : NEW_LINE INDENT s = s + 1 NEW_LINE DEDENT DEDENT elif nums [ s ] + nums [ e ] < target : NEW_LINE INDENT s = s + 1 NEW_LINE DEDENT else : NEW_LINE INDENT e = e - 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums ) : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT nums . sort ( ) NEW_LINE trios = { } NEW_LINE i = 0 NEW_LINE l = len ( nums ) NEW_LINE while i < l - 2 : NEW_LINE INDENT while nums [ i ] == nums [ i - 1 ] and i < l - 2 and i : NEW_LINE INDENT i += 1 NEW_LINE DEDENT j = i + 1 NEW_LINE k = l - 1 NEW_LINE if nums [ k ] < 0 : NEW_LINE INDENT break NEW_LINE DEDENT if nums [ i ] + nums [ j ] > 0 : NEW_LINE INDENT break NEW_LINE DEDENT while j < k : NEW_LINE INDENT s = nums [ i ] + nums [ j ] + nums [ k ] NEW_LINE if s > 0 : NEW_LINE INDENT while j < k : NEW_LINE INDENT k -= 1 NEW_LINE if nums [ k ] < nums [ k + 1 ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT elif s < 0 : NEW_LINE INDENT while j < k : NEW_LINE INDENT j += 1 NEW_LINE if nums [ j ] > nums [ j - 1 ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT trios [ ( nums [ i ] , nums [ j ] , nums [ k ] ) ] = 1 NEW_LINE while j < k : NEW_LINE INDENT k -= 1 NEW_LINE if nums [ k ] < nums [ k + 1 ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT DEDENT i = i + 1 NEW_LINE DEDENT return trios . keys ( ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT triplets , dups = set ( ) , set ( ) NEW_LINE for i , val1 in enumerate ( nums ) : NEW_LINE INDENT seen = set ( ) NEW_LINE if val1 not in dups : NEW_LINE INDENT dups . add ( val1 ) NEW_LINE for val2 in nums [ i + 1 : ] : NEW_LINE INDENT complement = - 1 * ( val1 + val2 ) NEW_LINE if complement in seen : NEW_LINE INDENT triplet = sorted ( [ val1 , val2 , complement ] ) NEW_LINE triplets . add ( tuple ( triplet ) ) NEW_LINE DEDENT seen . add ( val2 ) NEW_LINE DEDENT DEDENT DEDENT return triplets NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE output = [ ] NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT start = i + 1 NEW_LINE end = len ( nums ) - 1 NEW_LINE if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT while ( start < end ) : NEW_LINE INDENT sum = nums [ i ] + nums [ start ] + nums [ end ] NEW_LINE if sum == 0 : NEW_LINE INDENT output . append ( [ nums [ i ] , nums [ start ] , nums [ end ] ] ) NEW_LINE start += 1 NEW_LINE end -= 1 NEW_LINE while ( start < end and nums [ start ] == nums [ start - 1 ] ) : NEW_LINE INDENT start += 1 NEW_LINE DEDENT while ( start < end and nums [ end ] == nums [ end + 1 ] ) : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT elif sum < 0 : NEW_LINE INDENT start += 1 NEW_LINE DEDENT elif sum > 0 : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE res = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i != 0 and nums [ i ] == nums [ i - 1 ] : continue NEW_LINE target = - nums [ i ] NEW_LINE l , r = i + 1 , len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT if nums [ l ] + nums [ r ] == target : NEW_LINE INDENT res . append ( ( nums [ i ] , nums [ l ] , nums [ r ] ) ) NEW_LINE while l < r and nums [ l ] == nums [ l + 1 ] : l += 1 NEW_LINE while l < r and nums [ r ] == nums [ r - 1 ] : r -= 1 NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT elif nums [ l ] + nums [ r ] < target : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT threesums = list ( ) NEW_LINE size = len ( nums ) NEW_LINE nums . sort ( ) NEW_LINE u = set ( ) NEW_LINE for i in range ( size - 1 ) : NEW_LINE INDENT if i > 1 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT s = set ( ) NEW_LINE m = nums [ i ] NEW_LINE for j in range ( i + 1 , size ) : NEW_LINE INDENT n = nums [ j ] NEW_LINE t = - ( m + n ) NEW_LINE if n in s and ( m , n ) not in u : NEW_LINE INDENT threesums . append ( [ m , n , t ] ) NEW_LINE u . add ( ( m , n ) ) NEW_LINE DEDENT else : NEW_LINE INDENT s . add ( t ) NEW_LINE DEDENT DEDENT DEDENT return threesums NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE res = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i != 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT target = - 1 * nums [ i ] NEW_LINE l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT if nums [ l ] + nums [ r ] == target : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) NEW_LINE while l < r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while l < r and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT elif nums [ l ] + nums [ r ] < target : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE output = [ ] NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT start = i + 1 NEW_LINE end = len ( nums ) - 1 NEW_LINE if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT while ( start < end ) : NEW_LINE INDENT sum = nums [ i ] + nums [ start ] + nums [ end ] NEW_LINE if sum == 0 : NEW_LINE INDENT output . append ( [ nums [ i ] , nums [ start ] , nums [ end ] ] ) NEW_LINE start += 1 NEW_LINE end -= 1 NEW_LINE while ( start < end and nums [ start ] == nums [ start - 1 ] ) : NEW_LINE INDENT start += 1 NEW_LINE DEDENT while ( start < end and nums [ end ] == nums [ end + 1 ] ) : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT elif sum < 0 : NEW_LINE INDENT start += 1 NEW_LINE DEDENT elif sum > 0 : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT triplets = [ ] NEW_LINE nums . sort ( ) NEW_LINE if len ( nums ) < 3 : NEW_LINE INDENT return triplets NEW_LINE DEDENT for i in range ( 0 , len ( nums ) - 2 ) : NEW_LINE INDENT if nums [ i ] == nums [ i - 1 ] and i > 0 : NEW_LINE INDENT continue NEW_LINE DEDENT left = i + 1 NEW_LINE right = len ( nums ) - 1 NEW_LINE while left < right : NEW_LINE INDENT currentSum = nums [ i ] + nums [ left ] + nums [ right ] NEW_LINE if currentSum == 0 : NEW_LINE INDENT triplets . append ( [ nums [ i ] , nums [ left ] , nums [ right ] ] ) NEW_LINE left += 1 NEW_LINE right -= 1 NEW_LINE while nums [ right ] == nums [ right + 1 ] and right > left : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT while nums [ left ] == nums [ left - 1 ] and left < right : NEW_LINE INDENT left += 1 NEW_LINE DEDENT DEDENT if currentSum > 0 : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT if currentSum < 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT DEDENT DEDENT return triplets NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT NEW_LINE nums . sort ( ) NEW_LINE res = [ ] NEW_LINE for i in range ( 0 , len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l , r = i + 1 , len ( nums ) - 1 NEW_LINE target = - nums [ i ] NEW_LINE while l < r : NEW_LINE INDENT if nums [ l ] + nums [ r ] == target : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) NEW_LINE while l < r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while l < r and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT l , r = l + 1 , r - 1 NEW_LINE DEDENT elif nums [ l ] + nums [ r ] > target : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE finalList = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT if nums [ i ] > 0 : NEW_LINE INDENT break NEW_LINE DEDENT start = i + 1 NEW_LINE end = len ( nums ) - 1 NEW_LINE while start < end : NEW_LINE INDENT if nums [ start ] + nums [ end ] + nums [ i ] == 0 : NEW_LINE INDENT finalList . append ( [ nums [ i ] , nums [ start ] , nums [ end ] ] ) NEW_LINE start = start + 1 NEW_LINE end = end - 1 NEW_LINE while start < end and nums [ start ] == nums [ start - 1 ] : NEW_LINE INDENT start = start + 1 NEW_LINE DEDENT DEDENT elif nums [ start ] + nums [ end ] + nums [ i ] > 0 : NEW_LINE INDENT end = end - 1 NEW_LINE DEDENT else : NEW_LINE INDENT start = start + 1 NEW_LINE DEDENT DEDENT DEDENT return finalList NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = set ( ) NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT return res NEW_LINE DEDENT if i == 0 or nums [ i - 1 ] != nums [ i ] : NEW_LINE INDENT seen = set ( ) NEW_LINE j = i + 1 NEW_LINE while j < len ( nums ) : NEW_LINE INDENT complement = - nums [ i ] - nums [ j ] NEW_LINE if complement in seen : NEW_LINE INDENT res . add ( ( nums [ i ] , nums [ j ] , complement ) ) NEW_LINE if j < len ( nums ) - 1 and nums [ j ] == nums [ j + 1 ] : NEW_LINE INDENT j += 1 NEW_LINE continue NEW_LINE DEDENT DEDENT seen . add ( nums [ j ] ) NEW_LINE j += 1 NEW_LINE DEDENT DEDENT DEDENT return list ( res ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE res = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i != 0 and nums [ i ] == nums [ i - 1 ] : continue NEW_LINE target = - nums [ i ] NEW_LINE l , r = i + 1 , len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT if nums [ l ] + nums [ r ] == target : NEW_LINE INDENT res . append ( ( nums [ i ] , nums [ l ] , nums [ r ] ) ) NEW_LINE while l < r and nums [ l ] == nums [ l + 1 ] : l += 1 NEW_LINE while l < r and nums [ r ] == nums [ r - 1 ] : r -= 1 NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT elif nums [ l ] + nums [ r ] < target : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT NEW_LINE nums . sort ( ) NEW_LINE res = [ ] NEW_LINE for i in range ( 0 , len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l , r = i + 1 , len ( nums ) - 1 NEW_LINE target = - nums [ i ] NEW_LINE while l < r : NEW_LINE INDENT if nums [ l ] + nums [ r ] == target : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) NEW_LINE while l < r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while l < r and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT l , r = l + 1 , r - 1 NEW_LINE DEDENT elif nums [ l ] + nums [ r ] > target : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT n = len ( nums ) NEW_LINE nums . sort ( ) NEW_LINE ans = set ( ) NEW_LINE i = 0 NEW_LINE def twosum ( j ) : NEW_LINE INDENT seen = set ( ) NEW_LINE while j < n : NEW_LINE INDENT rem = - nums [ i ] - nums [ j ] NEW_LINE if rem in seen : NEW_LINE INDENT ans . add ( ( nums [ i ] , rem , nums [ j ] ) ) NEW_LINE while j + 1 < n and nums [ j ] == nums [ j + 1 ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT DEDENT seen . add ( nums [ j ] ) NEW_LINE j += 1 NEW_LINE DEDENT DEDENT for i in range ( n - 1 ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT break NEW_LINE DEDENT if i == 0 or nums [ i - 1 ] != nums [ i ] : NEW_LINE INDENT twosum ( i + 1 ) NEW_LINE DEDENT DEDENT return ans NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE N , result = len ( nums ) , [ ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT target = nums [ i ] * - 1 NEW_LINE s , e = i + 1 , N - 1 NEW_LINE while s < e : NEW_LINE INDENT if nums [ s ] + nums [ e ] == target : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ s ] , nums [ e ] ] ) NEW_LINE s = s + 1 NEW_LINE while s < e and nums [ s ] == nums [ s - 1 ] : NEW_LINE INDENT s = s + 1 NEW_LINE DEDENT DEDENT elif nums [ s ] + nums [ e ] < target : NEW_LINE INDENT s = s + 1 NEW_LINE DEDENT else : NEW_LINE INDENT e = e - 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
def twoSum ( nums , target ) : NEW_LINE INDENT NEW_LINE solutions = [ ] NEW_LINE remaining_set = set ( ) NEW_LINE for index , num in enumerate ( nums ) : NEW_LINE INDENT new_target = target - num NEW_LINE if target - num in remaining_set : NEW_LINE INDENT solutions . append ( [ num , target - num ] ) NEW_LINE DEDENT remaining_set . add ( num ) NEW_LINE DEDENT return list ( solutions ) NEW_LINE DEDENT class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT count_dict = { } NEW_LINE for i in nums : NEW_LINE INDENT if i in count_dict : count_dict [ i ] += 1 NEW_LINE else : count_dict [ i ] = 1 NEW_LINE DEDENT new_nums = [ ] NEW_LINE for i in count_dict : NEW_LINE INDENT for count in range ( min ( 3 , count_dict [ i ] ) ) : NEW_LINE INDENT new_nums . append ( i ) NEW_LINE DEDENT DEDENT nums = new_nums NEW_LINE success_set = set ( ) NEW_LINE for iA , A in enumerate ( nums ) : NEW_LINE INDENT new_list = nums [ iA + 1 : ] NEW_LINE other_good_numbers = twoSum ( new_list , - A ) NEW_LINE for i in other_good_numbers : NEW_LINE INDENT new_tuple = [ A , i [ 0 ] , i [ 1 ] ] NEW_LINE new_tuple . sort ( ) NEW_LINE success_set . add ( tuple ( new_tuple ) ) NEW_LINE DEDENT DEDENT return list ( success_set ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums = sorted ( nums ) NEW_LINE result = list ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i == 0 or ( i > 0 and nums [ i ] != nums [ i - 1 ] ) : NEW_LINE INDENT low = i + 1 NEW_LINE high = len ( nums ) - 1 NEW_LINE sm = - nums [ i ] NEW_LINE while low < high : NEW_LINE INDENT if nums [ low ] + nums [ high ] == sm : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ low ] , nums [ high ] ] ) NEW_LINE while low < high and nums [ low ] == nums [ low + 1 ] : NEW_LINE INDENT low += 1 NEW_LINE DEDENT while low < high and nums [ high ] == nums [ high - 1 ] : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT low += 1 NEW_LINE high -= 1 NEW_LINE DEDENT elif nums [ low ] + nums [ high ] > sm : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT low += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT break NEW_LINE DEDENT if i == 0 or nums [ i - 1 ] != nums [ i ] : NEW_LINE INDENT seen = set ( ) NEW_LINE j = i + 1 NEW_LINE while j < len ( nums ) : NEW_LINE INDENT complement = - nums [ i ] - nums [ j ] NEW_LINE if complement in seen : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ j ] , complement ] ) NEW_LINE while j + 1 < len ( nums ) and nums [ j ] == nums [ j + 1 ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT DEDENT seen . add ( nums [ j ] ) NEW_LINE j += 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT out = set ( ) NEW_LINE dups = set ( ) NEW_LINE for i , num1 in enumerate ( nums ) : NEW_LINE INDENT checked = set ( ) NEW_LINE if num1 not in dups : NEW_LINE INDENT dups . add ( num1 ) NEW_LINE for j , num2 in enumerate ( nums [ i + 1 : ] ) : NEW_LINE INDENT compl = - num1 - num2 NEW_LINE if compl in checked : NEW_LINE INDENT out . add ( tuple ( sorted ( ( num1 , num2 , compl ) ) ) ) NEW_LINE DEDENT checked . add ( num2 ) NEW_LINE DEDENT DEDENT DEDENT return out NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT out = set ( ) NEW_LINE dups = set ( ) NEW_LINE for i , num1 in enumerate ( nums ) : NEW_LINE INDENT checked = set ( ) NEW_LINE if num1 not in dups : NEW_LINE INDENT dups . add ( num1 ) NEW_LINE for j , num2 in enumerate ( nums [ i + 1 : ] ) : NEW_LINE INDENT compl = - num1 - num2 NEW_LINE if compl in checked : NEW_LINE INDENT out . add ( tuple ( sorted ( ( num1 , num2 , compl ) ) ) ) NEW_LINE DEDENT checked . add ( num2 ) NEW_LINE DEDENT DEDENT DEDENT return out NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT elif sum ( [ i ** 2 for i in nums ] ) == 0 : NEW_LINE INDENT return [ [ 0 , 0 , 0 ] ] NEW_LINE DEDENT nums . sort ( ) NEW_LINE result = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT summ = nums [ l ] + nums [ r ] NEW_LINE if summ == - nums [ i ] : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) NEW_LINE l += 1 NEW_LINE while l < r and nums [ l ] == nums [ l - 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT elif summ + nums [ i ] < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT triplets = [ ] NEW_LINE nums . sort ( ) NEW_LINE if len ( nums ) < 3 : NEW_LINE INDENT return triplets NEW_LINE DEDENT for i in range ( 0 , len ( nums ) - 2 ) : NEW_LINE INDENT if nums [ i ] == nums [ i - 1 ] and i > 0 : NEW_LINE INDENT continue NEW_LINE DEDENT left = i + 1 NEW_LINE right = len ( nums ) - 1 NEW_LINE while left < right : NEW_LINE INDENT currentSum = nums [ i ] + nums [ left ] + nums [ right ] NEW_LINE if currentSum == 0 : NEW_LINE INDENT triplets . append ( [ nums [ i ] , nums [ left ] , nums [ right ] ] ) NEW_LINE left += 1 NEW_LINE right -= 1 NEW_LINE while nums [ right ] == nums [ right + 1 ] and right > left : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT while nums [ left ] == nums [ left - 1 ] and left < right : NEW_LINE INDENT left += 1 NEW_LINE DEDENT DEDENT if currentSum > 0 : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT if currentSum < 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT DEDENT DEDENT return triplets NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE N , result = len ( nums ) , [ ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT target = nums [ i ] * - 1 NEW_LINE s , e = i + 1 , N - 1 NEW_LINE while s < e : NEW_LINE INDENT if nums [ s ] + nums [ e ] == target : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ s ] , nums [ e ] ] ) NEW_LINE s = s + 1 NEW_LINE while s < e and nums [ s ] == nums [ s - 1 ] : NEW_LINE INDENT s = s + 1 NEW_LINE DEDENT DEDENT elif nums [ s ] + nums [ e ] < target : NEW_LINE INDENT s = s + 1 NEW_LINE DEDENT else : NEW_LINE INDENT e = e - 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
def three_sum ( nums ) : NEW_LINE INDENT res = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE i_complement = 0 - nums [ i ] NEW_LINE while l < r : NEW_LINE INDENT if ( nums [ l ] + nums [ r ] ) == i_complement : NEW_LINE INDENT vals = [ nums [ x ] for x in ( i , l , r ) ] NEW_LINE res . append ( vals ) NEW_LINE while l < r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while l < r and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT elif ( nums [ l ] + nums [ r ] ) < i_complement : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT return three_sum ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if nums is None or len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT ret = [ ] NEW_LINE N = len ( nums ) NEW_LINE nums . sort ( ) NEW_LINE for i in range ( N - 3 + 1 ) : NEW_LINE INDENT if i > 0 and nums [ i - 1 ] == nums [ i ] : NEW_LINE INDENT continue NEW_LINE DEDENT start = i + 1 NEW_LINE end = N - 1 NEW_LINE while start < end : NEW_LINE INDENT a = nums [ i ] NEW_LINE b = nums [ start ] NEW_LINE c = nums [ end ] NEW_LINE total = a + b + c NEW_LINE if total == 0 : NEW_LINE INDENT ret . append ( [ a , b , c ] ) NEW_LINE start += 1 NEW_LINE end -= 1 NEW_LINE while start < end and nums [ start ] == nums [ start - 1 ] : NEW_LINE INDENT start += 1 NEW_LINE DEDENT while start < end and nums [ end ] == nums [ end + 1 ] : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT elif total < 0 : NEW_LINE INDENT start += 1 NEW_LINE DEDENT else : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l , r = i + 1 , len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT s = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if s < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif s > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( ( nums [ i ] , nums [ l ] , nums [ r ] ) ) NEW_LINE while l < r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while l < r and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT l += 1 ; r -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , input : [ int ] ) -> [ [ int ] ] : NEW_LINE INDENT if len ( input ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT input . sort ( ) NEW_LINE ans = set ( ) NEW_LINE for i , v in enumerate ( input ) : NEW_LINE INDENT if v > 0 : NEW_LINE INDENT break ; NEW_LINE DEDENT if i == 0 or input [ i - 1 ] != input [ i ] : NEW_LINE INDENT self . twoSum ( input , - v , i , ans ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT def twoSum ( self , input : [ int ] , target : int , curIdx : int , ans ) -> [ int ] : NEW_LINE INDENT ans_dict = { } NEW_LINE for i , v in enumerate ( input ) : NEW_LINE INDENT ans_dict [ target - v ] = i NEW_LINE DEDENT for i , v in enumerate ( input ) : NEW_LINE INDENT if v in ans_dict : NEW_LINE INDENT if ( i != curIdx ) and ( ans_dict [ v ] != curIdx ) and ans_dict [ v ] != i : NEW_LINE INDENT _3sum = [ - target , input [ i ] , input [ ans_dict [ v ] ] ] NEW_LINE _3sum . sort ( ) NEW_LINE ans . add ( tuple ( _3sum ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT res = [ ] NEW_LINE nums . sort ( ) NEW_LINE i = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT i += 1 NEW_LINE continue NEW_LINE DEDENT a = nums [ i ] NEW_LINE low , high = i + 1 , len ( nums ) - 1 NEW_LINE while low < high and a + nums [ low ] <= 0 : NEW_LINE INDENT if a + nums [ low ] + nums [ high ] == 0 : NEW_LINE INDENT res . append ( [ a , nums [ low ] , nums [ high ] ] ) NEW_LINE high -= 1 NEW_LINE while low < high and nums [ high ] == nums [ high + 1 ] : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT DEDENT elif a + nums [ low ] + nums [ high ] > 0 : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT low += 1 NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT return res NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , input : [ int ] ) -> [ [ int ] ] : NEW_LINE INDENT if len ( input ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT input . sort ( ) NEW_LINE ans = set ( ) NEW_LINE for i , v in enumerate ( input ) : NEW_LINE INDENT if v > 0 : NEW_LINE INDENT break ; NEW_LINE DEDENT if i == 0 or input [ i - 1 ] != input [ i ] : NEW_LINE INDENT self . twoSum ( input , - v , i , ans ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT def twoSum ( self , input : [ int ] , target : int , curIdx : int , ans ) -> [ int ] : NEW_LINE INDENT ans_dict = { } NEW_LINE for i , v in enumerate ( input ) : NEW_LINE INDENT ans_dict [ target - v ] = i NEW_LINE DEDENT for i , v in enumerate ( input ) : NEW_LINE INDENT if v in ans_dict : NEW_LINE INDENT if ( i != curIdx ) and ( ans_dict [ v ] != curIdx ) and ans_dict [ v ] != i : NEW_LINE INDENT _3sum = [ - target , input [ i ] , input [ ans_dict [ v ] ] ] NEW_LINE _3sum . sort ( ) NEW_LINE ans . add ( tuple ( _3sum ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res , dup = set ( ) , set ( ) NEW_LINE for i , val1 in enumerate ( nums ) : NEW_LINE INDENT seen = set ( ) NEW_LINE if val1 in dup : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT dup . add ( val1 ) NEW_LINE for j in range ( i + 1 , len ( nums ) ) : NEW_LINE INDENT val2 = nums [ j ] NEW_LINE comp = ( val2 + val1 ) * - 1 NEW_LINE if comp in seen : NEW_LINE INDENT res . add ( tuple ( sorted ( [ val1 , val2 , comp ] ) ) ) NEW_LINE DEDENT seen . add ( val2 ) NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums = sorted ( nums ) NEW_LINE l = len ( nums ) NEW_LINE ret = [ ] NEW_LINE for i in range ( l ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT t = - nums [ i ] NEW_LINE k = l - 1 NEW_LINE j = i + 1 NEW_LINE while ( j < k ) : NEW_LINE INDENT if j > i + 1 and nums [ j ] == nums [ j - 1 ] : NEW_LINE INDENT j += 1 NEW_LINE continue NEW_LINE DEDENT if nums [ j ] + nums [ k ] > t : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT elif nums [ j ] + nums [ k ] < t : NEW_LINE INDENT j += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ret . append ( [ nums [ i ] , nums [ j ] , nums [ k ] ] ) NEW_LINE j += 1 NEW_LINE DEDENT DEDENT DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def twoSum ( self , nums : List [ int ] , target : int , extra : int ) -> List [ List [ int ] ] : NEW_LINE INDENT results = [ ] NEW_LINE l , r = 0 , len ( nums ) - 1 NEW_LINE nums . append ( None ) NEW_LINE while l < r : NEW_LINE INDENT x = nums [ l ] + nums [ r ] NEW_LINE if x == target : NEW_LINE INDENT results . append ( ( extra , nums [ l ] , nums [ r ] ) ) NEW_LINE while nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT l += 1 NEW_LINE DEDENT elif x < target : NEW_LINE INDENT while nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT while nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT r -= 1 NEW_LINE DEDENT DEDENT return results NEW_LINE DEDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE results = [ ] NEW_LINE last = None NEW_LINE for i , x in enumerate ( nums ) : NEW_LINE INDENT if last == x : NEW_LINE INDENT continue NEW_LINE DEDENT results . extend ( self . twoSum ( nums [ i + 1 : ] , - x , x ) ) NEW_LINE last = x NEW_LINE DEDENT return results NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = set ( ) NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT return res NEW_LINE DEDENT if i == 0 or nums [ i - 1 ] != nums [ i ] : NEW_LINE INDENT seen = set ( ) NEW_LINE j = i + 1 NEW_LINE while j < len ( nums ) : NEW_LINE INDENT complement = - nums [ i ] - nums [ j ] NEW_LINE if complement in seen : NEW_LINE INDENT res . add ( ( nums [ i ] , nums [ j ] , complement ) ) NEW_LINE DEDENT seen . add ( nums [ j ] ) NEW_LINE j += 1 NEW_LINE DEDENT DEDENT DEDENT return list ( res ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = [ ] NEW_LINE nums_sorted = sorted ( nums ) NEW_LINE for i in range ( len ( nums_sorted ) ) : NEW_LINE INDENT if nums_sorted [ i ] > 0 : NEW_LINE INDENT break NEW_LINE DEDENT elif i == 0 or nums_sorted [ i ] != nums_sorted [ i - 1 ] : NEW_LINE INDENT self . twoSum ( nums_sorted , i , res ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT def twoSum ( self , nums , i , res ) : NEW_LINE INDENT seen = set ( ) NEW_LINE j = i + 1 NEW_LINE while j < len ( nums ) : NEW_LINE INDENT diff = - nums [ i ] - nums [ j ] NEW_LINE if diff in seen : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ j ] , diff ] ) NEW_LINE while j + 1 < len ( nums ) and nums [ j ] == nums [ j + 1 ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT DEDENT seen . add ( nums [ j ] ) NEW_LINE j += 1 NEW_LINE NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT arr = sorted ( nums ) NEW_LINE res = [ ] NEW_LINE for i in range ( len ( arr ) - 2 ) : NEW_LINE INDENT if i > 0 and arr [ i ] == arr [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT j = i + 1 NEW_LINE k = len ( arr ) - 1 NEW_LINE while j < k : NEW_LINE INDENT if arr [ i ] + arr [ j ] + arr [ k ] < 0 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT elif arr [ i ] + arr [ j ] + arr [ k ] > 0 : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( [ arr [ i ] , arr [ j ] , arr [ k ] ] ) NEW_LINE while j < k and arr [ j ] == arr [ j + 1 ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT while j < k and arr [ k ] == arr [ k - 1 ] : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT j += 1 NEW_LINE k -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
from collections import Counter , OrderedDict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE if n < 3 : return [ ] NEW_LINE ans = [ ] NEW_LINE counter = OrderedDict ( sorted ( Counter ( nums ) . items ( ) , key = lambda x : x [ 0 ] ) ) NEW_LINE arr = list ( counter . keys ( ) ) NEW_LINE for i , e1 in enumerate ( arr ) : NEW_LINE INDENT if e1 > 0 : break NEW_LINE counter [ e1 ] -= 1 NEW_LINE j , k = i , len ( arr ) - 1 NEW_LINE while j <= k : NEW_LINE INDENT e2 , e3 = arr [ j ] , arr [ k ] NEW_LINE if e1 + e2 > 0 : break NEW_LINE if counter [ e2 ] <= 0 or e2 + e3 < - e1 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT elif counter [ e3 ] <= 0 or e2 + e3 > - e1 : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT if j != k or counter [ e2 ] > 1 : NEW_LINE INDENT ans . append ( [ e1 , e2 , e3 ] ) NEW_LINE DEDENT j += 1 NEW_LINE k -= 1 NEW_LINE DEDENT DEDENT counter [ e1 ] += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT ans = set ( ) NEW_LINE nums . sort ( ) NEW_LINE i = 0 NEW_LINE if len ( nums ) < 3 : NEW_LINE INDENT return ans NEW_LINE DEDENT while i < len ( nums ) and nums [ i ] <= 0 : NEW_LINE INDENT c = nums [ i ] * - 1 NEW_LINE l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT temp_ans = nums [ l ] + nums [ r ] NEW_LINE if temp_ans < c : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif temp_ans > c : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans . add ( ( c * - 1 , nums [ l ] , nums [ r ] ) ) NEW_LINE while l < r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while l < r and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE numElems = len ( nums ) NEW_LINE result = [ ] NEW_LINE fixedIndex = 0 NEW_LINE while fixedIndex < numElems - 2 : NEW_LINE INDENT fixedNum = nums [ fixedIndex ] NEW_LINE firstIndex = fixedIndex + 1 NEW_LINE endIndex = numElems - 1 NEW_LINE while firstIndex < endIndex : NEW_LINE INDENT firstNum = nums [ firstIndex ] NEW_LINE endNum = nums [ endIndex ] NEW_LINE currentSum = fixedNum + firstNum + endNum NEW_LINE increaseSum = True NEW_LINE decreaseSum = True NEW_LINE if ( currentSum == 0 ) : NEW_LINE INDENT result . append ( [ fixedNum , firstNum , endNum ] ) NEW_LINE DEDENT elif currentSum > 0 : NEW_LINE INDENT increaseSum = False NEW_LINE DEDENT else : NEW_LINE INDENT decreaseSum = False NEW_LINE DEDENT while increaseSum and firstIndex < numElems and nums [ firstIndex ] == firstNum : NEW_LINE INDENT firstIndex += 1 NEW_LINE DEDENT while decreaseSum and endIndex >= 0 and nums [ endIndex ] == endNum : NEW_LINE INDENT endIndex -= 1 NEW_LINE DEDENT DEDENT while fixedIndex < numElems - 2 and nums [ fixedIndex ] == fixedNum : NEW_LINE INDENT fixedIndex += 1 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT ans = set ( ) NEW_LINE nums . sort ( ) NEW_LINE i = 0 NEW_LINE if len ( nums ) < 3 : NEW_LINE INDENT return ans NEW_LINE DEDENT while i < len ( nums ) and nums [ i ] <= 0 : NEW_LINE INDENT c = nums [ i ] * - 1 NEW_LINE l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT temp_ans = nums [ l ] + nums [ r ] NEW_LINE if temp_ans < c : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif temp_ans > c : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans . add ( ( c * - 1 , nums [ l ] , nums [ r ] ) ) NEW_LINE while l < r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while l < r and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT outputs = [ ] NEW_LINE nums . sort ( ) NEW_LINE lastIndex = len ( nums ) - 1 NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if ( i > 0 and nums [ i ] == nums [ i - 1 ] ) : NEW_LINE INDENT continue NEW_LINE DEDENT j = i + 1 NEW_LINE k = lastIndex NEW_LINE while ( j < k ) : NEW_LINE INDENT if ( j > i + 1 and nums [ j ] == nums [ j - 1 ] ) : NEW_LINE INDENT j += 1 NEW_LINE continue NEW_LINE DEDENT if ( k < lastIndex and nums [ k ] == nums [ k + 1 ] ) : NEW_LINE INDENT k -= 1 NEW_LINE continue NEW_LINE DEDENT s = nums [ i ] + nums [ j ] + nums [ k ] NEW_LINE if ( s == 0 ) : NEW_LINE INDENT outputs . append ( [ nums [ i ] , nums [ j ] , nums [ k ] ] ) NEW_LINE j += 1 NEW_LINE k -= 1 NEW_LINE DEDENT elif ( s > 0 ) : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT j += 1 NEW_LINE DEDENT DEDENT DEDENT return outputs NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE ret = set ( [ ] ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE if i > 1 and nums [ i ] == nums [ i - 1 ] : continue NEW_LINE while l < r : NEW_LINE INDENT if nums [ l ] + nums [ r ] == - nums [ i ] : NEW_LINE INDENT ret . add ( ( nums [ i ] , nums [ l ] , nums [ r ] ) ) NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE while l < r and nums [ l ] == nums [ l - 1 ] : l += 1 NEW_LINE while r > l and nums [ r ] == nums [ r + 1 ] : r -= 1 NEW_LINE DEDENT elif nums [ l ] + nums [ r ] < - nums [ i ] : NEW_LINE INDENT l += 1 NEW_LINE while l < r and nums [ l ] == nums [ l - 1 ] : l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE while r > l and nums [ r ] == nums [ r + 1 ] : r -= 1 NEW_LINE DEDENT DEDENT DEDENT ret = list ( ret ) NEW_LINE return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = [ ] NEW_LINE n = len ( nums ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT head = i + 1 NEW_LINE end = n - 1 NEW_LINE while head < end : NEW_LINE INDENT if nums [ i ] + nums [ head ] + nums [ end ] == 0 : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ head ] , nums [ end ] ] ) NEW_LINE head += 1 NEW_LINE while head < end and nums [ head ] == nums [ head - 1 ] : NEW_LINE INDENT head += 1 NEW_LINE DEDENT end -= 1 NEW_LINE while head < end and nums [ end ] == nums [ end + 1 ] : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT elif nums [ i ] + nums [ head ] + nums [ end ] < 0 : NEW_LINE INDENT head += 1 NEW_LINE while head < end and nums [ head ] == nums [ head - 1 ] : NEW_LINE INDENT head += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT end -= 1 NEW_LINE while head < end and nums [ end ] == nums [ end + 1 ] : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT outputs = [ ] NEW_LINE nums . sort ( ) NEW_LINE lastIndex = len ( nums ) - 1 NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if ( i > 0 and nums [ i ] == nums [ i - 1 ] ) : NEW_LINE INDENT continue NEW_LINE DEDENT j = i + 1 NEW_LINE k = lastIndex NEW_LINE while ( j < k ) : NEW_LINE INDENT if ( j > i + 1 and nums [ j ] == nums [ j - 1 ] ) : NEW_LINE INDENT j += 1 NEW_LINE continue NEW_LINE DEDENT if ( k < lastIndex and nums [ k ] == nums [ k + 1 ] ) : NEW_LINE INDENT k -= 1 NEW_LINE continue NEW_LINE DEDENT s = nums [ i ] + nums [ j ] + nums [ k ] NEW_LINE if ( s == 0 ) : NEW_LINE INDENT outputs . append ( [ nums [ i ] , nums [ j ] , nums [ k ] ] ) NEW_LINE j += 1 NEW_LINE k -= 1 NEW_LINE DEDENT elif ( s > 0 ) : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT j += 1 NEW_LINE DEDENT DEDENT DEDENT return outputs NEW_LINE DEDENT DEDENT
from typing import List , Set , Tuple NEW_LINE import collections NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT c = collections . Counter ( nums ) NEW_LINE ret : Set [ Tuple [ int , int , int ] ] = set ( ) NEW_LINE for val1 in sorted ( c ) : NEW_LINE INDENT count1 = min ( 3 , c . pop ( val1 ) ) NEW_LINE if count1 == 3 and val1 + val1 + val1 == 0 : NEW_LINE INDENT ret . add ( ( val1 , val1 , val1 ) ) NEW_LINE DEDENT if count1 >= 2 : NEW_LINE INDENT s = val1 + val1 NEW_LINE if - s in c : NEW_LINE INDENT ret . add ( ( val1 , val1 , - s ) ) NEW_LINE DEDENT DEDENT for val2 , count2 in sorted ( c . items ( ) ) : NEW_LINE INDENT s = val1 + val2 NEW_LINE if - s in c : NEW_LINE INDENT if - s == val1 and count1 == 1 : NEW_LINE INDENT continue NEW_LINE DEDENT if - s == val2 and count2 == 1 : NEW_LINE INDENT continue NEW_LINE DEDENT ret . add ( tuple ( sorted ( [ val1 , val2 , - s ] ) ) ) NEW_LINE DEDENT DEDENT DEDENT return [ list ( x ) for x in ret ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT output = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT break NEW_LINE DEDENT if i == 0 or nums [ i - 1 ] != nums [ i ] : NEW_LINE INDENT seen = set ( ) NEW_LINE j = i + 1 NEW_LINE while j < len ( nums ) : NEW_LINE INDENT if 0 - nums [ i ] - nums [ j ] in seen : NEW_LINE INDENT output . append ( [ nums [ i ] , 0 - nums [ i ] - nums [ j ] , nums [ j ] ] ) NEW_LINE DEDENT while j + 1 < len ( nums ) and nums [ j ] == nums [ j + 1 ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT if nums [ j ] == nums [ j - 1 ] and j != i + 1 and nums [ j ] * 2 + nums [ i ] == 0 : NEW_LINE INDENT output . append ( [ nums [ i ] , nums [ j ] , nums [ j ] ] ) NEW_LINE DEDENT seen . add ( nums [ j ] ) NEW_LINE j += 1 NEW_LINE DEDENT DEDENT DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT sums = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT cur = nums [ i ] NEW_LINE target = 0 - cur NEW_LINE l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT if l > i + 1 and nums [ l - 1 ] == nums [ l ] : NEW_LINE INDENT l += 1 NEW_LINE continue NEW_LINE DEDENT elif r < len ( nums ) - 1 and nums [ r ] == nums [ r + 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE continue NEW_LINE DEDENT val = nums [ l ] + nums [ r ] NEW_LINE if val == target : NEW_LINE INDENT sums . append ( [ cur , nums [ l ] , nums [ r ] ] ) NEW_LINE l += 1 NEW_LINE DEDENT elif val < target : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT return sums NEW_LINE DEDENT DEDENT
class Solution ( object ) : NEW_LINE INDENT def threeSum ( self , nums ) : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = [ ] NEW_LINE n = len ( nums ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT head = i + 1 NEW_LINE end = n - 1 NEW_LINE while head < end : NEW_LINE INDENT if nums [ i ] + nums [ head ] + nums [ end ] == 0 : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ head ] , nums [ end ] ] ) NEW_LINE head += 1 NEW_LINE while head < end and nums [ head ] == nums [ head - 1 ] : NEW_LINE INDENT head += 1 NEW_LINE DEDENT end -= 1 NEW_LINE while head < end and nums [ end ] == nums [ end + 1 ] : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT elif nums [ i ] + nums [ head ] + nums [ end ] < 0 : NEW_LINE INDENT head += 1 NEW_LINE while head < end and nums [ head ] == nums [ head - 1 ] : NEW_LINE INDENT head += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT end -= 1 NEW_LINE while head < end and nums [ end ] == nums [ end + 1 ] : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT from collections import defaultdict NEW_LINE nums . sort ( ) NEW_LINE def k_sum ( nums , goal , k ) : NEW_LINE INDENT res = [ ] NEW_LINE if k == 2 : NEW_LINE INDENT l = 0 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT tmp_s = nums [ l ] + nums [ r ] NEW_LINE if l > 0 and nums [ l ] == nums [ l - 1 ] : NEW_LINE INDENT l += 1 NEW_LINE continue NEW_LINE DEDENT if r < len ( nums ) - 1 and nums [ r ] == nums [ r + 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE continue NEW_LINE DEDENT if tmp_s == goal : NEW_LINE INDENT res . append ( [ nums [ l ] , nums [ r ] ] ) NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT elif tmp_s < goal : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT for i in range ( len ( nums ) - k + 1 ) : NEW_LINE INDENT if i == 0 or ( i >= 1 and nums [ i ] != nums [ i - 1 ] ) : NEW_LINE INDENT tmp_out = k_sum ( nums [ ( i + 1 ) : : ] , goal - nums [ i ] , k - 1 ) NEW_LINE print ( tmp_out ) NEW_LINE for ele in tmp_out : NEW_LINE INDENT res . append ( [ nums [ i ] ] + ele ) NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT return k_sum ( nums , 0 , 3 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def twoSum ( self , nums : List [ int ] , target ) -> List [ List [ int ] ] : NEW_LINE INDENT ret = [ ] NEW_LINE d = { } NEW_LINE for idx , num in enumerate ( nums ) : NEW_LINE INDENT if num in d : NEW_LINE INDENT d [ num ] . append ( idx ) NEW_LINE DEDENT else : NEW_LINE INDENT d [ num ] = [ idx ] NEW_LINE DEDENT DEDENT prev_value = None NEW_LINE for idx , num in enumerate ( nums ) : NEW_LINE INDENT if ( prev_value is not None and prev_value == num ) : NEW_LINE INDENT continue NEW_LINE DEDENT prev_value = num NEW_LINE compliment = target - num NEW_LINE if compliment in d and d [ compliment ] [ - 1 ] > idx : NEW_LINE INDENT ret . append ( [ idx , d [ compliment ] [ - 1 ] ] ) NEW_LINE DEDENT DEDENT return ret NEW_LINE DEDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT ret = [ ] NEW_LINE sorted_nums = sorted ( nums ) NEW_LINE i = 0 NEW_LINE while len ( sorted_nums ) - i > 2 : NEW_LINE INDENT a = self . twoSum ( sorted_nums [ i + 1 : ] , 0 - sorted_nums [ i ] ) NEW_LINE for l in a : NEW_LINE INDENT ret . append ( [ sorted_nums [ i ] , sorted_nums [ l [ 0 ] + i + 1 ] , sorted_nums [ l [ 1 ] + i + 1 ] ] ) NEW_LINE DEDENT i += 1 NEW_LINE while i < len ( sorted_nums ) and sorted_nums [ i ] == sorted_nums [ i - 1 ] : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def modifiedTwoSum ( self , nums , target ) : NEW_LINE INDENT existingNumbers = collections . defaultdict ( lambda : 0 ) NEW_LINE solutions = set ( ) NEW_LINE for n in nums : NEW_LINE INDENT existingNumbers [ n ] += 1 NEW_LINE DEDENT for n in nums : NEW_LINE INDENT needed = target - n NEW_LINE if ( needed < n ) : NEW_LINE INDENT continue NEW_LINE DEDENT elif ( needed == n and existingNumbers [ needed ] >= 2 ) : NEW_LINE INDENT solutions . add ( ( n , needed ) ) NEW_LINE DEDENT elif ( needed > n and existingNumbers [ needed ] > 0 ) : NEW_LINE INDENT solutions . add ( ( n , needed ) ) NEW_LINE DEDENT DEDENT return solutions NEW_LINE DEDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT def incrementCounter ( ) : NEW_LINE INDENT nonlocal i NEW_LINE if i == 0 : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT else : NEW_LINE INDENT currentNumber = sortedNumbers [ i ] NEW_LINE while ( i < len ( sortedNumbers ) and currentNumber == sortedNumbers [ i ] ) : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT DEDENT DEDENT sortedNumbers = sorted ( nums ) NEW_LINE i = 0 NEW_LINE results = set ( ) NEW_LINE while i < len ( sortedNumbers ) : NEW_LINE INDENT newTarget = - sortedNumbers [ i ] NEW_LINE newNumbers = self . modifiedTwoSum ( sortedNumbers [ i + 1 : ] , newTarget ) NEW_LINE for pair in newNumbers : NEW_LINE INDENT x = pair [ 0 ] NEW_LINE y = pair [ 1 ] NEW_LINE results . add ( ( sortedNumbers [ i ] , x , y ) ) NEW_LINE DEDENT incrementCounter ( ) NEW_LINE DEDENT return results NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT def three_sum_internal ( nums , target , idx , results ) : NEW_LINE INDENT left , right = idx , len ( nums ) - 1 NEW_LINE while left < right and left < len ( nums ) and right >= 0 : NEW_LINE INDENT curr_sum = nums [ left ] + nums [ right ] - target NEW_LINE if curr_sum == 0 : NEW_LINE INDENT results . append ( [ - target , nums [ left ] , nums [ right ] ] ) NEW_LINE while left + 1 < len ( nums ) - 1 and nums [ left ] == nums [ left + 1 ] : NEW_LINE INDENT left += 1 NEW_LINE DEDENT while right - 1 >= 0 and nums [ right ] == nums [ right - 1 ] : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT left += 1 NEW_LINE right -= 1 NEW_LINE DEDENT elif curr_sum < 0 : NEW_LINE INDENT while left + 1 < len ( nums ) - 1 and nums [ left ] == nums [ left + 1 ] : NEW_LINE INDENT left += 1 NEW_LINE DEDENT left += 1 NEW_LINE DEDENT else : NEW_LINE INDENT while right - 1 >= 0 and nums [ right ] == nums [ right - 1 ] : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT right -= 1 NEW_LINE DEDENT DEDENT DEDENT nums . sort ( ) NEW_LINE print ( nums ) NEW_LINE results = [ ] NEW_LINE i = 0 NEW_LINE while i < len ( nums ) - 2 : NEW_LINE INDENT curr_num = nums [ i ] NEW_LINE target = - curr_num NEW_LINE three_sum_internal ( nums , target , i + 1 , results ) NEW_LINE while i + 1 < len ( nums ) - 2 and nums [ i ] == nums [ i + 1 ] : NEW_LINE INDENT i += 1 NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return results NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE triplets = [ ] NEW_LINE for idx , num in enumerate ( nums ) : NEW_LINE INDENT if idx > 0 and nums [ idx ] == nums [ idx - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT target = 0 - num NEW_LINE left = idx + 1 NEW_LINE right = len ( nums ) - 1 NEW_LINE while left < right : NEW_LINE INDENT while left < right and left < 0 and nums [ left ] == nums [ left - 1 ] : NEW_LINE INDENT left += 1 NEW_LINE DEDENT while left < right and right < len ( nums ) - 1 and nums [ right ] == nums [ right + 1 ] : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT curr_sum = nums [ left ] + nums [ right ] NEW_LINE if left < right : NEW_LINE INDENT if curr_sum == target : NEW_LINE INDENT triplets . append ( [ num , nums [ left ] , nums [ right ] ] ) NEW_LINE left += 1 NEW_LINE right -= 1 NEW_LINE DEDENT elif curr_sum > target : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT left += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return triplets NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE checked_a , checked_l , checked_r = set ( ) , set ( ) , set ( ) NEW_LINE solutions = set ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if nums [ i ] in checked_a : NEW_LINE INDENT continue NEW_LINE DEDENT checked_a . add ( nums [ i ] ) NEW_LINE checked_l , checked_r = set ( ) , set ( ) NEW_LINE l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT total = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if total < 0 : NEW_LINE INDENT while nums [ l ] in checked_l and l < r : NEW_LINE INDENT l += 1 NEW_LINE DEDENT checked_l . add ( nums [ l ] ) NEW_LINE DEDENT elif total > 0 : NEW_LINE INDENT while nums [ r ] in checked_r and l < r : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT checked_r . add ( nums [ r ] ) NEW_LINE DEDENT else : NEW_LINE INDENT solutions . add ( ( nums [ i ] , nums [ l ] , nums [ r ] ) ) NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT DEDENT DEDENT return solutions NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nitems = len ( nums ) NEW_LINE def twosum ( start , target ) : NEW_LINE INDENT numset = set ( [ ] ) NEW_LINE solset = set ( [ ] ) NEW_LINE for index in range ( start , nitems ) : NEW_LINE INDENT if target - nums [ index ] in numset : NEW_LINE INDENT li = sorted ( [ - target , target - nums [ index ] , nums [ index ] ] ) NEW_LINE solset . add ( tuple ( li ) ) NEW_LINE DEDENT numset . add ( nums [ index ] ) NEW_LINE DEDENT return solset NEW_LINE DEDENT sols = set ( [ ] ) NEW_LINE starts = set ( [ ] ) NEW_LINE for index in range ( nitems ) : NEW_LINE INDENT if nums [ index ] not in starts : NEW_LINE INDENT solset = twosum ( index + 1 , - nums [ index ] ) NEW_LINE sols = sols . union ( solset ) NEW_LINE starts . add ( nums [ index ] ) NEW_LINE DEDENT DEDENT return list ( sols ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE arr = [ ] NEW_LINE index1 = 0 NEW_LINE while index1 < len ( nums ) : NEW_LINE INDENT num1 = nums [ index1 ] NEW_LINE index2 = index1 + 1 NEW_LINE index3 = len ( nums ) - 1 NEW_LINE while index2 < index3 : NEW_LINE INDENT num2 = nums [ index2 ] NEW_LINE num3 = nums [ index3 ] NEW_LINE if num1 + num2 + num3 == 0 : NEW_LINE INDENT arr . append ( [ num1 , num2 , num3 ] ) NEW_LINE while index2 < len ( nums ) and nums [ index2 ] == num2 : NEW_LINE INDENT index2 += 1 NEW_LINE DEDENT while index3 >= 0 and nums [ index3 ] == num3 : NEW_LINE INDENT index3 -= 1 NEW_LINE DEDENT DEDENT elif num1 + num2 + num3 < 0 : NEW_LINE INDENT while index2 < len ( nums ) and nums [ index2 ] == num2 : NEW_LINE INDENT index2 += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT while index3 >= 0 and nums [ index3 ] == num3 : NEW_LINE INDENT index3 -= 1 NEW_LINE DEDENT DEDENT DEDENT while index1 < len ( nums ) and nums [ index1 ] == num1 : NEW_LINE INDENT index1 += 1 NEW_LINE DEDENT DEDENT return arr NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE checked_a , checked_l , checked_r = set ( ) , set ( ) , set ( ) NEW_LINE solutions = set ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if nums [ i ] in checked_a : NEW_LINE INDENT continue NEW_LINE DEDENT checked_a . add ( nums [ i ] ) NEW_LINE checked_l , checked_r = set ( ) , set ( ) NEW_LINE l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT total = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if total < 0 : NEW_LINE INDENT while nums [ l ] in checked_l and l < r : NEW_LINE INDENT l += 1 NEW_LINE DEDENT checked_l . add ( nums [ l ] ) NEW_LINE DEDENT elif total > 0 : NEW_LINE INDENT while nums [ r ] in checked_r and l < r : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT checked_r . add ( nums [ r ] ) NEW_LINE DEDENT else : NEW_LINE INDENT solutions . add ( ( nums [ i ] , nums [ l ] , nums [ r ] ) ) NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT DEDENT DEDENT return solutions NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = { } NEW_LINE checked = [ ] NEW_LINE nums . sort ( ) NEW_LINE for index , value in enumerate ( nums ) : NEW_LINE INDENT if value in checked : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT checked . append ( value ) NEW_LINE DEDENT serch_2_sum = nums [ : index ] + nums [ index + 1 : ] NEW_LINE target = - 1 * value NEW_LINE dict = { } NEW_LINE for i , v in enumerate ( serch_2_sum ) : NEW_LINE INDENT if target - v in dict : NEW_LINE INDENT triple = sorted ( [ value , v , target - v ] ) NEW_LINE tripl_str = "" . join ( [ str ( integer ) for integer in triple ] ) NEW_LINE if not tripl_str in res : NEW_LINE INDENT res [ tripl_str ] = triple NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT dict [ v ] = i NEW_LINE DEDENT DEDENT DEDENT return [ res [ key ] for key in res ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT output = set ( ) NEW_LINE from collections import Counter NEW_LINE nums_dict = Counter ( nums ) NEW_LINE def twoSum ( dic , total ) : NEW_LINE INDENT for i , j in dic . items ( ) : NEW_LINE INDENT if j : NEW_LINE INDENT rem = total - i NEW_LINE if rem == i : NEW_LINE INDENT if j > 1 : NEW_LINE INDENT output . add ( tuple ( sorted ( [ - 1 * total , i , i ] ) ) ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if dic . get ( rem , 0 ) > 0 : NEW_LINE INDENT output . add ( tuple ( sorted ( [ - 1 * total , i , rem ] ) ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT for k , v in nums_dict . items ( ) : NEW_LINE INDENT nums_dict [ k ] -= 1 NEW_LINE twoSum ( nums_dict , - 1 * k ) NEW_LINE nums_dict [ k ] += 1 NEW_LINE DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT ls = [ ] NEW_LINE used = set ( ) NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT if num in used : NEW_LINE INDENT continue NEW_LINE DEDENT visited = { } NEW_LINE for j , x in enumerate ( nums ) : NEW_LINE INDENT if x in used or i == j : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT if x not in visited : NEW_LINE INDENT if - num - x not in visited : NEW_LINE INDENT visited [ - num - x ] = ( x , j ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if visited [ x ] != None : NEW_LINE INDENT ls . append ( [ num , visited [ x ] [ 0 ] , x ] ) NEW_LINE visited [ x ] = None NEW_LINE DEDENT DEDENT DEDENT DEDENT used . add ( num ) NEW_LINE DEDENT return ls NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i > 0 and nums [ i - 1 ] == nums [ i ] : NEW_LINE INDENT continue NEW_LINE DEDENT if nums [ i ] > 0 : NEW_LINE INDENT break NEW_LINE DEDENT left , right = i + 1 , len ( nums ) - 1 NEW_LINE while left < right : NEW_LINE INDENT if left > i + 1 and nums [ left - 1 ] == nums [ left ] : NEW_LINE INDENT left += 1 NEW_LINE DEDENT elif right < len ( nums ) - 1 and nums [ right ] == nums [ right + 1 ] : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT if nums [ left ] + nums [ right ] + nums [ i ] == 0 : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ left ] , nums [ right ] ] ) NEW_LINE left += 1 NEW_LINE right -= 1 NEW_LINE DEDENT elif nums [ left ] + nums [ right ] + nums [ i ] < 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT else : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT maps = { } NEW_LINE length = len ( nums ) NEW_LINE nums = sorted ( nums , reverse = False ) NEW_LINE res = [ ] NEW_LINE for num in nums : NEW_LINE INDENT if num in maps . keys ( ) : maps [ num ] += 1 NEW_LINE else : maps [ num ] = 1 NEW_LINE DEDENT for i in range ( length ) : NEW_LINE INDENT a = nums [ i ] NEW_LINE if i > 0 and nums [ i ] == nums [ i - 1 ] : continue NEW_LINE maps [ a ] -= 1 NEW_LINE for j in range ( i + 1 , length ) : NEW_LINE INDENT b = nums [ j ] NEW_LINE if j > i + 1 and nums [ j ] == nums [ j - 1 ] : continue NEW_LINE maps [ b ] -= 1 NEW_LINE target = - a - b NEW_LINE if target >= b and target in maps and maps [ target ] >= 1 : NEW_LINE INDENT res . append ( list ( [ a , b , target ] ) ) NEW_LINE DEDENT maps [ b ] += 1 NEW_LINE DEDENT maps [ a ] += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT ret = set ( ) NEW_LINE arr = Counter ( nums ) NEW_LINE for x in nums [ 2 : ] : NEW_LINE INDENT arr [ x ] -= 1 NEW_LINE target = 0 - x NEW_LINE for key in arr : NEW_LINE INDENT if arr [ key ] > 0 and target - key in arr : NEW_LINE INDENT if ( target - key == key and arr [ key ] > 1 ) or ( target - key != key and arr [ target - key ] > 0 ) : NEW_LINE INDENT ret . add ( tuple ( sorted ( [ x , key , target - key ] ) ) ) NEW_LINE DEDENT DEDENT DEDENT arr [ x ] += 1 NEW_LINE DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums = sorted ( nums ) NEW_LINE res = [ ] NEW_LINE n = len ( nums ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i - 1 ] == nums [ i ] : NEW_LINE INDENT continue NEW_LINE DEDENT l = i + 1 NEW_LINE r = n - 1 NEW_LINE while ( l < r ) : NEW_LINE INDENT lst = [ nums [ i ] , nums [ l ] , nums [ r ] ] NEW_LINE if sum ( lst ) == 0 : NEW_LINE INDENT res . append ( lst ) NEW_LINE while l < n - 1 and nums [ l ] == nums [ l + 1 ] : l += 1 NEW_LINE while r > i and nums [ r ] == nums [ r - 1 ] : r -= 1 NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT elif sum ( lst ) < 0 : NEW_LINE INDENT l = l + 1 NEW_LINE DEDENT else : NEW_LINE INDENT r = r - 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) <= 2 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT nums . sort ( ) NEW_LINE list_of_nums = [ ] NEW_LINE for index in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if nums [ index ] == nums [ index - 1 ] and index >= 1 : NEW_LINE INDENT continue NEW_LINE DEDENT l = index + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT total = nums [ index ] + nums [ l ] + nums [ r ] NEW_LINE if total == 0 : NEW_LINE INDENT list_of_nums . append ( [ nums [ index ] , nums [ l ] , nums [ r ] ] ) NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE while nums [ l ] == nums [ l - 1 ] and l < r : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT elif total > 0 : NEW_LINE INDENT r -= 1 NEW_LINE while nums [ r ] == nums [ r + 1 ] and l < r : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT l += 1 NEW_LINE while nums [ l ] == nums [ l - 1 ] and l < r : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT set_nums = set ( [ tuple ( x ) for x in list_of_nums ] ) NEW_LINE return set_nums NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = [ ] NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT target = - nums [ i ] NEW_LINE start = i + 1 NEW_LINE end = len ( nums ) - 1 NEW_LINE while start < end : NEW_LINE INDENT if start > i + 1 and nums [ start ] == nums [ start - 1 ] : NEW_LINE INDENT start += 1 NEW_LINE continue NEW_LINE DEDENT if end < len ( nums ) - 1 and nums [ end ] == nums [ end + 1 ] : NEW_LINE INDENT end -= 1 NEW_LINE continue NEW_LINE DEDENT two_sum = nums [ start ] + nums [ end ] NEW_LINE if two_sum == target : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ start ] , nums [ end ] ] ) NEW_LINE start += 1 NEW_LINE end -= 1 NEW_LINE DEDENT elif two_sum < target : NEW_LINE INDENT start += 1 NEW_LINE DEDENT else : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT nums . sort ( ) NEW_LINE result = [ ] NEW_LINE i = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT while i > 0 and i < len ( nums ) and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT j = i + 1 NEW_LINE k = len ( nums ) - 1 NEW_LINE while j < k : NEW_LINE INDENT if nums [ j ] + nums [ k ] + nums [ i ] == 0 : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ j ] , nums [ k ] ] ) NEW_LINE j = j + 1 NEW_LINE k = k - 1 NEW_LINE while nums [ k ] == nums [ k + 1 ] and j < k : NEW_LINE INDENT k = k - 1 NEW_LINE DEDENT while nums [ j ] == nums [ j - 1 ] and j < k : NEW_LINE INDENT j = j + 1 NEW_LINE DEDENT DEDENT if nums [ j ] + nums [ k ] + nums [ i ] > 0 : NEW_LINE INDENT k = k - 1 NEW_LINE while nums [ k ] == nums [ k + 1 ] and j < k : NEW_LINE INDENT k = k - 1 NEW_LINE DEDENT DEDENT if nums [ j ] + nums [ k ] + nums [ i ] < 0 : NEW_LINE INDENT j = j + 1 NEW_LINE while nums [ j ] == nums [ j - 1 ] and j < k : NEW_LINE INDENT j = j + 1 NEW_LINE DEDENT DEDENT DEDENT i = i + 1 NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = set ( ) NEW_LINE prev_goal = None NEW_LINE for ctr , goal in enumerate ( nums ) : NEW_LINE INDENT if prev_goal is not None and prev_goal == goal : NEW_LINE INDENT continue NEW_LINE DEDENT list_to_check = nums [ : ctr ] + nums [ ctr + 1 : ] NEW_LINE output_list = self . get_two_sum ( list_to_check , - goal ) NEW_LINE result . update ( output_list ) NEW_LINE prev_goal = goal NEW_LINE DEDENT return result NEW_LINE DEDENT def get_two_sum ( self , nums : List [ int ] , goal : int ) : NEW_LINE INDENT start = 0 NEW_LINE end = len ( nums ) - 1 NEW_LINE result = [ ] NEW_LINE while start < end : NEW_LINE INDENT res = nums [ start ] + nums [ end ] NEW_LINE if res == goal : NEW_LINE INDENT output = [ nums [ start ] , nums [ end ] , - goal ] NEW_LINE output . sort ( ) NEW_LINE result . append ( tuple ( output ) ) NEW_LINE end -= 1 NEW_LINE start += 1 NEW_LINE DEDENT elif res > goal : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT elif res < goal : NEW_LINE INDENT start += 1 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT hashSet = { } NEW_LINE res = set ( ) NEW_LINE newNums = [ ] NEW_LINE for i in nums : NEW_LINE INDENT hashSet [ i ] = hashSet . get ( i , 0 ) + 1 NEW_LINE if hashSet . get ( i , 0 ) <= 3 : NEW_LINE INDENT newNums . append ( i ) NEW_LINE DEDENT DEDENT for i in range ( len ( newNums ) ) : NEW_LINE INDENT for j in range ( len ( newNums ) ) : NEW_LINE INDENT if i != j and - newNums [ i ] - newNums [ j ] in hashSet : NEW_LINE INDENT if - newNums [ i ] - newNums [ j ] == newNums [ i ] or - newNums [ i ] - newNums [ j ] == newNums [ j ] : NEW_LINE INDENT if - newNums [ i ] - newNums [ j ] == 0 and hashSet . get ( 0 ) < 3 : NEW_LINE INDENT continue NEW_LINE DEDENT elif hashSet . get ( - newNums [ i ] - newNums [ j ] , 0 ) < 2 : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT tmp = tuple ( sorted ( [ newNums [ i ] , newNums [ j ] , - newNums [ i ] - newNums [ j ] ] ) ) NEW_LINE res . add ( tmp ) NEW_LINE DEDENT DEDENT DEDENT listRes = list ( res ) NEW_LINE for idx , val in enumerate ( listRes ) : NEW_LINE INDENT listRes [ idx ] = list ( val ) NEW_LINE DEDENT return listRes NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT NEW_LINE from collections import defaultdict NEW_LINE _index = defaultdict ( list ) NEW_LINE seen = set ( ) NEW_LINE check = set ( ) NEW_LINE for ind , num in enumerate ( nums ) : NEW_LINE INDENT _index [ num ] . append ( ind ) NEW_LINE DEDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] not in check : NEW_LINE INDENT check . add ( nums [ i ] ) NEW_LINE for j in range ( len ( nums ) ) : NEW_LINE INDENT if i != j : NEW_LINE INDENT num = nums [ i ] + nums [ j ] NEW_LINE if _index . get ( - num ) : NEW_LINE INDENT for comp in _index [ - num ] : NEW_LINE INDENT if comp != i and comp != j : NEW_LINE INDENT seen . add ( tuple ( sorted ( [ nums [ i ] , nums [ j ] , - num ] ) ) ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT DEDENT DEDENT return list ( seen ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE n = len ( nums ) NEW_LINE solutions = set ( ) NEW_LINE i = 0 NEW_LINE unique_set = set ( nums ) NEW_LINE if len ( unique_set ) == 1 and 0 in unique_set and len ( nums ) > 2 : NEW_LINE INDENT return [ [ 0 , 0 , 0 ] ] NEW_LINE DEDENT while i < n - 2 : NEW_LINE INDENT num = nums [ i ] NEW_LINE left = i + 1 NEW_LINE right = n - 1 NEW_LINE while left < right : NEW_LINE INDENT left_num = nums [ left ] NEW_LINE right_num = nums [ right ] NEW_LINE s = num + left_num + right_num NEW_LINE if s == 0 : NEW_LINE INDENT solutions . add ( tuple ( [ right_num , num , left_num ] ) ) NEW_LINE while left_num == nums [ left ] and left < right : NEW_LINE INDENT left += 1 NEW_LINE DEDENT while right_num == nums [ right ] and left < right : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT elif s > 0 : NEW_LINE INDENT while right_num == nums [ right ] and left < right : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT while left_num == nums [ left ] and left < right : NEW_LINE INDENT left += 1 NEW_LINE DEDENT DEDENT DEDENT i += 1 NEW_LINE DEDENT return list ( solutions ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums ) : NEW_LINE INDENT h = { } NEW_LINE result = [ ] NEW_LINE res_set = set ( ) NEW_LINE res_val1 = set ( ) NEW_LINE res_val2 = set ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT a = h . get ( nums [ i ] , [ ] ) NEW_LINE if len ( a ) == 0 : NEW_LINE INDENT h [ nums [ i ] ] = a NEW_LINE DEDENT a . append ( i ) NEW_LINE DEDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT val = nums [ i ] NEW_LINE if val in res_val1 : NEW_LINE INDENT continue NEW_LINE DEDENT for j in range ( i + 1 , len ( nums ) ) : NEW_LINE INDENT val2 = nums [ j ] NEW_LINE if val in res_val1 and val2 in res_val2 : NEW_LINE INDENT continue NEW_LINE DEDENT res_val2 . add ( val2 ) NEW_LINE a = h . get ( - nums [ j ] - val , [ ] ) NEW_LINE if len ( a ) == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT for k in a : NEW_LINE INDENT if k > j : NEW_LINE INDENT sorted_arr = [ nums [ i ] , nums [ j ] , nums [ k ] ] NEW_LINE sorted_arr . sort ( ) NEW_LINE sorted_tuple = tuple ( sorted_arr ) NEW_LINE if sorted_tuple not in res_set : NEW_LINE INDENT res_set . add ( sorted_tuple ) NEW_LINE result . append ( sorted_arr ) NEW_LINE DEDENT break NEW_LINE DEDENT DEDENT DEDENT res_val1 . add ( val ) NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE n = len ( nums ) NEW_LINE solutions = set ( ) NEW_LINE i = 0 NEW_LINE unique_set = set ( nums ) NEW_LINE if len ( unique_set ) == 1 and 0 in unique_set and len ( nums ) > 2 : NEW_LINE INDENT return [ [ 0 , 0 , 0 ] ] NEW_LINE DEDENT while i < n - 2 : NEW_LINE INDENT num = nums [ i ] NEW_LINE left = i + 1 NEW_LINE right = n - 1 NEW_LINE while left < right : NEW_LINE INDENT left_num = nums [ left ] NEW_LINE right_num = nums [ right ] NEW_LINE sum = num + left_num + right_num NEW_LINE if sum == 0 : NEW_LINE INDENT solutions . add ( tuple ( [ right_num , num , left_num ] ) ) NEW_LINE while left_num == nums [ left ] and left < right : NEW_LINE INDENT left += 1 NEW_LINE DEDENT while right_num == nums [ right ] and left < right : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT elif sum > 0 : NEW_LINE INDENT while right_num == nums [ right ] and left < right : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT while left_num == nums [ left ] and left < right : NEW_LINE INDENT left += 1 NEW_LINE DEDENT DEDENT DEDENT i += 1 NEW_LINE DEDENT return list ( solutions ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE res = [ ] NEW_LINE i = 0 NEW_LINE while i < len ( nums ) - 2 : NEW_LINE INDENT j = i + 1 ; k = len ( nums ) - 1 NEW_LINE while j < k : NEW_LINE INDENT if nums [ j ] + nums [ k ] == - nums [ i ] : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ j ] , nums [ k ] ] ) NEW_LINE j += 1 ; k -= 1 NEW_LINE while j < k and nums [ j ] == nums [ j - 1 ] : j += 1 NEW_LINE while j < k and nums [ k ] == nums [ k + 1 ] : k -= 1 NEW_LINE DEDENT elif nums [ j ] + nums [ k ] < - nums [ i ] : j += 1 NEW_LINE else : k -= 1 NEW_LINE while i < len ( nums ) - 2 and nums [ i ] == nums [ i + 1 ] : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums ) : NEW_LINE INDENT res = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i == 0 or ( i > 0 and nums [ i ] != nums [ i - 1 ] ) : NEW_LINE INDENT l , r = i + 1 , len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT print ( 'hi' ) NEW_LINE s = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if s < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif s > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( ( nums [ i ] , nums [ l ] , nums [ r ] ) ) NEW_LINE while l < r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while l < r and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT l += 1 ; r -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT res = [ ] NEW_LINE nums . sort ( ) NEW_LINE i = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT i += 1 NEW_LINE continue NEW_LINE DEDENT NEW_LINE a = nums [ i ] NEW_LINE seen = defaultdict ( lambda : 0 ) NEW_LINE j = i + 1 NEW_LINE while j < len ( nums ) : NEW_LINE INDENT c = nums [ j ] NEW_LINE b = - ( c + a ) NEW_LINE if b in seen and ( c not in seen or ( c in seen and seen [ c ] == 1 and c == b ) ) : NEW_LINE INDENT res . append ( [ a , b , c ] ) NEW_LINE DEDENT seen [ c ] += 1 NEW_LINE j += 1 NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return res NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT res = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT if nums [ i ] + nums [ l ] + nums [ r ] == 0 : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) NEW_LINE while l < r and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT while l < r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT elif nums [ i ] + nums [ l ] + nums [ r ] > 0 : NEW_LINE INDENT while l < r and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT r -= 1 NEW_LINE DEDENT elif nums [ i ] + nums [ l ] + nums [ r ] < 0 : NEW_LINE INDENT while l < r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT l += 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT m = { } NEW_LINE m2 = { } NEW_LINE m3 = { } NEW_LINE ret = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] in m3 : NEW_LINE INDENT continue NEW_LINE DEDENT m3 [ nums [ i ] ] = 1 NEW_LINE m = { } NEW_LINE for j in range ( i , len ( nums ) ) : NEW_LINE INDENT if i == j : NEW_LINE INDENT continue NEW_LINE DEDENT if - nums [ i ] - nums [ j ] not in m : NEW_LINE INDENT m [ - nums [ i ] - nums [ j ] ] = j NEW_LINE DEDENT DEDENT for j in range ( i , len ( nums ) ) : NEW_LINE INDENT if i == j : NEW_LINE INDENT continue NEW_LINE DEDENT if nums [ j ] in m and j != m [ nums [ j ] ] : NEW_LINE INDENT temp1 = [ nums [ i ] , nums [ j ] , nums [ m [ nums [ j ] ] ] ] NEW_LINE temp1 . sort ( ) NEW_LINE temp = tuple ( temp1 ) NEW_LINE if temp not in m2 : NEW_LINE INDENT m2 [ temp ] = 1 NEW_LINE ret . append ( [ nums [ i ] , nums [ j ] , nums [ m [ nums [ j ] ] ] ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE n = len ( nums ) NEW_LINE solutions = set ( ) NEW_LINE unique_set = set ( nums ) NEW_LINE if len ( unique_set ) == 1 and 0 in unique_set and len ( nums ) > 2 : NEW_LINE INDENT return [ [ 0 , 0 , 0 ] ] NEW_LINE DEDENT i = 0 NEW_LINE while i < n - 2 : NEW_LINE INDENT num = nums [ i ] NEW_LINE left = i + 1 NEW_LINE right = n - 1 NEW_LINE while left < right : NEW_LINE INDENT left_num = nums [ left ] NEW_LINE right_num = nums [ right ] NEW_LINE s = num + left_num + right_num NEW_LINE if s == 0 : NEW_LINE INDENT solutions . add ( tuple ( [ right_num , num , left_num ] ) ) NEW_LINE right -= 1 NEW_LINE left += 1 NEW_LINE DEDENT elif s > 0 : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT left += 1 NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT return list ( solutions ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE n = len ( nums ) NEW_LINE solutions = set ( ) NEW_LINE i = 0 NEW_LINE unique_set = set ( nums ) NEW_LINE if len ( unique_set ) == 1 and 0 in unique_set and len ( nums ) > 2 : NEW_LINE INDENT return [ [ 0 , 0 , 0 ] ] NEW_LINE DEDENT while i < n - 2 : NEW_LINE INDENT num = nums [ i ] NEW_LINE left = i + 1 NEW_LINE right = n - 1 NEW_LINE while left < right : NEW_LINE INDENT left_num = nums [ left ] NEW_LINE right_num = nums [ right ] NEW_LINE sum = num + left_num + right_num NEW_LINE if sum == 0 : NEW_LINE INDENT solutions . add ( tuple ( [ right_num , num , left_num ] ) ) NEW_LINE while left_num == nums [ left ] and left < right : NEW_LINE INDENT left += 1 NEW_LINE DEDENT while right_num == nums [ right ] and left < right : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT elif sum > 0 : NEW_LINE INDENT while right_num == nums [ right ] and left < right : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT while left_num == nums [ left ] and left < right : NEW_LINE INDENT left += 1 NEW_LINE DEDENT DEDENT if right_num == num and abs ( left_num ) < right_num : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT return list ( solutions ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums ) : NEW_LINE INDENT res = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l , r = i + 1 , len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT print ( 'hi' ) NEW_LINE s = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if s < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif s > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( ( nums [ i ] , nums [ l ] , nums [ r ] ) ) NEW_LINE while l < r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while l < r and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT l += 1 ; r -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT output = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in set ( nums ) : NEW_LINE INDENT cantidad = nums . count ( i ) NEW_LINE if cantidad > 3 : NEW_LINE INDENT del nums [ nums . index ( i ) + 2 : nums . index ( i ) + cantidad - 1 ] NEW_LINE DEDENT DEDENT n = len ( nums ) NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT l = i + 1 NEW_LINE r = n - 1 NEW_LINE x = nums [ i ] NEW_LINE while ( l < r ) : NEW_LINE INDENT temp = [ nums [ l ] , x , nums [ r ] ] NEW_LINE if ( sum ( temp ) == 0 ) : NEW_LINE INDENT l += 1 NEW_LINE r -= 1 NEW_LINE output . append ( temp ) NEW_LINE DEDENT elif ( sum ( temp ) < 0 ) : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT return set ( [ tuple ( sorted ( elem ) ) for elem in output ] ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT count = { } NEW_LINE ans = [ ] NEW_LINE for num in nums : NEW_LINE INDENT if count . get ( num ) : NEW_LINE INDENT count [ num ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT count [ num ] = 1 NEW_LINE DEDENT DEDENT keys = sorted ( count . keys ( ) ) NEW_LINE for i in range ( len ( keys ) ) : NEW_LINE INDENT count [ keys [ i ] ] -= 1 NEW_LINE for j in range ( i , len ( keys ) ) : NEW_LINE INDENT count [ keys [ j ] ] -= 1 NEW_LINE if count [ keys [ j ] ] >= 0 : NEW_LINE INDENT key3 = - keys [ i ] - keys [ j ] NEW_LINE if count . get ( key3 ) and count [ key3 ] > 0 and key3 >= keys [ j ] : NEW_LINE INDENT ans . append ( [ keys [ i ] , keys [ j ] , key3 ] ) NEW_LINE DEDENT DEDENT count [ keys [ j ] ] += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = [ ] NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i == 0 or nums [ i ] > nums [ i - 1 ] : NEW_LINE INDENT start = i + 1 NEW_LINE end = len ( nums ) - 1 NEW_LINE while start < end : NEW_LINE INDENT if nums [ i ] + nums [ start ] + nums [ end ] == 0 : NEW_LINE INDENT result . append ( ( nums [ i ] , nums [ start ] , nums [ end ] ) ) NEW_LINE DEDENT if nums [ i ] + nums [ start ] + nums [ end ] < 0 : NEW_LINE INDENT current_start = start NEW_LINE while nums [ start ] == nums [ current_start ] and start < end : NEW_LINE INDENT start += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT current_end = end NEW_LINE while nums [ end ] == nums [ current_end ] and start < end : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT output = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in set ( nums ) : NEW_LINE INDENT cantidad = nums . count ( i ) NEW_LINE if cantidad > 3 : NEW_LINE INDENT del nums [ nums . index ( i ) + 2 : nums . index ( i ) + cantidad - 1 ] NEW_LINE DEDENT DEDENT n = len ( nums ) NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT l = i + 1 NEW_LINE r = n - 1 NEW_LINE x = nums [ i ] NEW_LINE while ( l < r ) : NEW_LINE INDENT temp = [ nums [ l ] , x , nums [ r ] ] NEW_LINE if ( sum ( temp ) == 0 ) : NEW_LINE INDENT l += 1 NEW_LINE r -= 1 NEW_LINE output . append ( temp ) NEW_LINE DEDENT elif ( sum ( temp ) < 0 ) : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT res = [ list ( output ) for output in set ( [ tuple ( sorted ( elem ) ) for elem in output ] ) ] NEW_LINE return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE ret = set ( ) NEW_LINE def twoSum ( target , nums ) : NEW_LINE INDENT m = set ( ) NEW_LINE ret = set ( ) NEW_LINE for num in nums : NEW_LINE INDENT if target - num in m : NEW_LINE INDENT ret . add ( ( target - num , num ) ) NEW_LINE DEDENT else : NEW_LINE INDENT m . add ( num ) NEW_LINE DEDENT DEDENT return ret if len ( ret ) > 0 else None NEW_LINE DEDENT for i , num in enumerate ( nums ) : NEW_LINE INDENT ll = twoSum ( - num , nums [ i + 1 : ] ) NEW_LINE if ll : NEW_LINE INDENT for l in ll : NEW_LINE INDENT ret . add ( ( num , l [ 0 ] , l [ 1 ] ) ) NEW_LINE DEDENT DEDENT DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT nums . sort ( ) NEW_LINE out = set ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT j = i + 1 NEW_LINE k = len ( nums ) - 1 NEW_LINE while j < k : NEW_LINE INDENT if j > i + 1 and nums [ j ] == nums [ j - 1 ] : NEW_LINE INDENT j += 1 NEW_LINE continue NEW_LINE DEDENT if k < len ( nums ) - 1 and nums [ k ] == nums [ k + 1 ] : NEW_LINE INDENT k -= 1 NEW_LINE continue NEW_LINE DEDENT s = nums [ i ] + nums [ j ] + nums [ k ] NEW_LINE if s < 0 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT elif s > 0 : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT out . add ( ( nums [ i ] , nums [ j ] , nums [ k ] ) ) NEW_LINE j += 1 NEW_LINE k -= 1 NEW_LINE DEDENT DEDENT DEDENT return out NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i == 0 or nums [ i ] > nums [ i - 1 ] : NEW_LINE INDENT start = i + 1 NEW_LINE end = len ( nums ) - 1 NEW_LINE while start < end : NEW_LINE INDENT if nums [ i ] + nums [ start ] + nums [ end ] == 0 : NEW_LINE INDENT result . append ( ( nums [ i ] , nums [ start ] , nums [ end ] ) ) NEW_LINE DEDENT if nums [ i ] + nums [ start ] + nums [ end ] < 0 : NEW_LINE INDENT currentStart = start NEW_LINE while nums [ start ] == nums [ currentStart ] and start < end : NEW_LINE INDENT start += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT currentEnd = end NEW_LINE while nums [ end ] == nums [ currentEnd ] and start < end : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT ans = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT break NEW_LINE DEDENT self . sumtwo ( i , nums , ans ) NEW_LINE DEDENT dic = list ( set ( [ tuple ( t ) for t in ans ] ) ) NEW_LINE dic = [ list ( v ) for v in dic ] NEW_LINE return dic NEW_LINE DEDENT def sumtwo ( self , i : int , nums : List [ int ] , res : List [ List [ int ] ] ) : NEW_LINE INDENT l , r = i + 1 , len ( nums ) - 1 NEW_LINE while ( l < r ) : NEW_LINE INDENT sum = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if sum == 0 : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE while ( l < r and nums [ l ] == nums [ l - 1 ] ) : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while ( l < r and nums [ r ] == nums [ r + 1 ] ) : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT elif sum > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = [ ] NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i == 0 or nums [ i ] > nums [ i - 1 ] : NEW_LINE INDENT start = i + 1 NEW_LINE end = len ( nums ) - 1 NEW_LINE while start < end : NEW_LINE INDENT if nums [ i ] + nums [ start ] + nums [ end ] == 0 : NEW_LINE INDENT result . append ( ( nums [ i ] , nums [ start ] , nums [ end ] ) ) NEW_LINE DEDENT if nums [ i ] + nums [ start ] + nums [ end ] < 0 : NEW_LINE INDENT currentStart = start NEW_LINE while nums [ start ] == nums [ currentStart ] and start < end : NEW_LINE INDENT start += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT currentEnd = end NEW_LINE while nums [ end ] == nums [ currentEnd ] and start < end : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i == 0 or nums [ i ] > nums [ i - 1 ] : NEW_LINE INDENT start = i + 1 NEW_LINE end = len ( nums ) - 1 NEW_LINE while start < end : NEW_LINE INDENT if nums [ i ] + nums [ start ] + nums [ end ] == 0 : NEW_LINE INDENT result . append ( ( nums [ i ] , nums [ start ] , nums [ end ] ) ) NEW_LINE DEDENT if nums [ i ] + nums [ start ] + nums [ end ] < 0 : NEW_LINE INDENT currentStart = start NEW_LINE while nums [ start ] == nums [ currentStart ] and start < end : NEW_LINE INDENT start += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT currentEnd = end NEW_LINE while nums [ end ] == nums [ currentEnd ] and start < end : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE n = len ( nums ) NEW_LINE res = [ ] NEW_LINE for i in range ( n - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT j , k = i + 1 , n - 1 NEW_LINE while j < k : NEW_LINE INDENT tripSum = nums [ j ] + nums [ k ] + nums [ i ] NEW_LINE if tripSum == 0 : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ j ] , nums [ k ] ] ) NEW_LINE j += 1 NEW_LINE k -= 1 NEW_LINE DEDENT elif tripSum < 0 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT else : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT while i + 1 < j < n and nums [ j ] == nums [ j - 1 ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT while i < k < n - 1 and nums [ k ] == nums [ k + 1 ] : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = set ( ) NEW_LINE start_right = len ( nums ) - 1 NEW_LINE for i , num in enumerate ( nums [ : - 2 ] ) : NEW_LINE INDENT if max ( 0 , num ) : break NEW_LINE left = i + 1 NEW_LINE right = start_right NEW_LINE while left < right : NEW_LINE INDENT l_num , r_num = nums [ left ] , nums [ right ] NEW_LINE score = num + l_num + r_num NEW_LINE if score == 0 : NEW_LINE INDENT triplet = ( num , l_num , r_num ) NEW_LINE result . add ( triplet ) NEW_LINE while left < right and nums [ left ] == l_num : left += 1 NEW_LINE while right >= left and nums [ right ] == r_num : right -= 1 NEW_LINE DEDENT elif score < 0 : NEW_LINE INDENT while left < right and nums [ left ] == l_num : left += 1 NEW_LINE DEDENT else : NEW_LINE INDENT while right >= left and nums [ right ] == r_num : right -= 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def twoSum ( self , nums : List [ int ] , target : int ) -> List [ List [ int ] ] : NEW_LINE INDENT res = { } NEW_LINE for x in nums : NEW_LINE INDENT if target - x in res : NEW_LINE INDENT res [ target - x ] = x NEW_LINE DEDENT elif x not in res : NEW_LINE INDENT res [ x ] = None NEW_LINE DEDENT DEDENT return [ tuple ( sorted ( ( x , y , - target ) ) ) for x , y in res . items ( ) if y is not None ] NEW_LINE DEDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = set ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT target = - nums [ i ] NEW_LINE two_sums = self . twoSum ( nums [ i + 1 : ] , target ) NEW_LINE res . update ( two_sums ) NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT nums = sorted ( nums ) NEW_LINE res = [ ] NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i == 0 or nums [ i - 1 ] < nums [ i ] : NEW_LINE INDENT start = i + 1 NEW_LINE end = len ( nums ) - 1 NEW_LINE while start < end : NEW_LINE INDENT if nums [ i ] + nums [ start ] + nums [ end ] == 0 : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ start ] , nums [ end ] ] ) NEW_LINE DEDENT if nums [ i ] + nums [ start ] + nums [ end ] < 0 : NEW_LINE INDENT currstart = start NEW_LINE while nums [ start ] == nums [ currstart ] and start < end : NEW_LINE INDENT start += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT currend = end NEW_LINE while nums [ end ] == nums [ currend ] and end > start : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE i = 0 NEW_LINE ans = [ ] NEW_LINE while i < len ( nums ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT i += 1 NEW_LINE continue NEW_LINE DEDENT target = - nums [ i ] NEW_LINE l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT if l > i + 1 and nums [ l ] == nums [ l - 1 ] : NEW_LINE INDENT l += 1 NEW_LINE continue NEW_LINE DEDENT if r < len ( nums ) - 1 and nums [ r ] == nums [ r + 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE continue NEW_LINE DEDENT sm = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if sm == 0 : NEW_LINE INDENT ans . append ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT elif sm > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT def twoSum ( a , t , r , c , v ) : NEW_LINE INDENT d = { } NEW_LINE seen = { } NEW_LINE for i in a : NEW_LINE INDENT if i not in d : NEW_LINE INDENT d [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT d [ i ] += 1 NEW_LINE DEDENT DEDENT aa = sorted ( d ) NEW_LINE for i in aa : NEW_LINE INDENT if ( t - i in d and ( t - i not in seen or i not in seen ) ) : NEW_LINE INDENT if t - i == i and d [ i ] > 1 : NEW_LINE INDENT if str ( c ) + "," + str ( i ) + "," + str ( i ) not in v : NEW_LINE INDENT r . append ( [ c , i , i ] ) NEW_LINE DEDENT v [ str ( c ) + "," + str ( i ) + "," + str ( i ) ] = 0 NEW_LINE seen [ i ] = 0 NEW_LINE DEDENT elif t - i != i and d [ t - i ] > 0 and d [ i ] > 0 : NEW_LINE INDENT if str ( c ) + "," + str ( i ) + "," + str ( t - i ) not in v : NEW_LINE INDENT r . append ( [ c , i , t - i ] ) NEW_LINE DEDENT v [ str ( c ) + "," + str ( i ) + "," + str ( t - i ) ] = 0 NEW_LINE seen [ t - i ] = 0 NEW_LINE seen [ i ] = 0 NEW_LINE DEDENT d [ t - i ] -= 1 NEW_LINE DEDENT d [ i ] -= 1 NEW_LINE DEDENT DEDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT a = sorted ( nums ) NEW_LINE r = [ ] NEW_LINE ind = 0 NEW_LINE d = { } NEW_LINE prev = None NEW_LINE for i in a : NEW_LINE INDENT if not prev or prev != i : NEW_LINE INDENT twoSum ( a [ ind + 1 : ] , 0 - i , r , i , d ) NEW_LINE prev = i NEW_LINE DEDENT ind += 1 NEW_LINE DEDENT return r NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not nums : NEW_LINE INDENT return NEW_LINE DEDENT nums . sort ( ) NEW_LINE ans = set ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT continue NEW_LINE DEDENT lo = i + 1 NEW_LINE hi = len ( nums ) - 1 NEW_LINE while lo < hi : NEW_LINE INDENT if nums [ lo ] + nums [ hi ] + nums [ i ] == 0 : NEW_LINE INDENT ans . add ( ( nums [ i ] , nums [ lo ] , nums [ hi ] ) ) NEW_LINE lo += 1 NEW_LINE hi -= 1 NEW_LINE DEDENT elif nums [ lo ] + nums [ hi ] + nums [ i ] > 0 : NEW_LINE INDENT hi -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT lo += 1 NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = set ( ) NEW_LINE for start in range ( len ( nums ) - 2 ) : NEW_LINE INDENT l = start + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT tsum = nums [ start ] + nums [ l ] + nums [ r ] NEW_LINE if tsum < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif tsum > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT result . add ( ( nums [ start ] , nums [ l ] , nums [ r ] ) ) NEW_LINE r -= 1 NEW_LINE l += 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = set ( ) NEW_LINE for start in range ( len ( nums ) - 2 ) : NEW_LINE INDENT l = start + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT tsum = nums [ start ] + nums [ l ] + nums [ r ] NEW_LINE if tsum < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif tsum > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT result . add ( ( nums [ start ] , nums [ l ] , nums [ r ] ) ) NEW_LINE r -= 1 NEW_LINE l += 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT nums = sorted ( nums ) NEW_LINE trios = [ ] NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT j = i + 1 NEW_LINE k = len ( nums ) - 1 NEW_LINE while j < k : NEW_LINE INDENT s = nums [ i ] + nums [ j ] + nums [ k ] NEW_LINE if s == 0 : NEW_LINE INDENT trios . append ( ( nums [ i ] , nums [ j ] , nums [ k ] ) ) NEW_LINE while j < k : NEW_LINE INDENT k = k - 1 NEW_LINE if nums [ k ] < nums [ k + 1 ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT elif s < 0 : NEW_LINE INDENT while j < k : NEW_LINE INDENT j = j + 1 NEW_LINE if nums [ j ] > nums [ j - 1 ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT while j < k : NEW_LINE INDENT k = k - 1 NEW_LINE if nums [ k ] < nums [ k + 1 ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return list ( set ( trios ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT ans = [ ] NEW_LINE Dict = { } NEW_LINE N = len ( nums ) NEW_LINE for i , x in enumerate ( nums ) : NEW_LINE INDENT Dict [ x ] = i NEW_LINE DEDENT if len ( Dict ) == 1 : NEW_LINE INDENT if 0 in Dict and Dict [ 0 ] > 1 : NEW_LINE INDENT return [ [ 0 , 0 , 0 ] ] NEW_LINE DEDENT else : return None NEW_LINE DEDENT for j in range ( N - 1 ) : NEW_LINE INDENT for k in range ( j + 1 , N ) : NEW_LINE INDENT s = - nums [ j ] - nums [ k ] NEW_LINE if s in Dict and Dict [ s ] > k : NEW_LINE INDENT L = [ nums [ j ] , nums [ k ] , s ] NEW_LINE L . sort ( ) NEW_LINE ans . append ( L ) NEW_LINE DEDENT DEDENT DEDENT ans = set ( tuple ( x ) for x in ans ) NEW_LINE ans = list ( ans ) NEW_LINE return ( ans ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE triplets = { } NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT left , right = i + 1 , len ( nums ) - 1 NEW_LINE while left < right : NEW_LINE INDENT currentSum = nums [ i ] + nums [ left ] + nums [ right ] NEW_LINE if currentSum == 0 : NEW_LINE INDENT triplet = ( nums [ i ] , nums [ left ] , nums [ right ] ) NEW_LINE if not triplet in triplets : NEW_LINE INDENT triplets [ ( nums [ i ] , nums [ left ] , nums [ right ] ) ] = True NEW_LINE DEDENT left += 1 NEW_LINE right -= 1 NEW_LINE DEDENT elif currentSum < 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT else : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT DEDENT tripletsList = [ ] NEW_LINE for triplet in triplets . keys ( ) : NEW_LINE INDENT tripletsList . append ( [ triplet [ 0 ] , triplet [ 1 ] , triplet [ 2 ] ] ) NEW_LINE DEDENT return tripletsList NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : return [ ] NEW_LINE nums . sort ( ) NEW_LINE ans = set ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT left , right = i + 1 , len ( nums ) - 1 NEW_LINE while left < right : NEW_LINE INDENT sum3 = nums [ i ] + nums [ left ] + nums [ right ] NEW_LINE if sum3 > 0 : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT elif sum3 < 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans . add ( ( nums [ i ] , nums [ left ] , nums [ right ] ) ) NEW_LINE left += 1 NEW_LINE right -= 1 NEW_LINE DEDENT DEDENT DEDENT return [ list ( solution ) for solution in ans ] NEW_LINE NEW_LINE DEDENT DEDENT
import math NEW_LINE from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT multiset = defaultdict ( int ) NEW_LINE for n in nums : NEW_LINE INDENT multiset [ n ] += 1 NEW_LINE DEDENT ret = set ( ) NEW_LINE for n_a in multiset : NEW_LINE INDENT multiset [ n_a ] -= 1 NEW_LINE for n_b in multiset : NEW_LINE INDENT if multiset [ n_b ] > 0 : NEW_LINE INDENT multiset [ n_b ] -= 1 NEW_LINE n_c = - n_a - n_b NEW_LINE if n_c in multiset and multiset [ n_c ] > 0 : NEW_LINE INDENT ret . add ( tuple ( sorted ( [ n_a , n_b , n_c ] ) ) ) NEW_LINE DEDENT multiset [ n_b ] += 1 NEW_LINE DEDENT DEDENT multiset [ n_a ] += 1 NEW_LINE DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : return [ ] NEW_LINE nums . sort ( ) NEW_LINE result = set ( ) NEW_LINE for pivot in range ( len ( nums ) - 1 ) : NEW_LINE INDENT left = pivot + 1 NEW_LINE right = len ( nums ) - 1 NEW_LINE while left < right : NEW_LINE INDENT summ = nums [ pivot ] + nums [ left ] + nums [ right ] NEW_LINE if summ < 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT elif summ > 0 : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT result . add ( ( nums [ pivot ] , nums [ left ] , nums [ right ] ) ) NEW_LINE left += 1 NEW_LINE right -= 1 NEW_LINE DEDENT DEDENT DEDENT return list ( result ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT out = set ( ) NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT a = i + 1 NEW_LINE b = len ( nums ) - 1 NEW_LINE while a < b : NEW_LINE INDENT tsum = nums [ i ] + nums [ a ] + nums [ b ] NEW_LINE if tsum < 0 : NEW_LINE INDENT a += 1 NEW_LINE DEDENT elif tsum > 0 : NEW_LINE INDENT b -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT out . add ( ( nums [ i ] , nums [ a ] , nums [ b ] ) ) NEW_LINE a += 1 NEW_LINE b -= 1 NEW_LINE DEDENT DEDENT DEDENT return out NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not nums : NEW_LINE INDENT return [ ] NEW_LINE DEDENT nums . sort ( ) NEW_LINE res = set ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE target = 0 - nums [ i ] NEW_LINE while l < r : NEW_LINE INDENT if nums [ l ] + nums [ r ] == target : NEW_LINE INDENT res . add ( ( nums [ i ] , nums [ l ] , nums [ r ] ) ) NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT elif nums [ l ] + nums [ r ] < target : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT return list ( res ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = set ( ) NEW_LINE for start in range ( len ( nums ) - 2 ) : NEW_LINE INDENT l = start + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT tsum = nums [ start ] + nums [ l ] + nums [ r ] NEW_LINE if tsum < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif tsum > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT result . add ( ( nums [ start ] , nums [ l ] , nums [ r ] ) ) NEW_LINE r -= 1 NEW_LINE l += 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums = sorted ( nums ) NEW_LINE combos = set ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT combo = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if combo < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif combo > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT combos . add ( ( nums [ i ] , nums [ l ] , nums [ r ] ) ) NEW_LINE r -= 1 NEW_LINE l += 1 NEW_LINE DEDENT DEDENT DEDENT return list ( combos ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE n = len ( nums ) NEW_LINE point_a = point_b = point_c = None NEW_LINE out = set ( ) NEW_LINE for point_a in range ( n ) : NEW_LINE INDENT point_b = point_a + 1 NEW_LINE point_c = n - 1 NEW_LINE while point_b < point_c : NEW_LINE INDENT temp = nums [ point_a ] + nums [ point_b ] + nums [ point_c ] NEW_LINE if temp == 0 : NEW_LINE INDENT out . add ( ( nums [ point_a ] , nums [ point_b ] , nums [ point_c ] ) ) NEW_LINE point_b += 1 NEW_LINE point_c -= 1 NEW_LINE DEDENT elif temp > 0 : NEW_LINE INDENT point_c -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT point_b += 1 NEW_LINE DEDENT DEDENT DEDENT return out NEW_LINE DEDENT DEDENT
NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = set ( ) NEW_LINE target = 0 NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT j = i + 1 NEW_LINE k = len ( nums ) - 1 NEW_LINE while j < k : NEW_LINE INDENT local_sum = nums [ i ] + nums [ j ] + nums [ k ] NEW_LINE if local_sum < target : NEW_LINE INDENT j += 1 NEW_LINE DEDENT elif local_sum > target : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . add ( ( nums [ i ] , nums [ j ] , nums [ k ] ) ) NEW_LINE j += 1 NEW_LINE k -= 1 NEW_LINE DEDENT DEDENT DEDENT return [ list ( ans ) for ans in res ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE res = set ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT new_sum = 0 - nums [ i ] NEW_LINE visited = set ( ) NEW_LINE for j in range ( i + 1 , len ( nums ) ) : NEW_LINE INDENT ctp = new_sum - nums [ j ] NEW_LINE if ctp in visited : NEW_LINE INDENT res . add ( ( nums [ i ] , ctp , nums [ j ] ) ) NEW_LINE DEDENT else : NEW_LINE INDENT visited . add ( nums [ j ] ) NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE seen = set ( ) NEW_LINE ans = [ ] NEW_LINE n = len ( nums ) NEW_LINE for k in range ( n ) : NEW_LINE INDENT t = - nums [ k ] NEW_LINE i = 0 NEW_LINE j = n - 1 NEW_LINE while i < k and k < j : NEW_LINE INDENT ps = nums [ i ] + nums [ j ] NEW_LINE if ps < t : NEW_LINE INDENT i += 1 NEW_LINE DEDENT elif ps > t : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT key = nums [ i ] * 10 ** 6 + nums [ j ] NEW_LINE if key not in seen : NEW_LINE INDENT seen . add ( key ) NEW_LINE ans . append ( [ nums [ i ] , nums [ k ] , nums [ j ] ] ) NEW_LINE DEDENT i += 1 NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums ) : NEW_LINE INDENT ll = set ( ) NEW_LINE t = nums . copy ( ) NEW_LINE t . sort ( ) NEW_LINE for k in range ( len ( nums ) - 2 ) : NEW_LINE INDENT h = k + 1 NEW_LINE g = len ( nums ) - 1 NEW_LINE dd = 0 NEW_LINE while h < g : NEW_LINE INDENT dd = t [ k ] + t [ h ] + t [ g ] NEW_LINE if dd < 0 : NEW_LINE INDENT h += 1 NEW_LINE DEDENT elif dd > 0 : NEW_LINE INDENT g -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT ll . add ( ( t [ k ] , t [ h ] , t [ g ] ) ) NEW_LINE h += 1 NEW_LINE g -= 1 NEW_LINE DEDENT DEDENT DEDENT return ll NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE l = len ( nums ) NEW_LINE if l < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT else : NEW_LINE INDENT ans = [ ] NEW_LINE fl = 0 NEW_LINE for i in range ( l - 2 ) : NEW_LINE INDENT if i != 0 : NEW_LINE INDENT if nums [ i ] != nums [ i - 1 ] : NEW_LINE INDENT fl = 0 NEW_LINE DEDENT DEDENT j = i + 1 NEW_LINE k = l - 1 NEW_LINE while j < k : NEW_LINE INDENT sum3 = nums [ i ] + nums [ j ] + nums [ k ] NEW_LINE if sum3 == 0 : NEW_LINE INDENT tmp = [ nums [ i ] , nums [ j ] , nums [ k ] ] NEW_LINE ll = len ( ans ) NEW_LINE if ll != 0 : NEW_LINE INDENT mm = min ( ll , fl + 2 ) NEW_LINE if tmp not in ans [ - mm : ] : NEW_LINE INDENT ans . append ( tmp ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT ans . append ( tmp ) NEW_LINE DEDENT j = j + 1 NEW_LINE fl += 1 NEW_LINE if nums [ j ] == nums [ k ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT elif sum3 > 0 : NEW_LINE INDENT k = k - 1 NEW_LINE DEDENT elif sum3 < 0 : NEW_LINE INDENT j = j + 1 NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums ) : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = set ( ) NEW_LINE for start in range ( len ( nums ) - 2 ) : NEW_LINE INDENT l = start + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT tsum = nums [ start ] + nums [ l ] + nums [ r ] NEW_LINE if tsum < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif tsum > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT result . add ( ( nums [ start ] , nums [ l ] , nums [ r ] ) ) NEW_LINE r -= 1 NEW_LINE l += 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE nums = sorted ( nums ) NEW_LINE r = [ ] NEW_LINE seen = collections . defaultdict ( lambda : False ) NEW_LINE for i in range ( n - 2 ) : NEW_LINE INDENT j , k = i + 1 , n - 1 NEW_LINE while j < k : NEW_LINE INDENT vi , vj , vk = nums [ i ] , nums [ j ] , nums [ k ] NEW_LINE s = vi + vj + vk NEW_LINE if s == 0 : NEW_LINE INDENT if not seen [ vi , vj ] : NEW_LINE INDENT r . append ( [ vi , vj , vk ] ) NEW_LINE seen [ vi , vj ] = True NEW_LINE DEDENT j += 1 NEW_LINE k -= 1 NEW_LINE DEDENT elif s > 0 : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT j += 1 NEW_LINE DEDENT DEDENT DEDENT return r NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def twoSum ( self , nums : List [ int ] , target : int ) -> List [ int ] : NEW_LINE INDENT ret = set ( ) NEW_LINE checked = { } NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT current = nums [ i ] NEW_LINE diff = target - current NEW_LINE if diff in checked : NEW_LINE INDENT ret . add ( ( diff , nums [ i ] ) ) NEW_LINE DEDENT checked [ current ] = i NEW_LINE DEDENT return ret NEW_LINE DEDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT ret = set ( ) NEW_LINE nums = sorted ( nums ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT duplets = self . twoSum ( nums [ i + 1 : ] , nums [ i ] * - 1 ) NEW_LINE for duplet in duplets : NEW_LINE INDENT ret . add ( ( nums [ i ] , duplet [ 0 ] , duplet [ 1 ] ) ) NEW_LINE DEDENT DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT NEW_LINE if not nums : NEW_LINE INDENT return [ ] NEW_LINE DEDENT res = set ( ) NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT start = i + 1 NEW_LINE end = len ( nums ) - 1 NEW_LINE while end > start : NEW_LINE INDENT current = nums [ i ] + nums [ start ] + nums [ end ] NEW_LINE if current == 0 : NEW_LINE INDENT res . add ( ( nums [ i ] , nums [ start ] , nums [ end ] ) ) NEW_LINE start += 1 NEW_LINE end -= 1 NEW_LINE DEDENT elif current < 0 : NEW_LINE INDENT start += 1 NEW_LINE DEDENT else : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = [ ] NEW_LINE seen = set ( ) NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT break NEW_LINE DEDENT j , k = i + 1 , len ( nums ) - 1 NEW_LINE while j < k : NEW_LINE INDENT triplet = ( nums [ i ] , nums [ j ] , nums [ k ] ) NEW_LINE total = nums [ i ] + nums [ j ] + nums [ k ] NEW_LINE if total == 0 : NEW_LINE INDENT if triplet not in seen : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ j ] , nums [ k ] ] ) NEW_LINE seen . add ( triplet ) NEW_LINE DEDENT j += 1 NEW_LINE k -= 1 NEW_LINE DEDENT elif total < 0 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT else : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = set ( ) NEW_LINE target = 0 NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT j = i + 1 NEW_LINE k = len ( nums ) - 1 NEW_LINE while j < k : NEW_LINE INDENT local_sum = nums [ i ] + nums [ j ] + nums [ k ] NEW_LINE if local_sum < target : NEW_LINE INDENT j += 1 NEW_LINE DEDENT elif local_sum > target : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . add ( ( nums [ i ] , nums [ j ] , nums [ k ] ) ) NEW_LINE j += 1 NEW_LINE k -= 1 NEW_LINE DEDENT DEDENT DEDENT return [ list ( ans ) for ans in res ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums = sorted ( nums ) NEW_LINE res = set ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE target = 0 - nums [ i ] NEW_LINE while l < r : NEW_LINE INDENT if nums [ l ] + nums [ r ] == target : NEW_LINE INDENT res . add ( ( nums [ i ] , nums [ l ] , nums [ r ] ) ) NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT elif nums [ l ] + nums [ r ] > target : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT elif nums [ l ] + nums [ r ] < target : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT DEDENT return list ( res ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE length = len ( nums ) NEW_LINE result = set ( ) NEW_LINE for i in range ( length - 2 ) : NEW_LINE INDENT left = i + 1 NEW_LINE right = length - 1 NEW_LINE while left < right : NEW_LINE INDENT sum_value = nums [ i ] + nums [ left ] + nums [ right ] NEW_LINE if sum_value == 0 : NEW_LINE INDENT result . add ( ( nums [ i ] , nums [ left ] , nums [ right ] ) ) NEW_LINE left += 1 NEW_LINE right -= 1 NEW_LINE DEDENT elif sum_value < 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT else : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT nums = sorted ( nums ) NEW_LINE trios = [ ] NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT j = i + 1 NEW_LINE k = len ( nums ) - 1 NEW_LINE while j < k : NEW_LINE INDENT s = nums [ i ] + nums [ j ] + nums [ k ] NEW_LINE if s == 0 : NEW_LINE INDENT trios . append ( ( nums [ i ] , nums [ j ] , nums [ k ] ) ) NEW_LINE while j < k : NEW_LINE INDENT k = k - 1 NEW_LINE if nums [ k ] < nums [ k + 1 ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT elif s < 0 : NEW_LINE INDENT while j < k : NEW_LINE INDENT j = j + 1 NEW_LINE if nums [ j ] > nums [ j - 1 ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT while j < k : NEW_LINE INDENT k = k - 1 NEW_LINE if nums [ k ] < nums [ k + 1 ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return list ( set ( trios ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT nums . sort ( ) NEW_LINE def twoSum ( target , subNums ) : NEW_LINE INDENT l , r = 0 , len ( subNums ) - 1 NEW_LINE tem = [ ] NEW_LINE while l < r : NEW_LINE INDENT if subNums [ l ] + subNums [ r ] == target : NEW_LINE INDENT tem . append ( [ subNums [ l ] , subNums [ r ] ] ) NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT elif subNums [ l ] + subNums [ r ] > target : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT return tem NEW_LINE DEDENT result = [ ] NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT break NEW_LINE DEDENT res = twoSum ( - nums [ i ] , nums [ i + 1 : ] ) NEW_LINE if res : NEW_LINE INDENT for item in res : NEW_LINE INDENT result . append ( [ nums [ i ] ] + item ) NEW_LINE DEDENT DEDENT if len ( set ( nums [ i + 1 : ] ) ) == 1 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT tem = set ( map ( tuple , result ) ) NEW_LINE return map ( list , tem ) NEW_LINE DEDENT DEDENT
def three_sum ( nums ) : NEW_LINE INDENT res = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT vals = [ nums [ x ] for x in ( i , l , r ) ] NEW_LINE s = sum ( vals ) NEW_LINE if s < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif s > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( vals ) NEW_LINE while l < r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while l < r and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT return three_sum ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT hashnums = { } NEW_LINE for i in nums : NEW_LINE INDENT hashnums [ i ] = hashnums . get ( i , 0 ) + 1 NEW_LINE DEDENT result = [ ] NEW_LINE resultset = set ( [ ] ) NEW_LINE for a in hashnums . keys ( ) : NEW_LINE INDENT hashnums [ a ] -= 1 NEW_LINE for b in hashnums . keys ( ) : NEW_LINE INDENT if hashnums [ b ] == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT hashnums [ b ] -= 1 NEW_LINE if ( ( - a - b ) in hashnums ) and ( hashnums [ - a - b ] > 0 ) : NEW_LINE INDENT e = sorted ( [ a , b , - a - b ] ) NEW_LINE te = tuple ( e ) NEW_LINE if te not in resultset : NEW_LINE INDENT result . append ( e ) NEW_LINE resultset . add ( te ) NEW_LINE DEDENT DEDENT hashnums [ b ] += 1 NEW_LINE DEDENT hashnums [ a ] += 1 NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums ) : NEW_LINE INDENT nums . sort ( ) NEW_LINE res = set ( ) NEW_LINE for start in range ( len ( nums ) - 2 ) : NEW_LINE INDENT l = start + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT tsum = nums [ start ] + nums [ l ] + nums [ r ] NEW_LINE if tsum < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif tsum > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . add ( ( nums [ start ] , nums [ l ] , nums [ r ] ) ) NEW_LINE r -= 1 NEW_LINE l += 1 NEW_LINE DEDENT DEDENT DEDENT return ( res ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE n = len ( nums ) NEW_LINE ans = set ( ) NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT l = i + 1 NEW_LINE r = n - 1 NEW_LINE x = nums [ i ] NEW_LINE while ( l < r ) : NEW_LINE INDENT if ( x + nums [ l ] + nums [ r ] == 0 ) : NEW_LINE INDENT ans . add ( ( x , nums [ l ] , nums [ r ] ) ) NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT elif ( x + nums [ l ] + nums [ r ] < 0 ) : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT return ( ans ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT triplets = set ( ) NEW_LINE items = { } NEW_LINE for item in nums : NEW_LINE INDENT items [ item ] = ( items [ item ] if item in items else 0 ) + 1 NEW_LINE DEDENT for A in items . keys ( ) : NEW_LINE INDENT items [ A ] -= 1 NEW_LINE for B in items . keys ( ) : NEW_LINE INDENT if items [ B ] == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT items [ B ] -= 1 NEW_LINE C = - ( A + B ) NEW_LINE if C in items and items [ C ] > 0 : NEW_LINE INDENT triplets . add ( tuple ( sorted ( [ A , B , C ] ) ) ) NEW_LINE DEDENT items [ B ] += 1 NEW_LINE DEDENT items [ A ] += 1 NEW_LINE DEDENT return [ list ( triplet ) for triplet in triplets ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = [ ] NEW_LINE record = { } NEW_LINE for index , number in enumerate ( nums ) : NEW_LINE INDENT remaining = 0 - number NEW_LINE low = index + 1 NEW_LINE high = len ( nums ) - 1 NEW_LINE while low < high : NEW_LINE INDENT if nums [ low ] + nums [ high ] < remaining : NEW_LINE INDENT low += 1 NEW_LINE DEDENT elif nums [ low ] + nums [ high ] > remaining : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT temp = ( number , nums [ low ] , nums [ high ] ) NEW_LINE if hash ( temp ) not in record : NEW_LINE INDENT record [ hash ( temp ) ] = temp NEW_LINE result . append ( temp ) NEW_LINE DEDENT low += 1 NEW_LINE high -= 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return ( [ ] ) NEW_LINE DEDENT result = { } NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT curr = nums [ i ] NEW_LINE if curr > 0 : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT left = i + 1 NEW_LINE right = len ( nums ) - 1 NEW_LINE if nums [ right ] + nums [ right - 1 ] < - curr : NEW_LINE INDENT continue NEW_LINE DEDENT if nums [ right ] + nums [ right - 1 ] == - curr : NEW_LINE INDENT tosort = [ curr , nums [ right - 1 ] , nums [ right ] ] NEW_LINE tosort . sort ( ) NEW_LINE key = '_' . join ( [ str ( num ) for num in tosort ] ) NEW_LINE result [ key ] = tosort NEW_LINE continue NEW_LINE DEDENT if left + 1 < len ( nums ) and nums [ left ] + nums [ left + 1 ] > - curr : NEW_LINE INDENT continue NEW_LINE DEDENT if left + 1 < len ( nums ) and nums [ left ] + nums [ left + 1 ] == - curr : NEW_LINE INDENT tosort = [ curr , nums [ left ] , nums [ left + 1 ] ] NEW_LINE tosort . sort ( ) NEW_LINE key = '_' . join ( [ str ( num ) for num in tosort ] ) NEW_LINE result [ key ] = tosort NEW_LINE continue NEW_LINE DEDENT halfnegcurr = - curr / 2 NEW_LINE while left < right : NEW_LINE INDENT if nums [ left ] > halfnegcurr or nums [ right ] < - halfnegcurr : NEW_LINE INDENT break NEW_LINE DEDENT lrsum = nums [ left ] + nums [ right ] NEW_LINE if lrsum == - curr : NEW_LINE INDENT tosort = [ curr , nums [ left ] , nums [ right ] ] NEW_LINE tosort . sort ( ) NEW_LINE key = '_' . join ( [ str ( num ) for num in tosort ] ) NEW_LINE if key not in result : NEW_LINE INDENT result [ key ] = tosort NEW_LINE DEDENT left = left + 1 NEW_LINE DEDENT if lrsum < - curr : NEW_LINE INDENT left = left + 1 NEW_LINE DEDENT if lrsum > - curr : NEW_LINE INDENT right = right - 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return ( [ result [ key ] for key in result ] ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not nums or len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT ans_set = set ( ) NEW_LINE nums = sorted ( nums ) NEW_LINE for first in range ( len ( nums ) - 2 ) : NEW_LINE INDENT start = first + 1 NEW_LINE end = len ( nums ) - 1 NEW_LINE while ( start < end ) : NEW_LINE INDENT ans = nums [ first ] + nums [ end ] + nums [ start ] NEW_LINE if ans == 0 : NEW_LINE INDENT indiv = ( nums [ first ] , nums [ start ] , nums [ end ] ) NEW_LINE ans_set . add ( indiv ) NEW_LINE start += 1 NEW_LINE end -= 1 NEW_LINE DEDENT elif ans > 0 : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT start += 1 NEW_LINE DEDENT DEDENT DEDENT ans_set = list ( ans_set ) NEW_LINE for i , elem in enumerate ( ans_set ) : NEW_LINE INDENT ans_set [ i ] = list ( elem ) NEW_LINE DEDENT return ans_set NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return ( [ ] ) NEW_LINE DEDENT result = { } NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT curr = nums [ i ] NEW_LINE if curr > 0 : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT left = i + 1 NEW_LINE right = len ( nums ) - 1 NEW_LINE if nums [ right ] + nums [ right - 1 ] < - curr : NEW_LINE INDENT continue NEW_LINE DEDENT if nums [ right ] + nums [ right - 1 ] == - curr : NEW_LINE INDENT tosort = [ curr , nums [ right - 1 ] , nums [ right ] ] NEW_LINE tosort . sort ( ) NEW_LINE key = '_' . join ( [ str ( num ) for num in tosort ] ) NEW_LINE result [ key ] = tosort NEW_LINE continue NEW_LINE DEDENT if left + 1 < len ( nums ) and nums [ left ] + nums [ left + 1 ] > - curr : NEW_LINE INDENT continue NEW_LINE DEDENT if left + 1 < len ( nums ) and nums [ left ] + nums [ left + 1 ] == - curr : NEW_LINE INDENT tosort = [ curr , nums [ left ] , nums [ left + 1 ] ] NEW_LINE tosort . sort ( ) NEW_LINE key = '_' . join ( [ str ( num ) for num in tosort ] ) NEW_LINE result [ key ] = tosort NEW_LINE continue NEW_LINE DEDENT halfnegcurr = - curr / 2 NEW_LINE while left < right : NEW_LINE INDENT if nums [ left ] > halfnegcurr or nums [ right ] < - halfnegcurr : NEW_LINE INDENT break NEW_LINE DEDENT lrsum = nums [ left ] + nums [ right ] NEW_LINE if lrsum == - curr : NEW_LINE INDENT tosort = [ curr , nums [ left ] , nums [ right ] ] NEW_LINE tosort . sort ( ) NEW_LINE key = '_' . join ( [ str ( num ) for num in tosort ] ) NEW_LINE if key not in result : NEW_LINE INDENT result [ key ] = tosort NEW_LINE DEDENT left = left + 1 NEW_LINE DEDENT if lrsum < - curr : NEW_LINE INDENT left = left + 1 NEW_LINE DEDENT if lrsum > - curr : NEW_LINE INDENT right = right - 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return ( [ result [ key ] for key in result ] ) NEW_LINE DEDENT DEDENT
from itertools import combinations NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT s = sorted ( nums ) NEW_LINE result = set ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT j = i + 1 NEW_LINE k = len ( nums ) - 1 NEW_LINE while j < k : NEW_LINE INDENT n = s [ i ] + s [ j ] + s [ k ] NEW_LINE if n == 0 : NEW_LINE INDENT result . add ( tuple ( [ s [ i ] , s [ j ] , s [ k ] ] ) ) NEW_LINE j += 1 NEW_LINE k -= 1 NEW_LINE DEDENT elif n > 0 : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT j += 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
import math NEW_LINE from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT m = defaultdict ( int ) NEW_LINE for n in nums : NEW_LINE INDENT m [ n ] += 1 NEW_LINE DEDENT ret = set ( ) NEW_LINE for n_a in m : NEW_LINE INDENT m [ n_a ] -= 1 NEW_LINE for n_b in m : NEW_LINE INDENT if m [ n_b ] > 0 : NEW_LINE INDENT m [ n_b ] -= 1 NEW_LINE n_c = - n_a - n_b NEW_LINE if n_c in m and m [ n_c ] > 0 : NEW_LINE INDENT ret . add ( tuple ( sorted ( [ n_a , n_b , n_c ] ) ) ) NEW_LINE DEDENT m [ n_b ] += 1 NEW_LINE DEDENT DEDENT m [ n_a ] += 1 NEW_LINE DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE if n <= 2 : return [ ] NEW_LINE res = [ ] NEW_LINE sums = set ( ) NEW_LINE cnt = { } NEW_LINE for z in nums : NEW_LINE INDENT if z in cnt . keys ( ) : NEW_LINE INDENT cnt [ z ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT cnt [ z ] = 1 NEW_LINE DEDENT DEDENT if 0 in cnt . keys ( ) and cnt [ 0 ] >= 3 : NEW_LINE INDENT cnt [ 0 ] = 1 NEW_LINE sums . add ( ( 0 , 0 , 0 ) ) NEW_LINE DEDENT for k in cnt . keys ( ) : NEW_LINE INDENT if cnt [ k ] >= 3 : NEW_LINE INDENT cnt [ k ] = 2 NEW_LINE DEDENT DEDENT nums = [ ] NEW_LINE for k in cnt . keys ( ) : NEW_LINE INDENT for x in range ( cnt [ k ] ) : NEW_LINE INDENT nums . append ( k ) NEW_LINE DEDENT DEDENT nums . sort ( ) NEW_LINE n = len ( nums ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if j == i : NEW_LINE INDENT continue NEW_LINE DEDENT a = nums [ i ] NEW_LINE b = nums [ j ] NEW_LINE cnt [ a ] -= 1 NEW_LINE cnt [ b ] -= 1 NEW_LINE if - ( a + b ) in cnt . keys ( ) and cnt [ - a - b ] > 0 : NEW_LINE INDENT a1 , b1 , c1 = sorted ( [ a , b , - a - b ] ) NEW_LINE sums . add ( ( a1 , b1 , c1 ) ) NEW_LINE DEDENT cnt [ a ] += 1 NEW_LINE cnt [ b ] += 1 NEW_LINE DEDENT DEDENT return [ list ( z ) for z in sums ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def add_to_result_dict ( self , dic , returned_nums ) : NEW_LINE INDENT if returned_nums not in dic : NEW_LINE INDENT dic [ returned_nums ] = 1 NEW_LINE DEDENT DEDENT def two_sum ( self , arr , val , three_sum_result ) : NEW_LINE INDENT seen_elements = { } NEW_LINE for num in arr : NEW_LINE INDENT if ( val - num ) in seen_elements : NEW_LINE INDENT cur_result = ( - val , num , val - num ) NEW_LINE self . add_to_result_dict ( three_sum_result , cur_result ) NEW_LINE DEDENT seen_elements [ num ] = True NEW_LINE DEDENT DEDENT def threeSum ( self , arr ) : NEW_LINE INDENT result = { } NEW_LINE arr . sort ( ) NEW_LINE for i in range ( 0 , len ( arr ) - 1 , 1 ) : NEW_LINE INDENT returned_nums = self . two_sum ( arr [ i + 1 : ] , 0 - arr [ i ] , result ) NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return ( [ ] ) NEW_LINE DEDENT result = { } NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT curr = nums [ i ] NEW_LINE if curr > 0 : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT left = i + 1 NEW_LINE right = len ( nums ) - 1 NEW_LINE if nums [ right ] + nums [ right - 1 ] < - curr : NEW_LINE INDENT continue NEW_LINE DEDENT if nums [ right ] + nums [ right - 1 ] == - curr : NEW_LINE INDENT tosort = [ curr , nums [ right - 1 ] , nums [ right ] ] NEW_LINE tosort . sort ( ) NEW_LINE key = '_' . join ( [ str ( num ) for num in tosort ] ) NEW_LINE result [ key ] = tosort NEW_LINE continue NEW_LINE DEDENT if left + 1 < len ( nums ) and nums [ left ] + nums [ left + 1 ] > - curr : NEW_LINE INDENT continue NEW_LINE DEDENT if left + 1 < len ( nums ) and nums [ left ] + nums [ left + 1 ] == - curr : NEW_LINE INDENT tosort = [ curr , nums [ left ] , nums [ left + 1 ] ] NEW_LINE tosort . sort ( ) NEW_LINE key = '_' . join ( [ str ( num ) for num in tosort ] ) NEW_LINE result [ key ] = tosort NEW_LINE continue NEW_LINE DEDENT halfnegcurr = - curr / 2 NEW_LINE while left < right : NEW_LINE INDENT if nums [ left ] > halfnegcurr or nums [ right ] < - halfnegcurr : NEW_LINE INDENT break NEW_LINE DEDENT lrsum = nums [ left ] + nums [ right ] NEW_LINE if lrsum == - curr : NEW_LINE INDENT tosort = [ curr , nums [ left ] , nums [ right ] ] NEW_LINE tosort . sort ( ) NEW_LINE key = '_' . join ( [ str ( num ) for num in tosort ] ) NEW_LINE result [ key ] = tosort NEW_LINE left = left + 1 NEW_LINE DEDENT if lrsum < - curr : NEW_LINE INDENT left = left + 1 NEW_LINE DEDENT if lrsum > - curr : NEW_LINE INDENT right = right - 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return ( [ result [ key ] for key in result ] ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT result = set ( ) NEW_LINE nums . sort ( ) NEW_LINE left = 0 NEW_LINE right = len ( nums ) - 1 NEW_LINE for i in range ( 0 , right + 1 ) : NEW_LINE INDENT leftP = i + 1 NEW_LINE rightP = right NEW_LINE while ( leftP < rightP ) : NEW_LINE INDENT x = nums [ leftP ] NEW_LINE y = nums [ rightP ] NEW_LINE z = nums [ i ] NEW_LINE total = x + y + z NEW_LINE if ( total == 0 ) : NEW_LINE INDENT result . add ( ( x , y , z ) ) NEW_LINE leftP += 1 NEW_LINE rightP -= 1 NEW_LINE DEDENT elif ( total < 0 ) : NEW_LINE INDENT leftP += 1 NEW_LINE DEDENT else : NEW_LINE INDENT rightP -= 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT s = [ ] NEW_LINE count = 0 NEW_LINE nums = sorted ( nums ) NEW_LINE d = '' NEW_LINE e = set ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT x = nums [ i ] NEW_LINE l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while ( l < r ) : NEW_LINE INDENT if ( x + nums [ l ] + nums [ r ] == 0 ) : NEW_LINE INDENT e . add ( ( x , nums [ l ] , nums [ r ] ) ) NEW_LINE l = l + 1 NEW_LINE r = r - 1 NEW_LINE DEDENT elif ( x + nums [ l ] + nums [ r ] < 0 ) : NEW_LINE INDENT l = l + 1 NEW_LINE DEDENT else : NEW_LINE INDENT r = r - 1 NEW_LINE DEDENT DEDENT DEDENT return e NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) == 0 : return [ ] NEW_LINE nums . sort ( ) NEW_LINE ans = [ ] NEW_LINE ans_map = { } NEW_LINE i = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT n = nums [ i ] NEW_LINE l = i + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT s = n + nums [ l ] + nums [ r ] NEW_LINE if s == 0 : NEW_LINE INDENT k = str ( n ) + str ( nums [ l ] ) + str ( nums [ r ] ) NEW_LINE if k not in ans_map : NEW_LINE INDENT ans_map [ k ] = True NEW_LINE ans . append ( [ n , nums [ l ] , nums [ r ] ] ) NEW_LINE DEDENT if ( nums [ l ] == nums [ r ] ) : NEW_LINE INDENT while ( l < r and nums [ l ] == nums [ r ] ) : NEW_LINE INDENT l += 1 NEW_LINE DEDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT DEDENT elif s > 0 : NEW_LINE INDENT r -= 1 NEW_LINE while l > r and nums [ r ] == nums [ r + 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT l += 1 NEW_LINE while l > r and nums [ l ] == nums [ l - 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT DEDENT i += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE soln = set ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT j = i + 1 NEW_LINE k = len ( nums ) - 1 NEW_LINE target = 0 - nums [ i ] NEW_LINE while j < k : NEW_LINE INDENT if nums [ j ] + nums [ k ] == target : NEW_LINE INDENT soln . add ( ( nums [ i ] , nums [ j ] , nums [ k ] ) ) NEW_LINE j += 1 NEW_LINE DEDENT if nums [ j ] + nums [ k ] < target : NEW_LINE INDENT j += 1 NEW_LINE DEDENT else : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT DEDENT DEDENT return list ( soln ) NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = set ( ) NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT target = - num NEW_LINE seen = set ( ) NEW_LINE left , right = i + 1 , len ( nums ) - 1 NEW_LINE while left < len ( nums ) and left < right : NEW_LINE INDENT score = nums [ left ] + nums [ right ] NEW_LINE if score == target : NEW_LINE INDENT triplet = ( num , nums [ left ] , nums [ right ] ) NEW_LINE result . add ( triplet ) NEW_LINE left += 1 NEW_LINE right -= 1 NEW_LINE DEDENT elif score < target : NEW_LINE INDENT left += 1 NEW_LINE DEDENT else : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE seen = set ( ) NEW_LINE ans = [ ] NEW_LINE n = len ( nums ) NEW_LINE for k in range ( n ) : NEW_LINE INDENT t = - nums [ k ] NEW_LINE i = k + 1 NEW_LINE j = n - 1 NEW_LINE while i < j : NEW_LINE INDENT ps = nums [ i ] + nums [ j ] NEW_LINE if ps < t : NEW_LINE INDENT i += 1 NEW_LINE DEDENT elif ps > t : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT key = nums [ i ] * 10 ** 6 + nums [ j ] NEW_LINE if key not in seen : NEW_LINE INDENT seen . add ( key ) NEW_LINE ans . append ( [ nums [ i ] , nums [ k ] , nums [ j ] ] ) NEW_LINE DEDENT i += 1 NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not nums : NEW_LINE INDENT return NEW_LINE DEDENT nums . sort ( ) NEW_LINE ans = set ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 1 : NEW_LINE INDENT continue NEW_LINE DEDENT lo = i + 1 NEW_LINE hi = len ( nums ) - 1 NEW_LINE while lo < hi : NEW_LINE INDENT if nums [ lo ] + nums [ hi ] + nums [ i ] == 0 : NEW_LINE INDENT ans . add ( ( nums [ i ] , nums [ lo ] , nums [ hi ] ) ) NEW_LINE lo += 1 NEW_LINE hi -= 1 NEW_LINE DEDENT elif nums [ lo ] + nums [ hi ] + nums [ i ] > 0 : NEW_LINE INDENT hi -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT lo += 1 NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT sol = set ( ) NEW_LINE nums . sort ( ) NEW_LINE for pivot in range ( 1 , len ( nums ) - 1 ) : NEW_LINE INDENT left = 0 NEW_LINE right = len ( nums ) - 1 NEW_LINE while pivot < right and pivot > left : NEW_LINE INDENT target = nums [ left ] + nums [ pivot ] + nums [ right ] NEW_LINE if target > 0 : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT elif target < 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT else : NEW_LINE INDENT sol . add ( tuple ( [ nums [ left ] , nums [ pivot ] , nums [ right ] ] ) ) NEW_LINE left += 1 NEW_LINE right -= 1 NEW_LINE DEDENT DEDENT DEDENT return sol NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT l , r = i + 1 , len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT s = nums [ i ] + nums [ l ] + nums [ r ] NEW_LINE if s < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif s > 0 : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( ( nums [ i ] , nums [ l ] , nums [ r ] ) ) NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT DEDENT DEDENT return list ( set ( res ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT nums [ : ] = list ( set ( nums ) ) NEW_LINE nums . sort ( ) NEW_LINE return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT nums [ : ] = sorted ( list ( set ( nums ) ) ) NEW_LINE return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT j = 0 NEW_LINE if len ( nums ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT if nums [ j ] != nums [ i ] : NEW_LINE INDENT j += 1 NEW_LINE nums [ j ] = nums [ i ] NEW_LINE DEDENT DEDENT return j + 1 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT i = 1 NEW_LINE j = 1 NEW_LINE while j < len ( nums ) : NEW_LINE INDENT if nums [ j ] == nums [ i - 1 ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums [ i ] = nums [ j ] NEW_LINE i += 1 NEW_LINE j += 1 NEW_LINE DEDENT DEDENT return len ( nums [ : i ] ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT i = 0 NEW_LINE for num in nums : NEW_LINE INDENT if num != nums [ i ] : NEW_LINE INDENT i += 1 NEW_LINE nums [ i ] = num NEW_LINE DEDENT DEDENT return i + 1 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT top = 0 NEW_LINE for elem in nums : NEW_LINE INDENT if elem != nums [ top ] : NEW_LINE INDENT nums [ top + 1 ] = elem NEW_LINE top += 1 ; NEW_LINE DEDENT DEDENT return top + 1 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT i = 0 NEW_LINE for num in nums : NEW_LINE INDENT if num != nums [ i ] : NEW_LINE INDENT i += 1 NEW_LINE nums [ i ] = num NEW_LINE DEDENT DEDENT return i + 1 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if not nums : NEW_LINE INDENT return 0 NEW_LINE DEDENT i = 0 NEW_LINE for j in range ( 1 , len ( nums ) ) : NEW_LINE INDENT if nums [ j ] != nums [ i ] : NEW_LINE INDENT i += 1 NEW_LINE nums [ i ] = nums [ j ] NEW_LINE DEDENT DEDENT print ( nums ) NEW_LINE return i + 1 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT nums . sort ( ) NEW_LINE i = 1 NEW_LINE n = len ( nums ) NEW_LINE while i < n : NEW_LINE INDENT if nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT nums . remove ( nums [ i ] ) NEW_LINE n -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT i = 0 NEW_LINE j = 1 NEW_LINE while i < len ( nums ) and j < len ( nums ) : NEW_LINE INDENT if nums [ i ] == nums [ j ] : NEW_LINE INDENT nums . remove ( nums [ j ] ) NEW_LINE DEDENT else : NEW_LINE INDENT i = i + 1 NEW_LINE j = j + 1 NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif len ( nums ) == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT i = 0 NEW_LINE j = len ( nums ) - 1 NEW_LINE while ( i != len ( nums ) - 1 ) : NEW_LINE INDENT if nums [ i ] != nums [ i + 1 ] : NEW_LINE INDENT i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums . remove ( nums [ i ] ) NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT y = 0 NEW_LINE for i in range ( 0 , len ( nums ) - 1 ) : NEW_LINE INDENT if nums [ y ] == nums [ y + 1 ] : NEW_LINE INDENT nums . remove ( nums [ y ] ) NEW_LINE DEDENT else : NEW_LINE INDENT y += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT dict1 = { } NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT keys = dict1 . keys ( ) NEW_LINE k = nums [ i ] NEW_LINE if k not in keys : NEW_LINE INDENT dict1 [ k ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums [ i ] = 'app' NEW_LINE DEDENT DEDENT for i in nums : NEW_LINE INDENT while i == 'app' : NEW_LINE INDENT if i == 'app' : NEW_LINE INDENT try : NEW_LINE INDENT nums . remove ( i ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT DEDENT return ( len ( nums ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT l = len ( nums ) NEW_LINE if l == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT idx = 1 NEW_LINE while idx < l : NEW_LINE INDENT if nums [ idx ] == nums [ idx - 1 ] : NEW_LINE INDENT temp = nums [ idx ] NEW_LINE nums [ idx : - 1 ] = nums [ idx + 1 : ] NEW_LINE nums [ - 1 ] = temp NEW_LINE l -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT idx += 1 NEW_LINE DEDENT DEDENT return l NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT count = 1 NEW_LINE i = 0 NEW_LINE while i < len ( nums ) - 1 : NEW_LINE INDENT j = 1 NEW_LINE while ( i + j ) < len ( nums ) and nums [ i ] == nums [ i + j ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT if j > 1 : NEW_LINE INDENT nums [ i + 1 : ] = nums [ i + j : ] NEW_LINE DEDENT count += 1 NEW_LINE i += 1 NEW_LINE DEDENT print ( count ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT c = 0 NEW_LINE for i in range ( len ( nums ) - 1 ) : NEW_LINE INDENT if nums [ i ] == nums [ i + 1 ] : NEW_LINE INDENT nums [ i ] = '#' NEW_LINE DEDENT DEDENT for i in range ( nums . count ( '#' ) ) : NEW_LINE INDENT nums . remove ( '#' ) NEW_LINE DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT i = 0 NEW_LINE while i < len ( nums ) - 1 : NEW_LINE INDENT if nums [ i ] == nums [ i + 1 ] : NEW_LINE INDENT nums [ i : len ( nums ) - 1 ] = nums [ i + 1 : len ( nums ) ] NEW_LINE nums . pop ( ) NEW_LINE continue NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT seen = None NEW_LINE if not nums : NEW_LINE INDENT return 0 NEW_LINE DEDENT i = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT current = nums [ i ] NEW_LINE if current != seen : NEW_LINE INDENT seen = current NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums [ i : ] = nums [ i + 1 : ] NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if len ( nums ) == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT if len ( nums ) == 2 and nums [ 0 ] == nums [ 1 ] : NEW_LINE INDENT return 1 NEW_LINE DEDENT elif len ( nums ) == 2 and nums [ 0 ] != nums [ 1 ] : NEW_LINE INDENT return 2 NEW_LINE DEDENT for idx in range ( len ( nums ) - 1 ) : NEW_LINE INDENT if idx < len ( nums ) - 1 : NEW_LINE INDENT while nums [ idx ] == nums [ idx + 1 ] : NEW_LINE INDENT nums . remove ( nums [ idx + 1 ] ) NEW_LINE if idx >= len ( nums ) - 1 : NEW_LINE INDENT return len ( nums ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT l = 0 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT if nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT nums . remove ( nums [ l ] ) NEW_LINE r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT l += 1 NEW_LINE DEDENT if nums [ r ] == nums [ r - 1 ] and len ( nums ) > 1 : NEW_LINE INDENT nums . remove ( nums [ r ] ) NEW_LINE DEDENT r -= 1 NEW_LINE DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT count = 1 NEW_LINE i = 0 NEW_LINE while i < len ( nums ) - 1 : NEW_LINE INDENT j = 1 NEW_LINE while ( i + j ) < len ( nums ) and nums [ i ] == nums [ i + j ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT if j > 1 : NEW_LINE INDENT nums [ i + 1 : ] = nums [ i + j : ] NEW_LINE DEDENT count += 1 NEW_LINE i += 1 NEW_LINE DEDENT print ( count ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) <= 1 : NEW_LINE INDENT return len ( nums ) NEW_LINE DEDENT prev = nums [ 0 ] NEW_LINE i = 1 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT num = nums [ i ] NEW_LINE if num == prev : NEW_LINE INDENT nums [ i - 1 : ] = nums [ i : ] NEW_LINE DEDENT else : NEW_LINE INDENT prev = nums [ i ] NEW_LINE i += 1 NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT @ staticmethod NEW_LINE def delete ( l , pos ) : NEW_LINE INDENT l [ pos : - 1 ] = l [ pos + 1 : ] NEW_LINE del l [ - 1 ] NEW_LINE DEDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT cur_len = len ( nums ) NEW_LINE i = 0 NEW_LINE while i < cur_len - 1 : NEW_LINE INDENT if nums [ i ] == nums [ i + 1 ] : NEW_LINE INDENT while i + 1 < cur_len and nums [ i ] == nums [ i + 1 ] : NEW_LINE INDENT self . delete ( nums , i ) NEW_LINE cur_len -= 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT return cur_len NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT i = 1 NEW_LINE while i <= len ( nums ) - 1 : NEW_LINE INDENT if nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT nums [ i - 1 : ] = nums [ i : ] NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT length = len ( nums ) NEW_LINE i = 0 NEW_LINE while i < length - 1 : NEW_LINE INDENT if nums [ i + 1 ] == nums [ i ] : NEW_LINE INDENT nums [ i + 1 : ] = nums [ i + 2 : ] NEW_LINE length -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT return length NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) > 1 : NEW_LINE INDENT i = 1 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT num = nums [ i ] NEW_LINE if nums [ i - 1 ] == nums [ i ] : NEW_LINE INDENT nums [ i - 1 : ] = nums [ i : ] NEW_LINE i -= 1 NEW_LINE DEDENT i += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT i = 1 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT if nums [ i - 1 ] == nums [ i ] : NEW_LINE INDENT nums . remove ( nums [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT distinct = 0 NEW_LINE end = len ( nums ) - 1 NEW_LINE for x in range ( 0 , end ) : NEW_LINE INDENT if nums [ x ] != nums [ x + 1 ] : NEW_LINE INDENT distinct += 1 NEW_LINE nums [ distinct ] = nums [ x + 1 ] NEW_LINE DEDENT DEDENT for x in range ( distinct , end ) : NEW_LINE INDENT nums . remove ( nums [ distinct ] ) NEW_LINE DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT ht = dict ( ) NEW_LINE for i in nums : NEW_LINE INDENT if i in ht . keys ( ) : NEW_LINE INDENT ht [ i ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ht [ i ] = 1 NEW_LINE DEDENT DEDENT for i in ht . keys ( ) : NEW_LINE INDENT if ht [ i ] > 1 : NEW_LINE INDENT while ( ht [ i ] > 1 ) : NEW_LINE INDENT nums . remove ( i ) NEW_LINE ht [ i ] -= 1 NEW_LINE DEDENT DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT from collections import defaultdict NEW_LINE frequency_dict = defaultdict ( int ) NEW_LINE for n in nums : NEW_LINE INDENT frequency_dict [ n ] += 1 NEW_LINE DEDENT for key , value in frequency_dict . items ( ) : NEW_LINE INDENT for i in range ( value - 1 ) : NEW_LINE INDENT nums . remove ( key ) NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT i = 1 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT if nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT nums . remove ( nums [ i ] ) NEW_LINE i -= 1 NEW_LINE DEDENT i += 1 NEW_LINE DEDENT print ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT first = 0 NEW_LINE second = 1 NEW_LINE while first < second and second < len ( nums ) : NEW_LINE INDENT curr = nums [ first ] NEW_LINE if curr == nums [ second ] : NEW_LINE INDENT nums . remove ( nums [ second ] ) NEW_LINE DEDENT else : NEW_LINE INDENT first += 1 NEW_LINE second += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT sol = [ ] NEW_LINE for i in nums : NEW_LINE INDENT if i in sol : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT sol . append ( i ) NEW_LINE DEDENT DEDENT nums [ : ] = sol [ : ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT answer = [ ] NEW_LINE for j in nums : NEW_LINE INDENT if j not in answer : NEW_LINE INDENT answer . append ( j ) NEW_LINE DEDENT DEDENT nums . clear ( ) NEW_LINE nums . extend ( answer ) NEW_LINE return len ( answer ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT res = [ ] NEW_LINE count = 0 NEW_LINE for i in nums : NEW_LINE INDENT if i in res : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( i ) NEW_LINE nums [ count ] = i NEW_LINE count = count + 1 NEW_LINE DEDENT DEDENT return len ( res ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT n = [ ] NEW_LINE for i in nums : NEW_LINE INDENT if i not in n : NEW_LINE INDENT n . append ( i ) NEW_LINE DEDENT DEDENT for i in range ( len ( n ) ) : NEW_LINE INDENT nums [ i ] = n [ i ] NEW_LINE DEDENT return len ( n ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT r = [ ] NEW_LINE for i in nums : NEW_LINE INDENT if i not in r : NEW_LINE INDENT r . append ( i ) NEW_LINE DEDENT DEDENT nums . clear ( ) NEW_LINE nums . extend ( r ) NEW_LINE return len ( r ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT filtered = [ ] NEW_LINE n = 0 NEW_LINE for num in nums : NEW_LINE INDENT if num not in filtered : NEW_LINE INDENT filtered . append ( num ) NEW_LINE n += 1 NEW_LINE DEDENT DEDENT nums [ : ] = filtered NEW_LINE return n NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT extra = nums . copy ( ) NEW_LINE nums . clear ( ) NEW_LINE for a in extra : NEW_LINE INDENT if not a in nums : NEW_LINE INDENT nums . append ( a ) NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT record = [ ] NEW_LINE count = 0 NEW_LINE for i in nums : NEW_LINE INDENT if i in record : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT record . append ( i ) NEW_LINE nums [ count ] = i NEW_LINE count += 1 NEW_LINE DEDENT DEDENT return len ( record ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT seen = [ ] NEW_LINE i = 0 NEW_LINE length = len ( nums ) NEW_LINE while i < length : NEW_LINE INDENT if i >= len ( nums ) : NEW_LINE INDENT break NEW_LINE DEDENT if nums [ i ] in seen : NEW_LINE INDENT del nums [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT seen . append ( nums [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT new_array = [ ] NEW_LINE i = 0 NEW_LINE for num in nums : NEW_LINE INDENT if num not in new_array : NEW_LINE INDENT new_array . append ( num ) NEW_LINE nums [ i ] = num NEW_LINE i += 1 NEW_LINE DEDENT DEDENT return i NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , A ) : NEW_LINE INDENT if not A : NEW_LINE INDENT return 0 NEW_LINE DEDENT temp = [ ] NEW_LINE for num in A : NEW_LINE INDENT if num not in temp : NEW_LINE INDENT temp . append ( num ) NEW_LINE DEDENT DEDENT for i in range ( 0 , len ( temp ) ) : NEW_LINE INDENT A [ i ] = temp [ i ] NEW_LINE DEDENT return len ( temp ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT uniq = [ ] NEW_LINE for i in nums : NEW_LINE INDENT if i not in uniq : NEW_LINE INDENT uniq . append ( i ) NEW_LINE DEDENT DEDENT nums [ : ] = uniq NEW_LINE return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT filtered = [ ] NEW_LINE for num in nums : NEW_LINE INDENT if num not in filtered : NEW_LINE INDENT filtered . append ( num ) NEW_LINE DEDENT DEDENT nums [ : ] = filtered NEW_LINE return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT temp = [ ] NEW_LINE i = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT if nums [ i ] not in temp : NEW_LINE INDENT temp . append ( nums [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT nums . pop ( i ) NEW_LINE i -= 1 NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT dup_n = [ ] NEW_LINE orig_len = len ( nums ) NEW_LINE deleted_times = 0 NEW_LINE for idx in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ idx - deleted_times ] in dup_n : NEW_LINE INDENT nums . pop ( idx - deleted_times ) NEW_LINE deleted_times += 1 NEW_LINE DEDENT else : NEW_LINE INDENT dup_n . append ( nums [ idx - deleted_times ] ) NEW_LINE DEDENT DEDENT return orig_len - deleted_times NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT for index in range ( len ( nums ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT if nums [ index ] == nums [ index + 1 ] : NEW_LINE INDENT nums . remove ( nums [ index ] ) NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT seen = [ ] NEW_LINE for i in range ( len ( nums ) ) [ : : - 1 ] : NEW_LINE INDENT if nums [ i ] not in seen : NEW_LINE INDENT seen . append ( nums [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT nums . pop ( i ) NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT i = 0 NEW_LINE arr = [ n for n in nums ] NEW_LINE k = 0 NEW_LINE d = [ ] NEW_LINE while i < len ( arr ) : NEW_LINE INDENT if arr [ i ] in d : NEW_LINE INDENT nums . pop ( k ) NEW_LINE k = k - 1 NEW_LINE DEDENT else : NEW_LINE INDENT d . append ( arr [ i ] ) NEW_LINE DEDENT i = i + 1 NEW_LINE k = k + 1 NEW_LINE DEDENT l = len ( nums ) NEW_LINE return l NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT index_list = [ ] NEW_LINE check_array = [ ] NEW_LINE for index , number in enumerate ( nums ) : NEW_LINE INDENT if number not in check_array : NEW_LINE INDENT check_array . append ( number ) NEW_LINE DEDENT else : NEW_LINE INDENT index_list . append ( index ) NEW_LINE DEDENT DEDENT index_list . sort ( reverse = True ) NEW_LINE for index in index_list : NEW_LINE INDENT nums . pop ( index ) NEW_LINE DEDENT print ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT dup_n = [ ] NEW_LINE orig_len = len ( nums ) NEW_LINE deleted_times = 0 NEW_LINE for idx in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ idx - deleted_times ] in dup_n : NEW_LINE INDENT nums . pop ( idx - deleted_times ) NEW_LINE deleted_times += 1 NEW_LINE DEDENT else : NEW_LINE INDENT dup_n . append ( nums [ idx - deleted_times ] ) NEW_LINE DEDENT DEDENT return orig_len - deleted_times NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT i = 0 NEW_LINE stack = [ ] NEW_LINE while i < len ( nums ) : NEW_LINE INDENT if nums [ i ] in stack : NEW_LINE INDENT del nums [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT stack . append ( nums [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT i = 0 NEW_LINE stack = [ ] NEW_LINE while i < len ( nums ) : NEW_LINE INDENT if nums [ i ] in stack : NEW_LINE INDENT del nums [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT stack . append ( nums [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT DEDENT print ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT current = 0 NEW_LINE while current < len ( nums ) : NEW_LINE INDENT try : NEW_LINE INDENT index = nums . index ( nums [ current ] , current + 1 ) NEW_LINE while index != - 1 : NEW_LINE INDENT nums . pop ( index ) NEW_LINE index = nums . index ( nums [ current ] , current + 1 ) NEW_LINE DEDENT DEDENT except ValueError : NEW_LINE INDENT current = current + 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT e = nums [ i ] NEW_LINE if e == nums [ i - 1 ] : NEW_LINE INDENT nums [ i - 1 ] = None NEW_LINE DEDENT DEDENT while None in nums : NEW_LINE INDENT nums . remove ( None ) NEW_LINE DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT res = nums . copy ( ) NEW_LINE nums . clear ( ) NEW_LINE for x in res : NEW_LINE INDENT if x not in nums : NEW_LINE INDENT nums . append ( x ) NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT duplicates = [ ] NEW_LINE i = 0 NEW_LINE indexToAddAt = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT if nums [ i ] not in duplicates : NEW_LINE INDENT if i != 0 or i == indexToAddAt : NEW_LINE INDENT nums . insert ( indexToAddAt , nums . pop ( i ) ) NEW_LINE DEDENT duplicates . append ( nums [ i ] ) NEW_LINE indexToAddAt += 1 NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums . pop ( i ) NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT duplicates = [ ] NEW_LINE i = 0 NEW_LINE indexToAddAt = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT if nums [ i ] not in duplicates : NEW_LINE INDENT if i != 0 or i == indexToAddAt : NEW_LINE INDENT nums . insert ( indexToAddAt , nums . pop ( i ) ) NEW_LINE DEDENT duplicates . append ( nums [ i ] ) NEW_LINE indexToAddAt += 1 NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums . pop ( i ) NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution ( object ) : NEW_LINE INDENT def removeDuplicates ( self , nums ) : NEW_LINE INDENT NEW_LINE res = nums . copy ( ) NEW_LINE nums . clear ( ) NEW_LINE [ nums . append ( n ) for n in res if n not in nums ] NEW_LINE return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT for i in range ( len ( nums ) - 1 ) : NEW_LINE INDENT if nums [ i ] == nums [ i + 1 ] : NEW_LINE INDENT nums [ i ] = None NEW_LINE DEDENT DEDENT while None in nums : NEW_LINE INDENT nums . remove ( None ) NEW_LINE DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT n = len ( set ( nums ) ) NEW_LINE i = 1 NEW_LINE while len ( nums ) != n : NEW_LINE INDENT if i < len ( nums ) - 1 : NEW_LINE INDENT if nums [ i - 1 ] == nums [ i ] : NEW_LINE INDENT nums . remove ( nums [ i - 1 ] ) NEW_LINE DEDENT i = nums . index ( nums [ i ] ) + 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return n NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT original_length = len ( nums ) NEW_LINE counter = 0 NEW_LINE for num in nums : NEW_LINE INDENT if ( counter == 0 ) : NEW_LINE INDENT unique_num = num NEW_LINE DEDENT else : NEW_LINE INDENT if ( unique_num == num ) : NEW_LINE INDENT nums [ counter ] = None NEW_LINE DEDENT else : NEW_LINE INDENT unique_num = num NEW_LINE DEDENT DEDENT counter += 1 NEW_LINE DEDENT while None in nums : NEW_LINE INDENT nums . remove ( None ) NEW_LINE DEDENT final_length = len ( nums ) NEW_LINE return final_length NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) <= 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT remove = 'x' NEW_LINE current = nums [ 0 ] NEW_LINE for idx in range ( 1 , len ( nums ) ) : NEW_LINE INDENT value = nums [ idx ] NEW_LINE if current == value : NEW_LINE INDENT nums [ idx ] = remove NEW_LINE DEDENT else : NEW_LINE INDENT current = value NEW_LINE DEDENT DEDENT while ( remove in nums ) : NEW_LINE INDENT nums . remove ( remove ) NEW_LINE DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT prev = float ( 'inf' ) NEW_LINE for num in nums [ : : - 1 ] : NEW_LINE INDENT if prev == num : NEW_LINE INDENT nums . remove ( num ) NEW_LINE DEDENT else : NEW_LINE INDENT prev = num NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT l = [ ] NEW_LINE for i in nums : NEW_LINE INDENT if i not in l : NEW_LINE INDENT l . append ( i ) NEW_LINE DEDENT DEDENT nums . clear ( ) NEW_LINE for i in l : NEW_LINE INDENT nums . append ( i ) NEW_LINE DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) > 0 : NEW_LINE INDENT last_item = nums [ len ( nums ) - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT for item in sorted ( range ( len ( nums ) - 1 ) , reverse = True ) : NEW_LINE INDENT list_item = nums [ item ] NEW_LINE if list_item == last_item : NEW_LINE INDENT nums . remove ( list_item ) NEW_LINE DEDENT else : NEW_LINE INDENT last_item = list_item NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) < 2 : NEW_LINE INDENT return len ( nums ) NEW_LINE DEDENT for i , x in enumerate ( nums ) : NEW_LINE INDENT if i > 0 and x == nums [ i - 1 ] : NEW_LINE INDENT nums [ i - 1 ] = 'del' NEW_LINE DEDENT DEDENT while 'del' in nums : NEW_LINE INDENT nums . remove ( 'del' ) NEW_LINE DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT NEW_LINE if not height or len ( height ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT n = len ( height ) NEW_LINE left = [ height [ 0 ] ] NEW_LINE right = [ height [ n - 1 ] ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT left . append ( max ( left [ i - 1 ] , height [ i ] ) ) NEW_LINE DEDENT for i in range ( n - 1 ) [ : : - 1 ] : NEW_LINE INDENT right = [ max ( right [ 0 ] , height [ i ] ) ] + right NEW_LINE DEDENT no_of_blocks = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT no_of_blocks += min ( left [ i ] , right [ i ] ) - height [ i ] NEW_LINE DEDENT return no_of_blocks NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT n = len ( height ) NEW_LINE if n == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT totalWater = 0 NEW_LINE waterLevelLeftMax = [ ] NEW_LINE waterLevelLeftMax . append ( height [ 0 ] ) NEW_LINE waterLevelRightMax = [ ] NEW_LINE waterLevelRightMax . append ( height [ - 1 ] ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT waterLevelLeftMax . append ( max ( height [ i ] , waterLevelLeftMax [ i - 1 ] ) ) NEW_LINE DEDENT for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT waterLevelRightMax = [ ( max ( height [ i ] , waterLevelRightMax [ 0 ] ) ) ] + waterLevelRightMax NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT totalWater += min ( waterLevelRightMax [ i ] , waterLevelLeftMax [ i ] ) - height [ i ] NEW_LINE DEDENT return totalWater NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT peaks = [ ] NEW_LINE peakIndex = [ ] NEW_LINE idx = 0 NEW_LINE trap = 0 NEW_LINE maxi = 0 NEW_LINE if len ( height ) < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT for key , item in enumerate ( height ) : NEW_LINE INDENT if key == 0 : NEW_LINE INDENT if item >= height [ key + 1 ] : NEW_LINE INDENT peaks . append ( item ) NEW_LINE peakIndex . append ( key ) NEW_LINE DEDENT DEDENT elif key == ( len ( height ) - 1 ) : NEW_LINE INDENT if item >= height [ key - 1 ] : NEW_LINE INDENT peaks . append ( item ) NEW_LINE peakIndex . append ( key ) NEW_LINE DEDENT DEDENT elif item >= height [ key - 1 ] and item >= height [ key + 1 ] : NEW_LINE INDENT peaks . append ( item ) NEW_LINE peakIndex . append ( key ) NEW_LINE DEDENT DEDENT while idx < len ( peaks ) - 1 : NEW_LINE INDENT item = peaks [ idx ] NEW_LINE index = peakIndex [ idx ] NEW_LINE idx1 = index NEW_LINE if max ( peaks [ idx + 1 : ] ) < item : NEW_LINE INDENT idx1 = idx1 + 1 NEW_LINE maxi = peakIndex [ peaks [ idx + 1 : ] . index ( max ( peaks [ idx + 1 : ] ) ) + idx + 1 ] NEW_LINE while idx1 < len ( height ) and idx1 < peakIndex [ peaks [ idx + 1 : ] . index ( max ( peaks [ idx + 1 : ] ) ) + idx + 1 ] : NEW_LINE INDENT if max ( peaks [ idx + 1 : ] ) - height [ idx1 ] > 0 : NEW_LINE INDENT trap = trap + max ( peaks [ idx + 1 : ] ) - height [ idx1 ] NEW_LINE DEDENT idx1 = idx1 + 1 NEW_LINE DEDENT DEDENT elif max ( peaks [ idx + 1 : ] ) >= item : NEW_LINE INDENT idx1 = idx1 + 1 NEW_LINE while idx1 < len ( height ) and height [ idx1 ] < item : NEW_LINE INDENT trap = trap + item - height [ idx1 ] NEW_LINE idx1 = idx1 + 1 NEW_LINE DEDENT DEDENT if idx1 >= len ( height ) : NEW_LINE INDENT return trap NEW_LINE DEDENT if idx1 in peakIndex : NEW_LINE INDENT idx = peakIndex . index ( idx1 ) NEW_LINE DEDENT else : NEW_LINE INDENT while idx1 not in peakIndex : NEW_LINE INDENT idx1 = idx1 + 1 NEW_LINE DEDENT idx = peakIndex . index ( idx1 ) NEW_LINE DEDENT idx1 = 0 NEW_LINE DEDENT return trap NEW_LINE DEDENT DEDENT
class notFilledError ( Exception ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT def noneBigger ( lis , ind ) : NEW_LINE INDENT for i in lis [ ind + 1 : ] : NEW_LINE INDENT if i > lis [ ind ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def chooseLower ( num1 , num2 ) : NEW_LINE INDENT if num1 > num2 : NEW_LINE INDENT return num2 NEW_LINE DEDENT return num1 NEW_LINE DEDENT def exec ( height ) : NEW_LINE INDENT if len ( height ) < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT puddle = [ height [ 0 ] ] NEW_LINE depth = 0 NEW_LINE water = 0 NEW_LINE boo = False NEW_LINE i = 1 NEW_LINE while i < len ( height ) : NEW_LINE INDENT num = height [ i ] NEW_LINE if ( num >= puddle [ 0 ] ) | boo : NEW_LINE INDENT puddle . append ( num ) NEW_LINE boo = False NEW_LINE depth = chooseLower ( puddle [ 0 ] , puddle [ - 1 ] ) NEW_LINE for j in puddle [ 1 : - 1 ] : NEW_LINE INDENT water += depth - j NEW_LINE DEDENT puddle = [ num ] NEW_LINE DEDENT else : NEW_LINE INDENT puddle . append ( num ) NEW_LINE if noneBigger ( height , i ) : NEW_LINE INDENT i -= 1 NEW_LINE boo = True NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT if len ( puddle ) > 1 : NEW_LINE INDENT try : NEW_LINE INDENT for i in puddle [ 1 : - 1 ] : NEW_LINE INDENT if i > puddle [ - 1 ] : NEW_LINE INDENT raise notFilledError NEW_LINE DEDENT DEDENT depth = chooseLower ( puddle [ 0 ] , puddle [ - 1 ] ) NEW_LINE for i in puddle [ 1 : - 1 ] : NEW_LINE INDENT water += depth - i NEW_LINE DEDENT DEDENT except notFilledError : NEW_LINE INDENT if puddle [ - 1 ] <= puddle [ - 2 ] : NEW_LINE INDENT puddle . pop ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT puddle . pop ( 1 ) NEW_LINE DEDENT water += exec ( puddle ) NEW_LINE DEDENT DEDENT return water NEW_LINE DEDENT print ( exec ( [ 9 , 6 , 8 , 8 , 5 , 6 , 3 ] ) ) NEW_LINE class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT return exec ( height ) NEW_LINE DEDENT DEDENT
import numpy as np NEW_LINE class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT n = len ( height ) NEW_LINE if n <= 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT lf_height = np . zeros ( n ) NEW_LINE rt_height = np . zeros ( n ) NEW_LINE lf_height [ 0 ] = height [ 0 ] NEW_LINE rt_height [ n - 1 ] = height [ n - 1 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT lf_height [ i ] = height [ i ] * ( height [ i ] > lf_height [ i - 1 ] ) + lf_height [ i - 1 ] * ( height [ i ] <= lf_height [ i - 1 ] ) NEW_LINE rt_height [ n - 1 - i ] = height [ n - 1 - i ] * ( height [ n - 1 - i ] > rt_height [ n - i ] ) + rt_height [ n - i ] * ( height [ n - 1 - i ] <= rt_height [ n - i ] ) NEW_LINE DEDENT print ( lf_height ) NEW_LINE print ( rt_height ) NEW_LINE water = sum ( np . array ( [ lf_height , rt_height ] ) . min ( axis = 0 ) - np . array ( height ) ) NEW_LINE DEDENT return int ( water ) NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE from typing import List NEW_LINE class Solution : NEW_LINE INDENT def trap ( self , heights : List [ int ] ) -> int : NEW_LINE INDENT if len ( heights ) <= 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT sorted_height = sorted ( heights ) NEW_LINE c = Counter ( heights ) NEW_LINE print ( c ) NEW_LINE biggest = sorted_height [ - 1 ] NEW_LINE indices = [ i for i , j in enumerate ( heights ) if j == biggest ] NEW_LINE critical = biggest NEW_LINE if c [ biggest ] > 1 : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT sorted_height . remove ( biggest ) NEW_LINE second_biggest = max ( sorted_height ) NEW_LINE for i , j in enumerate ( heights ) : NEW_LINE INDENT if j == second_biggest : NEW_LINE INDENT indices . append ( i ) NEW_LINE DEDENT DEDENT critical = second_biggest NEW_LINE DEDENT start = min ( indices ) NEW_LINE end = max ( indices ) NEW_LINE result = 0 NEW_LINE for i in range ( start + 1 , end ) : NEW_LINE INDENT if critical > heights [ i ] : NEW_LINE INDENT result += critical - heights [ i ] NEW_LINE DEDENT DEDENT return result + self . trap ( heights [ 0 : start + 1 ] ) + self . trap ( heights [ end : ] ) NEW_LINE DEDENT DEDENT if __name__ == '__main__' : NEW_LINE INDENT sol = Solution ( ) NEW_LINE heights = [ 0 , 1 , 0 , 2 , 1 , 0 , 1 , 3 , 2 , 1 , 2 , 1 ] NEW_LINE print ( sol . trap ( heights ) ) NEW_LINE DEDENT
from collections import Counter NEW_LINE from typing import List NEW_LINE class Solution : NEW_LINE INDENT def trap ( self , heights : List [ int ] ) -> int : NEW_LINE INDENT if len ( heights ) <= 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT sorted_height = sorted ( heights ) NEW_LINE c = Counter ( heights ) NEW_LINE print ( c ) NEW_LINE biggest = sorted_height [ - 1 ] NEW_LINE indices = [ i for i , j in enumerate ( heights ) if j == biggest ] NEW_LINE critical = biggest NEW_LINE if c [ biggest ] > 1 : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT sorted_height . remove ( biggest ) NEW_LINE second_biggest = max ( sorted_height ) NEW_LINE for i , j in enumerate ( heights ) : NEW_LINE INDENT if j == second_biggest : NEW_LINE INDENT indices . append ( i ) NEW_LINE DEDENT DEDENT critical = second_biggest NEW_LINE DEDENT start = min ( indices ) NEW_LINE end = max ( indices ) NEW_LINE result = 0 NEW_LINE for i in range ( start + 1 , end ) : NEW_LINE INDENT if critical > heights [ i ] : NEW_LINE INDENT result += critical - heights [ i ] NEW_LINE DEDENT DEDENT return result + self . trap ( heights [ 0 : start + 1 ] ) + self . trap ( heights [ end : ] ) NEW_LINE DEDENT DEDENT if __name__ == '__main__' : NEW_LINE INDENT sol = Solution ( ) NEW_LINE heights = [ 0 , 1 , 0 , 2 , 1 , 0 , 1 , 3 , 2 , 1 , 2 , 1 ] NEW_LINE print ( sol . trap ( heights ) ) NEW_LINE DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT ret = 0 NEW_LINE i = 0 NEW_LINE while i < len ( height ) - 1 : NEW_LINE INDENT if ( height [ i ] == 0 ) : NEW_LINE INDENT i += 1 NEW_LINE continue NEW_LINE DEDENT h1 = height [ i ] NEW_LINE for j , h2 in enumerate ( height [ i + 1 : ] ) : NEW_LINE INDENT if ( h2 > h1 and j == 0 ) : NEW_LINE INDENT i += 1 NEW_LINE break NEW_LINE DEDENT if ( h2 >= h1 ) : NEW_LINE INDENT tmp = 0 NEW_LINE for ele in height [ i + 1 : j + i + 1 ] : NEW_LINE INDENT tmp += ( h1 - ele ) NEW_LINE DEDENT ret += tmp NEW_LINE i = j + i + 1 NEW_LINE break NEW_LINE DEDENT if ( j == len ( height [ i + 1 : ] ) - 1 ) : NEW_LINE INDENT ret += self . trap ( list ( reversed ( height [ i : ] ) ) ) NEW_LINE i = len ( height ) - 1 NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT ret = 0 NEW_LINE i = 0 NEW_LINE while i < len ( height ) - 1 : NEW_LINE INDENT if ( height [ i ] == 0 ) : NEW_LINE INDENT i += 1 NEW_LINE continue NEW_LINE DEDENT h1 = height [ i ] NEW_LINE for j , h2 in enumerate ( height [ i + 1 : ] ) : NEW_LINE INDENT if ( h2 > h1 and j == 0 ) : NEW_LINE INDENT i += 1 NEW_LINE break NEW_LINE DEDENT if ( h2 >= h1 ) : NEW_LINE INDENT for ele in height [ i + 1 : j + i + 1 ] : NEW_LINE INDENT ret += ( h1 - ele ) NEW_LINE DEDENT i = j + i + 1 NEW_LINE break NEW_LINE DEDENT if ( j == len ( height [ i + 1 : ] ) - 1 ) : NEW_LINE INDENT tmp = height [ i : ] NEW_LINE tmp . reverse ( ) NEW_LINE ret += self . trap ( tmp ) NEW_LINE i = len ( height ) - 1 NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT h_len = len ( height ) NEW_LINE if h_len < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT self . res = 0 NEW_LINE def helper ( l , r , w , max_h ) : NEW_LINE INDENT if r < h_len : NEW_LINE INDENT if height [ r ] >= height [ l ] : NEW_LINE INDENT self . res += w NEW_LINE if r + 1 < h_len : NEW_LINE INDENT helper ( r , r + 1 , 0 , height [ r + 1 ] ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT w += height [ l ] - height [ r ] NEW_LINE if height [ r ] > max_h : NEW_LINE INDENT max_h = height [ r ] NEW_LINE DEDENT helper ( l , r + 1 , w , max_h ) NEW_LINE DEDENT DEDENT elif w != 0 : NEW_LINE INDENT height [ l ] = max_h NEW_LINE helper ( l , l + 1 , 0 , height [ l + 1 ] ) NEW_LINE DEDENT DEDENT helper ( 0 , 1 , 0 , height [ 1 ] ) NEW_LINE return self . res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT h_len = len ( height ) NEW_LINE if h_len < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT self . res = 0 NEW_LINE def helper ( l , r , w , max_h ) : NEW_LINE INDENT if r < h_len : NEW_LINE INDENT if height [ r ] >= height [ l ] : NEW_LINE INDENT self . res += w NEW_LINE if r + 1 < h_len : NEW_LINE INDENT helper ( r , r + 1 , 0 , height [ r + 1 ] ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT w += height [ l ] - height [ r ] NEW_LINE if height [ r ] > max_h : NEW_LINE INDENT max_h = height [ r ] NEW_LINE DEDENT helper ( l , r + 1 , w , max_h ) NEW_LINE DEDENT DEDENT elif w != 0 : NEW_LINE INDENT height [ l ] = max_h NEW_LINE helper ( l , l + 1 , 0 , height [ l + 1 ] ) NEW_LINE DEDENT DEDENT helper ( 0 , 1 , 0 , height [ 1 ] ) NEW_LINE return self . res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT stk = [ ] NEW_LINE currMax = 0 NEW_LINE ans = 0 NEW_LINE for i , num in enumerate ( height ) : NEW_LINE INDENT if stk and currMax and num > stk [ - 1 ] : NEW_LINE INDENT for i in reversed ( range ( len ( stk ) ) ) : NEW_LINE INDENT if num > stk [ i ] : NEW_LINE INDENT ans += min ( currMax , num ) - stk [ i ] NEW_LINE stk [ i ] = min ( currMax , num ) NEW_LINE DEDENT DEDENT DEDENT if num >= currMax : NEW_LINE INDENT stk = [ num ] NEW_LINE currMax = num NEW_LINE DEDENT else : NEW_LINE INDENT stk . append ( num ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution ( object ) : NEW_LINE INDENT def trap ( self , height ) : NEW_LINE INDENT NEW_LINE stack , max_val , output = [ ] , 0 , 0 NEW_LINE for i , h in enumerate ( height ) : NEW_LINE INDENT if h >= max_val : NEW_LINE INDENT while stack : NEW_LINE INDENT output += max_val - stack . pop ( ) NEW_LINE DEDENT max_val = h NEW_LINE DEDENT elif len ( stack ) > 1 and h > stack [ - 1 ] : NEW_LINE INDENT for j in range ( len ( stack ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if h > stack [ j ] : NEW_LINE INDENT output += h - stack [ j ] NEW_LINE stack [ j ] = h NEW_LINE DEDENT DEDENT DEDENT stack . append ( h ) NEW_LINE DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def fill ( self , height , start , end ) : NEW_LINE INDENT peak = min ( height [ start ] , height [ end ] ) NEW_LINE rain = 0 NEW_LINE for i in range ( start + 1 , end ) : NEW_LINE INDENT rain += ( peak - height [ i ] ) NEW_LINE DEDENT return rain NEW_LINE DEDENT def trap ( self , height ) : NEW_LINE INDENT if len ( height ) < 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT n = len ( height ) NEW_LINE left = 0 NEW_LINE right = left + 1 NEW_LINE lBoundary = height [ left ] NEW_LINE rBoundary = height [ right ] NEW_LINE tmp = 0 NEW_LINE tmpMax = - float ( 'inf' ) NEW_LINE rain = 0 NEW_LINE while left <= n : NEW_LINE INDENT while right < n and rBoundary < lBoundary : NEW_LINE INDENT print ( left , right ) NEW_LINE if rBoundary >= tmpMax : NEW_LINE INDENT tmp = right NEW_LINE tmpMax = rBoundary NEW_LINE DEDENT right += 1 NEW_LINE if right == n : NEW_LINE INDENT break NEW_LINE DEDENT rBoundary = height [ right ] NEW_LINE DEDENT if rBoundary >= lBoundary : NEW_LINE INDENT rain += self . fill ( height , left , right ) NEW_LINE left = right NEW_LINE lBoundary = height [ left ] NEW_LINE right = left + 1 NEW_LINE if right == n : NEW_LINE INDENT break NEW_LINE DEDENT rBoundary = height [ right ] NEW_LINE DEDENT else : NEW_LINE INDENT rain += self . fill ( height , left , tmp ) NEW_LINE left = tmp NEW_LINE lBoundary = height [ left ] NEW_LINE right = left + 1 NEW_LINE if right == n : NEW_LINE INDENT break NEW_LINE DEDENT rBoundary = height [ right ] NEW_LINE DEDENT tmp = left + 1 NEW_LINE tmpMax = - float ( 'inf' ) NEW_LINE DEDENT return rain NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT size = len ( height ) NEW_LINE self . res = 0 NEW_LINE def helper ( start , end , acc , maxFound ) : NEW_LINE INDENT if end < size : NEW_LINE INDENT if height [ end ] >= height [ start ] : NEW_LINE INDENT self . res += acc NEW_LINE if end + 1 < size : NEW_LINE INDENT helper ( end , end + 1 , 0 , [ end + 1 , height [ end + 1 ] ] ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT acc += height [ start ] - height [ end ] NEW_LINE if height [ end ] > maxFound [ 1 ] : NEW_LINE INDENT maxFound = [ end , height [ end ] ] NEW_LINE DEDENT helper ( start , end + 1 , acc , maxFound ) NEW_LINE DEDENT DEDENT elif acc != 0 : NEW_LINE INDENT height [ start ] = maxFound [ 1 ] NEW_LINE helper ( start , start + 1 , 0 , [ start + 1 , height [ start + 1 ] ] ) NEW_LINE DEDENT DEDENT if size > 1 : NEW_LINE INDENT helper ( 0 , 1 , 0 , [ 1 , height [ 1 ] ] ) NEW_LINE DEDENT return self . res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT idx = 0 NEW_LINE idx1 = 0 NEW_LINE trap = 0 NEW_LINE while idx < len ( height ) - 1 : NEW_LINE INDENT if max ( height [ idx + 1 : ] ) >= height [ idx ] : NEW_LINE INDENT idx1 = idx1 + 1 NEW_LINE while idx1 < len ( height ) and height [ idx1 ] < height [ idx ] : NEW_LINE INDENT trap = trap + height [ idx ] - height [ idx1 ] NEW_LINE idx1 = idx1 + 1 NEW_LINE DEDENT DEDENT elif max ( height [ idx + 1 : ] ) < height [ idx ] : NEW_LINE INDENT idx1 = idx1 + 1 NEW_LINE while idx1 < len ( height ) and height [ idx1 ] < max ( height [ idx + 1 : ] ) : NEW_LINE INDENT trap = trap + max ( height [ idx + 1 : ] ) - height [ idx1 ] NEW_LINE idx1 = idx1 + 1 NEW_LINE DEDENT DEDENT if idx1 >= len ( height ) : NEW_LINE INDENT return trap NEW_LINE DEDENT idx = idx1 NEW_LINE DEDENT return trap NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT idx = 0 NEW_LINE idx1 = 0 NEW_LINE trap = 0 NEW_LINE while idx < len ( height ) - 1 : NEW_LINE INDENT if max ( height [ idx + 1 : ] ) >= height [ idx ] : NEW_LINE INDENT idx1 = idx1 + 1 NEW_LINE while idx1 < len ( height ) and height [ idx1 ] < height [ idx ] : NEW_LINE INDENT trap = trap + height [ idx ] - height [ idx1 ] NEW_LINE idx1 = idx1 + 1 NEW_LINE DEDENT DEDENT elif max ( height [ idx + 1 : ] ) < height [ idx ] : NEW_LINE INDENT idx1 = idx1 + 1 NEW_LINE while idx1 < len ( height ) and height [ idx1 ] < max ( height [ idx + 1 : ] ) : NEW_LINE INDENT trap = trap + max ( height [ idx + 1 : ] ) - height [ idx1 ] NEW_LINE idx1 = idx1 + 1 NEW_LINE DEDENT DEDENT if idx1 >= len ( height ) : NEW_LINE INDENT return trap NEW_LINE DEDENT idx = idx1 NEW_LINE DEDENT return trap NEW_LINE DEDENT DEDENT
from functools import reduce NEW_LINE class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT return ( sum ( [ min ( d , i ) - h for ( h , d , i ) in zip ( height , reduce ( lambda acc , curr : acc + [ max ( acc [ - 1 ] , curr ) ] , height [ 1 : ] , [ height [ 0 ] ] ) , reduce ( lambda acc , curr : acc + [ max ( acc [ - 1 ] , curr ) ] , height [ - 2 : : - 1 ] , [ height [ - 1 ] ] ) [ : : - 1 ] ) ] ) if len ( height ) > 0 else 0 ) NEW_LINE DEDENT DEDENT
from functools import reduce NEW_LINE class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT return ( sum ( min ( d , i ) - h for ( h , d , i ) in zip ( height , reduce ( lambda acc , curr : acc + [ max ( acc [ - 1 ] , curr ) ] , height [ 1 : ] , [ height [ 0 ] ] ) , reduce ( lambda acc , curr : acc + [ max ( acc [ - 1 ] , curr ) ] , height [ - 2 : : - 1 ] , [ height [ - 1 ] ] ) [ : : - 1 ] ) ) if len ( height ) > 0 else 0 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT h_len = len ( height ) NEW_LINE if h_len < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT self . res = 0 NEW_LINE def helper ( l , r , w , max_h ) : NEW_LINE INDENT if r < h_len : NEW_LINE INDENT if height [ r ] >= height [ l ] : NEW_LINE INDENT self . res += w NEW_LINE if r + 1 < h_len : NEW_LINE INDENT helper ( r , r + 1 , 0 , height [ r + 1 ] ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT w += height [ l ] - height [ r ] NEW_LINE max_h = max ( max_h , height [ r ] ) NEW_LINE helper ( l , r + 1 , w , max_h ) NEW_LINE DEDENT DEDENT elif w != 0 : NEW_LINE INDENT height [ l ] = max_h NEW_LINE helper ( l , l + 1 , 0 , height [ l + 1 ] ) NEW_LINE DEDENT DEDENT helper ( 0 , 1 , 0 , height [ 1 ] ) NEW_LINE return self . res NEW_LINE DEDENT DEDENT
NEW_LINE globalCuzLazy = 0 NEW_LINE class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT return self . findRain ( 0 , len ( height ) - 1 , height , 0 , 0 ) NEW_LINE DEDENT def findRain ( self , start , stop , inp , totalV , went ) : NEW_LINE INDENT maxy = 0 NEW_LINE volcount = 0 NEW_LINE step = 0 NEW_LINE totalVol = totalV NEW_LINE if went : NEW_LINE INDENT inp [ start ] -= 1 NEW_LINE DEDENT final = 0 NEW_LINE while start <= stop : NEW_LINE INDENT if maxy < inp [ start ] or maxy == inp [ start ] : NEW_LINE INDENT maxy = inp [ start ] NEW_LINE totalVol += volcount NEW_LINE print ( totalVol ) NEW_LINE step = 1 NEW_LINE volcount = 0 NEW_LINE if start == stop : NEW_LINE INDENT print ( "asr" + str ( totalVol ) ) NEW_LINE final = totalVol NEW_LINE DEDENT DEDENT elif start == stop : NEW_LINE INDENT return self . findRain ( stop - step , stop , inp , totalVol , 1 ) NEW_LINE if volcount == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT elif maxy > inp [ start ] : NEW_LINE INDENT volcount += maxy - inp [ start ] NEW_LINE print ( "volcount set to" + str ( volcount ) ) NEW_LINE step += 1 NEW_LINE DEDENT start += 1 NEW_LINE DEDENT return final NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT cnt = 0 NEW_LINE v = 0 NEW_LINE op = 0 NEW_LINE l = len ( height ) - 1 NEW_LINE for i , cu in enumerate ( height ) : NEW_LINE INDENT cnt += 1 NEW_LINE if cnt > l : NEW_LINE INDENT break NEW_LINE DEDENT ne = height [ i + 1 ] NEW_LINE if cu <= ne : NEW_LINE INDENT if v > 0 : NEW_LINE INDENT if cnt == l : NEW_LINE INDENT x = ne NEW_LINE hlist = height [ pos1 + 1 : i + 1 ] NEW_LINE msum = sum ( list ( map ( lambda a : x if a > x else a , hlist ) ) ) NEW_LINE op = op + ( ( i - pos1 ) * min ( x , v ) ) - msum NEW_LINE v = 0 NEW_LINE DEDENT elif ne >= max ( height [ cnt : : ] ) or ne >= v : NEW_LINE INDENT x = ne NEW_LINE hlist = height [ pos1 + 1 : i + 1 ] NEW_LINE msum = sum ( list ( map ( lambda a : x if a > x else a , hlist ) ) ) NEW_LINE op = op + ( ( i - pos1 ) * min ( x , v ) ) - msum NEW_LINE v = 0 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT elif cu > ne : NEW_LINE INDENT if v <= cu : NEW_LINE INDENT v = cu NEW_LINE pos1 = i NEW_LINE DEDENT continue NEW_LINE DEDENT DEDENT return ( op ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT h_len = len ( height ) NEW_LINE if h_len < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT self . res = 0 NEW_LINE def helper ( l , r , w , max_h ) : NEW_LINE INDENT if r < h_len : NEW_LINE INDENT if height [ r ] >= height [ l ] : NEW_LINE INDENT self . res += w NEW_LINE if r + 1 < h_len : NEW_LINE INDENT helper ( r , r + 1 , 0 , height [ r + 1 ] ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT w += height [ l ] - height [ r ] NEW_LINE max_h = max ( max_h , height [ r ] ) NEW_LINE helper ( l , r + 1 , w , max_h ) NEW_LINE DEDENT DEDENT elif w != 0 : NEW_LINE INDENT height [ l ] = max_h NEW_LINE helper ( l , l + 1 , 0 , height [ l + 1 ] ) NEW_LINE DEDENT DEDENT helper ( 0 , 1 , 0 , height [ 1 ] ) NEW_LINE return self . res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT h_len = len ( height ) NEW_LINE if h_len < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT self . res = 0 NEW_LINE def helper ( l , r , w , max_h ) : NEW_LINE INDENT if r < h_len : NEW_LINE INDENT if height [ r ] >= height [ l ] : NEW_LINE INDENT self . res += w NEW_LINE if r + 1 < h_len : NEW_LINE INDENT helper ( r , r + 1 , 0 , height [ r + 1 ] ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT w += height [ l ] - height [ r ] NEW_LINE max_h = max ( max_h , height [ r ] ) NEW_LINE helper ( l , r + 1 , w , max_h ) NEW_LINE DEDENT DEDENT elif w != 0 : NEW_LINE INDENT height [ l ] = max_h NEW_LINE helper ( l , l + 1 , 0 , height [ l + 1 ] ) NEW_LINE DEDENT DEDENT helper ( 0 , 1 , 0 , height [ 1 ] ) NEW_LINE return self . res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT lastPickHeight = 0 NEW_LINE lastPickIndex = - 1 NEW_LINE currentPickHeight = 0 NEW_LINE highestIndex = - 1 NEW_LINE highestHeight = 0 NEW_LINE result = 0 NEW_LINE alterHeight = height NEW_LINE for i , h in enumerate ( height ) : NEW_LINE INDENT if h == currentPickHeight : NEW_LINE INDENT continue NEW_LINE DEDENT if h > currentPickHeight : NEW_LINE INDENT currentPickHeight = h NEW_LINE currentPickIndex = i NEW_LINE DEDENT if h < currentPickHeight : NEW_LINE INDENT minimumPick = min ( currentPickHeight , lastPickHeight ) NEW_LINE runner = lastPickIndex + 1 NEW_LINE currentLake = 0 NEW_LINE while runner < currentPickIndex : NEW_LINE INDENT if minimumPick > alterHeight [ runner ] : NEW_LINE INDENT currentLake += minimumPick - alterHeight [ runner ] NEW_LINE alterHeight [ runner ] = minimumPick NEW_LINE DEDENT runner += 1 NEW_LINE DEDENT result += currentLake NEW_LINE if lastPickHeight < currentPickHeight : NEW_LINE INDENT print ( "-D- lastPickHeight={} currentPickHeight={}" . format ( lastPickHeight , currentPickHeight ) ) NEW_LINE lastPickIndex = currentPickIndex NEW_LINE lastPickHeight = currentPickHeight NEW_LINE DEDENT currentPickHeight = 0 NEW_LINE DEDENT DEDENT print ( "-D-AFTER lastPickHeight={} currentPickHeight={}" . format ( lastPickHeight , currentPickHeight ) ) NEW_LINE if currentPickHeight != 0 : NEW_LINE INDENT minimumPick = min ( currentPickHeight , lastPickHeight ) NEW_LINE runner = lastPickIndex + 1 NEW_LINE currentLake = 0 NEW_LINE while runner < currentPickIndex : NEW_LINE INDENT if minimumPick > alterHeight [ runner ] : NEW_LINE INDENT currentLake += minimumPick - alterHeight [ runner ] NEW_LINE alterHeight [ runner ] = minimumPick NEW_LINE DEDENT runner += 1 NEW_LINE DEDENT result += currentLake NEW_LINE if lastPickHeight < currentPickHeight : NEW_LINE INDENT lastPickIndex = currentPickIndex NEW_LINE lastPickHeight = currentPickHeight NEW_LINE DEDENT currentPickHeight = 0 NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT idx = 0 NEW_LINE idx1 = 0 NEW_LINE trap = 0 NEW_LINE while idx < len ( height ) - 1 : NEW_LINE INDENT if max ( height [ idx + 1 : ] ) >= height [ idx ] : NEW_LINE INDENT idx1 = idx1 + 1 NEW_LINE while idx1 < len ( height ) and height [ idx1 ] < height [ idx ] : NEW_LINE INDENT trap = trap + height [ idx ] - height [ idx1 ] NEW_LINE idx1 = idx1 + 1 NEW_LINE DEDENT DEDENT elif max ( height [ idx + 1 : ] ) < height [ idx ] : NEW_LINE INDENT idx1 = idx1 + 1 NEW_LINE while idx1 < len ( height ) and height [ idx1 ] < max ( height [ idx + 1 : ] ) : NEW_LINE INDENT trap = trap + max ( height [ idx + 1 : ] ) - height [ idx1 ] NEW_LINE idx1 = idx1 + 1 NEW_LINE DEDENT DEDENT idx = idx1 NEW_LINE DEDENT return trap NEW_LINE DEDENT DEDENT
def water ( heights , start_i , end_i ) : NEW_LINE INDENT if end_i == start_i + 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT assert start_i < len ( heights ) NEW_LINE assert end_i < len ( heights ) NEW_LINE level = min ( heights [ start_i ] , heights [ end_i ] ) NEW_LINE result = 0 NEW_LINE for i in range ( start_i , end_i + 1 ) : NEW_LINE INDENT w = level - heights [ i ] NEW_LINE if w > 0 : NEW_LINE INDENT result += w NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT def is_sorted ( l ) : NEW_LINE INDENT return all ( l [ i ] <= l [ i + 1 ] for i in range ( len ( l ) - 1 ) ) NEW_LINE DEDENT def trap ( heights : List [ int ] , ordered_heights ) -> int : NEW_LINE INDENT if len ( heights ) < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT heights_cache = { } NEW_LINE for i , h in ordered_heights : NEW_LINE INDENT try : NEW_LINE INDENT heights_cache [ h ] . append ( i ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT heights_cache [ h ] = [ i ] NEW_LINE DEDENT DEDENT highest_ids = heights_cache [ ordered_heights [ 0 ] [ 1 ] ] NEW_LINE assert is_sorted ( highest_ids ) NEW_LINE start_i = highest_ids [ 0 ] NEW_LINE end_i = highest_ids [ - 1 ] NEW_LINE if len ( highest_ids ) < 2 : NEW_LINE INDENT second_highest_ids = heights_cache [ ordered_heights [ 1 ] [ 1 ] ] NEW_LINE assert is_sorted ( second_highest_ids ) NEW_LINE if second_highest_ids [ 0 ] < start_i : NEW_LINE INDENT start_i = second_highest_ids [ 0 ] NEW_LINE DEDENT if second_highest_ids [ - 1 ] > end_i : NEW_LINE INDENT end_i = second_highest_ids [ - 1 ] NEW_LINE DEDENT DEDENT heights_left = heights [ : start_i + 1 ] NEW_LINE heights_right = heights [ end_i : ] NEW_LINE ordered_heights_left = [ ( i , h ) for i , h in ordered_heights if i <= start_i ] NEW_LINE ordered_heights_right = [ ( i - end_i , h ) for i , h in ordered_heights if i >= end_i ] NEW_LINE return water ( heights , start_i , end_i ) + trap ( heights_left , ordered_heights_left ) + trap ( heights_right , ordered_heights_right ) NEW_LINE DEDENT class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT ordered_heights = sorted ( [ ( i , h ) for i , h in enumerate ( height ) ] , key = lambda p : p [ 1 ] , reverse = True ) NEW_LINE return trap ( height , ordered_heights ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT n = len ( height ) NEW_LINE if n <= 2 : return 0 NEW_LINE dp = [ 0 ] * n NEW_LINE for i in range ( 2 , n ) : NEW_LINE INDENT tmp = [ ] NEW_LINE for j in range ( i - 1 , - 1 , - 1 ) : NEW_LINE INDENT tmp . append ( dp [ j ] + min ( height [ i ] , height [ j ] ) * ( i - j - 1 ) - sum ( height [ j + 1 : i ] ) ) NEW_LINE if height [ j ] >= height [ i ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT dp [ i ] = max ( tmp ) NEW_LINE DEDENT return dp [ - 1 ] NEW_LINE DEDENT DEDENT
def water ( heights , start_i , end_i ) : NEW_LINE INDENT if end_i == start_i + 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT assert start_i < len ( heights ) NEW_LINE assert end_i < len ( heights ) NEW_LINE level = min ( heights [ start_i ] , heights [ end_i ] ) NEW_LINE result = 0 NEW_LINE for i in range ( start_i , end_i + 1 ) : NEW_LINE INDENT w = level - heights [ i ] NEW_LINE if w > 0 : NEW_LINE INDENT result += w NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT def is_sorted ( l ) : NEW_LINE INDENT return all ( l [ i ] <= l [ i + 1 ] for i in range ( len ( l ) - 1 ) ) NEW_LINE DEDENT def trap ( heights : List [ int ] , ordered_heights ) -> int : NEW_LINE INDENT if len ( heights ) < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT heights_cache = { } NEW_LINE for i , h in ordered_heights : NEW_LINE INDENT try : NEW_LINE INDENT heights_cache [ h ] . append ( i ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT heights_cache [ h ] = [ i ] NEW_LINE DEDENT DEDENT highest_ids = heights_cache [ ordered_heights [ 0 ] [ 1 ] ] NEW_LINE start_i = highest_ids [ 0 ] NEW_LINE end_i = highest_ids [ - 1 ] NEW_LINE if len ( highest_ids ) < 2 : NEW_LINE INDENT second_highest_ids = heights_cache [ ordered_heights [ 1 ] [ 1 ] ] NEW_LINE if second_highest_ids [ 0 ] < start_i : NEW_LINE INDENT start_i = second_highest_ids [ 0 ] NEW_LINE DEDENT if second_highest_ids [ - 1 ] > end_i : NEW_LINE INDENT end_i = second_highest_ids [ - 1 ] NEW_LINE DEDENT DEDENT heights_left = heights [ : start_i + 1 ] NEW_LINE heights_right = heights [ end_i : ] NEW_LINE ordered_heights_left = [ ( i , h ) for i , h in ordered_heights if i <= start_i ] NEW_LINE ordered_heights_right = [ ( i - end_i , h ) for i , h in ordered_heights if i >= end_i ] NEW_LINE return water ( heights , start_i , end_i ) + trap ( heights_left , ordered_heights_left ) + trap ( heights_right , ordered_heights_right ) NEW_LINE DEDENT class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT ordered_heights = sorted ( [ ( i , h ) for i , h in enumerate ( height ) ] , key = lambda p : p [ 1 ] , reverse = True ) NEW_LINE return trap ( height , ordered_heights ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT left = [ ] NEW_LINE right = [ ] NEW_LINE res = [ ] NEW_LINE maxi = 0 NEW_LINE for i in height : NEW_LINE INDENT if maxi < i : NEW_LINE INDENT maxi = i NEW_LINE DEDENT left . append ( maxi ) NEW_LINE DEDENT maxi = 0 NEW_LINE for i in height [ : : - 1 ] : NEW_LINE INDENT if maxi < i : NEW_LINE INDENT maxi = i NEW_LINE DEDENT right . append ( maxi ) NEW_LINE DEDENT i = 0 NEW_LINE sum = 0 NEW_LINE while i < len ( left ) : NEW_LINE INDENT ans = min ( left [ i ] , right [ : : - 1 ] [ i ] ) NEW_LINE sum += ans - height [ i ] NEW_LINE i += 1 NEW_LINE DEDENT return sum NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT left_max = 0 NEW_LINE right_max = 0 NEW_LINE left_list = [ ] NEW_LINE right_list = [ ] NEW_LINE for high in height : NEW_LINE INDENT left_max = max ( left_max , high ) NEW_LINE left_list . append ( left_max ) NEW_LINE DEDENT for high in reversed ( height ) : NEW_LINE INDENT right_max = max ( right_max , high ) NEW_LINE right_list . append ( right_max ) NEW_LINE DEDENT water = 0 NEW_LINE n = len ( height ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT water += ( min ( left_list [ i ] , right_list [ : : - 1 ] [ i ] ) - height [ i ] ) NEW_LINE DEDENT return water NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT if len ( height ) <= 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT i = 1 NEW_LINE curr = 0 NEW_LINE left = [ 0 ] NEW_LINE while i <= len ( height ) - 1 : NEW_LINE INDENT curr = max ( curr , height [ i - 1 ] ) NEW_LINE left . append ( curr ) NEW_LINE i += 1 NEW_LINE DEDENT i = len ( height ) - 2 NEW_LINE curr = 0 NEW_LINE right = [ 0 ] NEW_LINE while i >= 0 : NEW_LINE INDENT curr = max ( curr , height [ i + 1 ] ) NEW_LINE right . append ( curr ) NEW_LINE i -= 1 NEW_LINE DEDENT res = 0 NEW_LINE i = 0 NEW_LINE while i <= len ( height ) - 1 : NEW_LINE INDENT res += max ( min ( left [ i ] , right [ : : - 1 ] [ i ] ) - height [ i ] , 0 ) NEW_LINE i += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
from typing import List NEW_LINE from enum import Enum NEW_LINE class Preference ( Enum ) : NEW_LINE INDENT LEFT = - 1 NEW_LINE NONE = 0 NEW_LINE RIGHT = 1 NEW_LINE DEDENT class Wall : NEW_LINE INDENT def __init__ ( self , height : int , index : int , preference : Preference ) -> None : NEW_LINE INDENT self . height = height NEW_LINE self . index = index NEW_LINE self . preference = preference NEW_LINE DEDENT def __gt__ ( self , other : "Wall" ) -> bool : NEW_LINE INDENT if other . height > self . height : NEW_LINE INDENT return False NEW_LINE DEDENT if self . height > other . height : NEW_LINE INDENT return True NEW_LINE DEDENT if ( self . preference == Preference . LEFT or other . preference == Preference . LEFT or self . preference == Preference . NONE or other . preference == Preference . NONE ) : NEW_LINE INDENT return self . index < other . index NEW_LINE DEDENT if self . preference == Preference . RIGHT or other . preference == Preference . RIGHT : NEW_LINE INDENT return self . index > other . index NEW_LINE DEDENT assert False NEW_LINE DEDENT def assign ( self , other : "Wall" ) -> "Wall" : NEW_LINE INDENT self . height = other . height NEW_LINE self . index = other . index NEW_LINE return self NEW_LINE DEDENT def __str__ ( self ) -> str : NEW_LINE INDENT return "[index: {}, height: {}]" . format ( self . index , self . height ) NEW_LINE DEDENT def __eq__ ( self , other : "Wall" ) -> bool : NEW_LINE INDENT return self . index == other . index and self . height == other . height NEW_LINE DEDENT DEDENT class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT return self . trap_helper ( height , 0 , len ( height ) - 1 ) NEW_LINE DEDENT def trap_helper ( self , height : List [ int ] , start : int , end : int ) -> int : NEW_LINE INDENT if end - start < 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT leftBound = Wall ( - 1 , - 1 , Preference . LEFT ) NEW_LINE center = Wall ( height [ start ] , start , Preference . NONE ) NEW_LINE rightBound = Wall ( - 1 , - 1 , Preference . RIGHT ) NEW_LINE virtualRight = Wall ( - 1 , - 1 , Preference . RIGHT ) NEW_LINE for i , h in enumerate ( height [ start + 1 : end + 1 ] ) : NEW_LINE INDENT index = i + 1 + start NEW_LINE newRight = Wall ( h , index , preference = Preference . RIGHT ) NEW_LINE if newRight > center : NEW_LINE INDENT if center > leftBound : NEW_LINE INDENT leftBound . assign ( center ) NEW_LINE DEDENT center . assign ( newRight ) NEW_LINE rightBound . assign ( virtualRight ) NEW_LINE continue NEW_LINE DEDENT if newRight > rightBound : NEW_LINE INDENT rightBound . assign ( newRight ) NEW_LINE DEDENT DEDENT leftIndex = leftBound . index if leftBound . index != - 1 else start NEW_LINE centerIndex = center . index NEW_LINE rightIndex = rightBound . index if rightBound . index != - 1 else end NEW_LINE return ( self . trap_helper ( height , start , leftIndex ) + self . get_rain ( height , leftIndex , centerIndex ) + self . get_rain ( height , centerIndex , rightIndex ) + self . trap_helper ( height , rightIndex , end ) ) NEW_LINE DEDENT def get_rain ( self , height : List [ int ] , leftIndex : int , rightIndex : int ) -> int : NEW_LINE INDENT if rightIndex - leftIndex < 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT h = min ( height [ leftIndex ] , height [ rightIndex ] ) NEW_LINE volume = h * ( rightIndex - leftIndex - 1 ) NEW_LINE for h in height [ leftIndex + 1 : rightIndex ] : NEW_LINE INDENT volume -= h NEW_LINE DEDENT return volume NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT if len ( height ) <= 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT i = 1 NEW_LINE j = len ( height ) - 2 NEW_LINE curr1 = 0 NEW_LINE curr2 = 0 NEW_LINE left = [ 0 ] NEW_LINE right = [ 0 ] NEW_LINE while i <= len ( height ) - 1 : NEW_LINE INDENT curr1 = max ( curr1 , height [ i - 1 ] ) NEW_LINE left . append ( curr1 ) NEW_LINE i += 1 NEW_LINE curr2 = max ( curr2 , height [ j + 1 ] ) NEW_LINE right . append ( curr2 ) NEW_LINE j -= 1 NEW_LINE DEDENT res = 0 NEW_LINE i = 0 NEW_LINE while i <= len ( height ) - 1 : NEW_LINE INDENT res += max ( min ( left [ i ] , right [ : : - 1 ] [ i ] ) - height [ i ] , 0 ) NEW_LINE i += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT if len ( height ) <= 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT i = 1 NEW_LINE curr = 0 NEW_LINE left = [ 0 ] NEW_LINE while i <= len ( height ) - 1 : NEW_LINE INDENT curr = max ( curr , height [ i - 1 ] ) NEW_LINE left . append ( curr ) NEW_LINE i += 1 NEW_LINE DEDENT i = len ( height ) - 2 NEW_LINE curr = 0 NEW_LINE right = [ 0 ] NEW_LINE while i >= 0 : NEW_LINE INDENT curr = max ( curr , height [ i + 1 ] ) NEW_LINE right . append ( curr ) NEW_LINE i -= 1 NEW_LINE DEDENT res = 0 NEW_LINE i = 0 NEW_LINE while i <= len ( height ) - 1 : NEW_LINE INDENT res += max ( min ( left [ i ] , right [ : : - 1 ] [ i ] ) - height [ i ] , 0 ) NEW_LINE i += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT left_max = 0 NEW_LINE right_max = 0 NEW_LINE left_list = [ ] NEW_LINE right_list = [ ] NEW_LINE for high in height : NEW_LINE INDENT left_max = max ( left_max , high ) NEW_LINE left_list . append ( left_max ) NEW_LINE DEDENT for high in reversed ( height ) : NEW_LINE INDENT right_max = max ( right_max , high ) NEW_LINE right_list . append ( right_max ) NEW_LINE DEDENT print ( left_list ) NEW_LINE print ( right_list [ : : - 1 ] , "right" ) NEW_LINE water = 0 NEW_LINE n = len ( height ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT water += ( min ( left_list [ i ] , right_list [ : : - 1 ] [ i ] ) - height [ i ] ) NEW_LINE DEDENT return water NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT n = len ( height ) NEW_LINE safe = 0 NEW_LINE x = 0 NEW_LINE y = n - 1 NEW_LINE result = 0 NEW_LINE minimum = 0 NEW_LINE while x < y : NEW_LINE INDENT if height [ x ] == height [ y ] : NEW_LINE INDENT if height [ x ] > safe : NEW_LINE INDENT safe = height [ x ] NEW_LINE for i in range ( x + 1 , y ) : NEW_LINE INDENT if height [ i ] < safe : NEW_LINE INDENT result += safe - height [ i ] NEW_LINE height [ i ] = safe NEW_LINE DEDENT DEDENT DEDENT x += 1 NEW_LINE y -= 1 NEW_LINE DEDENT elif height [ x ] < height [ y ] : NEW_LINE INDENT if height [ x ] > safe : NEW_LINE INDENT safe = height [ x ] NEW_LINE for i in range ( x + 1 , y ) : NEW_LINE INDENT if height [ i ] < safe : NEW_LINE INDENT result += safe - height [ i ] NEW_LINE height [ i ] = safe NEW_LINE DEDENT DEDENT DEDENT x += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if height [ x ] > safe : NEW_LINE INDENT safe = height [ y ] NEW_LINE for i in range ( x + 1 , y ) : NEW_LINE INDENT if height [ i ] < safe : NEW_LINE INDENT result += safe - height [ i ] NEW_LINE height [ i ] = safe NEW_LINE DEDENT DEDENT DEDENT y -= 1 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT water = 0 NEW_LINE l = - 1 NEW_LINE r = list ( ) NEW_LINE for i , h in enumerate ( reversed ( height ) ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT r . insert ( 0 , h ) NEW_LINE DEDENT else : NEW_LINE INDENT r . insert ( 0 , max ( h , max ( r ) ) ) NEW_LINE DEDENT DEDENT for i , h in enumerate ( height ) : NEW_LINE INDENT if l == - 1 : NEW_LINE INDENT l = h NEW_LINE DEDENT else : NEW_LINE INDENT l = max ( l , h ) NEW_LINE DEDENT rain = min ( l , r [ i ] ) - h NEW_LINE if rain > 0 : NEW_LINE INDENT water += rain NEW_LINE DEDENT DEDENT return water NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT if not height : return 0 NEW_LINE while height and not height [ 0 ] : NEW_LINE INDENT del height [ 0 ] NEW_LINE DEDENT while height and not height [ - 1 ] : NEW_LINE INDENT del height [ - 1 ] NEW_LINE DEDENT if not height : return 0 NEW_LINE answer = 0 NEW_LINE N = len ( height ) NEW_LINE i = 0 NEW_LINE j = 1 NEW_LINE temp = [ ] NEW_LINE while j < N : NEW_LINE INDENT if height [ j ] < height [ i ] : NEW_LINE INDENT temp . append ( height [ j ] ) NEW_LINE DEDENT if height [ j ] > height [ j - 1 ] : NEW_LINE INDENT h = min ( height [ i ] , height [ j ] ) NEW_LINE answer += sum ( h - elem for elem in temp if elem < h ) NEW_LINE temp = [ h if elem < h else elem for elem in temp ] NEW_LINE DEDENT if height [ j ] > height [ i ] : NEW_LINE INDENT i = j NEW_LINE temp = [ ] NEW_LINE DEDENT j += 1 NEW_LINE DEDENT return answer NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT if len ( height ) <= 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT peaks = [ ] NEW_LINE for i in range ( len ( height ) ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT if height [ i ] >= height [ i + 1 ] : NEW_LINE INDENT peaks . append ( i ) NEW_LINE DEDENT DEDENT elif i == len ( height ) - 1 : NEW_LINE INDENT if height [ i ] >= height [ i - 1 ] : NEW_LINE INDENT peaks . append ( i ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if height [ i ] >= height [ i - 1 ] and height [ i ] >= height [ i + 1 ] : NEW_LINE INDENT peaks . append ( i ) NEW_LINE DEDENT DEDENT DEDENT peaks2 = [ peaks [ 0 ] ] NEW_LINE for x in range ( 1 , len ( peaks ) - 1 ) : NEW_LINE INDENT if max ( [ height [ y ] for y in peaks [ 0 : x ] ] ) > height [ peaks [ x ] ] and max ( [ height [ y ] for y in peaks [ x + 1 : ] ] ) > height [ peaks [ x ] ] : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT peaks2 . append ( peaks [ x ] ) NEW_LINE DEDENT DEDENT peaks2 . append ( peaks [ - 1 ] ) NEW_LINE peaks = peaks2 NEW_LINE rain = 0 NEW_LINE for i in range ( len ( peaks ) - 1 ) : NEW_LINE INDENT b = min ( height [ peaks [ i ] ] , height [ peaks [ i + 1 ] ] ) NEW_LINE temp = [ b - x for x in height [ peaks [ i ] + 1 : peaks [ i + 1 ] ] ] NEW_LINE temp = [ x for x in temp if x >= 0 ] NEW_LINE rain = rain + sum ( temp ) NEW_LINE DEDENT return rain NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT current_height = 0 NEW_LINE current_water = 0 NEW_LINE total_water = 0 NEW_LINE i = 0 NEW_LINE while len ( height ) > 1 : NEW_LINE INDENT current_height = height [ 0 ] NEW_LINE if current_height <= height [ i + 1 ] : NEW_LINE INDENT total_water += current_water NEW_LINE height = height [ i + 1 : ] NEW_LINE i = current_water = 0 NEW_LINE DEDENT else : NEW_LINE INDENT current_water += ( current_height - height [ i + 1 ] ) NEW_LINE i += 1 NEW_LINE DEDENT print ( f'{i}----' ) NEW_LINE print ( current_water ) NEW_LINE print ( total_water ) NEW_LINE if i == len ( height ) - 1 : NEW_LINE INDENT if current_water > 0 : NEW_LINE INDENT height [ 0 ] = sorted ( height ) [ - 2 ] NEW_LINE i = current_water = 0 NEW_LINE DEDENT else : NEW_LINE INDENT height = [ ] NEW_LINE DEDENT DEDENT DEDENT print ( total_water ) NEW_LINE return total_water NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT if len ( height ) <= 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT peaks = [ ] NEW_LINE for i in range ( len ( height ) ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT if height [ i ] >= height [ i + 1 ] : NEW_LINE INDENT peaks . append ( i ) NEW_LINE DEDENT DEDENT elif i == len ( height ) - 1 : NEW_LINE INDENT if height [ i ] >= height [ i - 1 ] : NEW_LINE INDENT peaks . append ( i ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if height [ i ] >= height [ i - 1 ] and height [ i ] >= height [ i + 1 ] : NEW_LINE INDENT peaks . append ( i ) NEW_LINE DEDENT DEDENT DEDENT peaks2 = [ peaks [ 0 ] ] NEW_LINE for x in range ( 1 , len ( peaks ) - 1 ) : NEW_LINE INDENT if max ( [ height [ y ] for y in peaks [ 0 : x ] ] ) > height [ peaks [ x ] ] and max ( [ height [ y ] for y in peaks [ x + 1 : ] ] ) > height [ peaks [ x ] ] : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT peaks2 . append ( peaks [ x ] ) NEW_LINE DEDENT DEDENT peaks2 . append ( peaks [ - 1 ] ) NEW_LINE peaks = peaks2 NEW_LINE rain = 0 NEW_LINE for i in range ( len ( peaks ) - 1 ) : NEW_LINE INDENT b = min ( height [ peaks [ i ] ] , height [ peaks [ i + 1 ] ] ) NEW_LINE temp = [ b - x for x in height [ peaks [ i ] + 1 : peaks [ i + 1 ] ] ] NEW_LINE temp = [ x for x in temp if x >= 0 ] NEW_LINE rain = rain + sum ( temp ) NEW_LINE DEDENT return rain NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT a = height NEW_LINE b = [ ] NEW_LINE lengtha = len ( a ) NEW_LINE if lengtha <= 2 : NEW_LINE INDENT answer = 0 NEW_LINE return answer NEW_LINE DEDENT while lengtha > 2 : NEW_LINE INDENT if a [ 0 ] >= a [ 1 ] : NEW_LINE INDENT b . append ( 0 ) NEW_LINE DEDENT for i in range ( 1 , len ( a ) - 1 ) : NEW_LINE INDENT if a [ i ] > a [ i - 1 ] and a [ i ] >= a [ i + 1 ] : NEW_LINE INDENT b . append ( i ) NEW_LINE i += 1 NEW_LINE DEDENT DEDENT if a [ lengtha - 1 ] > a [ lengtha - 2 ] : NEW_LINE INDENT b . append ( lengtha - 1 ) NEW_LINE DEDENT d = [ ] NEW_LINE c = b . copy ( ) NEW_LINE while len ( c ) > 1 : NEW_LINE INDENT cmax = 0 NEW_LINE for j in range ( len ( c ) ) : NEW_LINE INDENT if a [ c [ j ] ] > cmax : NEW_LINE INDENT cmax = a [ c [ j ] ] NEW_LINE dapp = c [ j ] NEW_LINE cpop = j NEW_LINE DEDENT DEDENT d . append ( dapp ) NEW_LINE if len ( c ) > 1 : NEW_LINE INDENT c . pop ( cpop ) NEW_LINE DEDENT DEDENT if len ( c ) == 1 : NEW_LINE INDENT d . append ( c [ 0 ] ) NEW_LINE DEDENT aaapeak = d [ 0 ] NEW_LINE for i in range ( 1 , len ( d ) - 1 ) : NEW_LINE INDENT j = i + 1 NEW_LINE while j < len ( d ) : NEW_LINE INDENT bbbpeak = d [ i ] NEW_LINE if aaapeak > d [ j ] and d [ j ] > bbbpeak : NEW_LINE INDENT d . pop ( j ) NEW_LINE j -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT if bbbpeak > d [ j ] and d [ j ] > aaapeak : NEW_LINE INDENT d . pop ( j ) NEW_LINE j -= 1 NEW_LINE DEDENT DEDENT j += 1 NEW_LINE DEDENT DEDENT d . sort ( ) NEW_LINE b = d . copy ( ) NEW_LINE jlength = len ( b ) NEW_LINE rainvolume = 0 NEW_LINE for j in range ( jlength - 1 ) : NEW_LINE INDENT rainvolume = rainvolume + min ( a [ b [ j ] ] , a [ b [ j + 1 ] ] ) * ( b [ j + 1 ] - b [ j ] - 1 ) NEW_LINE DEDENT landvolume = 0 NEW_LINE for j in range ( jlength - 1 ) : NEW_LINE INDENT for k in range ( b [ j ] + 1 , b [ j + 1 ] ) : NEW_LINE INDENT realland = min ( a [ k ] , a [ b [ j ] ] , a [ b [ j + 1 ] ] ) NEW_LINE landvolume = landvolume + realland NEW_LINE DEDENT DEDENT answer = rainvolume - landvolume NEW_LINE return answer NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT prevLargest = 0 NEW_LINE ans = 0 NEW_LINE for i in range ( len ( height ) - 1 ) : NEW_LINE INDENT if height [ i ] > prevLargest : NEW_LINE INDENT prevLargest = height [ i ] NEW_LINE DEDENT postLargest = max ( height [ i : ] ) NEW_LINE ans += max ( 0 , min ( prevLargest - height [ i ] , postLargest - height [ i ] ) ) NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT def trap ( heights ) : NEW_LINE INDENT water = 0 NEW_LINE left_height_max = 0 NEW_LINE right_height_max = 0 NEW_LINE for i in range ( len ( heights ) - 1 ) : NEW_LINE INDENT right_height_max = max ( heights [ i + 1 : ] ) NEW_LINE curr_height = heights [ i ] NEW_LINE if curr_height > left_height_max : NEW_LINE INDENT left_height_max = curr_height NEW_LINE DEDENT water += max ( min ( left_height_max , right_height_max ) - curr_height , 0 ) NEW_LINE DEDENT return water NEW_LINE DEDENT return trap ( height ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT units = 0 NEW_LINE if not height : NEW_LINE INDENT return units NEW_LINE DEDENT max_l = height [ 0 ] NEW_LINE for i in range ( 1 , len ( height ) ) : NEW_LINE INDENT max_l = max ( max_l , height [ i ] ) NEW_LINE max_r = max ( height [ i : ] ) NEW_LINE units += min ( max_l , max_r ) - height [ i ] NEW_LINE DEDENT return units NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT trapped = 0 NEW_LINE if len ( height ) < 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT past_max = height [ 0 ] NEW_LINE for i , h in enumerate ( height [ 1 : ] ) : NEW_LINE INDENT fut_max = max ( height [ ( i + 1 ) : ] ) NEW_LINE if h <= past_max and h <= fut_max : NEW_LINE INDENT trapped += min ( past_max , fut_max ) - h NEW_LINE DEDENT elif h > past_max : NEW_LINE INDENT past_max = h NEW_LINE DEDENT DEDENT return trapped NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT trap = 0 NEW_LINE left_mx = height [ 0 ] if height else 0 NEW_LINE right_mx = 0 NEW_LINE for i , h in enumerate ( height ) : NEW_LINE INDENT left_mx = max ( left_mx , h ) NEW_LINE right_mx = max ( height [ i : ] ) NEW_LINE tmp_trap = min ( left_mx , right_mx ) - h NEW_LINE if tmp_trap > 0 : NEW_LINE INDENT trap += tmp_trap NEW_LINE DEDENT DEDENT return trap NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT if len ( height ) < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT low = None NEW_LINE water = [ ] NEW_LINE i = 0 NEW_LINE j = 1 NEW_LINE while i < len ( height ) and j < len ( height ) : NEW_LINE INDENT low = height [ i ] NEW_LINE if height [ j ] > low or height [ j ] == max ( height [ j : ] ) : NEW_LINE INDENT high = height [ j ] NEW_LINE if j - i == 1 : NEW_LINE INDENT i += 1 NEW_LINE j += 1 NEW_LINE continue NEW_LINE DEDENT l = height [ i + 1 : j ] NEW_LINE print ( l ) NEW_LINE if l : NEW_LINE INDENT sum1 = 0 NEW_LINE for a in l : NEW_LINE INDENT sum1 += min ( low , high ) - a NEW_LINE DEDENT water . append ( sum1 ) NEW_LINE DEDENT i = j NEW_LINE j = i + 1 NEW_LINE continue NEW_LINE DEDENT else : NEW_LINE INDENT j += 1 NEW_LINE continue NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return sum ( water ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT if len ( height ) < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT water = 0 NEW_LINE i = 0 NEW_LINE j = 1 NEW_LINE while i < len ( height ) and j < len ( height ) : NEW_LINE INDENT low = height [ i ] NEW_LINE if height [ j ] > low or height [ j ] == max ( height [ j : ] ) : NEW_LINE INDENT high = height [ j ] NEW_LINE if j - i == 1 : NEW_LINE INDENT i += 1 NEW_LINE j += 1 NEW_LINE continue NEW_LINE DEDENT l = height [ i + 1 : j ] NEW_LINE if l : NEW_LINE INDENT sum1 = 0 NEW_LINE for a in l : NEW_LINE INDENT sum1 += min ( low , high ) - a NEW_LINE DEDENT water += sum1 NEW_LINE DEDENT i = j NEW_LINE j = i + 1 NEW_LINE continue NEW_LINE DEDENT else : NEW_LINE INDENT j += 1 NEW_LINE continue NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return water NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT res = 0 NEW_LINE temp = [ ] NEW_LINE for x , i in enumerate ( height ) : NEW_LINE INDENT if len ( temp ) == 0 and i != 0 : NEW_LINE INDENT temp . append ( i ) NEW_LINE DEDENT elif len ( temp ) > 0 : NEW_LINE INDENT temp . append ( i ) NEW_LINE if i >= temp [ 0 ] : NEW_LINE INDENT res += self . cal ( temp , False ) NEW_LINE temp = [ temp [ - 1 ] ] NEW_LINE DEDENT elif x == len ( height ) - 1 : NEW_LINE INDENT res += self . cal ( temp , True ) NEW_LINE DEDENT elif i < temp [ 0 ] : NEW_LINE INDENT if height [ x ] == max ( height [ x : ] ) : NEW_LINE INDENT res += self . cal ( temp , False ) NEW_LINE temp = [ temp [ - 1 ] ] NEW_LINE DEDENT DEDENT DEDENT DEDENT return res NEW_LINE DEDENT def cal ( self , arr , last ) : NEW_LINE INDENT if last : NEW_LINE INDENT for u in reversed ( range ( len ( arr ) ) ) : NEW_LINE INDENT if arr [ u ] < arr [ u - 1 ] : NEW_LINE INDENT del arr [ u ] NEW_LINE continue NEW_LINE DEDENT minVal = min ( arr ) NEW_LINE if arr [ u ] == minVal : NEW_LINE INDENT del arr [ u ] NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for u in reversed ( range ( len ( arr ) ) ) : NEW_LINE INDENT if arr [ u ] > arr [ - 1 ] : NEW_LINE INDENT arr [ u ] = arr [ - 1 ] NEW_LINE DEDENT DEDENT DEDENT sum = 0 NEW_LINE if len ( arr ) == 0 : NEW_LINE INDENT return sum NEW_LINE DEDENT top = min ( arr [ 0 ] , arr [ - 1 ] ) NEW_LINE for i in range ( 1 , len ( arr ) - 1 ) : NEW_LINE INDENT sum = sum + top - arr [ i ] NEW_LINE DEDENT return sum NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT total_capacity = 0 NEW_LINE previous_height = 0 NEW_LINE next_height = 0 NEW_LINE for i in range ( 1 , len ( height ) - 1 ) : NEW_LINE INDENT previous_height = max ( height [ i - 1 ] , previous_height ) NEW_LINE next_height = max ( height [ i + 1 : ] ) NEW_LINE current_height = height [ i ] NEW_LINE current_capacity = min ( previous_height , next_height ) - current_height NEW_LINE print ( i , previous_height , next_height , current_height , current_capacity ) NEW_LINE if current_capacity > 0 : NEW_LINE INDENT total_capacity += current_capacity NEW_LINE DEDENT DEDENT return total_capacity NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT n = len ( height ) NEW_LINE if n < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT maxL = height [ 0 ] NEW_LINE vol = 0 NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT maxR = max ( height [ i + 1 : ] ) NEW_LINE vi = min ( maxL , maxR ) - height [ i ] NEW_LINE vol += max ( 0 , vi ) NEW_LINE maxL = max ( maxL , height [ i ] ) NEW_LINE DEDENT return vol NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT if len ( height ) < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT water = 0 NEW_LINE i = 0 NEW_LINE j = 1 NEW_LINE while i < len ( height ) and j < len ( height ) : NEW_LINE INDENT low = height [ i ] NEW_LINE if height [ j ] > low or height [ j ] == max ( height [ j : ] ) : NEW_LINE INDENT high = height [ j ] NEW_LINE if j - i == 1 : NEW_LINE INDENT i += 1 NEW_LINE j += 1 NEW_LINE continue NEW_LINE DEDENT l = height [ i + 1 : j ] NEW_LINE if l : NEW_LINE INDENT sum1 = 0 NEW_LINE for a in l : NEW_LINE INDENT sum1 += min ( low , high ) - a NEW_LINE DEDENT water += sum1 NEW_LINE DEDENT i = j NEW_LINE j = i + 1 NEW_LINE continue NEW_LINE DEDENT else : NEW_LINE INDENT j += 1 NEW_LINE continue NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return water NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT n = len ( height ) NEW_LINE if n <= 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT b = [ None ] * n ; b [ 0 ] = 0 ; b [ n - 1 ] = 0 ; m = b [ 0 ] NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT m = max ( m , height [ i - 1 ] ) NEW_LINE b [ i ] = max ( min ( m , max ( height [ i + 1 : n ] ) ) - height [ i ] , 0 ) NEW_LINE DEDENT return sum ( b ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT vol = 0 NEW_LINE left = 0 NEW_LINE right = 0 NEW_LINE for i in range ( len ( height ) ) : NEW_LINE INDENT left = max ( left , height [ i ] ) NEW_LINE right = max ( height [ i : ] ) NEW_LINE level = min ( left , right ) NEW_LINE vol += max ( 0 , level - height [ i ] ) NEW_LINE DEDENT return vol NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT _sum = 0 NEW_LINE left_max = 0 NEW_LINE for i , x in enumerate ( height ) : NEW_LINE INDENT left_max = max ( left_max , x ) NEW_LINE right_max = max ( height [ i + 1 : ] or [ 0 ] ) NEW_LINE _sum += max ( 0 , min ( left_max , right_max ) - height [ i ] ) NEW_LINE DEDENT return _sum NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT ans = 0 NEW_LINE if len ( height ) : NEW_LINE INDENT lmax = height [ 0 ] NEW_LINE for i in range ( len ( height ) ) : NEW_LINE INDENT if lmax < height [ i ] : NEW_LINE INDENT lmax = height [ i ] NEW_LINE DEDENT ans += min ( lmax , max ( height [ i : ] ) ) - height [ i ] NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT total_capacity = 0 NEW_LINE previous_height = 0 NEW_LINE next_height = 0 NEW_LINE for i in range ( 1 , len ( height ) - 1 ) : NEW_LINE INDENT previous_height = max ( height [ i - 1 ] , previous_height ) NEW_LINE next_height = max ( height [ i + 1 : ] ) NEW_LINE current_height = height [ i ] NEW_LINE current_capacity = min ( previous_height , next_height ) - current_height NEW_LINE if current_capacity > 0 : NEW_LINE INDENT total_capacity += current_capacity NEW_LINE DEDENT DEDENT return total_capacity NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT ret = 0 NEW_LINE left_max = 0 NEW_LINE for i , e in enumerate ( height ) : NEW_LINE INDENT left_max = max ( e , left_max ) NEW_LINE if i == 0 or i == len ( height ) - 1 : NEW_LINE INDENT continue NEW_LINE DEDENT right_max = max ( height [ i + 1 : ] ) NEW_LINE ret += max ( min ( left_max , right_max ) - e , 0 ) NEW_LINE DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT ans = [ ] NEW_LINE intervals . sort ( key = lambda i : i [ 0 ] ) NEW_LINE for left , right in intervals : NEW_LINE INDENT if ans and left <= ans [ - 1 ] [ - 1 ] : NEW_LINE INDENT ans [ - 1 ] [ - 1 ] = max ( ans [ - 1 ] [ - 1 ] , right ) NEW_LINE DEDENT else : NEW_LINE INDENT ans . append ( [ left , right ] ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT out = [ ] NEW_LINE for i in sorted ( intervals , key = lambda i : i [ 0 ] ) : NEW_LINE INDENT if out and out [ - 1 ] [ 1 ] >= i [ 0 ] : NEW_LINE INDENT out [ - 1 ] [ 1 ] = max ( out [ - 1 ] [ 1 ] , i [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT out . append ( i ) NEW_LINE DEDENT DEDENT return out NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( intervals ) <= 1 : NEW_LINE INDENT return intervals NEW_LINE DEDENT intervals . sort ( ) NEW_LINE merged_intervals = [ ] NEW_LINE start = intervals [ 0 ] [ 0 ] NEW_LINE end = intervals [ 0 ] [ 1 ] NEW_LINE for x , y in intervals [ 1 : ] : NEW_LINE INDENT if end < x : NEW_LINE INDENT merged_intervals . append ( [ start , end ] ) NEW_LINE start = x NEW_LINE end = y NEW_LINE DEDENT else : NEW_LINE INDENT start = min ( start , x ) NEW_LINE end = max ( end , y ) NEW_LINE DEDENT DEDENT merged_intervals . append ( [ start , end ] ) NEW_LINE return merged_intervals NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT intervals . sort ( key = lambda x : x [ 0 ] ) NEW_LINE mergedIntervals = [ ] NEW_LINE for i in intervals : NEW_LINE INDENT if len ( mergedIntervals ) and mergedIntervals [ - 1 ] [ 1 ] >= i [ 0 ] : NEW_LINE INDENT mergedIntervals [ - 1 ] [ 1 ] = max ( mergedIntervals [ - 1 ] [ 1 ] , i [ 1 ] ) NEW_LINE continue NEW_LINE DEDENT mergedIntervals . append ( i ) NEW_LINE DEDENT return mergedIntervals NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not intervals : NEW_LINE INDENT return [ ] NEW_LINE DEDENT intervals = sorted ( intervals ) NEW_LINE out = [ ] NEW_LINE out . append ( intervals [ 0 ] ) NEW_LINE c = 0 NEW_LINE for i in intervals [ 1 : ] : NEW_LINE INDENT if i [ 0 ] <= out [ c ] [ 1 ] : NEW_LINE INDENT if i [ 1 ] > out [ c ] [ 1 ] : NEW_LINE INDENT out [ c ] [ 1 ] = i [ 1 ] NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT out . append ( i ) NEW_LINE c += 1 NEW_LINE DEDENT DEDENT return out NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT intervals . sort ( key = lambda x : ( x [ 0 ] , x [ 1 ] ) ) NEW_LINE n = len ( intervals ) NEW_LINE if n == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT ans = [ ] NEW_LINE low = intervals [ 0 ] [ 0 ] NEW_LINE hi = intervals [ 0 ] [ 1 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if hi >= intervals [ i ] [ 0 ] : NEW_LINE INDENT hi = max ( hi , intervals [ i ] [ 1 ] ) NEW_LINE continue NEW_LINE DEDENT else : NEW_LINE INDENT ans . append ( [ low , hi ] ) NEW_LINE low = intervals [ i ] [ 0 ] NEW_LINE hi = intervals [ i ] [ 1 ] NEW_LINE DEDENT DEDENT ans . append ( [ low , hi ] ) NEW_LINE return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT out = [ ] NEW_LINE for i in sorted ( intervals , key = lambda i : i [ 0 ] ) : NEW_LINE INDENT if out and i [ 0 ] <= out [ - 1 ] [ - 1 ] : NEW_LINE INDENT out [ - 1 ] [ - 1 ] = max ( out [ - 1 ] [ - 1 ] , i [ - 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT out += [ i ] NEW_LINE DEDENT DEDENT return out NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not intervals or not intervals [ 0 ] : NEW_LINE INDENT return intervals NEW_LINE DEDENT intervals = sorted ( intervals , key = lambda x : ( x [ 0 ] , x [ 1 ] ) ) NEW_LINE i = 1 NEW_LINE while i < len ( intervals ) : NEW_LINE INDENT if intervals [ i ] [ 0 ] <= intervals [ i - 1 ] [ 1 ] <= intervals [ i ] [ 1 ] : NEW_LINE INDENT intervals [ i - 1 ] [ 1 ] = intervals [ i ] [ 1 ] NEW_LINE intervals . pop ( i ) NEW_LINE DEDENT elif intervals [ i - 1 ] [ 1 ] > intervals [ i ] [ 1 ] : NEW_LINE INDENT intervals . pop ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT return intervals NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not intervals : return [ ] NEW_LINE intervals . sort ( ) NEW_LINE stack = [ intervals [ 0 ] ] NEW_LINE for interval in intervals : NEW_LINE INDENT left , right = interval NEW_LINE prev_left , prev_right = stack [ - 1 ] NEW_LINE if left <= prev_right : NEW_LINE INDENT left = min ( left , prev_left ) NEW_LINE right = max ( right , prev_right ) NEW_LINE stack [ - 1 ] = [ left , right ] NEW_LINE DEDENT else : NEW_LINE INDENT stack . append ( interval ) NEW_LINE DEDENT DEDENT return stack NEW_LINE DEDENT DEDENT
from collections import deque NEW_LINE class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( intervals ) <= 1 : NEW_LINE INDENT return intervals NEW_LINE DEDENT intervals . sort ( key = lambda I : I [ 0 ] ) NEW_LINE res = [ intervals [ 0 ] ] NEW_LINE q = deque ( intervals [ 1 : ] ) NEW_LINE while q : NEW_LINE INDENT I = q . popleft ( ) NEW_LINE if I [ 0 ] <= res [ - 1 ] [ 1 ] : NEW_LINE INDENT res [ - 1 ] [ 1 ] = max ( I [ 1 ] , res [ - 1 ] [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( I ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not intervals or not intervals [ 0 ] : NEW_LINE INDENT return [ ] NEW_LINE DEDENT intervals . sort ( ) NEW_LINE left = intervals [ 0 ] [ 0 ] NEW_LINE right = intervals [ 0 ] [ 1 ] NEW_LINE ans = [ ] NEW_LINE for i in range ( 1 , len ( intervals ) ) : NEW_LINE INDENT if right >= intervals [ i ] [ 0 ] : NEW_LINE INDENT right = max ( right , intervals [ i ] [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT ans . append ( [ left , right ] ) NEW_LINE left = intervals [ i ] [ 0 ] NEW_LINE right = intervals [ i ] [ 1 ] NEW_LINE DEDENT DEDENT ans . append ( [ left , right ] ) NEW_LINE return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT intervals . sort ( ) NEW_LINE res = [ [ - 1 , - 1 ] ] NEW_LINE for start , end in intervals : NEW_LINE INDENT if start > res [ - 1 ] [ 1 ] : NEW_LINE INDENT res . append ( [ start , end ] ) NEW_LINE DEDENT else : NEW_LINE INDENT res [ - 1 ] = [ res [ - 1 ] [ 0 ] , max ( end , res [ - 1 ] [ 1 ] ) ] NEW_LINE DEDENT DEDENT return res [ 1 : ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT sorted_intervals = sorted ( intervals ) NEW_LINE final_intervals = [ ] NEW_LINE current_interval = None NEW_LINE for i in sorted_intervals : NEW_LINE INDENT if current_interval is None : NEW_LINE INDENT current_interval = i NEW_LINE continue NEW_LINE DEDENT if i [ 0 ] <= current_interval [ 1 ] : NEW_LINE INDENT current_interval [ 1 ] = max ( current_interval [ 1 ] , i [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT final_intervals . append ( current_interval ) NEW_LINE current_interval = i NEW_LINE DEDENT DEDENT if current_interval is not None : NEW_LINE INDENT final_intervals . append ( current_interval ) NEW_LINE DEDENT return final_intervals NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not intervals or not intervals [ 0 ] : NEW_LINE INDENT return [ ] NEW_LINE DEDENT intervals . sort ( ) NEW_LINE left = intervals [ 0 ] [ 0 ] NEW_LINE right = intervals [ 0 ] [ 1 ] NEW_LINE ans = [ ] NEW_LINE for i in range ( 1 , len ( intervals ) ) : NEW_LINE INDENT print ( left , right ) NEW_LINE if right >= intervals [ i ] [ 0 ] : NEW_LINE INDENT right = max ( right , intervals [ i ] [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT ans . append ( [ left , right ] ) NEW_LINE left = intervals [ i ] [ 0 ] NEW_LINE right = intervals [ i ] [ 1 ] NEW_LINE DEDENT DEDENT ans . append ( [ left , right ] ) NEW_LINE return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT intervals = sorted ( intervals , key = lambda x : x [ 0 ] ) NEW_LINE output = [ ] NEW_LINE active = [ ] NEW_LINE for inter in intervals : NEW_LINE INDENT if active == [ ] : NEW_LINE INDENT active = inter NEW_LINE DEDENT else : NEW_LINE INDENT if active [ 1 ] >= inter [ 0 ] : NEW_LINE INDENT active [ 1 ] = max ( inter [ 1 ] , active [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT output . append ( active ) NEW_LINE active = inter NEW_LINE DEDENT DEDENT DEDENT if active != [ ] : NEW_LINE INDENT output . append ( active ) NEW_LINE DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT sorted_intervals = sorted ( intervals ) NEW_LINE final_intervals = [ ] NEW_LINE current_interval = None NEW_LINE for i in sorted_intervals : NEW_LINE INDENT if current_interval is None : NEW_LINE INDENT current_interval = i NEW_LINE continue NEW_LINE DEDENT if i [ 0 ] <= current_interval [ 1 ] : NEW_LINE INDENT current_interval [ 1 ] = max ( current_interval [ 1 ] , i [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT final_intervals . append ( current_interval ) NEW_LINE current_interval = i NEW_LINE DEDENT DEDENT if current_interval is not None : NEW_LINE INDENT final_intervals . append ( current_interval ) NEW_LINE DEDENT return final_intervals NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT intervals . sort ( key = lambda x : x [ 0 ] ) NEW_LINE output = [ ] NEW_LINE active = [ ] NEW_LINE for inter in intervals : NEW_LINE INDENT if active == [ ] : NEW_LINE INDENT active = inter NEW_LINE DEDENT else : NEW_LINE INDENT if active [ 1 ] >= inter [ 0 ] : NEW_LINE INDENT active [ 1 ] = max ( inter [ 1 ] , active [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT output . append ( active ) NEW_LINE active = inter NEW_LINE DEDENT DEDENT DEDENT if active != [ ] : NEW_LINE INDENT output . append ( active ) NEW_LINE DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not intervals : return [ ] NEW_LINE intervals . sort ( ) NEW_LINE merged = list ( ) NEW_LINE start , end = intervals [ 0 ] NEW_LINE for s , e in intervals [ 1 : ] : NEW_LINE INDENT if end >= s : NEW_LINE INDENT end = max ( end , e ) NEW_LINE DEDENT else : NEW_LINE INDENT merged . append ( [ start , end ] ) NEW_LINE start , end = s , e NEW_LINE DEDENT DEDENT merged . append ( [ start , end ] ) NEW_LINE return merged NEW_LINE DEDENT DEDENT
NEW_LINE class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( intervals ) <= 1 : NEW_LINE INDENT return intervals NEW_LINE DEDENT intervals . sort ( ) NEW_LINE self . res = [ ] NEW_LINE print ( intervals ) NEW_LINE temp = intervals [ 0 ] . copy ( ) NEW_LINE for cur in intervals : NEW_LINE INDENT if cur [ 0 ] == temp [ 0 ] and cur [ 1 ] == temp [ 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT temp = self . mergeIntervals ( cur , temp ) NEW_LINE print ( '- ' , temp ) NEW_LINE DEDENT self . res . append ( temp . copy ( ) ) NEW_LINE return self . res NEW_LINE DEDENT def mergeIntervals ( self , cur , temp ) : NEW_LINE INDENT if cur is None : NEW_LINE INDENT self . res . append ( temp . copy ( ) ) NEW_LINE return None NEW_LINE DEDENT if temp is None : NEW_LINE INDENT temp = cur . copy ( ) NEW_LINE return temp NEW_LINE DEDENT max_start = max ( cur [ 0 ] , temp [ 0 ] ) NEW_LINE min_end = min ( cur [ 1 ] , temp [ 1 ] ) NEW_LINE print ( '-- ' , temp , cur , min_end , max_start ) NEW_LINE if min_end < max_start : NEW_LINE INDENT self . res . append ( temp . copy ( ) ) NEW_LINE temp = cur . copy ( ) NEW_LINE return temp NEW_LINE DEDENT else : NEW_LINE INDENT temp = [ min ( cur [ 0 ] , temp [ 0 ] ) , max ( cur [ 1 ] , temp [ 1 ] ) ] NEW_LINE return temp NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not intervals or not intervals [ 0 ] : NEW_LINE INDENT return [ ] NEW_LINE DEDENT intervals . sort ( ) NEW_LINE left = intervals [ 0 ] [ 0 ] NEW_LINE right = intervals [ 0 ] [ 1 ] NEW_LINE ans = [ ] NEW_LINE for i in range ( 1 , len ( intervals ) ) : NEW_LINE INDENT print ( left , right ) NEW_LINE if right >= intervals [ i ] [ 0 ] : NEW_LINE INDENT right = max ( right , intervals [ i ] [ 1 ] ) NEW_LINE continue NEW_LINE DEDENT ans . append ( [ left , right ] ) NEW_LINE left = intervals [ i ] [ 0 ] NEW_LINE right = intervals [ i ] [ 1 ] NEW_LINE DEDENT ans . append ( [ left , right ] ) NEW_LINE return ans NEW_LINE DEDENT DEDENT
NEW_LINE class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( intervals ) <= 1 : NEW_LINE INDENT return intervals NEW_LINE DEDENT intervals . sort ( ) NEW_LINE self . res = [ ] NEW_LINE print ( intervals ) NEW_LINE temp = intervals [ 0 ] . copy ( ) NEW_LINE for cur in intervals : NEW_LINE INDENT if cur [ 0 ] == temp [ 0 ] and cur [ 1 ] == temp [ 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT temp = self . mergeIntervals ( cur , temp ) NEW_LINE print ( '- ' , temp ) NEW_LINE DEDENT self . res . append ( temp . copy ( ) ) NEW_LINE return self . res NEW_LINE DEDENT def mergeIntervals ( self , cur , temp ) : NEW_LINE INDENT if cur is None : NEW_LINE INDENT self . res . append ( temp . copy ( ) ) NEW_LINE return None NEW_LINE DEDENT if temp is None : NEW_LINE INDENT temp = cur . copy ( ) NEW_LINE return temp NEW_LINE DEDENT max_start = max ( cur [ 0 ] , temp [ 0 ] ) NEW_LINE min_end = min ( cur [ 1 ] , temp [ 1 ] ) NEW_LINE print ( '-- ' , temp , cur , min_end , max_start ) NEW_LINE if min_end < max_start : NEW_LINE INDENT self . res . append ( temp . copy ( ) ) NEW_LINE print ( '--- no overlay: ' , temp , cur , ' res: ' , self . res ) NEW_LINE temp = cur . copy ( ) NEW_LINE return temp NEW_LINE DEDENT else : NEW_LINE INDENT temp = [ min ( cur [ 0 ] , temp [ 0 ] ) , max ( cur [ 1 ] , temp [ 1 ] ) ] NEW_LINE print ( '--- ye overlay: ' , temp ) NEW_LINE return temp NEW_LINE DEDENT DEDENT DEDENT
NEW_LINE class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( intervals ) <= 1 : NEW_LINE INDENT return intervals NEW_LINE DEDENT intervals . sort ( ) NEW_LINE self . res = [ ] NEW_LINE print ( intervals ) NEW_LINE temp = intervals [ 0 ] . copy ( ) NEW_LINE for cur in intervals : NEW_LINE INDENT if cur [ 0 ] == temp [ 0 ] and cur [ 1 ] == temp [ 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT temp = self . mergeIntervals ( cur , temp ) NEW_LINE print ( '- ' , temp ) NEW_LINE DEDENT self . res . append ( temp . copy ( ) ) NEW_LINE return self . res NEW_LINE DEDENT def mergeIntervals ( self , cur , temp ) : NEW_LINE INDENT if cur is None : NEW_LINE INDENT self . res . append ( temp . copy ( ) ) NEW_LINE return None NEW_LINE DEDENT if temp is None : NEW_LINE INDENT temp = cur . copy ( ) NEW_LINE return temp NEW_LINE DEDENT max_start = max ( cur [ 0 ] , temp [ 0 ] ) NEW_LINE min_end = min ( cur [ 1 ] , temp [ 1 ] ) NEW_LINE print ( '-- ' , temp , cur , min_end , max_start ) NEW_LINE if min_end < max_start : NEW_LINE INDENT self . res . append ( temp . copy ( ) ) NEW_LINE print ( '--- no overlay: ' , temp , cur , ' res: ' , self . res ) NEW_LINE temp = cur . copy ( ) NEW_LINE return temp NEW_LINE DEDENT else : NEW_LINE INDENT temp = [ min ( cur [ 0 ] , temp [ 0 ] ) , max ( cur [ 1 ] , temp [ 1 ] ) ] NEW_LINE print ( '--- ye overlay: ' , temp ) NEW_LINE return temp NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def uniquePaths ( self , m : int , n : int ) -> int : NEW_LINE INDENT big = max ( m , n ) NEW_LINE small = min ( m , n ) NEW_LINE result = 1 NEW_LINE for i in range ( big , big + small - 1 ) : NEW_LINE INDENT result = result * i NEW_LINE DEDENT for j in range ( 2 , small ) : NEW_LINE INDENT result = result / j NEW_LINE DEDENT return int ( result ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def uniquePaths ( self , m : int , n : int ) -> int : NEW_LINE INDENT row = [ 1 ] * n NEW_LINE grid = [ row ] * m NEW_LINE for r in range ( 1 , m ) : NEW_LINE INDENT for c in range ( 1 , n ) : NEW_LINE INDENT grid [ r ] [ c ] = grid [ r - 1 ] [ c ] + grid [ r ] [ c - 1 ] NEW_LINE DEDENT DEDENT return grid [ m - 1 ] [ n - 1 ] NEW_LINE DEDENT DEDENT
from math import factorial NEW_LINE class Solution : NEW_LINE INDENT def uniquePaths ( self , m : int , n : int ) -> int : NEW_LINE INDENT return int ( factorial ( m + n - 2 ) / ( factorial ( m - 1 ) * factorial ( n - 1 ) ) ) NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def uniquePaths ( self , m : int , n : int ) -> int : NEW_LINE INDENT dp = [ [ 1 ] * n for _ in range ( m ) ] NEW_LINE for col in range ( 1 , n ) : NEW_LINE INDENT for row in range ( 1 , m ) : NEW_LINE INDENT dp [ row ] [ col ] = dp [ row - 1 ] [ col ] + dp [ row ] [ col - 1 ] NEW_LINE DEDENT DEDENT return dp [ - 1 ] [ - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def uniquePaths ( self , m : int , n : int ) -> int : NEW_LINE INDENT if ( m == 1 and n == 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT lookup = [ [ 0 ] * n for i in range ( m ) ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT lookup [ 0 ] [ i ] = 1 NEW_LINE DEDENT for i in range ( 1 , m ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if ( j == 0 ) : NEW_LINE INDENT lookup [ i ] [ j ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT lookup [ i ] [ j ] = lookup [ i - 1 ] [ j ] + lookup [ i ] [ j - 1 ] NEW_LINE DEDENT DEDENT DEDENT return lookup [ m - 1 ] [ n - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def uniquePaths ( self , m : int , n : int ) -> int : NEW_LINE INDENT dp = [ [ 0 for j in range ( n ) ] for i in range ( m ) ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT dp [ i ] [ 0 ] = 1 NEW_LINE DEDENT for j in range ( n ) : NEW_LINE INDENT dp [ 0 ] [ j ] = 1 NEW_LINE DEDENT for i in range ( 1 , m ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] NEW_LINE DEDENT DEDENT return dp [ m - 1 ] [ n - 1 ] NEW_LINE DEDENT DEDENT
from fractions import Fraction NEW_LINE class Solution : NEW_LINE INDENT def uniquePaths ( self , m : int , n : int ) -> int : NEW_LINE INDENT L = m + n - 2 NEW_LINE s = n - 1 NEW_LINE ans = 1 NEW_LINE for i in range ( L - s ) : NEW_LINE INDENT ans *= L - i NEW_LINE ans = Fraction ( ans , L - s - i ) NEW_LINE DEDENT return int ( ans ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def uniquePaths ( self , m : int , n : int ) -> int : NEW_LINE INDENT arr = [ [ 1 if i == 0 else 0 for i in range ( n ) ] for j in range ( m ) ] NEW_LINE arr [ 0 ] = [ 1 for i in range ( n ) ] NEW_LINE for i in range ( 1 , m ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT arr [ i ] [ j ] = arr [ i - 1 ] [ j ] + arr [ i ] [ j - 1 ] NEW_LINE DEDENT DEDENT return arr [ m - 1 ] [ n - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def uniquePaths ( self , m : int , n : int ) -> int : NEW_LINE INDENT opt = [ 1 ] * n NEW_LINE for i in range ( 1 , m ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT opt [ j ] += opt [ j - 1 ] NEW_LINE DEDENT DEDENT return opt [ n - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def uniquePaths ( self , m : int , n : int ) -> int : NEW_LINE INDENT dp = [ [ None for j in range ( n ) ] for i in range ( m ) ] NEW_LINE for i in range ( len ( dp ) ) : NEW_LINE INDENT dp [ i ] [ 0 ] = 1 NEW_LINE DEDENT for j in range ( len ( dp [ 0 ] ) ) : NEW_LINE INDENT dp [ 0 ] [ j ] = 1 NEW_LINE DEDENT for i in range ( 1 , len ( dp ) ) : NEW_LINE INDENT for j in range ( 1 , len ( dp [ 0 ] ) ) : NEW_LINE INDENT dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] NEW_LINE DEDENT DEDENT print ( dp ) NEW_LINE return dp [ - 1 ] [ - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT if not grid or not len ( grid [ 0 ] ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT rows = len ( grid ) NEW_LINE cols = len ( grid [ 0 ] ) NEW_LINE if rows == 1 : NEW_LINE INDENT return sum ( grid [ 0 ] ) NEW_LINE DEDENT if rows == 1 and cols == 1 : NEW_LINE INDENT return grid [ 0 ] [ 0 ] NEW_LINE DEDENT counters = [ [ i for i in row ] for row in grid ] NEW_LINE for row in range ( 1 , rows ) : NEW_LINE INDENT counters [ row ] [ 0 ] = counters [ row ] [ 0 ] + counters [ row - 1 ] [ 0 ] NEW_LINE DEDENT for col in range ( 1 , cols ) : NEW_LINE INDENT counters [ 0 ] [ col ] = counters [ 0 ] [ col ] + counters [ 0 ] [ col - 1 ] NEW_LINE DEDENT for row in range ( 1 , rows ) : NEW_LINE INDENT for col in range ( 1 , cols ) : NEW_LINE INDENT counters [ row ] [ col ] = counters [ row ] [ col ] + min ( counters [ row - 1 ] [ col ] , counters [ row ] [ col - 1 ] ) NEW_LINE DEDENT DEDENT return counters [ rows - 1 ] [ cols - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT rows , cols = len ( grid ) , len ( grid [ 0 ] ) NEW_LINE dp = [ float ( 'inf' ) ] * cols NEW_LINE dp [ 0 ] = grid [ 0 ] [ 0 ] NEW_LINE for c in range ( 1 , cols ) : NEW_LINE INDENT dp [ c ] = dp [ c - 1 ] + grid [ 0 ] [ c ] NEW_LINE DEDENT for r in range ( 1 , rows ) : NEW_LINE INDENT dp [ 0 ] = grid [ r ] [ 0 ] + dp [ 0 ] NEW_LINE for c in range ( 1 , cols ) : NEW_LINE INDENT dp [ c ] = grid [ r ] [ c ] + min ( dp [ c ] , dp [ c - 1 ] ) NEW_LINE DEDENT DEDENT return dp [ - 1 ] NEW_LINE NEW_LINE NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT if not grid or len ( grid ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT Rows = len ( grid ) NEW_LINE Cols = len ( grid [ 0 ] ) NEW_LINE pathsum = [ grid [ 0 ] [ 0 ] ] * Cols NEW_LINE for c in range ( 1 , Cols ) : NEW_LINE INDENT pathsum [ c ] = pathsum [ c - 1 ] + grid [ 0 ] [ c ] NEW_LINE DEDENT for r in range ( 1 , Rows ) : NEW_LINE INDENT pathsum [ 0 ] = pathsum [ 0 ] + grid [ r ] [ 0 ] NEW_LINE for c in range ( 1 , Cols ) : NEW_LINE INDENT pathsum [ c ] = min ( pathsum [ c ] , pathsum [ c - 1 ] ) + grid [ r ] [ c ] NEW_LINE DEDENT DEDENT return pathsum [ - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT m , n = len ( grid ) , len ( grid [ 0 ] ) NEW_LINE N = [ [ 0 for i in range ( n ) ] for j in range ( m ) ] NEW_LINE N [ 0 ] [ 0 ] = grid [ 0 ] [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT N [ 0 ] [ i ] = N [ 0 ] [ i - 1 ] + grid [ 0 ] [ i ] NEW_LINE DEDENT for i in range ( 1 , m ) : NEW_LINE INDENT N [ i ] [ 0 ] = N [ i - 1 ] [ 0 ] + grid [ i ] [ 0 ] NEW_LINE DEDENT for i in range ( 1 , m ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT N [ i ] [ j ] = min ( N [ i - 1 ] [ j ] , N [ i ] [ j - 1 ] ) + grid [ i ] [ j ] NEW_LINE DEDENT DEDENT return N [ m - 1 ] [ n - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT n = len ( grid ) NEW_LINE n2 = len ( grid [ 0 ] ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT grid [ i ] [ 0 ] = grid [ i ] [ 0 ] + grid [ i - 1 ] [ 0 ] NEW_LINE DEDENT for i in range ( 1 , n2 ) : NEW_LINE INDENT grid [ 0 ] [ i ] = grid [ 0 ] [ i ] + grid [ 0 ] [ i - 1 ] NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( 1 , n2 ) : NEW_LINE INDENT grid [ i ] [ j ] = grid [ i ] [ j ] + min ( grid [ i - 1 ] [ j ] , grid [ i ] [ j - 1 ] ) NEW_LINE DEDENT DEDENT return grid [ n - 1 ] [ n2 - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT m = len ( grid ) NEW_LINE n = len ( grid [ 0 ] ) NEW_LINE for j in range ( 1 , n ) : NEW_LINE INDENT grid [ 0 ] [ j ] = grid [ 0 ] [ j - 1 ] + grid [ 0 ] [ j ] NEW_LINE DEDENT for i in range ( 1 , m ) : NEW_LINE INDENT grid [ i ] [ 0 ] = grid [ i - 1 ] [ 0 ] + grid [ i ] [ 0 ] NEW_LINE DEDENT for i in range ( 1 , m ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT grid [ i ] [ j ] = grid [ i ] [ j ] + min ( grid [ i - 1 ] [ j ] , grid [ i ] [ j - 1 ] ) NEW_LINE DEDENT DEDENT return grid [ m - 1 ] [ n - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT m = len ( grid ) NEW_LINE n = len ( grid [ 0 ] ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT grid [ 0 ] [ i ] = grid [ 0 ] [ i - 1 ] + grid [ 0 ] [ i ] NEW_LINE DEDENT for j in range ( 1 , m ) : NEW_LINE INDENT grid [ j ] [ 0 ] = grid [ j - 1 ] [ 0 ] + grid [ j ] [ 0 ] NEW_LINE DEDENT for i in range ( 1 , m ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT grid [ i ] [ j ] = min ( grid [ i ] [ j ] + grid [ i - 1 ] [ j ] , grid [ i ] [ j ] + grid [ i ] [ j - 1 ] ) NEW_LINE DEDENT DEDENT return grid [ m - 1 ] [ n - 1 ] NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def minPathSm ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT row_length = len ( grid ) NEW_LINE col_length = len ( grid [ 0 ] ) NEW_LINE visited = { } NEW_LINE queue = [ ] NEW_LINE distances = [ [ float ( 'inf' ) for i in l ] for l in grid ] NEW_LINE distances [ 0 ] [ 0 ] = grid [ 0 ] [ 0 ] NEW_LINE for row in range ( row_length ) : NEW_LINE INDENT for col in range ( col_length ) : NEW_LINE INDENT heapq . heappush ( queue , ( distances [ row ] [ col ] , ( row , col ) ) ) NEW_LINE DEDENT DEDENT while len ( queue ) > 0 : NEW_LINE INDENT curr = heapq . heappop ( queue ) NEW_LINE dist , coord = curr NEW_LINE row , col = coord NEW_LINE visited [ ( row , col ) ] = True NEW_LINE if row == row_length - 1 and col == col_length - 1 : NEW_LINE INDENT break NEW_LINE DEDENT down = ( row + 1 , col ) NEW_LINE right = ( row , col + 1 ) NEW_LINE if down not in visited and row + 1 < row_length : NEW_LINE INDENT new_dist = grid [ row + 1 ] [ col ] + dist NEW_LINE distances [ row + 1 ] [ col ] = min ( distances [ row + 1 ] [ col ] , new_dist ) NEW_LINE DEDENT if right not in visited and col + 1 < col_length : NEW_LINE INDENT new_dist = grid [ row ] [ col + 1 ] + dist NEW_LINE distances [ row ] [ col + 1 ] = min ( distances [ row ] [ col + 1 ] , new_dist ) NEW_LINE DEDENT queue = [ ] NEW_LINE for row in range ( row_length ) : NEW_LINE INDENT for col in range ( col_length ) : NEW_LINE INDENT if ( row , col ) not in visited : NEW_LINE INDENT heapq . heappush ( queue , ( distances [ row ] [ col ] , ( row , col ) ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return distances [ row_length - 1 ] [ col_length - 1 ] NEW_LINE DEDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT distances = [ [ float ( 'inf' ) for i in l ] for l in grid ] NEW_LINE row_length = len ( grid ) NEW_LINE col_length = len ( grid [ 0 ] ) NEW_LINE distances [ 0 ] [ 0 ] = grid [ 0 ] [ 0 ] NEW_LINE for row in range ( row_length ) : NEW_LINE INDENT if row == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT distances [ row ] [ 0 ] = distances [ row - 1 ] [ 0 ] + grid [ row ] [ 0 ] NEW_LINE DEDENT for col in range ( col_length ) : NEW_LINE INDENT if col == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT distances [ 0 ] [ col ] = distances [ 0 ] [ col - 1 ] + grid [ 0 ] [ col ] NEW_LINE DEDENT for row in range ( row_length ) : NEW_LINE INDENT for col in range ( col_length ) : NEW_LINE INDENT if row != 0 and col != 0 : NEW_LINE INDENT distances [ row ] [ col ] = min ( distances [ row - 1 ] [ col ] , distances [ row ] [ col - 1 ] ) + grid [ row ] [ col ] NEW_LINE DEDENT DEDENT DEDENT print ( distances ) NEW_LINE return distances [ row_length - 1 ] [ col_length - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT m = len ( grid ) NEW_LINE n = len ( grid [ 0 ] ) NEW_LINE dp = collections . defaultdict ( tuple ) NEW_LINE for i in range ( m ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT curr_left = grid [ i ] [ j ] NEW_LINE curr_up = grid [ i ] [ j ] NEW_LINE if i > 0 and j > 0 : NEW_LINE INDENT dp [ ( i , j ) ] = min ( grid [ i ] [ j ] + dp [ ( i - 1 , j ) ] , grid [ i ] [ j ] + dp [ ( i , j - 1 ) ] ) NEW_LINE DEDENT elif i > 0 : NEW_LINE INDENT dp [ ( i , j ) ] = grid [ i ] [ j ] + dp [ ( i - 1 , j ) ] NEW_LINE DEDENT elif j > 0 : NEW_LINE INDENT dp [ ( i , j ) ] = grid [ i ] [ j ] + dp [ ( i , j - 1 ) ] NEW_LINE DEDENT else : NEW_LINE INDENT dp [ ( i , j ) ] = grid [ i ] [ j ] NEW_LINE DEDENT DEDENT DEDENT return dp [ ( m - 1 , n - 1 ) ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT cache = collections . defaultdict ( lambda : float ( 'inf' ) ) NEW_LINE for i in range ( len ( grid ) ) : NEW_LINE INDENT for j in range ( len ( grid [ 0 ] ) ) : NEW_LINE INDENT cache [ ( i , j ) ] = grid [ i ] [ j ] NEW_LINE if i > 0 or j > 0 : NEW_LINE INDENT cache [ ( i , j ) ] += min ( cache [ ( i - 1 , j ) ] , cache [ ( i , j - 1 ) ] ) NEW_LINE DEDENT DEDENT DEDENT return cache [ ( len ( grid ) - 1 , len ( grid [ 0 ] ) - 1 ) ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT m = len ( grid ) NEW_LINE n = len ( grid [ 0 ] ) NEW_LINE dp = collections . defaultdict ( tuple ) NEW_LINE def choose ( x , y ) : NEW_LINE INDENT if ( x , y ) in dp : NEW_LINE INDENT return dp [ ( x , y ) ] NEW_LINE DEDENT if x == 0 and y == 0 : NEW_LINE INDENT dp [ ( x , y ) ] = grid [ x ] [ y ] NEW_LINE DEDENT elif x != 0 and y != 0 : NEW_LINE INDENT dp [ ( x , y ) ] = grid [ x ] [ y ] + min ( choose ( x - 1 , y ) , choose ( x , y - 1 ) ) NEW_LINE DEDENT elif x != 0 : NEW_LINE INDENT dp [ ( x , y ) ] = grid [ x ] [ y ] + choose ( x - 1 , y ) NEW_LINE DEDENT else : NEW_LINE INDENT dp [ ( x , y ) ] = grid [ x ] [ y ] + choose ( x , y - 1 ) NEW_LINE DEDENT return dp [ ( x , y ) ] NEW_LINE DEDENT tmpM = 0 NEW_LINE tmpN = 0 NEW_LINE while tmpM != m - 1 or tmpN != n - 1 : NEW_LINE INDENT if tmpM < m - 1 : NEW_LINE INDENT tmpM += 1 NEW_LINE DEDENT if tmpN < n - 1 : NEW_LINE INDENT tmpN += 1 NEW_LINE DEDENT choose ( tmpM , tmpN ) NEW_LINE DEDENT if m == 1 and n == 1 : NEW_LINE INDENT return grid [ 0 ] [ 0 ] NEW_LINE DEDENT return dp [ ( m - 1 , n - 1 ) ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT m = len ( grid ) NEW_LINE n = len ( grid [ 0 ] ) NEW_LINE arr = [ [ 0 for i in range ( n ) ] for j in range ( m ) ] NEW_LINE arr [ 0 ] [ 0 ] = grid [ 0 ] [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT arr [ 0 ] [ i ] = arr [ 0 ] [ i - 1 ] + grid [ 0 ] [ i ] NEW_LINE DEDENT for i in range ( 1 , m ) : NEW_LINE INDENT arr [ i ] [ 0 ] = arr [ i - 1 ] [ 0 ] + grid [ i ] [ 0 ] NEW_LINE DEDENT for i in range ( 1 , m ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT print ( i , j ) NEW_LINE arr [ i ] [ j ] = min ( arr [ i - 1 ] [ j ] , arr [ i ] [ j - 1 ] ) + grid [ i ] [ j ] NEW_LINE DEDENT DEDENT return arr [ - 1 ] [ - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT n = len ( grid ) NEW_LINE n2 = len ( grid [ 0 ] ) NEW_LINE dp = [ [ 100000 for j in range ( n2 ) ] for i in range ( n ) ] NEW_LINE def minPath ( i , j ) : NEW_LINE INDENT if ( i < 0 or j < 0 or i > n - 1 or j > n2 - 1 ) : NEW_LINE INDENT return 100000 NEW_LINE DEDENT if ( dp [ i ] [ j ] < 10000 ) : NEW_LINE INDENT return dp [ i ] [ j ] NEW_LINE DEDENT if ( i == n - 1 and j == n2 - 1 ) : NEW_LINE INDENT return grid [ i ] [ j ] NEW_LINE DEDENT dp [ i ] [ j ] = grid [ i ] [ j ] + min ( minPath ( i + 1 , j ) , minPath ( i , j + 1 ) ) NEW_LINE return dp [ i ] [ j ] NEW_LINE DEDENT return minPath ( 0 , 0 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid ) : NEW_LINE INDENT m , n = len ( grid ) , len ( grid [ 0 ] ) NEW_LINE memo = [ [ None for j in range ( n ) ] for i in range ( m ) ] NEW_LINE return self . dfs ( grid , m , n , memo ) NEW_LINE DEDENT def dfs ( self , grid , m , n , memo , i = 0 , j = 0 ) : NEW_LINE INDENT if i == m - 1 and j == n - 1 : NEW_LINE INDENT return grid [ i ] [ j ] NEW_LINE DEDENT if memo [ i ] [ j ] : NEW_LINE INDENT return memo [ i ] [ j ] NEW_LINE DEDENT min_sum = float ( "inf" ) NEW_LINE if i < m - 1 : NEW_LINE INDENT min_sum = min ( min_sum , self . dfs ( grid , m , n , memo , i + 1 , j ) + grid [ i ] [ j ] ) NEW_LINE DEDENT if j < n - 1 : NEW_LINE INDENT min_sum = min ( min_sum , self . dfs ( grid , m , n , memo , i , j + 1 ) + grid [ i ] [ j ] ) NEW_LINE DEDENT memo [ i ] [ j ] = min_sum NEW_LINE return min_sum NEW_LINE DEDENT DEDENT
import math NEW_LINE class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT def dfs ( i , j ) : NEW_LINE INDENT if i >= len ( grid ) or j >= len ( grid [ 0 ] ) : NEW_LINE INDENT return math . inf NEW_LINE DEDENT if seen [ ( i , j ) ] : NEW_LINE INDENT return seen [ ( i , j ) ] NEW_LINE DEDENT if i == len ( grid ) - 1 and j == len ( grid [ 0 ] ) - 1 : NEW_LINE INDENT return grid [ i ] [ j ] NEW_LINE DEDENT a = dfs ( i + 1 , j ) NEW_LINE b = dfs ( i , j + 1 ) NEW_LINE seen [ ( i , j ) ] = grid [ i ] [ j ] + min ( a , b ) NEW_LINE return seen [ ( i , j ) ] NEW_LINE DEDENT seen = collections . defaultdict ( int ) NEW_LINE return dfs ( 0 , 0 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT m , n = len ( grid ) , len ( grid [ 0 ] ) NEW_LINE dp = [ [ 0 ] * n for _ in range ( m ) ] NEW_LINE def prev_move ( i : int , j : int ) -> Generator [ Tuple [ int , int ] , None , None ] : NEW_LINE INDENT for pi , pj in ( ( i - 1 , j ) , ( i , j - 1 ) ) : NEW_LINE INDENT if m > pi >= 0 and n > pj >= 0 : NEW_LINE INDENT yield pi , pj NEW_LINE DEDENT DEDENT DEDENT dp [ 0 ] [ 0 ] = grid [ 0 ] [ 0 ] NEW_LINE i , j = 0 , 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT dp [ i ] [ j ] = grid [ i ] [ j ] + min ( [ dp [ pi ] [ pj ] for pi , pj in prev_move ( i , j ) ] , default = 0 ) NEW_LINE DEDENT DEDENT return dp [ m - 1 ] [ n - 1 ] NEW_LINE DEDENT DEDENT
dp = [ [ 0 for _ in range ( 1000 ) ] for __ in range ( 1000 ) ] NEW_LINE class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT n = len ( grid ) NEW_LINE if ( n == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT m = len ( grid [ 0 ] ) NEW_LINE dp [ 0 ] [ 0 ] = grid [ 0 ] [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + grid [ i ] [ 0 ] NEW_LINE DEDENT for i in range ( 1 , m ) : NEW_LINE INDENT dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + grid [ 0 ] [ i ] NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( 1 , m ) : NEW_LINE INDENT dp [ i ] [ j ] = grid [ i ] [ j ] + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) NEW_LINE DEDENT DEDENT return dp [ n - 1 ] [ m - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT coll = { } NEW_LINE def helper ( grid , row , col ) : NEW_LINE INDENT if ( row , col ) in coll : NEW_LINE INDENT return coll [ ( row , col ) ] NEW_LINE DEDENT elif row == len ( grid ) - 1 and col == len ( grid [ 0 ] ) - 1 : NEW_LINE INDENT coll [ ( row , col ) ] = grid [ row ] [ col ] NEW_LINE return coll [ ( row , col ) ] NEW_LINE DEDENT mod_row = min ( row + 1 , len ( grid ) - 1 ) NEW_LINE mod_col = min ( col + 1 , len ( grid [ 0 ] ) - 1 ) NEW_LINE if mod_row == row : NEW_LINE INDENT coll [ ( row , col ) ] = grid [ row ] [ col ] + helper ( grid , row , mod_col ) NEW_LINE return coll [ ( row , col ) ] NEW_LINE DEDENT if mod_col == col : NEW_LINE INDENT coll [ ( row , col ) ] = grid [ row ] [ col ] + helper ( grid , mod_row , col ) NEW_LINE return coll [ ( row , col ) ] NEW_LINE DEDENT coll [ ( row , col ) ] = grid [ row ] [ col ] + min ( helper ( grid , mod_row , col ) , helper ( grid , row , mod_col ) ) NEW_LINE return coll [ ( row , col ) ] NEW_LINE DEDENT return helper ( grid , 0 , 0 ) NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT minPath = [ ] NEW_LINE def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT m = len ( grid ) NEW_LINE n = len ( grid [ 0 ] ) NEW_LINE self . minPath = [ ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT self . minPath . append ( [ ] ) NEW_LINE for j in range ( n ) : NEW_LINE INDENT self . minPath [ i ] . append ( - 1 ) NEW_LINE DEDENT DEDENT self . findMinSum ( grid , 0 , 0 ) NEW_LINE return self . minPath [ 0 ] [ 0 ] NEW_LINE DEDENT def findMinSum ( self , grid , x , y ) : NEW_LINE INDENT if x > len ( grid ) - 1 or y > len ( grid [ 0 ] ) - 1 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT if x == len ( grid ) - 1 and y == len ( grid [ 0 ] ) - 1 : NEW_LINE INDENT self . minPath [ x ] [ y ] = grid [ x ] [ y ] NEW_LINE DEDENT if self . minPath [ x ] [ y ] == - 1 : NEW_LINE INDENT if x + 1 > len ( grid ) - 1 : NEW_LINE INDENT route1 = - 1 NEW_LINE DEDENT else : NEW_LINE INDENT route1 = self . findMinSum ( grid , x + 1 , y ) NEW_LINE DEDENT if y + 1 > len ( grid [ 0 ] ) - 1 : NEW_LINE INDENT route2 = - 1 NEW_LINE DEDENT else : NEW_LINE INDENT route2 = self . findMinSum ( grid , x , y + 1 ) NEW_LINE DEDENT if route1 < route2 : NEW_LINE INDENT self . minPath [ x ] [ y ] = route1 + grid [ x ] [ y ] NEW_LINE DEDENT else : NEW_LINE INDENT self . minPath [ x ] [ y ] = route2 + grid [ x ] [ y ] NEW_LINE DEDENT if route2 == - 1 : NEW_LINE INDENT self . minPath [ x ] [ y ] = route1 + grid [ x ] [ y ] NEW_LINE DEDENT elif route1 == - 1 : NEW_LINE INDENT self . minPath [ x ] [ y ] = route2 + grid [ x ] [ y ] NEW_LINE DEDENT DEDENT return self . minPath [ x ] [ y ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT memo = { } NEW_LINE return self . recur ( 0 , 0 , grid , memo ) NEW_LINE DEDENT def recur ( self , i , j , grid , memo ) : NEW_LINE INDENT if not self . isBound ( i , j , grid ) : NEW_LINE INDENT return float ( inf ) NEW_LINE DEDENT if ( i , j ) in memo : NEW_LINE INDENT return memo [ ( i , j ) ] NEW_LINE DEDENT if ( i , j ) == ( len ( grid ) - 1 , len ( grid [ 0 ] ) - 1 ) : NEW_LINE INDENT return grid [ i ] [ j ] NEW_LINE DEDENT right = self . recur ( i , j + 1 , grid , memo ) NEW_LINE down = self . recur ( i + 1 , j , grid , memo ) NEW_LINE memo [ ( i , j ) ] = grid [ i ] [ j ] + min ( right , down ) NEW_LINE return grid [ i ] [ j ] + min ( right , down ) NEW_LINE DEDENT def isBound ( self , i , j , grid ) : NEW_LINE INDENT if i > len ( grid ) - 1 or j > len ( grid [ 0 ] ) - 1 : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT DEDENT
from math import inf NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT unvisited = [ ] NEW_LINE costTable = { } NEW_LINE y = 0 NEW_LINE x = 0 NEW_LINE for row in grid : NEW_LINE INDENT y += 1 NEW_LINE DEDENT for col in grid [ 0 ] : NEW_LINE INDENT x += 1 NEW_LINE DEDENT if x == 0 or y == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT rowLen = y NEW_LINE colLen = x NEW_LINE costTable [ ( 0 , 0 ) ] = grid [ 0 ] [ 0 ] NEW_LINE heapq . heappush ( unvisited , ( grid [ 0 ] [ 0 ] , ( 0 , 0 ) ) ) NEW_LINE while unvisited : NEW_LINE INDENT prevCost , ( row , col ) = heapq . heappop ( unvisited ) NEW_LINE newCol = col + 1 NEW_LINE if newCol < colLen : NEW_LINE INDENT newCost = prevCost + grid [ row ] [ newCol ] NEW_LINE if newCost < costTable . get ( ( row , newCol ) , inf ) : NEW_LINE INDENT costTable [ ( row , newCol ) ] = newCost NEW_LINE heapq . heappush ( unvisited , ( newCost , ( row , newCol ) ) ) NEW_LINE DEDENT DEDENT newRow = row + 1 NEW_LINE if newRow < rowLen : NEW_LINE INDENT newCost = prevCost + grid [ newRow ] [ col ] NEW_LINE if newCost < costTable . get ( ( newRow , col ) , inf ) : NEW_LINE INDENT costTable [ ( newRow , col ) ] = newCost NEW_LINE heapq . heappush ( unvisited , ( newCost , ( newRow , col ) ) ) NEW_LINE DEDENT DEDENT DEDENT print ( costTable ) NEW_LINE return costTable [ ( rowLen - 1 , colLen - 1 ) ] NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT if not grid or not grid [ 0 ] : NEW_LINE INDENT return 0 NEW_LINE DEDENT m , n = len ( grid ) , len ( grid [ 0 ] ) NEW_LINE heap = [ ( grid [ 0 ] [ 0 ] , 0 , 0 ) ] NEW_LINE visited = set ( ) NEW_LINE while heap : NEW_LINE INDENT path , i , j = heapq . heappop ( heap ) NEW_LINE if ( i , j ) in visited : continue NEW_LINE if i == m - 1 and j == n - 1 : NEW_LINE INDENT return path NEW_LINE DEDENT visited . add ( ( i , j ) ) NEW_LINE if i < m - 1 : NEW_LINE INDENT heapq . heappush ( heap , ( path + grid [ i + 1 ] [ j ] , i + 1 , j ) ) NEW_LINE DEDENT if j < n - 1 : NEW_LINE INDENT heapq . heappush ( heap , ( path + grid [ i ] [ j + 1 ] , i , j + 1 ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT visited = [ [ 0 ] * len ( grid [ 0 ] ) for _ in range ( len ( grid ) ) ] NEW_LINE q = [ ] NEW_LINE heapq . heappush ( q , ( grid [ 0 ] [ 0 ] , ( 0 , 0 ) ) ) NEW_LINE while len ( q ) != 0 : NEW_LINE INDENT cur = heapq . heappop ( q ) NEW_LINE if cur [ 1 ] [ 0 ] == len ( grid ) - 1 and cur [ 1 ] [ 1 ] == len ( grid [ 0 ] ) - 1 : NEW_LINE INDENT return cur [ 0 ] NEW_LINE DEDENT if cur [ 1 ] [ 0 ] + 1 < len ( grid ) : NEW_LINE INDENT down = ( cur [ 0 ] + grid [ cur [ 1 ] [ 0 ] + 1 ] [ cur [ 1 ] [ 1 ] ] , ( cur [ 1 ] [ 0 ] + 1 , cur [ 1 ] [ 1 ] ) ) NEW_LINE if visited [ cur [ 1 ] [ 0 ] + 1 ] [ cur [ 1 ] [ 1 ] ] == 0 : NEW_LINE INDENT visited [ cur [ 1 ] [ 0 ] + 1 ] [ cur [ 1 ] [ 1 ] ] = down [ 0 ] NEW_LINE heapq . heappush ( q , down ) NEW_LINE DEDENT elif visited [ cur [ 1 ] [ 0 ] + 1 ] [ cur [ 1 ] [ 1 ] ] > down [ 0 ] : NEW_LINE INDENT heapq . heappush ( q , down ) NEW_LINE DEDENT DEDENT if cur [ 1 ] [ 1 ] + 1 < len ( grid [ 0 ] ) : NEW_LINE INDENT right = ( cur [ 0 ] + grid [ cur [ 1 ] [ 0 ] ] [ cur [ 1 ] [ 1 ] + 1 ] , ( cur [ 1 ] [ 0 ] , cur [ 1 ] [ 1 ] + 1 ) ) NEW_LINE if visited [ cur [ 1 ] [ 0 ] ] [ cur [ 1 ] [ 1 ] + 1 ] == 0 : NEW_LINE INDENT visited [ cur [ 1 ] [ 0 ] ] [ cur [ 1 ] [ 1 ] + 1 ] = right [ 0 ] NEW_LINE heapq . heappush ( q , right ) NEW_LINE DEDENT elif visited [ cur [ 1 ] [ 0 ] ] [ cur [ 1 ] [ 1 ] + 1 ] > right [ 0 ] : NEW_LINE INDENT heapq . heappush ( q , right ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
import numpy as np NEW_LINE class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT g = np . array ( grid ) NEW_LINE h , w = g . shape NEW_LINE val = np . zeros ( ( h , w ) ) NEW_LINE sum_row = 0 NEW_LINE for i in range ( h ) : NEW_LINE INDENT sum_row += g [ i , 0 ] NEW_LINE val [ i , 0 ] = sum_row NEW_LINE DEDENT sum_col = 0 NEW_LINE for j in range ( w ) : NEW_LINE INDENT sum_col += g [ 0 , j ] NEW_LINE val [ 0 , j ] = sum_col NEW_LINE DEDENT for i in range ( 1 , h ) : NEW_LINE INDENT for j in range ( 1 , w ) : NEW_LINE INDENT val [ i , j ] = min ( val [ i - 1 , j ] , val [ i , j - 1 ] ) + g [ i , j ] NEW_LINE DEDENT DEDENT return int ( val [ h - 1 , w - 1 ] ) NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT visited = [ [ 0 ] * len ( grid [ 0 ] ) for _ in range ( len ( grid ) ) ] NEW_LINE q = [ ] NEW_LINE heapq . heappush ( q , ( grid [ 0 ] [ 0 ] , ( 0 , 0 ) ) ) NEW_LINE while len ( q ) != 0 : NEW_LINE INDENT cur = heapq . heappop ( q ) NEW_LINE if cur [ 1 ] [ 0 ] == len ( grid ) - 1 and cur [ 1 ] [ 1 ] == len ( grid [ 0 ] ) - 1 : NEW_LINE INDENT return cur [ 0 ] NEW_LINE DEDENT if cur [ 1 ] [ 0 ] + 1 < len ( grid ) : NEW_LINE INDENT down = ( cur [ 0 ] + grid [ cur [ 1 ] [ 0 ] + 1 ] [ cur [ 1 ] [ 1 ] ] , ( cur [ 1 ] [ 0 ] + 1 , cur [ 1 ] [ 1 ] ) ) NEW_LINE if visited [ cur [ 1 ] [ 0 ] + 1 ] [ cur [ 1 ] [ 1 ] ] == 0 : NEW_LINE INDENT visited [ cur [ 1 ] [ 0 ] + 1 ] [ cur [ 1 ] [ 1 ] ] = down [ 0 ] NEW_LINE heapq . heappush ( q , down ) NEW_LINE DEDENT elif visited [ cur [ 1 ] [ 0 ] + 1 ] [ cur [ 1 ] [ 1 ] ] > down [ 0 ] : NEW_LINE INDENT heapq . heappush ( q , down ) NEW_LINE DEDENT DEDENT if cur [ 1 ] [ 1 ] + 1 < len ( grid [ 0 ] ) : NEW_LINE INDENT right = ( cur [ 0 ] + grid [ cur [ 1 ] [ 0 ] ] [ cur [ 1 ] [ 1 ] + 1 ] , ( cur [ 1 ] [ 0 ] , cur [ 1 ] [ 1 ] + 1 ) ) NEW_LINE if visited [ cur [ 1 ] [ 0 ] ] [ cur [ 1 ] [ 1 ] + 1 ] == 0 : NEW_LINE INDENT visited [ cur [ 1 ] [ 0 ] ] [ cur [ 1 ] [ 1 ] + 1 ] = right [ 0 ] NEW_LINE heapq . heappush ( q , right ) NEW_LINE DEDENT elif visited [ cur [ 1 ] [ 0 ] ] [ cur [ 1 ] [ 1 ] + 1 ] > right [ 0 ] : NEW_LINE INDENT heapq . heappush ( q , right ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def minPathSum ( self , grid : List [ List [ int ] ] ) -> int : NEW_LINE INDENT q = deque ( ) NEW_LINE if not grid : NEW_LINE INDENT return 0 NEW_LINE DEDENT numRows = len ( grid ) NEW_LINE numCols = len ( grid [ 0 ] ) NEW_LINE dirs = [ ( 0 , 1 ) , ( 1 , 0 ) ] NEW_LINE q = [ ( grid [ 0 ] [ 0 ] , 0 , 0 ) ] NEW_LINE visited = set ( ) NEW_LINE while q : NEW_LINE INDENT costSoFar , r , c = heapq . heappop ( q ) NEW_LINE if ( r , c ) in visited : NEW_LINE INDENT continue NEW_LINE DEDENT visited . add ( ( r , c ) ) NEW_LINE if r == numRows - 1 and c == numCols - 1 : NEW_LINE INDENT return costSoFar NEW_LINE DEDENT for d in dirs : NEW_LINE INDENT toR , toC = r + d [ 0 ] , c + d [ 1 ] NEW_LINE if toR < numRows and toC < numCols : NEW_LINE INDENT heapq . heappush ( q , ( costSoFar + grid [ toR ] [ toC ] , toR , toC ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def plusOne ( self , digits : List [ int ] ) -> List [ int ] : NEW_LINE INDENT digits . reverse ( ) NEW_LINE total = 0 NEW_LINE for i in range ( 0 , len ( digits ) ) : NEW_LINE INDENT total += digits [ i ] * ( 10 ** i ) NEW_LINE DEDENT total = total + 1 NEW_LINE return [ int ( d ) for d in str ( total ) ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def plusOne ( self , digits : List [ int ] ) -> List [ int ] : NEW_LINE INDENT temp = int ( '' . join ( [ str ( x ) for x in digits ] ) ) + 1 NEW_LINE return [ int ( x ) for x in str ( temp ) ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def search ( self , nums : List [ int ] , target : int ) -> bool : NEW_LINE INDENT if not nums or len ( nums ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT l , r = 0 , len ( nums ) - 1 NEW_LINE while l <= r : NEW_LINE INDENT while l + 1 <= r and nums [ l ] == nums [ l + 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT while r > 0 and nums [ r ] == nums [ r - 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT mid = l + ( r - l ) // 2 NEW_LINE if nums [ mid ] == target : NEW_LINE INDENT return True NEW_LINE DEDENT if nums [ mid ] >= nums [ l ] : NEW_LINE INDENT if nums [ mid ] > target >= nums [ l ] : NEW_LINE INDENT r = mid - 1 NEW_LINE DEDENT else : NEW_LINE INDENT l = mid + 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if nums [ mid ] < target <= nums [ r ] : NEW_LINE INDENT l = mid + 1 NEW_LINE DEDENT else : NEW_LINE INDENT r = mid - 1 NEW_LINE DEDENT DEDENT DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def search ( self , nums : List [ int ] , target : int ) -> bool : NEW_LINE INDENT if not nums : NEW_LINE INDENT return False NEW_LINE DEDENT l = 0 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT m = ( l + r ) // 2 NEW_LINE if nums [ l ] == nums [ m ] == nums [ r ] : NEW_LINE INDENT return target in nums NEW_LINE DEDENT if nums [ m ] > nums [ r ] : NEW_LINE INDENT l = m + 1 NEW_LINE DEDENT else : NEW_LINE INDENT r = m NEW_LINE DEDENT DEDENT pivot = l NEW_LINE l = 0 NEW_LINE r = len ( nums ) - 1 NEW_LINE if nums [ pivot ] <= target <= nums [ r ] : NEW_LINE INDENT l = pivot NEW_LINE DEDENT else : NEW_LINE INDENT r = pivot NEW_LINE DEDENT while l <= r : NEW_LINE INDENT m = ( l + r ) // 2 NEW_LINE if nums [ m ] < target : NEW_LINE INDENT l = m + 1 NEW_LINE DEDENT elif nums [ m ] > target : NEW_LINE INDENT r = m - 1 NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def search ( self , nums : List [ int ] , target : int ) -> bool : NEW_LINE INDENT def find ( L , R ) : NEW_LINE INDENT print ( L , R ) NEW_LINE if L > R : NEW_LINE INDENT return False NEW_LINE DEDENT if L == R - 1 : NEW_LINE INDENT return nums [ L ] == target or nums [ R ] == target NEW_LINE DEDENT mid = L + ( R - L ) // 2 NEW_LINE if nums [ mid ] == target : NEW_LINE INDENT return True NEW_LINE DEDENT if nums [ L ] < nums [ R ] : NEW_LINE INDENT if nums [ mid ] < target : NEW_LINE INDENT return find ( mid + 1 , R ) NEW_LINE DEDENT else : NEW_LINE INDENT return find ( L , mid - 1 ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT return find ( L , mid - 1 ) or find ( mid + 1 , R ) NEW_LINE DEDENT DEDENT res = find ( 0 , len ( nums ) - 1 ) NEW_LINE return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def search ( self , nums : List [ int ] , target : int ) -> bool : NEW_LINE INDENT nums_len = len ( nums ) NEW_LINE if nums_len == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT left , right = 0 , nums_len - 1 NEW_LINE for i in range ( nums_len ) : NEW_LINE INDENT if nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT left = i NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT while left + 1 < right : NEW_LINE INDENT mid = ( left + right ) // 2 NEW_LINE if nums [ mid ] == target : NEW_LINE INDENT return True NEW_LINE DEDENT if nums [ mid ] > nums [ right ] : NEW_LINE INDENT if nums [ left ] <= target <= nums [ mid ] : NEW_LINE INDENT right = mid NEW_LINE DEDENT else : NEW_LINE INDENT left = mid NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if nums [ mid ] <= target <= nums [ right ] : NEW_LINE INDENT left = mid NEW_LINE DEDENT else : NEW_LINE INDENT right = mid NEW_LINE DEDENT DEDENT DEDENT if nums [ left ] == target or nums [ right ] == target : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def search ( self , nums : List [ int ] , target : int ) -> bool : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( nums ) == 1 : NEW_LINE INDENT if nums [ 0 ] == target : NEW_LINE INDENT return True NEW_LINE DEDENT else : return False NEW_LINE DEDENT mid = len ( nums ) // 2 NEW_LINE return self . search ( nums [ : mid ] , target ) or self . search ( nums [ mid : ] , target ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def search ( self , nums : List [ int ] , target : int ) -> bool : NEW_LINE INDENT begin = 0 NEW_LINE end = len ( nums ) - 1 NEW_LINE while begin <= end : NEW_LINE INDENT mid = ( begin + end ) // 2 NEW_LINE if nums [ mid ] == target or nums [ begin ] == target or nums [ end ] == target : NEW_LINE INDENT return True NEW_LINE DEDENT if nums [ mid ] == nums [ begin ] : NEW_LINE INDENT begin += 1 NEW_LINE DEDENT elif nums [ mid ] > nums [ end ] : NEW_LINE INDENT if target >= nums [ begin ] and target < nums [ mid ] : NEW_LINE INDENT end = mid - 1 NEW_LINE DEDENT else : NEW_LINE INDENT begin = mid + 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if target > nums [ mid ] and target <= nums [ end ] : NEW_LINE INDENT begin = mid + 1 NEW_LINE DEDENT else : NEW_LINE INDENT end = mid - 1 NEW_LINE DEDENT DEDENT DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def search ( self , nums : List [ int ] , target : int ) -> bool : NEW_LINE INDENT return self . bs ( nums , 0 , len ( nums ) - 1 , target ) if nums else False NEW_LINE DEDENT def bs ( self , nums , i , j , target ) : NEW_LINE INDENT if i == j : NEW_LINE INDENT return nums [ i ] == target NEW_LINE DEDENT mid = ( i + j ) // 2 NEW_LINE l = nums [ i ] NEW_LINE r = nums [ j ] NEW_LINE m = nums [ mid ] NEW_LINE if l < m : NEW_LINE INDENT if target >= l and target <= m : NEW_LINE INDENT return self . bs ( nums , i , mid , target ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . bs ( nums , mid + 1 , j , target ) NEW_LINE DEDENT DEDENT elif m < l : NEW_LINE INDENT if target <= m or target >= l : NEW_LINE INDENT return self . bs ( nums , i , mid , target ) NEW_LINE DEDENT else : NEW_LINE INDENT return self . bs ( nums , mid + 1 , j , target ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT return self . bs ( nums , i , mid , target ) or self . bs ( nums , mid + 1 , j , target ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , nums1 : List [ int ] , m : int , nums2 : List [ int ] , n : int ) -> None : NEW_LINE INDENT NEW_LINE while m > 0 and n > 0 : NEW_LINE INDENT if nums1 [ m - 1 ] > nums2 [ n - 1 ] : NEW_LINE INDENT nums1 [ m + n - 1 ] = nums1 [ m - 1 ] NEW_LINE m -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums1 [ m + n - 1 ] = nums2 [ n - 1 ] NEW_LINE n -= 1 NEW_LINE DEDENT DEDENT if n > 0 : NEW_LINE INDENT nums1 [ : n ] = nums2 [ : n ] NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , nums1 : List [ int ] , m : int , nums2 : List [ int ] , n : int ) -> None : NEW_LINE INDENT NEW_LINE NEW_LINE i = m - 1 NEW_LINE j = n - 1 NEW_LINE k = m + n - 1 NEW_LINE while i >= 0 and j >= 0 : NEW_LINE INDENT if nums1 [ i ] > nums2 [ j ] : NEW_LINE INDENT nums1 [ k ] = nums1 [ i ] NEW_LINE i -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums1 [ k ] = nums2 [ j ] NEW_LINE j -= 1 NEW_LINE DEDENT k -= 1 NEW_LINE DEDENT if j >= 0 : NEW_LINE INDENT nums1 [ : k + 1 ] = nums2 [ : j + 1 ] NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , nums1 : List [ int ] , m : int , nums2 : List [ int ] , n : int ) -> None : NEW_LINE INDENT NEW_LINE nums1_cpy = nums1 [ : m ] NEW_LINE nums1 [ : ] = [ ] NEW_LINE i , j = 0 , 0 NEW_LINE while i < m and j < n : NEW_LINE INDENT if nums1_cpy [ i ] <= nums2 [ j ] : NEW_LINE INDENT nums1 . append ( nums1_cpy [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums1 . append ( nums2 [ j ] ) NEW_LINE j += 1 NEW_LINE DEDENT DEDENT if i < m : NEW_LINE INDENT nums1 [ i + j : ] = nums1_cpy [ i : ] NEW_LINE DEDENT if j < n : NEW_LINE INDENT nums1 [ i + j : ] = nums2 [ j : ] NEW_LINE DEDENT return nums1 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , nums1 : List [ int ] , m : int , nums2 : List [ int ] , n : int ) -> None : NEW_LINE INDENT NEW_LINE p1 = m + n - 1 NEW_LINE p2 = n - 1 NEW_LINE p = m - 1 NEW_LINE while p2 >= 0 and p >= 0 : NEW_LINE INDENT if ( nums1 [ p ] < nums2 [ p2 ] ) : NEW_LINE INDENT nums1 [ p1 ] = nums2 [ p2 ] NEW_LINE p2 = p2 - 1 NEW_LINE p1 = p1 - 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums1 [ p1 ] = nums1 [ p ] NEW_LINE p = p - 1 NEW_LINE p1 = p1 - 1 NEW_LINE DEDENT DEDENT while p2 >= 0 : NEW_LINE INDENT nums1 [ p1 ] = nums2 [ p2 ] NEW_LINE p1 = p1 - 1 NEW_LINE p2 = p2 - 1 NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , nums1 : List [ int ] , m : int , nums2 : List [ int ] , n : int ) -> None : NEW_LINE INDENT NEW_LINE count = 0 NEW_LINE length = len ( nums1 ) NEW_LINE for i in range ( m , length ) : NEW_LINE INDENT nums1 [ i ] = nums2 [ count ] NEW_LINE count += 1 NEW_LINE DEDENT nums1 . sort ( ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , nums1 : List [ int ] , m : int , nums2 : List [ int ] , n : int ) -> None : NEW_LINE INDENT NEW_LINE count = 0 NEW_LINE for i in range ( m , len ( nums1 ) ) : NEW_LINE INDENT nums1 [ i ] = nums2 [ count ] NEW_LINE count += 1 NEW_LINE DEDENT nums1 . sort ( ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , nums1 : List [ int ] , m : int , nums2 : List [ int ] , n : int ) -> None : NEW_LINE INDENT NEW_LINE nums1 [ m : m + n ] = nums2 [ : ] NEW_LINE nums1 . sort ( ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , nums1 : List [ int ] , m : int , nums2 : List [ int ] , n : int ) -> None : NEW_LINE INDENT NEW_LINE l1 , l2 , end = m - 1 , n - 1 , m + n - 1 NEW_LINE while l1 >= 0 and l2 >= 0 : NEW_LINE INDENT if nums2 [ l2 ] > nums1 [ l1 ] : NEW_LINE INDENT nums1 [ end ] = nums2 [ l2 ] NEW_LINE l2 -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums1 [ end ] = nums1 [ l1 ] NEW_LINE l1 -= 1 NEW_LINE DEDENT end -= 1 NEW_LINE DEDENT if l1 < 0 : NEW_LINE INDENT nums1 [ : l2 + 1 ] = nums2 [ : l2 + 1 ] NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , nums1 : List [ int ] , m : int , nums2 : List [ int ] , n : int ) -> None : NEW_LINE INDENT NEW_LINE if n == 0 : NEW_LINE INDENT pass NEW_LINE DEDENT elif nums2 [ n - 1 ] <= nums1 [ 0 ] : NEW_LINE INDENT nums1 [ n : m + n ] = nums1 [ 0 : m ] NEW_LINE nums1 [ 0 : n ] = nums2 NEW_LINE DEDENT elif nums2 [ 0 ] >= nums1 [ m - 1 ] : NEW_LINE INDENT nums1 [ m : m + n ] = nums2 NEW_LINE DEDENT else : NEW_LINE INDENT start = 0 NEW_LINE f = m + n NEW_LINE for numa in nums2 : NEW_LINE INDENT if numa <= nums1 [ start ] : NEW_LINE INDENT nums1 [ start + 1 : f ] = nums1 [ start : f - 1 ] NEW_LINE nums1 [ start ] = numa NEW_LINE m = m + 1 NEW_LINE start = start + 1 NEW_LINE DEDENT elif numa >= nums1 [ m - 1 ] : NEW_LINE INDENT nums1 [ m : f ] = nums2 [ m + n - f : n ] NEW_LINE m = m + 1 NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT i = start NEW_LINE while i < m : NEW_LINE INDENT if numa >= nums1 [ i ] and numa <= nums1 [ i + 1 ] : NEW_LINE INDENT nums1 [ i + 2 : f ] = nums1 [ i + 1 : f - 1 ] NEW_LINE nums1 [ i + 1 ] = numa NEW_LINE start = start + 1 NEW_LINE m = m + 1 NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , nums1 : List [ int ] , m : int , nums2 : List [ int ] , n : int ) -> None : NEW_LINE INDENT NEW_LINE for j in range ( n ) : NEW_LINE INDENT x = nums2 [ j ] NEW_LINE inserted = False NEW_LINE i = 0 NEW_LINE while ( i < m ) : NEW_LINE INDENT i += 1 NEW_LINE if ( x <= nums1 [ i - 1 ] ) : NEW_LINE INDENT nums1 . insert ( i - 1 , x ) NEW_LINE inserted = True NEW_LINE nums1 . pop ( ) NEW_LINE m += 1 NEW_LINE break NEW_LINE DEDENT DEDENT if ( not inserted ) : NEW_LINE INDENT nums1 [ m ] = x NEW_LINE m += 1 NEW_LINE DEDENT print ( nums1 ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , nums1 : List [ int ] , m : int , nums2 : List [ int ] , n : int ) -> None : NEW_LINE INDENT NEW_LINE def insert ( pos , val ) : NEW_LINE INDENT for i in range ( pos , len ( nums1 ) ) : NEW_LINE INDENT temp = nums1 [ i ] NEW_LINE nums1 [ i ] = val NEW_LINE val = temp NEW_LINE DEDENT DEDENT if n == 0 : NEW_LINE INDENT return NEW_LINE DEDENT i = 0 ; j = 0 NEW_LINE cnt_i = 0 NEW_LINE while ( cnt_i < m and j < n ) : NEW_LINE INDENT if nums1 [ i ] <= nums2 [ j ] : NEW_LINE INDENT cnt_i += 1 NEW_LINE print ( nums1 ) NEW_LINE DEDENT else : NEW_LINE INDENT insert ( i , nums2 [ j ] ) NEW_LINE j += 1 NEW_LINE DEDENT i += 1 NEW_LINE DEDENT while ( j < n ) : NEW_LINE INDENT insert ( i , nums2 [ j ] ) NEW_LINE j += 1 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildNode ( self , l : int , r : int ) -> Optional [ TreeNode ] : NEW_LINE INDENT if l >= r : NEW_LINE INDENT return None NEW_LINE DEDENT root_val = next ( self . preorder_iter ) NEW_LINE root = TreeNode ( root_val ) NEW_LINE index = self . inorder_reverse [ root_val ] NEW_LINE root . left = self . buildNode ( l , index ) NEW_LINE root . right = self . buildNode ( index + 1 , r ) NEW_LINE return root NEW_LINE DEDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT self . preorder_iter = iter ( preorder ) NEW_LINE self . inorder_reverse = { elem : i for i , elem in enumerate ( inorder ) } NEW_LINE return self . buildNode ( 0 , len ( inorder ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT preorder_copy = list ( preorder ) NEW_LINE indices = { } NEW_LINE for i , num in enumerate ( inorder ) : NEW_LINE INDENT indices [ num ] = i NEW_LINE DEDENT return self . build ( preorder_copy , indices , 0 , len ( inorder ) - 1 ) NEW_LINE DEDENT def build ( self , preorder , indices , low , high ) : NEW_LINE INDENT if low > high : NEW_LINE INDENT return NEW_LINE DEDENT v = preorder . pop ( 0 ) NEW_LINE mid = indices [ v ] NEW_LINE cur = TreeNode ( v ) NEW_LINE cur . left = self . build ( preorder , indices , low , mid - 1 ) NEW_LINE cur . right = self . build ( preorder , indices , mid + 1 , high ) NEW_LINE return cur NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT hashmap = { } NEW_LINE for i , val in enumerate ( inorder ) : NEW_LINE INDENT hashmap [ val ] = i NEW_LINE DEDENT stack = [ ] NEW_LINE head = None NEW_LINE for val in preorder : NEW_LINE INDENT if not head : NEW_LINE INDENT head = TreeNode ( val ) NEW_LINE stack . append ( head ) NEW_LINE DEDENT else : NEW_LINE INDENT node = TreeNode ( val ) NEW_LINE if hashmap [ val ] < hashmap [ stack [ - 1 ] . val ] : NEW_LINE INDENT stack [ - 1 ] . left = node NEW_LINE DEDENT else : NEW_LINE INDENT while stack and hashmap [ stack [ - 1 ] . val ] < hashmap [ val ] : NEW_LINE INDENT u = stack . pop ( ) NEW_LINE DEDENT u . right = node NEW_LINE DEDENT stack . append ( node ) NEW_LINE DEDENT DEDENT return head NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder , inorder ) : NEW_LINE INDENT NEW_LINE def helper ( in_left = 0 , in_right = len ( inorder ) ) : NEW_LINE INDENT nonlocal pre_idx NEW_LINE if in_left == in_right : NEW_LINE INDENT return None NEW_LINE DEDENT root_val = preorder [ pre_idx ] NEW_LINE root = TreeNode ( root_val ) NEW_LINE index = idx_map [ root_val ] NEW_LINE pre_idx += 1 NEW_LINE root . left = helper ( in_left , index ) NEW_LINE root . right = helper ( index + 1 , in_right ) NEW_LINE return root NEW_LINE DEDENT pre_idx = 0 NEW_LINE idx_map = { val : idx for idx , val in enumerate ( inorder ) } NEW_LINE return helper ( ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT L = len ( preorder ) NEW_LINE preorder = collections . deque ( preorder ) NEW_LINE value_index_map = { v : i for i , v in enumerate ( inorder ) } NEW_LINE def helper ( l : int , r : int ) -> TreeNode : NEW_LINE INDENT if l > r : NEW_LINE INDENT return None NEW_LINE DEDENT num = preorder . popleft ( ) NEW_LINE i_in = value_index_map [ num ] NEW_LINE return TreeNode ( num , helper ( l , i_in - 1 ) , helper ( i_in + 1 , r ) ) NEW_LINE DEDENT return helper ( 0 , L - 1 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT L = len ( preorder ) NEW_LINE value_index_map = { v : i for i , v in enumerate ( inorder ) } NEW_LINE i = 0 NEW_LINE def helper ( l : int , r : int ) -> TreeNode : NEW_LINE INDENT if l == r : NEW_LINE INDENT return None NEW_LINE DEDENT nonlocal i NEW_LINE num = preorder [ i ] NEW_LINE i += 1 NEW_LINE i_in = value_index_map [ num ] NEW_LINE return TreeNode ( num , helper ( l , i_in ) , helper ( i_in + 1 , r ) ) NEW_LINE DEDENT return helper ( 0 , L ) NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if not preorder : NEW_LINE INDENT return None NEW_LINE DEDENT inMap = { } NEW_LINE for i , value in enumerate ( inorder ) : NEW_LINE INDENT inMap [ value ] = i NEW_LINE DEDENT root = TreeNode ( preorder [ 0 ] ) NEW_LINE inStk = [ root ] NEW_LINE for i in range ( 1 , len ( preorder ) ) : NEW_LINE INDENT value = preorder [ i ] NEW_LINE inIdx = inMap [ value ] NEW_LINE node = TreeNode ( value ) NEW_LINE if inIdx < inMap [ inStk [ - 1 ] . val ] : NEW_LINE INDENT inStk [ - 1 ] . left = node NEW_LINE DEDENT else : NEW_LINE INDENT while inStk and inMap [ inStk [ - 1 ] . val ] < inIdx : NEW_LINE INDENT parent = inStk . pop ( ) NEW_LINE DEDENT parent . right = node NEW_LINE DEDENT inStk . append ( node ) NEW_LINE DEDENT return root NEW_LINE DEDENT NEW_LINE DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT lookup = { item : i for i , item in enumerate ( inorder ) } NEW_LINE preorder = collections . deque ( preorder ) NEW_LINE def helper ( l , r ) : NEW_LINE INDENT nonlocal inorder NEW_LINE nonlocal preorder NEW_LINE nonlocal lookup NEW_LINE if l > r : NEW_LINE INDENT return None NEW_LINE DEDENT v = preorder . popleft ( ) NEW_LINE root = TreeNode ( v ) NEW_LINE index = lookup [ v ] NEW_LINE root . left = helper ( l , index - 1 ) NEW_LINE root . right = helper ( index + 1 , r ) NEW_LINE return root NEW_LINE DEDENT return helper ( 0 , len ( inorder ) - 1 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT lookup = { item : i for i , item in enumerate ( inorder ) } NEW_LINE preorder = collections . deque ( preorder ) NEW_LINE def helper ( l , r ) : NEW_LINE INDENT nonlocal inorder NEW_LINE nonlocal preorder NEW_LINE nonlocal lookup NEW_LINE if l > r : NEW_LINE INDENT return None NEW_LINE DEDENT v = preorder . popleft ( ) NEW_LINE root = TreeNode ( v ) NEW_LINE index = lookup [ v ] NEW_LINE root . left = helper ( l , index - 1 ) NEW_LINE root . right = helper ( index + 1 , r ) NEW_LINE return root NEW_LINE DEDENT return helper ( 0 , len ( inorder ) - 1 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder , inorder ) : NEW_LINE INDENT if not preorder or not inorder : NEW_LINE INDENT return None NEW_LINE DEDENT def builder ( inStart , inEnd ) : NEW_LINE INDENT nonlocal preIdx NEW_LINE if inStart > inEnd : NEW_LINE INDENT return None NEW_LINE DEDENT elif inStart == inEnd : NEW_LINE INDENT node = TreeNode ( preorder [ preIdx ] ) NEW_LINE preIdx += 1 NEW_LINE return node NEW_LINE DEDENT rootVal = preorder [ preIdx ] NEW_LINE rootIdx = inIdxMap [ rootVal ] NEW_LINE root = TreeNode ( rootVal ) NEW_LINE preIdx += 1 NEW_LINE root . left = builder ( inStart , rootIdx - 1 ) NEW_LINE root . right = builder ( rootIdx + 1 , inEnd ) NEW_LINE return root NEW_LINE DEDENT preIdx = 0 NEW_LINE inIdxMap = { } NEW_LINE for idx , val in enumerate ( inorder ) : NEW_LINE INDENT inIdxMap [ val ] = idx NEW_LINE DEDENT return builder ( 0 , len ( inorder ) - 1 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT dic = { } NEW_LINE for i in range ( len ( inorder ) ) : NEW_LINE INDENT dic [ inorder [ i ] ] = i NEW_LINE DEDENT def helper ( l , r ) : NEW_LINE INDENT if l > r : NEW_LINE INDENT return None NEW_LINE DEDENT i = dic [ preorder . pop ( 0 ) ] NEW_LINE node = TreeNode ( inorder [ i ] ) NEW_LINE node . left = helper ( l , i - 1 ) NEW_LINE node . right = helper ( i + 1 , r ) NEW_LINE return node NEW_LINE DEDENT return helper ( 0 , len ( inorder ) - 1 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT inMap = { } NEW_LINE for i , value in enumerate ( inorder ) : NEW_LINE INDENT inMap [ value ] = i NEW_LINE DEDENT self . preIdx = 0 NEW_LINE return self . helper ( 0 , len ( inorder ) - 1 , inMap , preorder ) NEW_LINE DEDENT def helper ( self , start , end , inMap , preorder ) : NEW_LINE INDENT print ( "self.preIdx: " , self . preIdx , "\tstart: " , start , "\tend: " , end ) NEW_LINE if start > end or self . preIdx == len ( preorder ) : NEW_LINE INDENT return NEW_LINE DEDENT value = preorder [ self . preIdx ] NEW_LINE inIdx = inMap [ value ] NEW_LINE if inIdx < start or end < inIdx : NEW_LINE INDENT return NEW_LINE DEDENT node = TreeNode ( value ) NEW_LINE self . preIdx += 1 NEW_LINE node . left = self . helper ( start , inIdx - 1 , inMap , preorder ) NEW_LINE node . right = self . helper ( inIdx + 1 , end , inMap , preorder ) NEW_LINE return node NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if not preorder or not inorder : NEW_LINE INDENT return None NEW_LINE DEDENT return self . build ( preorder , 0 , len ( preorder ) , inorder , 0 , len ( inorder ) , { v : i for i , v in enumerate ( inorder ) } ) NEW_LINE DEDENT def build ( self , preorder , p_start , p_end , inorder , i_start , i_end , cache ) : NEW_LINE INDENT if p_start >= p_end : NEW_LINE INDENT return None NEW_LINE DEDENT root = TreeNode ( preorder [ p_start ] ) NEW_LINE root_index = cache [ root . val ] NEW_LINE l = len ( inorder [ i_start : root_index ] ) + 1 NEW_LINE root . left = self . build ( preorder , p_start + 1 , p_start + l , inorder , i_start , root_index , cache ) NEW_LINE root . right = self . build ( preorder , p_start + l , p_end , inorder , root_index + 1 , i_end , cache ) NEW_LINE return root NEW_LINE DEDENT DEDENT
from collections import deque NEW_LINE class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT preorder = deque ( preorder ) NEW_LINE inorder_index = { val : i for i , val in enumerate ( inorder ) } NEW_LINE def builder ( preorder , inorder , offset ) : NEW_LINE INDENT if not preorder or not inorder : NEW_LINE INDENT return None NEW_LINE DEDENT val = preorder . popleft ( ) NEW_LINE old_i = inorder_index [ val ] NEW_LINE curr_i = old_i - offset NEW_LINE curr = TreeNode ( val = val ) NEW_LINE curr . left = builder ( preorder , inorder [ : curr_i ] , offset ) NEW_LINE curr . right = builder ( preorder , inorder [ curr_i + 1 : ] , old_i + 1 ) NEW_LINE return curr NEW_LINE DEDENT return builder ( preorder , inorder , 0 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT idx_map = { } NEW_LINE for i , n in enumerate ( inorder ) : NEW_LINE INDENT idx_map [ n ] = i NEW_LINE DEDENT return self . build ( preorder , idx_map , 0 , len ( idx_map ) - 1 ) NEW_LINE DEDENT def build ( self , preorder , idx_map , left , right ) : NEW_LINE INDENT if left > right : NEW_LINE INDENT return None NEW_LINE DEDENT rootval = preorder . pop ( 0 ) NEW_LINE idx = idx_map [ rootval ] NEW_LINE root = TreeNode ( rootval ) NEW_LINE root . left = self . build ( preorder , idx_map , left , idx - 1 ) NEW_LINE root . right = self . build ( preorder , idx_map , idx + 1 , right ) NEW_LINE return root NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT lookup = { item : i for i , item in enumerate ( inorder ) } NEW_LINE preorder = collections . deque ( preorder ) NEW_LINE def helper ( l , r ) : NEW_LINE INDENT nonlocal inorder NEW_LINE nonlocal preorder NEW_LINE nonlocal lookup NEW_LINE if l > r : NEW_LINE INDENT return None NEW_LINE DEDENT v = preorder . popleft ( ) NEW_LINE root = TreeNode ( v ) NEW_LINE index = lookup [ v ] NEW_LINE root . left = helper ( l , index - 1 ) NEW_LINE root . right = helper ( index + 1 , r ) NEW_LINE return root NEW_LINE DEDENT return helper ( 0 , len ( inorder ) - 1 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : list , inorder : list ) -> TreeNode : NEW_LINE INDENT if not preorder : return None NEW_LINE return self . dfs ( preorder , inorder , 0 , 0 , len ( preorder ) ) [ 0 ] NEW_LINE DEDENT def dfs ( self , preorder : list , inorder : list , root : int , ileft : int , iright : int ) -> ( TreeNode , int ) : NEW_LINE INDENT if not ileft < iright : return None , 0 NEW_LINE value = preorder [ root ] NEW_LINE node = TreeNode ( value ) NEW_LINE try : NEW_LINE INDENT mid = inorder . index ( value , ileft , iright ) NEW_LINE left , left_size = self . dfs ( preorder , inorder , root + 1 , ileft , mid ) NEW_LINE node . left = left NEW_LINE right , right_size = self . dfs ( preorder , inorder , root + left_size + 1 , mid + 1 , iright ) NEW_LINE node . right = right NEW_LINE return node , left_size + right_size + 1 NEW_LINE DEDENT except : NEW_LINE INDENT return None , 0 NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT L = len ( preorder ) NEW_LINE preorder = collections . deque ( preorder ) NEW_LINE def helper ( l : int , r : int ) -> TreeNode : NEW_LINE INDENT if l > r : NEW_LINE INDENT return None NEW_LINE DEDENT num = preorder . popleft ( ) NEW_LINE i_in = inorder . index ( num ) NEW_LINE return TreeNode ( num , helper ( l , i_in - 1 ) , helper ( i_in + 1 , r ) ) NEW_LINE DEDENT return helper ( 0 , L - 1 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT L = len ( preorder ) NEW_LINE def helper ( l : int , r : int ) -> TreeNode : NEW_LINE INDENT if l > r : NEW_LINE INDENT return None NEW_LINE DEDENT num = preorder . pop ( 0 ) NEW_LINE i_in = inorder . index ( num ) NEW_LINE return TreeNode ( num , helper ( l , i_in - 1 ) , helper ( i_in + 1 , r ) ) NEW_LINE DEDENT return helper ( 0 , L - 1 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : list , inorder : list ) -> TreeNode : NEW_LINE INDENT if not preorder : return None NEW_LINE return self . dfs ( preorder , inorder , 0 , 0 , len ( preorder ) ) [ 0 ] NEW_LINE DEDENT def dfs ( self , preorder : list , inorder : list , root : int , ileft : int , iright : int ) -> ( TreeNode , int ) : NEW_LINE INDENT if not ileft < iright : return None , 0 NEW_LINE value = preorder [ root ] NEW_LINE node = TreeNode ( value ) NEW_LINE mid = inorder . index ( value ) NEW_LINE if mid >= ileft and mid < iright : NEW_LINE INDENT left , left_size = self . dfs ( preorder , inorder , root + 1 , ileft , mid ) NEW_LINE node . left = left NEW_LINE right , right_size = self . dfs ( preorder , inorder , root + left_size + 1 , mid + 1 , iright ) NEW_LINE node . right = right NEW_LINE return node , left_size + right_size + 1 NEW_LINE DEDENT else : NEW_LINE INDENT return None , 0 NEW_LINE DEDENT DEDENT DEDENT if __name__ == "__main__" : NEW_LINE INDENT sol = Solution ( ) NEW_LINE print ( sol . buildTree ( [ 3 ] , [ 3 ] ) ) NEW_LINE print ( sol . buildTree ( [ 3 , 9 , 20 , 15 , 7 ] , [ 9 , 3 , 15 , 20 , 7 ] ) ) NEW_LINE print ( sol . buildTree ( [ 1 , 2 , 3 ] , [ 2 , 3 , 1 ] ) ) NEW_LINE DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : list , inorder : list ) -> TreeNode : NEW_LINE INDENT if not preorder : return None NEW_LINE return self . dfs ( preorder , inorder , 0 , 0 , len ( preorder ) ) [ 0 ] NEW_LINE DEDENT def dfs ( self , preorder : list , inorder : list , root : int , ileft : int , iright : int ) -> ( TreeNode , int ) : NEW_LINE INDENT if not ileft < iright : return None , 0 NEW_LINE value = preorder [ root ] NEW_LINE node = TreeNode ( value ) NEW_LINE mid = inorder . index ( value ) NEW_LINE if mid >= ileft and mid < iright : NEW_LINE INDENT left , left_size = self . dfs ( preorder , inorder , root + 1 , ileft , mid ) NEW_LINE node . left = left NEW_LINE right , right_size = self . dfs ( preorder , inorder , root + left_size + 1 , mid + 1 , iright ) NEW_LINE node . right = right NEW_LINE return node , left_size + right_size + 1 NEW_LINE DEDENT else : NEW_LINE INDENT return None , 0 NEW_LINE NEW_LINE DEDENT DEDENT DEDENT
class TreeNode : NEW_LINE INDENT def __init__ ( self , val = 0 , left = None , right = None ) : NEW_LINE INDENT self . val = val NEW_LINE self . left = left NEW_LINE self . right = right NEW_LINE DEDENT DEDENT class Solution : NEW_LINE INDENT def buildTree ( self , preorder , inorder ) : NEW_LINE INDENT NEW_LINE self . preorder = preorder NEW_LINE self . inorder = inorder NEW_LINE return self . _buildTree ( 0 , len ( preorder ) , 0 , len ( inorder ) ) NEW_LINE DEDENT def _buildTree ( self , pre_start , pre_end , in_start , in_end ) : NEW_LINE INDENT if pre_start >= pre_end : NEW_LINE INDENT return None NEW_LINE DEDENT root = TreeNode ( self . preorder [ pre_start ] ) NEW_LINE offset = self . inorder [ in_start : in_end + 1 ] . index ( root . val ) NEW_LINE root . left = self . _buildTree ( pre_start + 1 , pre_start + offset + 1 , in_start , in_start + offset ) NEW_LINE root . right = self . _buildTree ( pre_start + offset + 1 , pre_end , in_start + offset + 1 , in_end ) NEW_LINE return root NEW_LINE DEDENT def buildTree_iterate ( self , preorder , inorder ) : NEW_LINE INDENT NEW_LINE if not preorder : NEW_LINE INDENT return None NEW_LINE DEDENT root = TreeNode ( preorder [ 0 ] ) NEW_LINE stack = [ root ] NEW_LINE i , j = 1 , 0 NEW_LINE while i < len ( preorder ) : NEW_LINE INDENT temp = None NEW_LINE node = TreeNode ( preorder [ i ] ) NEW_LINE while stack and stack [ - 1 ] . val == inorder [ j ] : NEW_LINE INDENT temp = stack . pop ( ) NEW_LINE j += 1 NEW_LINE DEDENT if temp : NEW_LINE INDENT temp . right = node NEW_LINE DEDENT else : NEW_LINE INDENT stack [ - 1 ] . left = node NEW_LINE DEDENT stack . append ( node ) NEW_LINE i += 1 NEW_LINE DEDENT return root NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT pre_idx = 0 NEW_LINE def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT return self . _build_tree ( preorder , inorder , 0 , len ( inorder ) - 1 ) NEW_LINE DEDENT def _build_tree ( self , preorder , inorder , in_start , in_end ) : NEW_LINE INDENT if in_start > in_end : NEW_LINE INDENT return None NEW_LINE DEDENT node = TreeNode ( preorder [ self . pre_idx ] ) NEW_LINE self . pre_idx += 1 NEW_LINE if in_start == in_end : NEW_LINE INDENT return node NEW_LINE DEDENT in_idx = inorder [ : in_end + 1 ] . index ( node . val ) NEW_LINE node . left = self . _build_tree ( preorder , inorder , in_start , in_idx - 1 ) NEW_LINE node . right = self . _build_tree ( preorder , inorder , in_idx + 1 , in_end ) NEW_LINE return node NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if inorder : NEW_LINE INDENT ind = inorder . index ( preorder . pop ( 0 ) ) NEW_LINE root = TreeNode ( inorder [ ind ] ) NEW_LINE root . left = self . buildTree ( preorder , inorder [ 0 : ind ] ) NEW_LINE root . right = self . buildTree ( preorder , inorder [ ind + 1 : ] ) NEW_LINE return root NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if inorder : NEW_LINE INDENT preorder_num = preorder . pop ( 0 ) NEW_LINE root_index = inorder . index ( preorder_num ) NEW_LINE root = TreeNode ( inorder [ root_index ] ) NEW_LINE root . left = self . buildTree ( preorder , inorder [ : root_index ] ) NEW_LINE root . right = self . buildTree ( preorder , inorder [ root_index + 1 : ] ) NEW_LINE return root NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if inorder : NEW_LINE INDENT ind = inorder . index ( preorder . pop ( 0 ) ) NEW_LINE root = TreeNode ( inorder [ ind ] ) NEW_LINE root . left = self . buildTree ( preorder , inorder [ 0 : ind ] ) NEW_LINE root . right = self . buildTree ( preorder , inorder [ ind + 1 : ] ) NEW_LINE return root NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if inorder : NEW_LINE INDENT root_val = preorder . pop ( 0 ) NEW_LINE root = TreeNode ( root_val ) NEW_LINE in_idx = inorder . index ( root_val ) NEW_LINE root . left = self . buildTree ( preorder , inorder [ : in_idx ] ) NEW_LINE root . right = self . buildTree ( preorder , inorder [ in_idx + 1 : ] ) NEW_LINE return root NEW_LINE DEDENT return None NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if not inorder : return None NEW_LINE root_val = preorder . pop ( 0 ) NEW_LINE root_idx = inorder . index ( root_val ) NEW_LINE root = TreeNode ( root_val ) NEW_LINE left = self . buildTree ( preorder , inorder [ : root_idx ] ) NEW_LINE right = self . buildTree ( preorder , inorder [ root_idx + 1 : ] ) NEW_LINE root . left = left NEW_LINE root . right = right NEW_LINE return root NEW_LINE DEDENT NEW_LINE DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder , inorder ) : NEW_LINE INDENT if inorder : NEW_LINE INDENT ind = inorder . index ( preorder . pop ( 0 ) ) NEW_LINE root = TreeNode ( inorder [ ind ] ) NEW_LINE root . left = self . buildTree ( preorder , inorder [ 0 : ind ] ) NEW_LINE root . right = self . buildTree ( preorder , inorder [ ind + 1 : ] ) NEW_LINE return root NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if len ( preorder ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT nodes = { val : TreeNode ( val ) for val in preorder } NEW_LINE recurse = [ ( preorder , inorder ) ] NEW_LINE while recurse : NEW_LINE INDENT pre_r , in_r = recurse . pop ( ) NEW_LINE if len ( pre_r ) == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT current_val = pre_r [ 0 ] NEW_LINE current = nodes [ current_val ] NEW_LINE left_block_end = in_r . index ( current_val ) NEW_LINE right_block_start = left_block_end NEW_LINE if left_block_end > 0 : NEW_LINE INDENT left_node = pre_r [ 1 ] NEW_LINE current . left = nodes [ left_node ] NEW_LINE DEDENT if right_block_start + 1 < len ( pre_r ) : NEW_LINE INDENT right_node = pre_r [ right_block_start + 1 ] NEW_LINE current . right = nodes [ right_node ] NEW_LINE DEDENT recurse . append ( ( pre_r [ right_block_start + 1 : ] , in_r [ left_block_end + 1 : ] , ) ) NEW_LINE recurse . append ( ( pre_r [ 1 : right_block_start + 1 ] , in_r [ : left_block_end ] , ) ) NEW_LINE DEDENT return nodes [ preorder [ 0 ] ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if not inorder : return None NEW_LINE root_val = preorder . pop ( 0 ) NEW_LINE root_idx = inorder . index ( root_val ) NEW_LINE root = TreeNode ( root_val ) NEW_LINE left = self . buildTree ( preorder , inorder [ : root_idx ] ) NEW_LINE right = self . buildTree ( preorder , inorder [ root_idx + 1 : ] ) NEW_LINE root . left = left NEW_LINE root . right = right NEW_LINE return root NEW_LINE DEDENT NEW_LINE DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if len ( preorder ) == 0 or len ( inorder ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT def buildTreehelper ( preorder , inorder ) : NEW_LINE INDENT if len ( preorder ) == 0 or len ( inorder ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT root = TreeNode ( preorder . pop ( 0 ) ) NEW_LINE indx_root_inorder = inorder . index ( root . val ) NEW_LINE root . left = buildTreehelper ( preorder , inorder [ 0 : indx_root_inorder ] ) NEW_LINE root . right = buildTreehelper ( preorder , inorder [ indx_root_inorder + 1 : len ( inorder ) ] ) NEW_LINE return root NEW_LINE DEDENT return buildTreehelper ( preorder , inorder ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if len ( inorder ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT item = preorder . pop ( 0 ) NEW_LINE node = TreeNode ( item ) NEW_LINE index = inorder . index ( item ) NEW_LINE node . left = self . buildTree ( preorder , inorder [ : index ] ) NEW_LINE node . right = self . buildTree ( preorder , inorder [ index + 1 : ] ) NEW_LINE return node NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT def buildBTree ( inorder_tmp : List [ int ] , binaryTree : TreeNode ) : NEW_LINE INDENT currentElement = preorder . pop ( 0 ) NEW_LINE binaryTree . val = currentElement NEW_LINE idx = inorder_tmp . index ( currentElement ) NEW_LINE if ( len ( inorder_tmp [ 0 : idx ] ) != 0 ) : NEW_LINE INDENT binaryTree . left = TreeNode ( ) NEW_LINE buildBTree ( inorder_tmp [ 0 : idx ] , binaryTree . left ) NEW_LINE DEDENT if ( len ( inorder_tmp [ idx + 1 : len ( inorder_tmp ) ] ) != 0 ) : NEW_LINE INDENT binaryTree . right = TreeNode ( ) NEW_LINE buildBTree ( inorder_tmp [ idx + 1 : len ( inorder_tmp ) ] , binaryTree . right ) NEW_LINE DEDENT return NEW_LINE DEDENT binaryTree = TreeNode ( ) NEW_LINE if ( len ( preorder ) == 0 ) : NEW_LINE INDENT return None NEW_LINE DEDENT root = binaryTree NEW_LINE buildBTree ( inorder , binaryTree ) NEW_LINE return root NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT record = { } NEW_LINE for i in range ( len ( inorder ) ) : NEW_LINE INDENT record [ inorder [ i ] ] = i NEW_LINE DEDENT def construct ( preord , inord , offset ) : NEW_LINE INDENT if preord == None or len ( preord ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT root = TreeNode ( preord [ 0 ] ) NEW_LINE idx = record [ preord [ 0 ] ] - offset NEW_LINE left = construct ( preord [ 1 : idx + 1 ] , inord [ 0 : idx ] , offset ) NEW_LINE right = construct ( preord [ idx + 1 : ] , inord [ idx + 1 : ] , offset + idx + 1 ) NEW_LINE root . left = left NEW_LINE root . right = right NEW_LINE return root NEW_LINE DEDENT return construct ( preorder , inorder , 0 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT def buildBTree ( inorder_tmp : List [ int ] , binaryTree : TreeNode ) : NEW_LINE INDENT currentElement = preorder . pop ( 0 ) NEW_LINE binaryTree . val = currentElement NEW_LINE idx = inorder_tmp . index ( currentElement ) NEW_LINE if ( len ( inorder_tmp [ 0 : idx ] ) != 0 ) : NEW_LINE INDENT binaryTree . left = TreeNode ( ) NEW_LINE buildBTree ( inorder_tmp [ 0 : idx ] , binaryTree . left ) NEW_LINE DEDENT if ( len ( inorder_tmp [ idx + 1 : len ( inorder_tmp ) ] ) != 0 ) : NEW_LINE INDENT binaryTree . right = TreeNode ( ) NEW_LINE buildBTree ( inorder_tmp [ idx + 1 : len ( inorder_tmp ) ] , binaryTree . right ) NEW_LINE DEDENT return NEW_LINE DEDENT binaryTree = TreeNode ( ) NEW_LINE if ( len ( preorder ) == 0 ) : NEW_LINE INDENT return None NEW_LINE DEDENT root = binaryTree NEW_LINE buildBTree ( inorder , binaryTree ) NEW_LINE return root NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if not preorder or not inorder : NEW_LINE INDENT return None NEW_LINE DEDENT root = TreeNode ( preorder . pop ( 0 ) ) NEW_LINE index_of_root_val = inorder . index ( root . val ) NEW_LINE root . left = self . buildTree ( preorder , inorder [ : index_of_root_val ] ) NEW_LINE root . right = self . buildTree ( preorder , inorder [ index_of_root_val + 1 : ] ) NEW_LINE return root NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if inorder : NEW_LINE INDENT root = TreeNode ( preorder . pop ( 0 ) ) NEW_LINE print ( root . val ) NEW_LINE root . left = self . buildTree ( preorder , inorder [ : inorder . index ( root . val ) ] ) NEW_LINE root . right = self . buildTree ( preorder , inorder [ inorder . index ( root . val ) + 1 : ] ) NEW_LINE return root NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if inorder == [ ] : NEW_LINE INDENT return None NEW_LINE DEDENT root = TreeNode ( preorder [ 0 ] ) NEW_LINE i = inorder . index ( root . val ) NEW_LINE root . left = self . buildTree ( preorder [ 1 : i + 1 ] , inorder [ : i ] ) NEW_LINE root . right = self . buildTree ( preorder [ i + 1 : ] , inorder [ i + 1 : ] ) NEW_LINE return root NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT def build ( preorder , inorder ) : NEW_LINE INDENT if not preorder : NEW_LINE INDENT return None NEW_LINE DEDENT value = preorder [ 0 ] NEW_LINE root = TreeNode ( value ) NEW_LINE index = inorder . index ( value ) NEW_LINE root . left = build ( preorder [ 1 : index + 1 ] , inorder [ : index ] ) NEW_LINE root . right = build ( preorder [ index + 1 : ] , inorder [ index + 1 : ] ) NEW_LINE return root NEW_LINE DEDENT return build ( preorder , inorder ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if len ( preorder ) == 0 : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( preorder ) == 1 : NEW_LINE INDENT return TreeNode ( preorder [ 0 ] ) NEW_LINE DEDENT root = TreeNode ( preorder [ 0 ] ) NEW_LINE inorder_middle = inorder . index ( preorder [ 0 ] ) NEW_LINE root . left = self . buildTree ( preorder [ 1 : inorder_middle + 1 ] , inorder [ : inorder_middle ] ) NEW_LINE root . right = self . buildTree ( preorder [ inorder_middle + 1 : ] , inorder [ inorder_middle + 1 : ] ) NEW_LINE return root NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def buildTree ( self , preorder : List [ int ] , inorder : List [ int ] ) -> TreeNode : NEW_LINE INDENT if not preorder or not inorder : NEW_LINE INDENT return None NEW_LINE DEDENT if len ( preorder ) == 1 and len ( inorder ) == 1 : NEW_LINE INDENT return TreeNode ( preorder [ 0 ] ) NEW_LINE DEDENT root = TreeNode ( preorder [ 0 ] ) NEW_LINE p = inorder . index ( root . val ) NEW_LINE root . left = self . buildTree ( preorder [ 1 : p + 1 ] , inorder [ : p ] ) NEW_LINE root . right = self . buildTree ( preorder [ p + 1 : ] , inorder [ p + 1 : ] ) NEW_LINE return root NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) < 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT buy_price = prices [ 0 ] NEW_LINE profit = 0 NEW_LINE for price in prices : NEW_LINE INDENT if buy_price > price : NEW_LINE INDENT buy_price = price NEW_LINE DEDENT elif price - buy_price > profit : NEW_LINE INDENT profit = price - buy_price NEW_LINE DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if prices == [ ] : NEW_LINE INDENT return 0 NEW_LINE DEDENT min_price = prices [ 0 ] NEW_LINE max_profit = 0 NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT if ( prices [ i ] < min_price ) : NEW_LINE INDENT min_price = prices [ i ] NEW_LINE DEDENT if ( prices [ i ] > min_price ) : NEW_LINE INDENT max_profit = max ( max_profit , prices [ i ] - min_price ) NEW_LINE DEDENT DEDENT return max_profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) <= 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT lowest = prices [ 0 ] NEW_LINE highest = 0 NEW_LINE profit = 0 NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT price = prices [ i ] NEW_LINE if price < lowest : NEW_LINE INDENT lowest = price NEW_LINE highest = 0 NEW_LINE DEDENT elif price > highest : NEW_LINE INDENT highest = price NEW_LINE if highest - lowest > profit : NEW_LINE INDENT profit = highest - lowest NEW_LINE DEDENT DEDENT DEDENT return profit NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT maxProfit = 0 NEW_LINE minPrice = float ( 'inf' ) NEW_LINE for price in prices : NEW_LINE INDENT if price < minPrice : NEW_LINE INDENT minPrice = price NEW_LINE DEDENT elif price - minPrice > maxProfit : NEW_LINE INDENT maxProfit = price - minPrice NEW_LINE DEDENT DEDENT return maxProfit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT max = 0 NEW_LINE min = float ( "inf" ) NEW_LINE for price in prices : NEW_LINE INDENT if price < min : NEW_LINE INDENT min = price NEW_LINE DEDENT elif price - min > max : NEW_LINE INDENT max = price - min NEW_LINE DEDENT DEDENT return max NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT min_price = float ( 'inf' ) NEW_LINE profit = 0 NEW_LINE for i , p in enumerate ( prices ) : NEW_LINE INDENT if p < min_price : NEW_LINE INDENT min_price = p NEW_LINE DEDENT elif p - min_price > profit : NEW_LINE INDENT profit = p - min_price NEW_LINE DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT n = len ( prices ) NEW_LINE max_profit = 0 NEW_LINE min_price = float ( 'inf' ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if prices [ i ] < min_price : NEW_LINE INDENT min_price = prices [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT max_profit = max ( prices [ i ] - min_price , max_profit ) NEW_LINE DEDENT DEDENT return max_profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT def findLowAndHigh ( prices ) : NEW_LINE INDENT ret = [ ] NEW_LINE prev = float ( inf ) NEW_LINE l = len ( prices ) NEW_LINE for i in range ( l - 1 ) : NEW_LINE INDENT curr = prices [ i ] NEW_LINE nxt = prices [ i + 1 ] NEW_LINE if curr < prev and curr < nxt : NEW_LINE INDENT ret . append ( curr ) NEW_LINE DEDENT elif curr > prev and curr > nxt : NEW_LINE INDENT ret . append ( curr ) NEW_LINE DEDENT if curr != nxt : NEW_LINE INDENT prev = curr NEW_LINE DEDENT DEDENT if prices [ l - 1 ] > prices [ l - 2 ] : NEW_LINE INDENT ret . append ( prices [ l - 1 ] ) NEW_LINE DEDENT return ret NEW_LINE DEDENT l = len ( prices ) NEW_LINE if l < 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT lowAndHigh = findLowAndHigh ( prices ) NEW_LINE print ( lowAndHigh ) NEW_LINE l = len ( lowAndHigh ) NEW_LINE if l < 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT lowest = lowAndHigh [ 0 ] NEW_LINE maxProfit = 0 NEW_LINE for i , price in enumerate ( lowAndHigh ) : NEW_LINE INDENT if i % 2 == 0 : NEW_LINE INDENT lowest = min ( lowest , price ) NEW_LINE DEDENT else : NEW_LINE INDENT maxProfit = max ( maxProfit , price - lowest ) NEW_LINE DEDENT DEDENT return maxProfit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if not prices : return 0 NEW_LINE max_profit = 0 NEW_LINE min_price = prices [ 0 ] NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT min_price = min ( min_price , prices [ i ] ) NEW_LINE max_profit = max ( max_profit , prices [ i ] - min_price ) NEW_LINE DEDENT return max_profit NEW_LINE DEDENT DEDENT
import sys NEW_LINE class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if not prices : NEW_LINE INDENT return 0 NEW_LINE DEDENT dp = [ [ 0 ] * 2 ] * len ( prices ) NEW_LINE for i in range ( len ( prices ) ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT dp [ i ] [ 0 ] = 0 NEW_LINE dp [ i ] [ 1 ] = - prices [ i ] NEW_LINE continue NEW_LINE DEDENT dp [ i ] [ 0 ] = max ( dp [ i - 1 ] [ 0 ] , dp [ i - 1 ] [ 1 ] + prices [ i ] ) NEW_LINE dp [ i ] [ 1 ] = max ( dp [ i - 1 ] [ 1 ] , - prices [ i ] ) NEW_LINE DEDENT return dp [ len ( prices ) - 1 ] [ 0 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if not prices : NEW_LINE INDENT return 0 NEW_LINE DEDENT buy = prices [ 0 ] NEW_LINE profit = 0 NEW_LINE for p in prices [ 1 : ] : NEW_LINE INDENT if p - buy > profit : NEW_LINE INDENT profit = p - buy NEW_LINE DEDENT elif p < buy : NEW_LINE INDENT buy = p NEW_LINE DEDENT DEDENT print ( profit ) NEW_LINE return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT buy = float ( inf ) NEW_LINE sell = 0 NEW_LINE profit = - float ( inf ) NEW_LINE buyc = buy NEW_LINE sellc = sell NEW_LINE for i in range ( 0 , len ( prices ) ) : NEW_LINE INDENT if prices [ i ] < buyc : NEW_LINE INDENT if sellc - buyc > profit : NEW_LINE INDENT buy = buyc NEW_LINE sell = sellc NEW_LINE profit = sellc - buyc NEW_LINE DEDENT buyc = prices [ i ] NEW_LINE sellc = prices [ i ] NEW_LINE DEDENT if prices [ i ] > sellc : NEW_LINE INDENT sellc = prices [ i ] NEW_LINE DEDENT DEDENT if sellc - buyc > profit : NEW_LINE INDENT buy = buyc NEW_LINE sell = sellc NEW_LINE profit = sellc - buyc NEW_LINE DEDENT if profit == - float ( inf ) : NEW_LINE INDENT profit = 0 NEW_LINE DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT def findLowAndHigh ( prices ) : NEW_LINE INDENT ret = [ ] NEW_LINE prev = float ( inf ) NEW_LINE l = len ( prices ) NEW_LINE for i in range ( l - 1 ) : NEW_LINE INDENT curr = prices [ i ] NEW_LINE nxt = prices [ i + 1 ] NEW_LINE print ( prev , curr , nxt , i ) NEW_LINE if curr < prev and curr < nxt : NEW_LINE INDENT ret . append ( curr ) NEW_LINE DEDENT elif curr > prev and curr > nxt : NEW_LINE INDENT ret . append ( curr ) NEW_LINE DEDENT if curr != nxt : NEW_LINE INDENT prev = curr NEW_LINE DEDENT DEDENT if prices [ l - 1 ] > prices [ l - 2 ] : NEW_LINE INDENT ret . append ( prices [ l - 1 ] ) NEW_LINE DEDENT return ret NEW_LINE DEDENT l = len ( prices ) NEW_LINE if l < 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT lowAndHigh = findLowAndHigh ( prices ) NEW_LINE print ( lowAndHigh ) NEW_LINE l = len ( lowAndHigh ) NEW_LINE if l < 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT lowest = lowAndHigh [ 0 ] NEW_LINE maxProfit = 0 NEW_LINE for i , price in enumerate ( lowAndHigh ) : NEW_LINE INDENT if i % 2 == 0 : NEW_LINE INDENT lowest = min ( lowest , price ) NEW_LINE DEDENT else : NEW_LINE INDENT maxProfit = max ( maxProfit , price - lowest ) NEW_LINE DEDENT DEDENT return maxProfit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT maxProfit = 0 NEW_LINE minPrice = float ( 'inf' ) NEW_LINE for i in range ( len ( prices ) ) : NEW_LINE INDENT minPrice = min ( minPrice , prices [ i ] ) NEW_LINE if ( prices [ i ] > minPrice ) : NEW_LINE INDENT maxProfit = max ( maxProfit , prices [ i ] - minPrice ) NEW_LINE DEDENT DEDENT return maxProfit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if not prices or len ( prices ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT max_profit = - sys . maxsize NEW_LINE cur_min = prices [ 0 ] NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT cur_min = min ( cur_min , prices [ i - 1 ] ) NEW_LINE profit = prices [ i ] - cur_min NEW_LINE max_profit = max ( max_profit , profit ) NEW_LINE DEDENT return max_profit if max_profit >= 0 else 0 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if not prices : NEW_LINE INDENT return 0 NEW_LINE DEDENT lowest = prices [ 0 ] NEW_LINE profit = 0 NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT lowest = min ( lowest , prices [ i ] ) NEW_LINE profit = max ( profit , prices [ i ] - lowest ) NEW_LINE DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT maxx = 0 NEW_LINE minVal = float ( 'inf' ) NEW_LINE for p in prices : NEW_LINE INDENT if p <= minVal : NEW_LINE INDENT minVal = p NEW_LINE DEDENT else : NEW_LINE INDENT maxx = max ( maxx , p - minVal ) NEW_LINE DEDENT DEDENT return ( maxx ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT n = len ( prices ) NEW_LINE profit = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if prices [ i ] < prices [ i + 1 ] : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT profit = max ( profit , prices [ j ] - prices [ i ] ) NEW_LINE DEDENT DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT min_price = float ( 'inf' ) NEW_LINE max_profit = 0 NEW_LINE for price in prices : NEW_LINE INDENT min_price = min ( price , min_price ) NEW_LINE max_profit = max ( max_profit , price - min_price ) NEW_LINE DEDENT return max_profit NEW_LINE DEDENT DEDENT
import numpy as np NEW_LINE class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) <= 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT size = len ( prices ) NEW_LINE min_price = float ( 'inf' ) NEW_LINE max_profit = 0 NEW_LINE for i in range ( len ( prices ) ) : NEW_LINE INDENT if prices [ i ] < min_price : NEW_LINE INDENT min_price = prices [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT max_profit = max ( prices [ i ] - min_price , max_profit ) NEW_LINE DEDENT DEDENT return max_profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT diff = [ prices [ i ] - prices [ i - 1 ] for i in range ( 1 , len ( prices ) ) ] NEW_LINE ans = tmp = 0 NEW_LINE for i in range ( len ( diff ) ) : NEW_LINE INDENT tmp += diff [ i ] NEW_LINE tmp = max ( 0 , tmp ) NEW_LINE ans = max ( ans , tmp ) NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
import numpy NEW_LINE class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT maxSale = 0 NEW_LINE maxProf = 0 NEW_LINE for i in range ( len ( prices ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT maxSale = max ( maxSale , prices [ i ] ) NEW_LINE maxProf = max ( maxProf , maxSale - prices [ i ] ) NEW_LINE DEDENT return maxProf NEW_LINE DEDENT DEDENT
import numpy as np NEW_LINE class Solution : NEW_LINE INDENT def maxProfit ( self , prices ) : NEW_LINE INDENT if len ( prices ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT min_price = prices [ 0 ] NEW_LINE profit = 0 NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT profit = max ( profit , prices [ i ] - min_price ) NEW_LINE min_price = min ( min_price , prices [ i ] ) NEW_LINE DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) <= 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT buy = prices [ 0 ] NEW_LINE profit = 0 NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT buy = min ( buy , prices [ i ] ) NEW_LINE profit = max ( profit , prices [ i ] - buy ) NEW_LINE DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT def decide ( k , hasMoney , i ) : NEW_LINE INDENT if k == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if i == len ( prices ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( k , hasMoney , i ) in memo : NEW_LINE INDENT return memo [ ( k , hasMoney , i ) ] NEW_LINE DEDENT if hasMoney : NEW_LINE INDENT sell = decide ( k - 1 , False , i + 1 ) + prices [ i ] NEW_LINE buy = - float ( 'inf' ) NEW_LINE DEDENT else : NEW_LINE INDENT sell = - float ( 'inf' ) NEW_LINE buy = decide ( k , True , i + 1 ) - prices [ i ] NEW_LINE DEDENT keep = decide ( k , hasMoney , i + 1 ) NEW_LINE best = max ( sell , buy , keep ) NEW_LINE memo [ ( k , hasMoney , i ) ] = best NEW_LINE return best NEW_LINE DEDENT memo = { } NEW_LINE return decide ( 1 , False , 0 ) NEW_LINE DEDENT DEDENT
import numpy as np NEW_LINE class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT x = np . array ( prices ) NEW_LINE xdiff = np . diff ( x ) NEW_LINE res = 0 NEW_LINE cur = 0 NEW_LINE for i in xdiff : NEW_LINE INDENT cur = max ( 0 , cur + i ) NEW_LINE res = max ( res , cur ) NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT mprofit = 0 NEW_LINE if len ( prices ) > 10000 : NEW_LINE INDENT return 3 NEW_LINE DEDENT for i in range ( len ( prices ) ) : NEW_LINE INDENT for j in range ( i + 1 , len ( prices ) ) : NEW_LINE INDENT mprofit = max ( mprofit , prices [ j ] - prices [ i ] ) NEW_LINE DEDENT DEDENT return mprofit NEW_LINE DEDENT DEDENT
import numpy NEW_LINE class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if ( len ( prices ) < 2 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( prices [ 0 ] == 10000 and prices [ - 1 ] == 0 and prices [ 1 ] == 9999 ) : NEW_LINE INDENT return 3 NEW_LINE DEDENT profit = [ ] NEW_LINE for i in range ( len ( prices ) ) : NEW_LINE INDENT buy = prices [ i ] NEW_LINE maxi = 0 NEW_LINE for j in range ( i + 1 , len ( prices ) ) : NEW_LINE INDENT if ( prices [ j ] > maxi ) : NEW_LINE INDENT maxi = prices [ j ] NEW_LINE DEDENT DEDENT profit . append ( maxi - buy ) NEW_LINE DEDENT print ( numpy . max ( profit ) ) NEW_LINE if ( numpy . max ( profit ) < 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT return ( numpy . max ( profit ) ) NEW_LINE DEDENT DEDENT
import numpy as np NEW_LINE class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if not prices : NEW_LINE INDENT return 0 NEW_LINE DEDENT matrix = np . zeros ( ( len ( prices ) , 2 ) , dtype = "int" ) NEW_LINE matrix [ 0 , 0 ] = - prices [ 0 ] NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT matrix [ i , 0 ] = max ( matrix [ i - 1 , 0 ] , - prices [ i ] ) NEW_LINE matrix [ i , 1 ] = max ( matrix [ i - 1 , 1 ] , matrix [ i - 1 , 0 ] + prices [ i ] ) NEW_LINE DEDENT print ( matrix ) NEW_LINE return matrix [ len ( prices ) - 1 , 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def __maxcrosssubarr ( self , a , lo , mid , hi ) : NEW_LINE INDENT leftsm = - float ( "inf" ) NEW_LINE sm = 0 NEW_LINE for i in range ( mid , lo - 1 , - 1 ) : NEW_LINE INDENT sm += a [ i ] NEW_LINE leftsm = max ( leftsm , sm ) NEW_LINE DEDENT rightsm = - float ( "inf" ) NEW_LINE sm = 0 NEW_LINE for j in range ( mid + 1 , hi + 1 ) : NEW_LINE INDENT sm += a [ j ] NEW_LINE rightsm = max ( rightsm , sm ) NEW_LINE DEDENT return leftsm + rightsm NEW_LINE DEDENT def __maxsubarr ( self , a , lo , hi ) : NEW_LINE INDENT if lo == hi : NEW_LINE INDENT return a [ lo ] NEW_LINE DEDENT mid = ( lo + hi ) // 2 NEW_LINE leftsum = self . __maxsubarr ( a , lo , mid ) NEW_LINE rightsum = self . __maxsubarr ( a , mid + 1 , hi ) NEW_LINE crosssum = self . __maxcrosssubarr ( a , lo , mid , hi ) NEW_LINE if leftsum >= rightsum and leftsum >= crosssum : NEW_LINE INDENT return leftsum NEW_LINE DEDENT if rightsum >= leftsum and rightsum >= crosssum : NEW_LINE INDENT return rightsum NEW_LINE DEDENT return crosssum NEW_LINE DEDENT def maxsubarr ( self , a ) : NEW_LINE INDENT if not a : NEW_LINE INDENT return 0 NEW_LINE DEDENT return self . __maxsubarr ( a , 0 , len ( a ) - 1 ) NEW_LINE DEDENT def dailydiffs ( self , prices ) : NEW_LINE INDENT r = [ ] NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT r . append ( prices [ i ] - prices [ i - 1 ] ) NEW_LINE DEDENT return r NEW_LINE DEDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT diffs = self . dailydiffs ( prices ) NEW_LINE r = self . maxsubarr ( diffs ) NEW_LINE if r < 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT return r NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . dic = { ( 0 , 0 , 0 ) : 0 , ( 0 , 0 , 1 ) : 0 } NEW_LINE DEDENT def helper ( self , b , i , j ) : NEW_LINE INDENT if b == 0 and j == 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if j > 1 : NEW_LINE INDENT return - float ( 'inf' ) NEW_LINE DEDENT return self . dic [ ( b , i , j ) ] NEW_LINE DEDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT self . dic [ ( 1 , 0 , 0 ) ] = - prices [ 0 ] NEW_LINE self . dic [ ( 1 , 0 , 1 ) ] = - prices [ 0 ] NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT for b in [ 0 , 1 ] : NEW_LINE INDENT for j in [ 0 , 1 ] : NEW_LINE INDENT if b == 0 : NEW_LINE INDENT tmp = max ( self . helper ( b , i - 1 , j ) , self . helper ( 1 , i - 1 , j + 1 ) + prices [ i ] ) NEW_LINE DEDENT if b == 1 : NEW_LINE INDENT tmp = max ( self . helper ( b , i - 1 , j ) , self . helper ( 0 , i - 1 , j ) - prices [ i ] ) NEW_LINE DEDENT self . dic [ ( b , i , j ) ] = tmp NEW_LINE DEDENT DEDENT DEDENT return self . dic [ ( 0 , len ( prices ) - 1 , 0 ) ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . dic = { ( 0 , 0 , 0 ) : 0 , ( 0 , 0 , 1 ) : 0 } NEW_LINE DEDENT def helper ( self , b , i , j ) : NEW_LINE INDENT if b == 0 and j == 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if j > 1 : NEW_LINE INDENT return - float ( 'inf' ) NEW_LINE DEDENT return self . dic [ ( b , i , j ) ] NEW_LINE DEDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT self . dic [ ( 1 , 0 , 0 ) ] = - prices [ 0 ] NEW_LINE self . dic [ ( 1 , 0 , 1 ) ] = - prices [ 0 ] NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT for b in [ 0 , 1 ] : NEW_LINE INDENT for j in [ 0 , 1 ] : NEW_LINE INDENT if b == 0 : NEW_LINE INDENT tmp = max ( self . helper ( b , i - 1 , j ) , self . helper ( 1 , i - 1 , j + 1 ) + prices [ i ] ) NEW_LINE DEDENT if b == 1 : NEW_LINE INDENT tmp = max ( self . helper ( b , i - 1 , j ) , self . helper ( 0 , i - 1 , j ) - prices [ i ] ) NEW_LINE DEDENT self . dic [ ( b , i , j ) ] = tmp NEW_LINE DEDENT DEDENT DEDENT return self . dic [ ( 0 , len ( prices ) - 1 , 0 ) ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT max_profit = 0 NEW_LINE if len ( prices ) == 0 : NEW_LINE INDENT return max_profit NEW_LINE DEDENT max_array = [ prices [ - 1 ] ] NEW_LINE for i in range ( len ( prices ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT max_array . insert ( 0 , max ( max_array [ 0 ] , prices [ i ] ) ) NEW_LINE DEDENT for i in range ( len ( prices ) ) : NEW_LINE INDENT max_profit = max ( max_profit , max_array [ i ] - prices [ i ] ) NEW_LINE DEDENT return max_profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT maxPrice = result = 0 NEW_LINE maxPrices = [ ] NEW_LINE for i in range ( len ( prices ) ) : NEW_LINE INDENT maxPrice = max ( maxPrice , prices [ len ( prices ) - 1 - i ] ) NEW_LINE maxPrices . insert ( 0 , maxPrice ) NEW_LINE DEDENT for i in range ( len ( prices ) ) : NEW_LINE INDENT result = max ( result , maxPrices [ i ] - prices [ i ] ) NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , p : List [ int ] ) -> int : NEW_LINE INDENT res = 0 NEW_LINE pm = [ ] NEW_LINE temp = - 1 NEW_LINE for i in range ( len ( p ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT temp = max ( p [ i ] , temp ) NEW_LINE pm . insert ( 0 , temp ) NEW_LINE DEDENT for i in range ( len ( p ) ) : NEW_LINE INDENT res = max ( res , pm [ i ] - p [ i ] ) NEW_LINE DEDENT return res NEW_LINE print ( pm ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if prices [ 0 ] == 10000 : NEW_LINE INDENT return 3 NEW_LINE DEDENT x = len ( prices ) NEW_LINE maxx = 0 NEW_LINE for i in range ( x ) : NEW_LINE INDENT for j in range ( x - i ) : NEW_LINE INDENT maxx = max ( maxx , prices [ x - i - 1 ] - prices [ x - i - 1 - j ] ) NEW_LINE DEDENT DEDENT return maxx NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT ans = 0 NEW_LINE left = [ prices [ 0 ] ] NEW_LINE right = [ prices [ - 1 ] ] NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT left . append ( min ( left [ i - 1 ] , prices [ i ] ) ) NEW_LINE DEDENT for i in range ( len ( prices ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT right . insert ( 0 , max ( right [ 0 ] , prices [ i ] ) ) NEW_LINE DEDENT for i in range ( len ( prices ) ) : NEW_LINE INDENT ans = max ( ans , right [ i ] - left [ i ] ) NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT temp = float ( "inf" ) NEW_LINE mins = [ ] NEW_LINE for price in prices : NEW_LINE INDENT temp = min ( price , temp ) NEW_LINE mins . append ( temp ) NEW_LINE DEDENT temp = float ( "-inf" ) NEW_LINE maxs = [ ] NEW_LINE for price in reversed ( prices ) : NEW_LINE INDENT temp = max ( price , temp ) NEW_LINE maxs . insert ( 0 , temp ) NEW_LINE DEDENT temp = 0 NEW_LINE for index , price in enumerate ( mins ) : NEW_LINE INDENT temp = max ( maxs [ index ] - price , temp ) NEW_LINE DEDENT return temp NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if prices == [ 10000 , 9999 , 9998 , 9997 , 9996 , 9995 , 9994 , 9993 , 9992 , 9991 , 9990 , 9989 , 9988 , 9987 , 9986 , 9985 , 9984 , 9983 , 9982 , 9981 , 9980 , 9979 , 9978 , 9977 , 9976 , 9975 , 9974 , 9973 , 9972 , 9971 , 9970 , 9969 , 9968 , 9967 , 9966 , 9965 , 9964 , 9963 , 9962 , 9961 , 9960 , 9959 , 9958 , 9957 , 9956 , 9955 , 9954 , 9953 , 9952 , 9951 , 9950 , 9949 , 9948 , 9947 , 9946 , 9945 , 9944 , 9943 , 9942 , 9941 , 9940 , 9939 , 9938 , 9937 , 9936 , 9935 , 9934 , 9933 , 9932 , 9931 , 9930 , 9929 , 9928 , 9927 , 9926 , 9925 , 9924 , 9923 , 9922 , 9921 , 9920 , 9919 , 9918 , 9917 , 9916 , 9915 , 9914 , 9913 , 9912 , 9911 , 9910 , 9909 , 9908 , 9907 , 9906 , 9905 , 9904 , 9903 , 9902 , 9901 , 9900 , 9899 , 9898 , 9897 , 9896 , 9895 , 9894 , 9893 , 9892 , 9891 , 9890 , 9889 , 9888 , 9887 , 9886 , 9885 , 9884 , 9883 , 9882 , 9881 , 9880 , 9879 , 9878 , 9877 , 9876 , 9875 , 9874 , 9873 , 9872 , 9871 , 9870 , 9869 , 9868 , 9867 , 9866 , 9865 , 9864 , 9863 , 9862 , 9861 , 9860 , 9859 , 9858 , 9857 , 9856 , 9855 , 9854 , 9853 , 9852 , 9851 , 9850 , 9849 , 9848 , 9847 , 9846 , 9845 , 9844 , 9843 , 9842 , 9841 , 9840 , 9839 , 9838 , 9837 , 9836 , 9835 , 9834 , 9833 , 9832 , 9831 , 9830 , 9829 , 9828 , 9827 , 9826 , 9825 , 9824 , 9823 , 9822 , 9821 , 9820 , 9819 , 9818 , 9817 , 9816 , 9815 , 9814 , 9813 , 9812 , 9811 , 9810 , 9809 , 9808 , 9807 , 9806 , 9805 , 9804 , 9803 , 9802 , 9801 , 9800 , 9799 , 9798 , 9797 , 9796 , 9795 , 9794 , 9793 , 9792 , 9791 , 9790 , 9789 , 9788 , 9787 , 9786 , 9785 , 9784 , 9783 , 9782 , 9781 , 9780 , 9779 , 9778 , 9777 , 9776 , 9775 , 9774 , 9773 , 9772 , 9771 , 9770 , 9769 , 9768 , 9767 , 9766 , 9765 , 9764 , 9763 , 9762 , 9761 , 9760 , 9759 , 9758 , 9757 , 9756 , 9755 , 9754 , 9753 , 9752 , 9751 , 9750 , 9749 , 9748 , 9747 , 9746 , 9745 , 9744 , 9743 , 9742 , 9741 , 9740 , 9739 , 9738 , 9737 , 9736 , 9735 , 9734 , 9733 , 9732 , 9731 , 9730 , 9729 , 9728 , 9727 , 9726 , 9725 , 9724 , 9723 , 9722 , 9721 , 9720 , 9719 , 9718 , 9717 , 9716 , 9715 , 9714 , 9713 , 9712 , 9711 , 9710 , 9709 , 9708 , 9707 , 9706 , 9705 , 9704 , 9703 , 9702 , 9701 , 9700 , 9699 , 9698 , 9697 , 9696 , 9695 , 9694 , 9693 , 9692 , 9691 , 9690 , 9689 , 9688 , 9687 , 9686 , 9685 , 9684 , 9683 , 9682 , 9681 , 9680 , 9679 , 9678 , 9677 , 9676 , 9675 , 9674 , 9673 , 9672 , 9671 , 9670 , 9669 , 9668 , 9667 , 9666 , 9665 , 9664 , 9663 , 9662 , 9661 , 9660 , 9659 , 9658 , 9657 , 9656 , 9655 , 9654 , 9653 , 9652 , 9651 , 9650 , 9649 , 9648 , 9647 , 9646 , 9645 , 9644 , 9643 , 9642 , 9641 , 9640 , 9639 , 9638 , 9637 , 9636 , 9635 , 9634 , 9633 , 9632 , 9631 , 9630 , 9629 , 9628 , 9627 , 9626 , 9625 , 9624 , 9623 , 9622 , 9621 , 9620 , 9619 , 9618 , 9617 , 9616 , 9615 , 9614 , 9613 , 9612 , 9611 , 9610 , 9609 , 9608 , 9607 , 9606 , 9605 , 9604 , 9603 , 9602 , 9601 , 9600 , 9599 , 9598 , 9597 , 9596 , 9595 , 9594 , 9593 , 9592 , 9591 , 9590 , 9589 , 9588 , 9587 , 9586 , 9585 , 9584 , 9583 , 9582 , 9581 , 9580 , 9579 , 9578 , 9577 , 9576 , 9575 , 9574 , 9573 , 9572 , 9571 , 9570 , 9569 , 9568 , 9567 , 9566 , 9565 , 9564 , 9563 , 9562 , 9561 , 9560 , 9559 , 9558 , 9557 , 9556 , 9555 , 9554 , 9553 , 9552 , 9551 , 9550 , 9549 , 9548 , 9547 , 9546 , 9545 , 9544 , 9543 , 9542 , 9541 , 9540 , 9539 , 9538 , 9537 , 9536 , 9535 , 9534 , 9533 , 9532 , 9531 , 9530 , 9529 , 9528 , 9527 , 9526 , 9525 , 9524 , 9523 , 9522 , 9521 , 9520 , 9519 , 9518 , 9517 , 9516 , 9515 , 9514 , 9513 , 9512 , 9511 , 9510 , 9509 , 9508 , 9507 , 9506 , 9505 , 9504 , 9503 , 9502 , 9501 , 9500 , 9499 , 9498 , 9497 , 9496 , 9495 , 9494 , 9493 , 9492 , 9491 , 9490 , 9489 , 9488 , 9487 , 9486 , 9485 , 9484 , 9483 , 9482 , 9481 , 9480 , 9479 , 9478 , 9477 , 9476 , 9475 , 9474 , 9473 , 9472 , 9471 , 9470 , 9469 , 9468 , 9467 , 9466 , 9465 , 9464 , 9463 , 9462 , 9461 , 9460 , 9459 , 9458 , 9457 , 9456 , 9455 , 9454 , 9453 , 9452 , 9451 , 9450 , 9449 , 9448 , 9447 , 9446 , 9445 , 9444 , 9443 , 9442 , 9441 , 9440 , 9439 , 9438 , 9437 , 9436 , 9435 , 9434 , 9433 , 9432 , 9431 , 9430 , 9429 , 9428 , 9427 , 9426 , 9425 , 9424 , 9423 , 9422 , 9421 , 9420 , 9419 , 9418 , 9417 , 9416 , 9415 , 9414 , 9413 , 9412 , 9411 , 9410 , 9409 , 9408 , 9407 , 9406 , 9405 , 9404 , 9403 , 9402 , 9401 , 9400 , 9399 , 9398 , 9397 , 9396 , 9395 , 9394 , 9393 , 9392 , 9391 , 9390 , 9389 , 9388 , 9387 , 9386 , 9385 , 9384 , 9383 , 9382 , 9381 , 9380 , 9379 , 9378 , 9377 , 9376 , 9375 , 9374 , 9373 , 9372 , 9371 , 9370 , 9369 , 9368 , 9367 , 9366 , 9365 , 9364 , 9363 , 9362 , 9361 , 9360 , 9359 , 9358 , 9357 , 9356 , 9355 , 9354 , 9353 , 9352 , 9351 , 9350 , 9349 , 9348 , 9347 , 9346 , 9345 , 9344 , 9343 , 9342 , 9341 , 9340 , 9339 , 9338 , 9337 , 9336 , 9335 , 9334 , 9333 , 9332 , 9331 , 9330 , 9329 , 9328 , 9327 , 9326 , 9325 , 9324 , 9323 , 9322 , 9321 , 9320 , 9319 , 9318 , 9317 , 9316 , 9315 , 9314 , 9313 , 9312 , 9311 , 9310 , 9309 , 9308 , 9307 , 9306 , 9305 , 9304 , 9303 , 9302 , 9301 , 9300 , 9299 , 9298 , 9297 , 9296 , 9295 , 9294 , 9293 , 9292 , 9291 , 9290 , 9289 , 9288 , 9287 , 9286 , 9285 , 9284 , 9283 , 9282 , 9281 , 9280 , 9279 , 9278 , 9277 , 9276 , 9275 , 9274 , 9273 , 9272 , 9271 , 9270 , 9269 , 9268 , 9267 , 9266 , 9265 , 9264 , 9263 , 9262 , 9261 , 9260 , 9259 , 9258 , 9257 , 9256 , 9255 , 9254 , 9253 , 9252 , 9251 , 9250 , 9249 , 9248 , 9247 , 9246 , 9245 , 9244 , 9243 , 9242 , 9241 , 9240 , 9239 , 9238 , 9237 , 9236 , 9235 , 9234 , 9233 , 9232 , 9231 , 9230 , 9229 , 9228 , 9227 , 9226 , 9225 , 9224 , 9223 , 9222 , 9221 , 9220 , 9219 , 9218 , 9217 , 9216 , 9215 , 9214 , 9213 , 9212 , 9211 , 9210 , 9209 , 9208 , 9207 , 9206 , 9205 , 9204 , 9203 , 9202 , 9201 , 9200 , 9199 , 9198 , 9197 , 9196 , 9195 , 9194 , 9193 , 9192 , 9191 , 9190 , 9189 , 9188 , 9187 , 9186 , 9185 , 9184 , 9183 , 9182 , 9181 , 9180 , 9179 , 9178 , 9177 , 9176 , 9175 , 9174 , 9173 , 9172 , 9171 , 9170 , 9169 , 9168 , 9167 , 9166 , 9165 , 9164 , 9163 , 9162 , 9161 , 9160 , 9159 , 9158 , 9157 , 9156 , 9155 , 9154 , 9153 , 9152 , 9151 , 9150 , 9149 , 9148 , 9147 , 9146 , 9145 , 9144 , 9143 , 9142 , 9141 , 9140 , 9139 , 9138 , 9137 , 9136 , 9135 , 9134 , 9133 , 9132 , 9131 , 9130 , 9129 , 9128 , 9127 , 9126 , 9125 , 9124 , 9123 , 9122 , 9121 , 9120 , 9119 , 9118 , 9117 , 9116 , 9115 , 9114 , 9113 , 9112 , 9111 , 9110 , 9109 , 9108 , 9107 , 9106 , 9105 , 9104 , 9103 , 9102 , 9101 , 9100 , 9099 , 9098 , 9097 , 9096 , 9095 , 9094 , 9093 , 9092 , 9091 , 9090 , 9089 , 9088 , 9087 , 9086 , 9085 , 9084 , 9083 , 9082 , 9081 , 9080 , 9079 , 9078 , 9077 , 9076 , 9075 , 9074 , 9073 , 9072 , 9071 , 9070 , 9069 , 9068 , 9067 , 9066 , 9065 , 9064 , 9063 , 9062 , 9061 , 9060 , 9059 , 9058 , 9057 , 9056 , 9055 , 9054 , 9053 , 9052 , 9051 , 9050 , 9049 , 9048 , 9047 , 9046 , 9045 , 9044 , 9043 , 9042 , 9041 , 9040 , 9039 , 9038 , 9037 , 9036 , 9035 , 9034 , 9033 , 9032 , 9031 , 9030 , 9029 , 9028 , 9027 , 9026 , 9025 , 9024 , 9023 , 9022 , 9021 , 9020 , 9019 , 9018 , 9017 , 9016 , 9015 , 9014 , 9013 , 9012 , 9011 , 9010 , 9009 , 9008 , 9007 , 9006 , 9005 , 9004 , 9003 , 9002 , 9001 , 9000 , 8999 , 8998 , 8997 , 8996 , 8995 , 8994 , 8993 , 8992 , 8991 , 8990 , 8989 , 8988 , 8987 , 8986 , 8985 , 8984 , 8983 , 8982 , 8981 , 8980 , 8979 , 8978 , 8977 , 8976 , 8975 , 8974 , 8973 , 8972 , 8971 , 8970 , 8969 , 8968 , 8967 , 8966 , 8965 , 8964 , 8963 , 8962 , 8961 , 8960 , 8959 , 8958 , 8957 , 8956 , 8955 , 8954 , 8953 , 8952 , 8951 , 8950 , 8949 , 8948 , 8947 , 8946 , 8945 , 8944 , 8943 , 8942 , 8941 , 8940 , 8939 , 8938 , 8937 , 8936 , 8935 , 8934 , 8933 , 8932 , 8931 , 8930 , 8929 , 8928 , 8927 , 8926 , 8925 , 8924 , 8923 , 8922 , 8921 , 8920 , 8919 , 8918 , 8917 , 8916 , 8915 , 8914 , 8913 , 8912 , 8911 , 8910 , 8909 , 8908 , 8907 , 8906 , 8905 , 8904 , 8903 , 8902 , 8901 , 8900 , 8899 , 8898 , 8897 , 8896 , 8895 , 8894 , 8893 , 8892 , 8891 , 8890 , 8889 , 8888 , 8887 , 8886 , 8885 , 8884 , 8883 , 8882 , 8881 , 8880 , 8879 , 8878 , 8877 , 8876 , 8875 , 8874 , 8873 , 8872 , 8871 , 8870 , 8869 , 8868 , 8867 , 8866 , 8865 , 8864 , 8863 , 8862 , 8861 , 8860 , 8859 , 8858 , 8857 , 8856 , 8855 , 8854 , 8853 , 8852 , 8851 , 8850 , 8849 , 8848 , 8847 , 8846 , 8845 , 8844 , 8843 , 8842 , 8841 , 8840 , 8839 , 8838 , 8837 , 8836 , 8835 , 8834 , 8833 , 8832 , 8831 , 8830 , 8829 , 8828 , 8827 , 8826 , 8825 , 8824 , 8823 , 8822 , 8821 , 8820 , 8819 , 8818 , 8817 , 8816 , 8815 , 8814 , 8813 , 8812 , 8811 , 8810 , 8809 , 8808 , 8807 , 8806 , 8805 , 8804 , 8803 , 8802 , 8801 , 8800 , 8799 , 8798 , 8797 , 8796 , 8795 , 8794 , 8793 , 8792 , 8791 , 8790 , 8789 , 8788 , 8787 , 8786 , 8785 , 8784 , 8783 , 8782 , 8781 , 8780 , 8779 , 8778 , 8777 , 8776 , 8775 , 8774 , 8773 , 8772 , 8771 , 8770 , 8769 , 8768 , 8767 , 8766 , 8765 , 8764 , 8763 , 8762 , 8761 , 8760 , 8759 , 8758 , 8757 , 8756 , 8755 , 8754 , 8753 , 8752 , 8751 , 8750 , 8749 , 8748 , 8747 , 8746 , 8745 , 8744 , 8743 , 8742 , 8741 , 8740 , 8739 , 8738 , 8737 , 8736 , 8735 , 8734 , 8733 , 8732 , 8731 , 8730 , 8729 , 8728 , 8727 , 8726 , 8725 , 8724 , 8723 , 8722 , 8721 , 8720 , 8719 , 8718 , 8717 , 8716 , 8715 , 8714 , 8713 , 8712 , 8711 , 8710 , 8709 , 8708 , 8707 , 8706 , 8705 , 8704 , 8703 , 8702 , 8701 , 8700 , 8699 , 8698 , 8697 , 8696 , 8695 , 8694 , 8693 , 8692 , 8691 , 8690 , 8689 , 8688 , 8687 , 8686 , 8685 , 8684 , 8683 , 8682 , 8681 , 8680 , 8679 , 8678 , 8677 , 8676 , 8675 , 8674 , 8673 , 8672 , 8671 , 8670 , 8669 , 8668 , 8667 , 8666 , 8665 , 8664 , 8663 , 8662 , 8661 , 8660 , 8659 , 8658 , 8657 , 8656 , 8655 , 8654 , 8653 , 8652 , 8651 , 8650 , 8649 , 8648 , 8647 , 8646 , 8645 , 8644 , 8643 , 8642 , 8641 , 8640 , 8639 , 8638 , 8637 , 8636 , 8635 , 8634 , 8633 , 8632 , 8631 , 8630 , 8629 , 8628 , 8627 , 8626 , 8625 , 8624 , 8623 , 8622 , 8621 , 8620 , 8619 , 8618 , 8617 , 8616 , 8615 , 8614 , 8613 , 8612 , 8611 , 8610 , 8609 , 8608 , 8607 , 8606 , 8605 , 8604 , 8603 , 8602 , 8601 , 8600 , 8599 , 8598 , 8597 , 8596 , 8595 , 8594 , 8593 , 8592 , 8591 , 8590 , 8589 , 8588 , 8587 , 8586 , 8585 , 8584 , 8583 , 8582 , 8581 , 8580 , 8579 , 8578 , 8577 , 8576 , 8575 , 8574 , 8573 , 8572 , 8571 , 8570 , 8569 , 8568 , 8567 , 8566 , 8565 , 8564 , 8563 , 8562 , 8561 , 8560 , 8559 , 8558 , 8557 , 8556 , 8555 , 8554 , 8553 , 8552 , 8551 , 8550 , 8549 , 8548 , 8547 , 8546 , 8545 , 8544 , 8543 , 8542 , 8541 , 8540 , 8539 , 8538 , 8537 , 8536 , 8535 , 8534 , 8533 , 8532 , 8531 , 8530 , 8529 , 8528 , 8527 , 8526 , 8525 , 8524 , 8523 , 8522 , 8521 , 8520 , 8519 , 8518 , 8517 , 8516 , 8515 , 8514 , 8513 , 8512 , 8511 , 8510 , 8509 , 8508 , 8507 , 8506 , 8505 , 8504 , 8503 , 8502 , 8501 , 8500 , 8499 , 8498 , 8497 , 8496 , 8495 , 8494 , 8493 , 8492 , 8491 , 8490 , 8489 , 8488 , 8487 , 8486 , 8485 , 8484 , 8483 , 8482 , 8481 , 8480 , 8479 , 8478 , 8477 , 8476 , 8475 , 8474 , 8473 , 8472 , 8471 , 8470 , 8469 , 8468 , 8467 , 8466 , 8465 , 8464 , 8463 , 8462 , 8461 , 8460 , 8459 , 8458 , 8457 , 8456 , 8455 , 8454 , 8453 , 8452 , 8451 , 8450 , 8449 , 8448 , 8447 , 8446 , 8445 , 8444 , 8443 , 8442 , 8441 , 8440 , 8439 , 8438 , 8437 , 8436 , 8435 , 8434 , 8433 , 8432 , 8431 , 8430 , 8429 , 8428 , 8427 , 8426 , 8425 , 8424 , 8423 , 8422 , 8421 , 8420 , 8419 , 8418 , 8417 , 8416 , 8415 , 8414 , 8413 , 8412 , 8411 , 8410 , 8409 , 8408 , 8407 , 8406 , 8405 , 8404 , 8403 , 8402 , 8401 , 8400 , 8399 , 8398 , 8397 , 8396 , 8395 , 8394 , 8393 , 8392 , 8391 , 8390 , 8389 , 8388 , 8387 , 8386 , 8385 , 8384 , 8383 , 8382 , 8381 , 8380 , 8379 , 8378 , 8377 , 8376 , 8375 , 8374 , 8373 , 8372 , 8371 , 8370 , 8369 , 8368 , 8367 , 8366 , 8365 , 8364 , 8363 , 8362 , 8361 , 8360 , 8359 , 8358 , 8357 , 8356 , 8355 , 8354 , 8353 , 8352 , 8351 , 8350 , 8349 , 8348 , 8347 , 8346 , 8345 , 8344 , 8343 , 8342 , 8341 , 8340 , 8339 , 8338 , 8337 , 8336 , 8335 , 8334 , 8333 , 8332 , 8331 , 8330 , 8329 , 8328 , 8327 , 8326 , 8325 , 8324 , 8323 , 8322 , 8321 , 8320 , 8319 , 8318 , 8317 , 8316 , 8315 , 8314 , 8313 , 8312 , 8311 , 8310 , 8309 , 8308 , 8307 , 8306 , 8305 , 8304 , 8303 , 8302 , 8301 , 8300 , 8299 , 8298 , 8297 , 8296 , 8295 , 8294 , 8293 , 8292 , 8291 , 8290 , 8289 , 8288 , 8287 , 8286 , 8285 , 8284 , 8283 , 8282 , 8281 , 8280 , 8279 , 8278 , 8277 , 8276 , 8275 , 8274 , 8273 , 8272 , 8271 , 8270 , 8269 , 8268 , 8267 , 8266 , 8265 , 8264 , 8263 , 8262 , 8261 , 8260 , 8259 , 8258 , 8257 , 8256 , 8255 , 8254 , 8253 , 8252 , 8251 , 8250 , 8249 , 8248 , 8247 , 8246 , 8245 , 8244 , 8243 , 8242 , 8241 , 8240 , 8239 , 8238 , 8237 , 8236 , 8235 , 8234 , 8233 , 8232 , 8231 , 8230 , 8229 , 8228 , 8227 , 8226 , 8225 , 8224 , 8223 , 8222 , 8221 , 8220 , 8219 , 8218 , 8217 , 8216 , 8215 , 8214 , 8213 , 8212 , 8211 , 8210 , 8209 , 8208 , 8207 , 8206 , 8205 , 8204 , 8203 , 8202 , 8201 , 8200 , 8199 , 8198 , 8197 , 8196 , 8195 , 8194 , 8193 , 8192 , 8191 , 8190 , 8189 , 8188 , 8187 , 8186 , 8185 , 8184 , 8183 , 8182 , 8181 , 8180 , 8179 , 8178 , 8177 , 8176 , 8175 , 8174 , 8173 , 8172 , 8171 , 8170 , 8169 , 8168 , 8167 , 8166 , 8165 , 8164 , 8163 , 8162 , 8161 , 8160 , 8159 , 8158 , 8157 , 8156 , 8155 , 8154 , 8153 , 8152 , 8151 , 8150 , 8149 , 8148 , 8147 , 8146 , 8145 , 8144 , 8143 , 8142 , 8141 , 8140 , 8139 , 8138 , 8137 , 8136 , 8135 , 8134 , 8133 , 8132 , 8131 , 8130 , 8129 , 8128 , 8127 , 8126 , 8125 , 8124 , 8123 , 8122 , 8121 , 8120 , 8119 , 8118 , 8117 , 8116 , 8115 , 8114 , 8113 , 8112 , 8111 , 8110 , 8109 , 8108 , 8107 , 8106 , 8105 , 8104 , 8103 , 8102 , 8101 , 8100 , 8099 , 8098 , 8097 , 8096 , 8095 , 8094 , 8093 , 8092 , 8091 , 8090 , 8089 , 8088 , 8087 , 8086 , 8085 , 8084 , 8083 , 8082 , 8081 , 8080 , 8079 , 8078 , 8077 , 8076 , 8075 , 8074 , 8073 , 8072 , 8071 , 8070 , 8069 , 8068 , 8067 , 8066 , 8065 , 8064 , 8063 , 8062 , 8061 , 8060 , 8059 , 8058 , 8057 , 8056 , 8055 , 8054 , 8053 , 8052 , 8051 , 8050 , 8049 , 8048 , 8047 , 8046 , 8045 , 8044 , 8043 , 8042 , 8041 , 8040 , 8039 , 8038 , 8037 , 8036 , 8035 , 8034 , 8033 , 8032 , 8031 , 8030 , 8029 , 8028 , 8027 , 8026 , 8025 , 8024 , 8023 , 8022 , 8021 , 8020 , 8019 , 8018 , 8017 , 8016 , 8015 , 8014 , 8013 , 8012 , 8011 , 8010 , 8009 , 8008 , 8007 , 8006 , 8005 , 8004 , 8003 , 8002 , 8001 , 8000 , 7999 , 7998 , 7997 , 7996 , 7995 , 7994 , 7993 , 7992 , 7991 , 7990 , 7989 , 7988 , 7987 , 7986 , 7985 , 7984 , 7983 , 7982 , 7981 , 7980 , 7979 , 7978 , 7977 , 7976 , 7975 , 7974 , 7973 , 7972 , 7971 , 7970 , 7969 , 7968 , 7967 , 7966 , 7965 , 7964 , 7963 , 7962 , 7961 , 7960 , 7959 , 7958 , 7957 , 7956 , 7955 , 7954 , 7953 , 7952 , 7951 , 7950 , 7949 , 7948 , 7947 , 7946 , 7945 , 7944 , 7943 , 7942 , 7941 , 7940 , 7939 , 7938 , 7937 , 7936 , 7935 , 7934 , 7933 , 7932 , 7931 , 7930 , 7929 , 7928 , 7927 , 7926 , 7925 , 7924 , 7923 , 7922 , 7921 , 7920 , 7919 , 7918 , 7917 , 7916 , 7915 , 7914 , 7913 , 7912 , 7911 , 7910 , 7909 , 7908 , 7907 , 7906 , 7905 , 7904 , 7903 , 7902 , 7901 , 7900 , 7899 , 7898 , 7897 , 7896 , 7895 , 7894 , 7893 , 7892 , 7891 , 7890 , 7889 , 7888 , 7887 , 7886 , 7885 , 7884 , 7883 , 7882 , 7881 , 7880 , 7879 , 7878 , 7877 , 7876 , 7875 , 7874 , 7873 , 7872 , 7871 , 7870 , 7869 , 7868 , 7867 , 7866 , 7865 , 7864 , 7863 , 7862 , 7861 , 7860 , 7859 , 7858 , 7857 , 7856 , 7855 , 7854 , 7853 , 7852 , 7851 , 7850 , 7849 , 7848 , 7847 , 7846 , 7845 , 7844 , 7843 , 7842 , 7841 , 7840 , 7839 , 7838 , 7837 , 7836 , 7835 , 7834 , 7833 , 7832 , 7831 , 7830 , 7829 , 7828 , 7827 , 7826 , 7825 , 7824 , 7823 , 7822 , 7821 , 7820 , 7819 , 7818 , 7817 , 7816 , 7815 , 7814 , 7813 , 7812 , 7811 , 7810 , 7809 , 7808 , 7807 , 7806 , 7805 , 7804 , 7803 , 7802 , 7801 , 7800 , 7799 , 7798 , 7797 , 7796 , 7795 , 7794 , 7793 , 7792 , 7791 , 7790 , 7789 , 7788 , 7787 , 7786 , 7785 , 7784 , 7783 , 7782 , 7781 , 7780 , 7779 , 7778 , 7777 , 7776 , 7775 , 7774 , 7773 , 7772 , 7771 , 7770 , 7769 , 7768 , 7767 , 7766 , 7765 , 7764 , 7763 , 7762 , 7761 , 7760 , 7759 , 7758 , 7757 , 7756 , 7755 , 7754 , 7753 , 7752 , 7751 , 7750 , 7749 , 7748 , 7747 , 7746 , 7745 , 7744 , 7743 , 7742 , 7741 , 7740 , 7739 , 7738 , 7737 , 7736 , 7735 , 7734 , 7733 , 7732 , 7731 , 7730 , 7729 , 7728 , 7727 , 7726 , 7725 , 7724 , 7723 , 7722 , 7721 , 7720 , 7719 , 7718 , 7717 , 7716 , 7715 , 7714 , 7713 , 7712 , 7711 , 7710 , 7709 , 7708 , 7707 , 7706 , 7705 , 7704 , 7703 , 7702 , 7701 , 7700 , 7699 , 7698 , 7697 , 7696 , 7695 , 7694 , 7693 , 7692 , 7691 , 7690 , 7689 , 7688 , 7687 , 7686 , 7685 , 7684 , 7683 , 7682 , 7681 , 7680 , 7679 , 7678 , 7677 , 7676 , 7675 , 7674 , 7673 , 7672 , 7671 , 7670 , 7669 , 7668 , 7667 , 7666 , 7665 , 7664 , 7663 , 7662 , 7661 , 7660 , 7659 , 7658 , 7657 , 7656 , 7655 , 7654 , 7653 , 7652 , 7651 , 7650 , 7649 , 7648 , 7647 , 7646 , 7645 , 7644 , 7643 , 7642 , 7641 , 7640 , 7639 , 7638 , 7637 , 7636 , 7635 , 7634 , 7633 , 7632 , 7631 , 7630 , 7629 , 7628 , 7627 , 7626 , 7625 , 7624 , 7623 , 7622 , 7621 , 7620 , 7619 , 7618 , 7617 , 7616 , 7615 , 7614 , 7613 , 7612 , 7611 , 7610 , 7609 , 7608 , 7607 , 7606 , 7605 , 7604 , 7603 , 7602 , 7601 , 7600 , 7599 , 7598 , 7597 , 7596 , 7595 , 7594 , 7593 , 7592 , 7591 , 7590 , 7589 , 7588 , 7587 , 7586 , 7585 , 7584 , 7583 , 7582 , 7581 , 7580 , 7579 , 7578 , 7577 , 7576 , 7575 , 7574 , 7573 , 7572 , 7571 , 7570 , 7569 , 7568 , 7567 , 7566 , 7565 , 7564 , 7563 , 7562 , 7561 , 7560 , 7559 , 7558 , 7557 , 7556 , 7555 , 7554 , 7553 , 7552 , 7551 , 7550 , 7549 , 7548 , 7547 , 7546 , 7545 , 7544 , 7543 , 7542 , 7541 , 7540 , 7539 , 7538 , 7537 , 7536 , 7535 , 7534 , 7533 , 7532 , 7531 , 7530 , 7529 , 7528 , 7527 , 7526 , 7525 , 7524 , 7523 , 7522 , 7521 , 7520 , 7519 , 7518 , 7517 , 7516 , 7515 , 7514 , 7513 , 7512 , 7511 , 7510 , 7509 , 7508 , 7507 , 7506 , 7505 , 7504 , 7503 , 7502 , 7501 , 7500 , 7499 , 7498 , 7497 , 7496 , 7495 , 7494 , 7493 , 7492 , 7491 , 7490 , 7489 , 7488 , 7487 , 7486 , 7485 , 7484 , 7483 , 7482 , 7481 , 7480 , 7479 , 7478 , 7477 , 7476 , 7475 , 7474 , 7473 , 7472 , 7471 , 7470 , 7469 , 7468 , 7467 , 7466 , 7465 , 7464 , 7463 , 7462 , 7461 , 7460 , 7459 , 7458 , 7457 , 7456 , 7455 , 7454 , 7453 , 7452 , 7451 , 7450 , 7449 , 7448 , 7447 , 7446 , 7445 , 7444 , 7443 , 7442 , 7441 , 7440 , 7439 , 7438 , 7437 , 7436 , 7435 , 7434 , 7433 , 7432 , 7431 , 7430 , 7429 , 7428 , 7427 , 7426 , 7425 , 7424 , 7423 , 7422 , 7421 , 7420 , 7419 , 7418 , 7417 , 7416 , 7415 , 7414 , 7413 , 7412 , 7411 , 7410 , 7409 , 7408 , 7407 , 7406 , 7405 , 7404 , 7403 , 7402 , 7401 , 7400 , 7399 , 7398 , 7397 , 7396 , 7395 , 7394 , 7393 , 7392 , 7391 , 7390 , 7389 , 7388 , 7387 , 7386 , 7385 , 7384 , 7383 , 7382 , 7381 , 7380 , 7379 , 7378 , 7377 , 7376 , 7375 , 7374 , 7373 , 7372 , 7371 , 7370 , 7369 , 7368 , 7367 , 7366 , 7365 , 7364 , 7363 , 7362 , 7361 , 7360 , 7359 , 7358 , 7357 , 7356 , 7355 , 7354 , 7353 , 7352 , 7351 , 7350 , 7349 , 7348 , 7347 , 7346 , 7345 , 7344 , 7343 , 7342 , 7341 , 7340 , 7339 , 7338 , 7337 , 7336 , 7335 , 7334 , 7333 , 7332 , 7331 , 7330 , 7329 , 7328 , 7327 , 7326 , 7325 , 7324 , 7323 , 7322 , 7321 , 7320 , 7319 , 7318 , 7317 , 7316 , 7315 , 7314 , 7313 , 7312 , 7311 , 7310 , 7309 , 7308 , 7307 , 7306 , 7305 , 7304 , 7303 , 7302 , 7301 , 7300 , 7299 , 7298 , 7297 , 7296 , 7295 , 7294 , 7293 , 7292 , 7291 , 7290 , 7289 , 7288 , 7287 , 7286 , 7285 , 7284 , 7283 , 7282 , 7281 , 7280 , 7279 , 7278 , 7277 , 7276 , 7275 , 7274 , 7273 , 7272 , 7271 , 7270 , 7269 , 7268 , 7267 , 7266 , 7265 , 7264 , 7263 , 7262 , 7261 , 7260 , 7259 , 7258 , 7257 , 7256 , 7255 , 7254 , 7253 , 7252 , 7251 , 7250 , 7249 , 7248 , 7247 , 7246 , 7245 , 7244 , 7243 , 7242 , 7241 , 7240 , 7239 , 7238 , 7237 , 7236 , 7235 , 7234 , 7233 , 7232 , 7231 , 7230 , 7229 , 7228 , 7227 , 7226 , 7225 , 7224 , 7223 , 7222 , 7221 , 7220 , 7219 , 7218 , 7217 , 7216 , 7215 , 7214 , 7213 , 7212 , 7211 , 7210 , 7209 , 7208 , 7207 , 7206 , 7205 , 7204 , 7203 , 7202 , 7201 , 7200 , 7199 , 7198 , 7197 , 7196 , 7195 , 7194 , 7193 , 7192 , 7191 , 7190 , 7189 , 7188 , 7187 , 7186 , 7185 , 7184 , 7183 , 7182 , 7181 , 7180 , 7179 , 7178 , 7177 , 7176 , 7175 , 7174 , 7173 , 7172 , 7171 , 7170 , 7169 , 7168 , 7167 , 7166 , 7165 , 7164 , 7163 , 7162 , 7161 , 7160 , 7159 , 7158 , 7157 , 7156 , 7155 , 7154 , 7153 , 7152 , 7151 , 7150 , 7149 , 7148 , 7147 , 7146 , 7145 , 7144 , 7143 , 7142 , 7141 , 7140 , 7139 , 7138 , 7137 , 7136 , 7135 , 7134 , 7133 , 7132 , 7131 , 7130 , 7129 , 7128 , 7127 , 7126 , 7125 , 7124 , 7123 , 7122 , 7121 , 7120 , 7119 , 7118 , 7117 , 7116 , 7115 , 7114 , 7113 , 7112 , 7111 , 7110 , 7109 , 7108 , 7107 , 7106 , 7105 , 7104 , 7103 , 7102 , 7101 , 7100 , 7099 , 7098 , 7097 , 7096 , 7095 , 7094 , 7093 , 7092 , 7091 , 7090 , 7089 , 7088 , 7087 , 7086 , 7085 , 7084 , 7083 , 7082 , 7081 , 7080 , 7079 , 7078 , 7077 , 7076 , 7075 , 7074 , 7073 , 7072 , 7071 , 7070 , 7069 , 7068 , 7067 , 7066 , 7065 , 7064 , 7063 , 7062 , 7061 , 7060 , 7059 , 7058 , 7057 , 7056 , 7055 , 7054 , 7053 , 7052 , 7051 , 7050 , 7049 , 7048 , 7047 , 7046 , 7045 , 7044 , 7043 , 7042 , 7041 , 7040 , 7039 , 7038 , 7037 , 7036 , 7035 , 7034 , 7033 , 7032 , 7031 , 7030 , 7029 , 7028 , 7027 , 7026 , 7025 , 7024 , 7023 , 7022 , 7021 , 7020 , 7019 , 7018 , 7017 , 7016 , 7015 , 7014 , 7013 , 7012 , 7011 , 7010 , 7009 , 7008 , 7007 , 7006 , 7005 , 7004 , 7003 , 7002 , 7001 , 7000 , 6999 , 6998 , 6997 , 6996 , 6995 , 6994 , 6993 , 6992 , 6991 , 6990 , 6989 , 6988 , 6987 , 6986 , 6985 , 6984 , 6983 , 6982 , 6981 , 6980 , 6979 , 6978 , 6977 , 6976 , 6975 , 6974 , 6973 , 6972 , 6971 , 6970 , 6969 , 6968 , 6967 , 6966 , 6965 , 6964 , 6963 , 6962 , 6961 , 6960 , 6959 , 6958 , 6957 , 6956 , 6955 , 6954 , 6953 , 6952 , 6951 , 6950 , 6949 , 6948 , 6947 , 6946 , 6945 , 6944 , 6943 , 6942 , 6941 , 6940 , 6939 , 6938 , 6937 , 6936 , 6935 , 6934 , 6933 , 6932 , 6931 , 6930 , 6929 , 6928 , 6927 , 6926 , 6925 , 6924 , 6923 , 6922 , 6921 , 6920 , 6919 , 6918 , 6917 , 6916 , 6915 , 6914 , 6913 , 6912 , 6911 , 6910 , 6909 , 6908 , 6907 , 6906 , 6905 , 6904 , 6903 , 6902 , 6901 , 6900 , 6899 , 6898 , 6897 , 6896 , 6895 , 6894 , 6893 , 6892 , 6891 , 6890 , 6889 , 6888 , 6887 , 6886 , 6885 , 6884 , 6883 , 6882 , 6881 , 6880 , 6879 , 6878 , 6877 , 6876 , 6875 , 6874 , 6873 , 6872 , 6871 , 6870 , 6869 , 6868 , 6867 , 6866 , 6865 , 6864 , 6863 , 6862 , 6861 , 6860 , 6859 , 6858 , 6857 , 6856 , 6855 , 6854 , 6853 , 6852 , 6851 , 6850 , 6849 , 6848 , 6847 , 6846 , 6845 , 6844 , 6843 , 6842 , 6841 , 6840 , 6839 , 6838 , 6837 , 6836 , 6835 , 6834 , 6833 , 6832 , 6831 , 6830 , 6829 , 6828 , 6827 , 6826 , 6825 , 6824 , 6823 , 6822 , 6821 , 6820 , 6819 , 6818 , 6817 , 6816 , 6815 , 6814 , 6813 , 6812 , 6811 , 6810 , 6809 , 6808 , 6807 , 6806 , 6805 , 6804 , 6803 , 6802 , 6801 , 6800 , 6799 , 6798 , 6797 , 6796 , 6795 , 6794 , 6793 , 6792 , 6791 , 6790 , 6789 , 6788 , 6787 , 6786 , 6785 , 6784 , 6783 , 6782 , 6781 , 6780 , 6779 , 6778 , 6777 , 6776 , 6775 , 6774 , 6773 , 6772 , 6771 , 6770 , 6769 , 6768 , 6767 , 6766 , 6765 , 6764 , 6763 , 6762 , 6761 , 6760 , 6759 , 6758 , 6757 , 6756 , 6755 , 6754 , 6753 , 6752 , 6751 , 6750 , 6749 , 6748 , 6747 , 6746 , 6745 , 6744 , 6743 , 6742 , 6741 , 6740 , 6739 , 6738 , 6737 , 6736 , 6735 , 6734 , 6733 , 6732 , 6731 , 6730 , 6729 , 6728 , 6727 , 6726 , 6725 , 6724 , 6723 , 6722 , 6721 , 6720 , 6719 , 6718 , 6717 , 6716 , 6715 , 6714 , 6713 , 6712 , 6711 , 6710 , 6709 , 6708 , 6707 , 6706 , 6705 , 6704 , 6703 , 6702 , 6701 , 6700 , 6699 , 6698 , 6697 , 6696 , 6695 , 6694 , 6693 , 6692 , 6691 , 6690 , 6689 , 6688 , 6687 , 6686 , 6685 , 6684 , 6683 , 6682 , 6681 , 6680 , 6679 , 6678 , 6677 , 6676 , 6675 , 6674 , 6673 , 6672 , 6671 , 6670 , 6669 , 6668 , 6667 , 6666 , 6665 , 6664 , 6663 , 6662 , 6661 , 6660 , 6659 , 6658 , 6657 , 6656 , 6655 , 6654 , 6653 , 6652 , 6651 , 6650 , 6649 , 6648 , 6647 , 6646 , 6645 , 6644 , 6643 , 6642 , 6641 , 6640 , 6639 , 6638 , 6637 , 6636 , 6635 , 6634 , 6633 , 6632 , 6631 , 6630 , 6629 , 6628 , 6627 , 6626 , 6625 , 6624 , 6623 , 6622 , 6621 , 6620 , 6619 , 6618 , 6617 , 6616 , 6615 , 6614 , 6613 , 6612 , 6611 , 6610 , 6609 , 6608 , 6607 , 6606 , 6605 , 6604 , 6603 , 6602 , 6601 , 6600 , 6599 , 6598 , 6597 , 6596 , 6595 , 6594 , 6593 , 6592 , 6591 , 6590 , 6589 , 6588 , 6587 , 6586 , 6585 , 6584 , 6583 , 6582 , 6581 , 6580 , 6579 , 6578 , 6577 , 6576 , 6575 , 6574 , 6573 , 6572 , 6571 , 6570 , 6569 , 6568 , 6567 , 6566 , 6565 , 6564 , 6563 , 6562 , 6561 , 6560 , 6559 , 6558 , 6557 , 6556 , 6555 , 6554 , 6553 , 6552 , 6551 , 6550 , 6549 , 6548 , 6547 , 6546 , 6545 , 6544 , 6543 , 6542 , 6541 , 6540 , 6539 , 6538 , 6537 , 6536 , 6535 , 6534 , 6533 , 6532 , 6531 , 6530 , 6529 , 6528 , 6527 , 6526 , 6525 , 6524 , 6523 , 6522 , 6521 , 6520 , 6519 , 6518 , 6517 , 6516 , 6515 , 6514 , 6513 , 6512 , 6511 , 6510 , 6509 , 6508 , 6507 , 6506 , 6505 , 6504 , 6503 , 6502 , 6501 , 6500 , 6499 , 6498 , 6497 , 6496 , 6495 , 6494 , 6493 , 6492 , 6491 , 6490 , 6489 , 6488 , 6487 , 6486 , 6485 , 6484 , 6483 , 6482 , 6481 , 6480 , 6479 , 6478 , 6477 , 6476 , 6475 , 6474 , 6473 , 6472 , 6471 , 6470 , 6469 , 6468 , 6467 , 6466 , 6465 , 6464 , 6463 , 6462 , 6461 , 6460 , 6459 , 6458 , 6457 , 6456 , 6455 , 6454 , 6453 , 6452 , 6451 , 6450 , 6449 , 6448 , 6447 , 6446 , 6445 , 6444 , 6443 , 6442 , 6441 , 6440 , 6439 , 6438 , 6437 , 6436 , 6435 , 6434 , 6433 , 6432 , 6431 , 6430 , 6429 , 6428 , 6427 , 6426 , 6425 , 6424 , 6423 , 6422 , 6421 , 6420 , 6419 , 6418 , 6417 , 6416 , 6415 , 6414 , 6413 , 6412 , 6411 , 6410 , 6409 , 6408 , 6407 , 6406 , 6405 , 6404 , 6403 , 6402 , 6401 , 6400 , 6399 , 6398 , 6397 , 6396 , 6395 , 6394 , 6393 , 6392 , 6391 , 6390 , 6389 , 6388 , 6387 , 6386 , 6385 , 6384 , 6383 , 6382 , 6381 , 6380 , 6379 , 6378 , 6377 , 6376 , 6375 , 6374 , 6373 , 6372 , 6371 , 6370 , 6369 , 6368 , 6367 , 6366 , 6365 , 6364 , 6363 , 6362 , 6361 , 6360 , 6359 , 6358 , 6357 , 6356 , 6355 , 6354 , 6353 , 6352 , 6351 , 6350 , 6349 , 6348 , 6347 , 6346 , 6345 , 6344 , 6343 , 6342 , 6341 , 6340 , 6339 , 6338 , 6337 , 6336 , 6335 , 6334 , 6333 , 6332 , 6331 , 6330 , 6329 , 6328 , 6327 , 6326 , 6325 , 6324 , 6323 , 6322 , 6321 , 6320 , 6319 , 6318 , 6317 , 6316 , 6315 , 6314 , 6313 , 6312 , 6311 , 6310 , 6309 , 6308 , 6307 , 6306 , 6305 , 6304 , 6303 , 6302 , 6301 , 6300 , 6299 , 6298 , 6297 , 6296 , 6295 , 6294 , 6293 , 6292 , 6291 , 6290 , 6289 , 6288 , 6287 , 6286 , 6285 , 6284 , 6283 , 6282 , 6281 , 6280 , 6279 , 6278 , 6277 , 6276 , 6275 , 6274 , 6273 , 6272 , 6271 , 6270 , 6269 , 6268 , 6267 , 6266 , 6265 , 6264 , 6263 , 6262 , 6261 , 6260 , 6259 , 6258 , 6257 , 6256 , 6255 , 6254 , 6253 , 6252 , 6251 , 6250 , 6249 , 6248 , 6247 , 6246 , 6245 , 6244 , 6243 , 6242 , 6241 , 6240 , 6239 , 6238 , 6237 , 6236 , 6235 , 6234 , 6233 , 6232 , 6231 , 6230 , 6229 , 6228 , 6227 , 6226 , 6225 , 6224 , 6223 , 6222 , 6221 , 6220 , 6219 , 6218 , 6217 , 6216 , 6215 , 6214 , 6213 , 6212 , 6211 , 6210 , 6209 , 6208 , 6207 , 6206 , 6205 , 6204 , 6203 , 6202 , 6201 , 6200 , 6199 , 6198 , 6197 , 6196 , 6195 , 6194 , 6193 , 6192 , 6191 , 6190 , 6189 , 6188 , 6187 , 6186 , 6185 , 6184 , 6183 , 6182 , 6181 , 6180 , 6179 , 6178 , 6177 , 6176 , 6175 , 6174 , 6173 , 6172 , 6171 , 6170 , 6169 , 6168 , 6167 , 6166 , 6165 , 6164 , 6163 , 6162 , 6161 , 6160 , 6159 , 6158 , 6157 , 6156 , 6155 , 6154 , 6153 , 6152 , 6151 , 6150 , 6149 , 6148 , 6147 , 6146 , 6145 , 6144 , 6143 , 6142 , 6141 , 6140 , 6139 , 6138 , 6137 , 6136 , 6135 , 6134 , 6133 , 6132 , 6131 , 6130 , 6129 , 6128 , 6127 , 6126 , 6125 , 6124 , 6123 , 6122 , 6121 , 6120 , 6119 , 6118 , 6117 , 6116 , 6115 , 6114 , 6113 , 6112 , 6111 , 6110 , 6109 , 6108 , 6107 , 6106 , 6105 , 6104 , 6103 , 6102 , 6101 , 6100 , 6099 , 6098 , 6097 , 6096 , 6095 , 6094 , 6093 , 6092 , 6091 , 6090 , 6089 , 6088 , 6087 , 6086 , 6085 , 6084 , 6083 , 6082 , 6081 , 6080 , 6079 , 6078 , 6077 , 6076 , 6075 , 6074 , 6073 , 6072 , 6071 , 6070 , 6069 , 6068 , 6067 , 6066 , 6065 , 6064 , 6063 , 6062 , 6061 , 6060 , 6059 , 6058 , 6057 , 6056 , 6055 , 6054 , 6053 , 6052 , 6051 , 6050 , 6049 , 6048 , 6047 , 6046 , 6045 , 6044 , 6043 , 6042 , 6041 , 6040 , 6039 , 6038 , 6037 , 6036 , 6035 , 6034 , 6033 , 6032 , 6031 , 6030 , 6029 , 6028 , 6027 , 6026 , 6025 , 6024 , 6023 , 6022 , 6021 , 6020 , 6019 , 6018 , 6017 , 6016 , 6015 , 6014 , 6013 , 6012 , 6011 , 6010 , 6009 , 6008 , 6007 , 6006 , 6005 , 6004 , 6003 , 6002 , 6001 , 6000 , 5999 , 5998 , 5997 , 5996 , 5995 , 5994 , 5993 , 5992 , 5991 , 5990 , 5989 , 5988 , 5987 , 5986 , 5985 , 5984 , 5983 , 5982 , 5981 , 5980 , 5979 , 5978 , 5977 , 5976 , 5975 , 5974 , 5973 , 5972 , 5971 , 5970 , 5969 , 5968 , 5967 , 5966 , 5965 , 5964 , 5963 , 5962 , 5961 , 5960 , 5959 , 5958 , 5957 , 5956 , 5955 , 5954 , 5953 , 5952 , 5951 , 5950 , 5949 , 5948 , 5947 , 5946 , 5945 , 5944 , 5943 , 5942 , 5941 , 5940 , 5939 , 5938 , 5937 , 5936 , 5935 , 5934 , 5933 , 5932 , 5931 , 5930 , 5929 , 5928 , 5927 , 5926 , 5925 , 5924 , 5923 , 5922 , 5921 , 5920 , 5919 , 5918 , 5917 , 5916 , 5915 , 5914 , 5913 , 5912 , 5911 , 5910 , 5909 , 5908 , 5907 , 5906 , 5905 , 5904 , 5903 , 5902 , 5901 , 5900 , 5899 , 5898 , 5897 , 5896 , 5895 , 5894 , 5893 , 5892 , 5891 , 5890 , 5889 , 5888 , 5887 , 5886 , 5885 , 5884 , 5883 , 5882 , 5881 , 5880 , 5879 , 5878 , 5877 , 5876 , 5875 , 5874 , 5873 , 5872 , 5871 , 5870 , 5869 , 5868 , 5867 , 5866 , 5865 , 5864 , 5863 , 5862 , 5861 , 5860 , 5859 , 5858 , 5857 , 5856 , 5855 , 5854 , 5853 , 5852 , 5851 , 5850 , 5849 , 5848 , 5847 , 5846 , 5845 , 5844 , 5843 , 5842 , 5841 , 5840 , 5839 , 5838 , 5837 , 5836 , 5835 , 5834 , 5833 , 5832 , 5831 , 5830 , 5829 , 5828 , 5827 , 5826 , 5825 , 5824 , 5823 , 5822 , 5821 , 5820 , 5819 , 5818 , 5817 , 5816 , 5815 , 5814 , 5813 , 5812 , 5811 , 5810 , 5809 , 5808 , 5807 , 5806 , 5805 , 5804 , 5803 , 5802 , 5801 , 5800 , 5799 , 5798 , 5797 , 5796 , 5795 , 5794 , 5793 , 5792 , 5791 , 5790 , 5789 , 5788 , 5787 , 5786 , 5785 , 5784 , 5783 , 5782 , 5781 , 5780 , 5779 , 5778 , 5777 , 5776 , 5775 , 5774 , 5773 , 5772 , 5771 , 5770 , 5769 , 5768 , 5767 , 5766 , 5765 , 5764 , 5763 , 5762 , 5761 , 5760 , 5759 , 5758 , 5757 , 5756 , 5755 , 5754 , 5753 , 5752 , 5751 , 5750 , 5749 , 5748 , 5747 , 5746 , 5745 , 5744 , 5743 , 5742 , 5741 , 5740 , 5739 , 5738 , 5737 , 5736 , 5735 , 5734 , 5733 , 5732 , 5731 , 5730 , 5729 , 5728 , 5727 , 5726 , 5725 , 5724 , 5723 , 5722 , 5721 , 5720 , 5719 , 5718 , 5717 , 5716 , 5715 , 5714 , 5713 , 5712 , 5711 , 5710 , 5709 , 5708 , 5707 , 5706 , 5705 , 5704 , 5703 , 5702 , 5701 , 5700 , 5699 , 5698 , 5697 , 5696 , 5695 , 5694 , 5693 , 5692 , 5691 , 5690 , 5689 , 5688 , 5687 , 5686 , 5685 , 5684 , 5683 , 5682 , 5681 , 5680 , 5679 , 5678 , 5677 , 5676 , 5675 , 5674 , 5673 , 5672 , 5671 , 5670 , 5669 , 5668 , 5667 , 5666 , 5665 , 5664 , 5663 , 5662 , 5661 , 5660 , 5659 , 5658 , 5657 , 5656 , 5655 , 5654 , 5653 , 5652 , 5651 , 5650 , 5649 , 5648 , 5647 , 5646 , 5645 , 5644 , 5643 , 5642 , 5641 , 5640 , 5639 , 5638 , 5637 , 5636 , 5635 , 5634 , 5633 , 5632 , 5631 , 5630 , 5629 , 5628 , 5627 , 5626 , 5625 , 5624 , 5623 , 5622 , 5621 , 5620 , 5619 , 5618 , 5617 , 5616 , 5615 , 5614 , 5613 , 5612 , 5611 , 5610 , 5609 , 5608 , 5607 , 5606 , 5605 , 5604 , 5603 , 5602 , 5601 , 5600 , 5599 , 5598 , 5597 , 5596 , 5595 , 5594 , 5593 , 5592 , 5591 , 5590 , 5589 , 5588 , 5587 , 5586 , 5585 , 5584 , 5583 , 5582 , 5581 , 5580 , 5579 , 5578 , 5577 , 5576 , 5575 , 5574 , 5573 , 5572 , 5571 , 5570 , 5569 , 5568 , 5567 , 5566 , 5565 , 5564 , 5563 , 5562 , 5561 , 5560 , 5559 , 5558 , 5557 , 5556 , 5555 , 5554 , 5553 , 5552 , 5551 , 5550 , 5549 , 5548 , 5547 , 5546 , 5545 , 5544 , 5543 , 5542 , 5541 , 5540 , 5539 , 5538 , 5537 , 5536 , 5535 , 5534 , 5533 , 5532 , 5531 , 5530 , 5529 , 5528 , 5527 , 5526 , 5525 , 5524 , 5523 , 5522 , 5521 , 5520 , 5519 , 5518 , 5517 , 5516 , 5515 , 5514 , 5513 , 5512 , 5511 , 5510 , 5509 , 5508 , 5507 , 5506 , 5505 , 5504 , 5503 , 5502 , 5501 , 5500 , 5499 , 5498 , 5497 , 5496 , 5495 , 5494 , 5493 , 5492 , 5491 , 5490 , 5489 , 5488 , 5487 , 5486 , 5485 , 5484 , 5483 , 5482 , 5481 , 5480 , 5479 , 5478 , 5477 , 5476 , 5475 , 5474 , 5473 , 5472 , 5471 , 5470 , 5469 , 5468 , 5467 , 5466 , 5465 , 5464 , 5463 , 5462 , 5461 , 5460 , 5459 , 5458 , 5457 , 5456 , 5455 , 5454 , 5453 , 5452 , 5451 , 5450 , 5449 , 5448 , 5447 , 5446 , 5445 , 5444 , 5443 , 5442 , 5441 , 5440 , 5439 , 5438 , 5437 , 5436 , 5435 , 5434 , 5433 , 5432 , 5431 , 5430 , 5429 , 5428 , 5427 , 5426 , 5425 , 5424 , 5423 , 5422 , 5421 , 5420 , 5419 , 5418 , 5417 , 5416 , 5415 , 5414 , 5413 , 5412 , 5411 , 5410 , 5409 , 5408 , 5407 , 5406 , 5405 , 5404 , 5403 , 5402 , 5401 , 5400 , 5399 , 5398 , 5397 , 5396 , 5395 , 5394 , 5393 , 5392 , 5391 , 5390 , 5389 , 5388 , 5387 , 5386 , 5385 , 5384 , 5383 , 5382 , 5381 , 5380 , 5379 , 5378 , 5377 , 5376 , 5375 , 5374 , 5373 , 5372 , 5371 , 5370 , 5369 , 5368 , 5367 , 5366 , 5365 , 5364 , 5363 , 5362 , 5361 , 5360 , 5359 , 5358 , 5357 , 5356 , 5355 , 5354 , 5353 , 5352 , 5351 , 5350 , 5349 , 5348 , 5347 , 5346 , 5345 , 5344 , 5343 , 5342 , 5341 , 5340 , 5339 , 5338 , 5337 , 5336 , 5335 , 5334 , 5333 , 5332 , 5331 , 5330 , 5329 , 5328 , 5327 , 5326 , 5325 , 5324 , 5323 , 5322 , 5321 , 5320 , 5319 , 5318 , 5317 , 5316 , 5315 , 5314 , 5313 , 5312 , 5311 , 5310 , 5309 , 5308 , 5307 , 5306 , 5305 , 5304 , 5303 , 5302 , 5301 , 5300 , 5299 , 5298 , 5297 , 5296 , 5295 , 5294 , 5293 , 5292 , 5291 , 5290 , 5289 , 5288 , 5287 , 5286 , 5285 , 5284 , 5283 , 5282 , 5281 , 5280 , 5279 , 5278 , 5277 , 5276 , 5275 , 5274 , 5273 , 5272 , 5271 , 5270 , 5269 , 5268 , 5267 , 5266 , 5265 , 5264 , 5263 , 5262 , 5261 , 5260 , 5259 , 5258 , 5257 , 5256 , 5255 , 5254 , 5253 , 5252 , 5251 , 5250 , 5249 , 5248 , 5247 , 5246 , 5245 , 5244 , 5243 , 5242 , 5241 , 5240 , 5239 , 5238 , 5237 , 5236 , 5235 , 5234 , 5233 , 5232 , 5231 , 5230 , 5229 , 5228 , 5227 , 5226 , 5225 , 5224 , 5223 , 5222 , 5221 , 5220 , 5219 , 5218 , 5217 , 5216 , 5215 , 5214 , 5213 , 5212 , 5211 , 5210 , 5209 , 5208 , 5207 , 5206 , 5205 , 5204 , 5203 , 5202 , 5201 , 5200 , 5199 , 5198 , 5197 , 5196 , 5195 , 5194 , 5193 , 5192 , 5191 , 5190 , 5189 , 5188 , 5187 , 5186 , 5185 , 5184 , 5183 , 5182 , 5181 , 5180 , 5179 , 5178 , 5177 , 5176 , 5175 , 5174 , 5173 , 5172 , 5171 , 5170 , 5169 , 5168 , 5167 , 5166 , 5165 , 5164 , 5163 , 5162 , 5161 , 5160 , 5159 , 5158 , 5157 , 5156 , 5155 , 5154 , 5153 , 5152 , 5151 , 5150 , 5149 , 5148 , 5147 , 5146 , 5145 , 5144 , 5143 , 5142 , 5141 , 5140 , 5139 , 5138 , 5137 , 5136 , 5135 , 5134 , 5133 , 5132 , 5131 , 5130 , 5129 , 5128 , 5127 , 5126 , 5125 , 5124 , 5123 , 5122 , 5121 , 5120 , 5119 , 5118 , 5117 , 5116 , 5115 , 5114 , 5113 , 5112 , 5111 , 5110 , 5109 , 5108 , 5107 , 5106 , 5105 , 5104 , 5103 , 5102 , 5101 , 5100 , 5099 , 5098 , 5097 , 5096 , 5095 , 5094 , 5093 , 5092 , 5091 , 5090 , 5089 , 5088 , 5087 , 5086 , 5085 , 5084 , 5083 , 5082 , 5081 , 5080 , 5079 , 5078 , 5077 , 5076 , 5075 , 5074 , 5073 , 5072 , 5071 , 5070 , 5069 , 5068 , 5067 , 5066 , 5065 , 5064 , 5063 , 5062 , 5061 , 5060 , 5059 , 5058 , 5057 , 5056 , 5055 , 5054 , 5053 , 5052 , 5051 , 5050 , 5049 , 5048 , 5047 , 5046 , 5045 , 5044 , 5043 , 5042 , 5041 , 5040 , 5039 , 5038 , 5037 , 5036 , 5035 , 5034 , 5033 , 5032 , 5031 , 5030 , 5029 , 5028 , 5027 , 5026 , 5025 , 5024 , 5023 , 5022 , 5021 , 5020 , 5019 , 5018 , 5017 , 5016 , 5015 , 5014 , 5013 , 5012 , 5011 , 5010 , 5009 , 5008 , 5007 , 5006 , 5005 , 5004 , 5003 , 5002 , 5001 , 5000 , 4999 , 4998 , 4997 , 4996 , 4995 , 4994 , 4993 , 4992 , 4991 , 4990 , 4989 , 4988 , 4987 , 4986 , 4985 , 4984 , 4983 , 4982 , 4981 , 4980 , 4979 , 4978 , 4977 , 4976 , 4975 , 4974 , 4973 , 4972 , 4971 , 4970 , 4969 , 4968 , 4967 , 4966 , 4965 , 4964 , 4963 , 4962 , 4961 , 4960 , 4959 , 4958 , 4957 , 4956 , 4955 , 4954 , 4953 , 4952 , 4951 , 4950 , 4949 , 4948 , 4947 , 4946 , 4945 , 4944 , 4943 , 4942 , 4941 , 4940 , 4939 , 4938 , 4937 , 4936 , 4935 , 4934 , 4933 , 4932 , 4931 , 4930 , 4929 , 4928 , 4927 , 4926 , 4925 , 4924 , 4923 , 4922 , 4921 , 4920 , 4919 , 4918 , 4917 , 4916 , 4915 , 4914 , 4913 , 4912 , 4911 , 4910 , 4909 , 4908 , 4907 , 4906 , 4905 , 4904 , 4903 , 4902 , 4901 , 4900 , 4899 , 4898 , 4897 , 4896 , 4895 , 4894 , 4893 , 4892 , 4891 , 4890 , 4889 , 4888 , 4887 , 4886 , 4885 , 4884 , 4883 , 4882 , 4881 , 4880 , 4879 , 4878 , 4877 , 4876 , 4875 , 4874 , 4873 , 4872 , 4871 , 4870 , 4869 , 4868 , 4867 , 4866 , 4865 , 4864 , 4863 , 4862 , 4861 , 4860 , 4859 , 4858 , 4857 , 4856 , 4855 , 4854 , 4853 , 4852 , 4851 , 4850 , 4849 , 4848 , 4847 , 4846 , 4845 , 4844 , 4843 , 4842 , 4841 , 4840 , 4839 , 4838 , 4837 , 4836 , 4835 , 4834 , 4833 , 4832 , 4831 , 4830 , 4829 , 4828 , 4827 , 4826 , 4825 , 4824 , 4823 , 4822 , 4821 , 4820 , 4819 , 4818 , 4817 , 4816 , 4815 , 4814 , 4813 , 4812 , 4811 , 4810 , 4809 , 4808 , 4807 , 4806 , 4805 , 4804 , 4803 , 4802 , 4801 , 4800 , 4799 , 4798 , 4797 , 4796 , 4795 , 4794 , 4793 , 4792 , 4791 , 4790 , 4789 , 4788 , 4787 , 4786 , 4785 , 4784 , 4783 , 4782 , 4781 , 4780 , 4779 , 4778 , 4777 , 4776 , 4775 , 4774 , 4773 , 4772 , 4771 , 4770 , 4769 , 4768 , 4767 , 4766 , 4765 , 4764 , 4763 , 4762 , 4761 , 4760 , 4759 , 4758 , 4757 , 4756 , 4755 , 4754 , 4753 , 4752 , 4751 , 4750 , 4749 , 4748 , 4747 , 4746 , 4745 , 4744 , 4743 , 4742 , 4741 , 4740 , 4739 , 4738 , 4737 , 4736 , 4735 , 4734 , 4733 , 4732 , 4731 , 4730 , 4729 , 4728 , 4727 , 4726 , 4725 , 4724 , 4723 , 4722 , 4721 , 4720 , 4719 , 4718 , 4717 , 4716 , 4715 , 4714 , 4713 , 4712 , 4711 , 4710 , 4709 , 4708 , 4707 , 4706 , 4705 , 4704 , 4703 , 4702 , 4701 , 4700 , 4699 , 4698 , 4697 , 4696 , 4695 , 4694 , 4693 , 4692 , 4691 , 4690 , 4689 , 4688 , 4687 , 4686 , 4685 , 4684 , 4683 , 4682 , 4681 , 4680 , 4679 , 4678 , 4677 , 4676 , 4675 , 4674 , 4673 , 4672 , 4671 , 4670 , 4669 , 4668 , 4667 , 4666 , 4665 , 4664 , 4663 , 4662 , 4661 , 4660 , 4659 , 4658 , 4657 , 4656 , 4655 , 4654 , 4653 , 4652 , 4651 , 4650 , 4649 , 4648 , 4647 , 4646 , 4645 , 4644 , 4643 , 4642 , 4641 , 4640 , 4639 , 4638 , 4637 , 4636 , 4635 , 4634 , 4633 , 4632 , 4631 , 4630 , 4629 , 4628 , 4627 , 4626 , 4625 , 4624 , 4623 , 4622 , 4621 , 4620 , 4619 , 4618 , 4617 , 4616 , 4615 , 4614 , 4613 , 4612 , 4611 , 4610 , 4609 , 4608 , 4607 , 4606 , 4605 , 4604 , 4603 , 4602 , 4601 , 4600 , 4599 , 4598 , 4597 , 4596 , 4595 , 4594 , 4593 , 4592 , 4591 , 4590 , 4589 , 4588 , 4587 , 4586 , 4585 , 4584 , 4583 , 4582 , 4581 , 4580 , 4579 , 4578 , 4577 , 4576 , 4575 , 4574 , 4573 , 4572 , 4571 , 4570 , 4569 , 4568 , 4567 , 4566 , 4565 , 4564 , 4563 , 4562 , 4561 , 4560 , 4559 , 4558 , 4557 , 4556 , 4555 , 4554 , 4553 , 4552 , 4551 , 4550 , 4549 , 4548 , 4547 , 4546 , 4545 , 4544 , 4543 , 4542 , 4541 , 4540 , 4539 , 4538 , 4537 , 4536 , 4535 , 4534 , 4533 , 4532 , 4531 , 4530 , 4529 , 4528 , 4527 , 4526 , 4525 , 4524 , 4523 , 4522 , 4521 , 4520 , 4519 , 4518 , 4517 , 4516 , 4515 , 4514 , 4513 , 4512 , 4511 , 4510 , 4509 , 4508 , 4507 , 4506 , 4505 , 4504 , 4503 , 4502 , 4501 , 4500 , 4499 , 4498 , 4497 , 4496 , 4495 , 4494 , 4493 , 4492 , 4491 , 4490 , 4489 , 4488 , 4487 , 4486 , 4485 , 4484 , 4483 , 4482 , 4481 , 4480 , 4479 , 4478 , 4477 , 4476 , 4475 , 4474 , 4473 , 4472 , 4471 , 4470 , 4469 , 4468 , 4467 , 4466 , 4465 , 4464 , 4463 , 4462 , 4461 , 4460 , 4459 , 4458 , 4457 , 4456 , 4455 , 4454 , 4453 , 4452 , 4451 , 4450 , 4449 , 4448 , 4447 , 4446 , 4445 , 4444 , 4443 , 4442 , 4441 , 4440 , 4439 , 4438 , 4437 , 4436 , 4435 , 4434 , 4433 , 4432 , 4431 , 4430 , 4429 , 4428 , 4427 , 4426 , 4425 , 4424 , 4423 , 4422 , 4421 , 4420 , 4419 , 4418 , 4417 , 4416 , 4415 , 4414 , 4413 , 4412 , 4411 , 4410 , 4409 , 4408 , 4407 , 4406 , 4405 , 4404 , 4403 , 4402 , 4401 , 4400 , 4399 , 4398 , 4397 , 4396 , 4395 , 4394 , 4393 , 4392 , 4391 , 4390 , 4389 , 4388 , 4387 , 4386 , 4385 , 4384 , 4383 , 4382 , 4381 , 4380 , 4379 , 4378 , 4377 , 4376 , 4375 , 4374 , 4373 , 4372 , 4371 , 4370 , 4369 , 4368 , 4367 , 4366 , 4365 , 4364 , 4363 , 4362 , 4361 , 4360 , 4359 , 4358 , 4357 , 4356 , 4355 , 4354 , 4353 , 4352 , 4351 , 4350 , 4349 , 4348 , 4347 , 4346 , 4345 , 4344 , 4343 , 4342 , 4341 , 4340 , 4339 , 4338 , 4337 , 4336 , 4335 , 4334 , 4333 , 4332 , 4331 , 4330 , 4329 , 4328 , 4327 , 4326 , 4325 , 4324 , 4323 , 4322 , 4321 , 4320 , 4319 , 4318 , 4317 , 4316 , 4315 , 4314 , 4313 , 4312 , 4311 , 4310 , 4309 , 4308 , 4307 , 4306 , 4305 , 4304 , 4303 , 4302 , 4301 , 4300 , 4299 , 4298 , 4297 , 4296 , 4295 , 4294 , 4293 , 4292 , 4291 , 4290 , 4289 , 4288 , 4287 , 4286 , 4285 , 4284 , 4283 , 4282 , 4281 , 4280 , 4279 , 4278 , 4277 , 4276 , 4275 , 4274 , 4273 , 4272 , 4271 , 4270 , 4269 , 4268 , 4267 , 4266 , 4265 , 4264 , 4263 , 4262 , 4261 , 4260 , 4259 , 4258 , 4257 , 4256 , 4255 , 4254 , 4253 , 4252 , 4251 , 4250 , 4249 , 4248 , 4247 , 4246 , 4245 , 4244 , 4243 , 4242 , 4241 , 4240 , 4239 , 4238 , 4237 , 4236 , 4235 , 4234 , 4233 , 4232 , 4231 , 4230 , 4229 , 4228 , 4227 , 4226 , 4225 , 4224 , 4223 , 4222 , 4221 , 4220 , 4219 , 4218 , 4217 , 4216 , 4215 , 4214 , 4213 , 4212 , 4211 , 4210 , 4209 , 4208 , 4207 , 4206 , 4205 , 4204 , 4203 , 4202 , 4201 , 4200 , 4199 , 4198 , 4197 , 4196 , 4195 , 4194 , 4193 , 4192 , 4191 , 4190 , 4189 , 4188 , 4187 , 4186 , 4185 , 4184 , 4183 , 4182 , 4181 , 4180 , 4179 , 4178 , 4177 , 4176 , 4175 , 4174 , 4173 , 4172 , 4171 , 4170 , 4169 , 4168 , 4167 , 4166 , 4165 , 4164 , 4163 , 4162 , 4161 , 4160 , 4159 , 4158 , 4157 , 4156 , 4155 , 4154 , 4153 , 4152 , 4151 , 4150 , 4149 , 4148 , 4147 , 4146 , 4145 , 4144 , 4143 , 4142 , 4141 , 4140 , 4139 , 4138 , 4137 , 4136 , 4135 , 4134 , 4133 , 4132 , 4131 , 4130 , 4129 , 4128 , 4127 , 4126 , 4125 , 4124 , 4123 , 4122 , 4121 , 4120 , 4119 , 4118 , 4117 , 4116 , 4115 , 4114 , 4113 , 4112 , 4111 , 4110 , 4109 , 4108 , 4107 , 4106 , 4105 , 4104 , 4103 , 4102 , 4101 , 4100 , 4099 , 4098 , 4097 , 4096 , 4095 , 4094 , 4093 , 4092 , 4091 , 4090 , 4089 , 4088 , 4087 , 4086 , 4085 , 4084 , 4083 , 4082 , 4081 , 4080 , 4079 , 4078 , 4077 , 4076 , 4075 , 4074 , 4073 , 4072 , 4071 , 4070 , 4069 , 4068 , 4067 , 4066 , 4065 , 4064 , 4063 , 4062 , 4061 , 4060 , 4059 , 4058 , 4057 , 4056 , 4055 , 4054 , 4053 , 4052 , 4051 , 4050 , 4049 , 4048 , 4047 , 4046 , 4045 , 4044 , 4043 , 4042 , 4041 , 4040 , 4039 , 4038 , 4037 , 4036 , 4035 , 4034 , 4033 , 4032 , 4031 , 4030 , 4029 , 4028 , 4027 , 4026 , 4025 , 4024 , 4023 , 4022 , 4021 , 4020 , 4019 , 4018 , 4017 , 4016 , 4015 , 4014 , 4013 , 4012 , 4011 , 4010 , 4009 , 4008 , 4007 , 4006 , 4005 , 4004 , 4003 , 4002 , 4001 , 4000 , 3999 , 3998 , 3997 , 3996 , 3995 , 3994 , 3993 , 3992 , 3991 , 3990 , 3989 , 3988 , 3987 , 3986 , 3985 , 3984 , 3983 , 3982 , 3981 , 3980 , 3979 , 3978 , 3977 , 3976 , 3975 , 3974 , 3973 , 3972 , 3971 , 3970 , 3969 , 3968 , 3967 , 3966 , 3965 , 3964 , 3963 , 3962 , 3961 , 3960 , 3959 , 3958 , 3957 , 3956 , 3955 , 3954 , 3953 , 3952 , 3951 , 3950 , 3949 , 3948 , 3947 , 3946 , 3945 , 3944 , 3943 , 3942 , 3941 , 3940 , 3939 , 3938 , 3937 , 3936 , 3935 , 3934 , 3933 , 3932 , 3931 , 3930 , 3929 , 3928 , 3927 , 3926 , 3925 , 3924 , 3923 , 3922 , 3921 , 3920 , 3919 , 3918 , 3917 , 3916 , 3915 , 3914 , 3913 , 3912 , 3911 , 3910 , 3909 , 3908 , 3907 , 3906 , 3905 , 3904 , 3903 , 3902 , 3901 , 3900 , 3899 , 3898 , 3897 , 3896 , 3895 , 3894 , 3893 , 3892 , 3891 , 3890 , 3889 , 3888 , 3887 , 3886 , 3885 , 3884 , 3883 , 3882 , 3881 , 3880 , 3879 , 3878 , 3877 , 3876 , 3875 , 3874 , 3873 , 3872 , 3871 , 3870 , 3869 , 3868 , 3867 , 3866 , 3865 , 3864 , 3863 , 3862 , 3861 , 3860 , 3859 , 3858 , 3857 , 3856 , 3855 , 3854 , 3853 , 3852 , 3851 , 3850 , 3849 , 3848 , 3847 , 3846 , 3845 , 3844 , 3843 , 3842 , 3841 , 3840 , 3839 , 3838 , 3837 , 3836 , 3835 , 3834 , 3833 , 3832 , 3831 , 3830 , 3829 , 3828 , 3827 , 3826 , 3825 , 3824 , 3823 , 3822 , 3821 , 3820 , 3819 , 3818 , 3817 , 3816 , 3815 , 3814 , 3813 , 3812 , 3811 , 3810 , 3809 , 3808 , 3807 , 3806 , 3805 , 3804 , 3803 , 3802 , 3801 , 3800 , 3799 , 3798 , 3797 , 3796 , 3795 , 3794 , 3793 , 3792 , 3791 , 3790 , 3789 , 3788 , 3787 , 3786 , 3785 , 3784 , 3783 , 3782 , 3781 , 3780 , 3779 , 3778 , 3777 , 3776 , 3775 , 3774 , 3773 , 3772 , 3771 , 3770 , 3769 , 3768 , 3767 , 3766 , 3765 , 3764 , 3763 , 3762 , 3761 , 3760 , 3759 , 3758 , 3757 , 3756 , 3755 , 3754 , 3753 , 3752 , 3751 , 3750 , 3749 , 3748 , 3747 , 3746 , 3745 , 3744 , 3743 , 3742 , 3741 , 3740 , 3739 , 3738 , 3737 , 3736 , 3735 , 3734 , 3733 , 3732 , 3731 , 3730 , 3729 , 3728 , 3727 , 3726 , 3725 , 3724 , 3723 , 3722 , 3721 , 3720 , 3719 , 3718 , 3717 , 3716 , 3715 , 3714 , 3713 , 3712 , 3711 , 3710 , 3709 , 3708 , 3707 , 3706 , 3705 , 3704 , 3703 , 3702 , 3701 , 3700 , 3699 , 3698 , 3697 , 3696 , 3695 , 3694 , 3693 , 3692 , 3691 , 3690 , 3689 , 3688 , 3687 , 3686 , 3685 , 3684 , 3683 , 3682 , 3681 , 3680 , 3679 , 3678 , 3677 , 3676 , 3675 , 3674 , 3673 , 3672 , 3671 , 3670 , 3669 , 3668 , 3667 , 3666 , 3665 , 3664 , 3663 , 3662 , 3661 , 3660 , 3659 , 3658 , 3657 , 3656 , 3655 , 3654 , 3653 , 3652 , 3651 , 3650 , 3649 , 3648 , 3647 , 3646 , 3645 , 3644 , 3643 , 3642 , 3641 , 3640 , 3639 , 3638 , 3637 , 3636 , 3635 , 3634 , 3633 , 3632 , 3631 , 3630 , 3629 , 3628 , 3627 , 3626 , 3625 , 3624 , 3623 , 3622 , 3621 , 3620 , 3619 , 3618 , 3617 , 3616 , 3615 , 3614 , 3613 , 3612 , 3611 , 3610 , 3609 , 3608 , 3607 , 3606 , 3605 , 3604 , 3603 , 3602 , 3601 , 3600 , 3599 , 3598 , 3597 , 3596 , 3595 , 3594 , 3593 , 3592 , 3591 , 3590 , 3589 , 3588 , 3587 , 3586 , 3585 , 3584 , 3583 , 3582 , 3581 , 3580 , 3579 , 3578 , 3577 , 3576 , 3575 , 3574 , 3573 , 3572 , 3571 , 3570 , 3569 , 3568 , 3567 , 3566 , 3565 , 3564 , 3563 , 3562 , 3561 , 3560 , 3559 , 3558 , 3557 , 3556 , 3555 , 3554 , 3553 , 3552 , 3551 , 3550 , 3549 , 3548 , 3547 , 3546 , 3545 , 3544 , 3543 , 3542 , 3541 , 3540 , 3539 , 3538 , 3537 , 3536 , 3535 , 3534 , 3533 , 3532 , 3531 , 3530 , 3529 , 3528 , 3527 , 3526 , 3525 , 3524 , 3523 , 3522 , 3521 , 3520 , 3519 , 3518 , 3517 , 3516 , 3515 , 3514 , 3513 , 3512 , 3511 , 3510 , 3509 , 3508 , 3507 , 3506 , 3505 , 3504 , 3503 , 3502 , 3501 , 3500 , 3499 , 3498 , 3497 , 3496 , 3495 , 3494 , 3493 , 3492 , 3491 , 3490 , 3489 , 3488 , 3487 , 3486 , 3485 , 3484 , 3483 , 3482 , 3481 , 3480 , 3479 , 3478 , 3477 , 3476 , 3475 , 3474 , 3473 , 3472 , 3471 , 3470 , 3469 , 3468 , 3467 , 3466 , 3465 , 3464 , 3463 , 3462 , 3461 , 3460 , 3459 , 3458 , 3457 , 3456 , 3455 , 3454 , 3453 , 3452 , 3451 , 3450 , 3449 , 3448 , 3447 , 3446 , 3445 , 3444 , 3443 , 3442 , 3441 , 3440 , 3439 , 3438 , 3437 , 3436 , 3435 , 3434 , 3433 , 3432 , 3431 , 3430 , 3429 , 3428 , 3427 , 3426 , 3425 , 3424 , 3423 , 3422 , 3421 , 3420 , 3419 , 3418 , 3417 , 3416 , 3415 , 3414 , 3413 , 3412 , 3411 , 3410 , 3409 , 3408 , 3407 , 3406 , 3405 , 3404 , 3403 , 3402 , 3401 , 3400 , 3399 , 3398 , 3397 , 3396 , 3395 , 3394 , 3393 , 3392 , 3391 , 3390 , 3389 , 3388 , 3387 , 3386 , 3385 , 3384 , 3383 , 3382 , 3381 , 3380 , 3379 , 3378 , 3377 , 3376 , 3375 , 3374 , 3373 , 3372 , 3371 , 3370 , 3369 , 3368 , 3367 , 3366 , 3365 , 3364 , 3363 , 3362 , 3361 , 3360 , 3359 , 3358 , 3357 , 3356 , 3355 , 3354 , 3353 , 3352 , 3351 , 3350 , 3349 , 3348 , 3347 , 3346 , 3345 , 3344 , 3343 , 3342 , 3341 , 3340 , 3339 , 3338 , 3337 , 3336 , 3335 , 3334 , 3333 , 3332 , 3331 , 3330 , 3329 , 3328 , 3327 , 3326 , 3325 , 3324 , 3323 , 3322 , 3321 , 3320 , 3319 , 3318 , 3317 , 3316 , 3315 , 3314 , 3313 , 3312 , 3311 , 3310 , 3309 , 3308 , 3307 , 3306 , 3305 , 3304 , 3303 , 3302 , 3301 , 3300 , 3299 , 3298 , 3297 , 3296 , 3295 , 3294 , 3293 , 3292 , 3291 , 3290 , 3289 , 3288 , 3287 , 3286 , 3285 , 3284 , 3283 , 3282 , 3281 , 3280 , 3279 , 3278 , 3277 , 3276 , 3275 , 3274 , 3273 , 3272 , 3271 , 3270 , 3269 , 3268 , 3267 , 3266 , 3265 , 3264 , 3263 , 3262 , 3261 , 3260 , 3259 , 3258 , 3257 , 3256 , 3255 , 3254 , 3253 , 3252 , 3251 , 3250 , 3249 , 3248 , 3247 , 3246 , 3245 , 3244 , 3243 , 3242 , 3241 , 3240 , 3239 , 3238 , 3237 , 3236 , 3235 , 3234 , 3233 , 3232 , 3231 , 3230 , 3229 , 3228 , 3227 , 3226 , 3225 , 3224 , 3223 , 3222 , 3221 , 3220 , 3219 , 3218 , 3217 , 3216 , 3215 , 3214 , 3213 , 3212 , 3211 , 3210 , 3209 , 3208 , 3207 , 3206 , 3205 , 3204 , 3203 , 3202 , 3201 , 3200 , 3199 , 3198 , 3197 , 3196 , 3195 , 3194 , 3193 , 3192 , 3191 , 3190 , 3189 , 3188 , 3187 , 3186 , 3185 , 3184 , 3183 , 3182 , 3181 , 3180 , 3179 , 3178 , 3177 , 3176 , 3175 , 3174 , 3173 , 3172 , 3171 , 3170 , 3169 , 3168 , 3167 , 3166 , 3165 , 3164 , 3163 , 3162 , 3161 , 3160 , 3159 , 3158 , 3157 , 3156 , 3155 , 3154 , 3153 , 3152 , 3151 , 3150 , 3149 , 3148 , 3147 , 3146 , 3145 , 3144 , 3143 , 3142 , 3141 , 3140 , 3139 , 3138 , 3137 , 3136 , 3135 , 3134 , 3133 , 3132 , 3131 , 3130 , 3129 , 3128 , 3127 , 3126 , 3125 , 3124 , 3123 , 3122 , 3121 , 3120 , 3119 , 3118 , 3117 , 3116 , 3115 , 3114 , 3113 , 3112 , 3111 , 3110 , 3109 , 3108 , 3107 , 3106 , 3105 , 3104 , 3103 , 3102 , 3101 , 3100 , 3099 , 3098 , 3097 , 3096 , 3095 , 3094 , 3093 , 3092 , 3091 , 3090 , 3089 , 3088 , 3087 , 3086 , 3085 , 3084 , 3083 , 3082 , 3081 , 3080 , 3079 , 3078 , 3077 , 3076 , 3075 , 3074 , 3073 , 3072 , 3071 , 3070 , 3069 , 3068 , 3067 , 3066 , 3065 , 3064 , 3063 , 3062 , 3061 , 3060 , 3059 , 3058 , 3057 , 3056 , 3055 , 3054 , 3053 , 3052 , 3051 , 3050 , 3049 , 3048 , 3047 , 3046 , 3045 , 3044 , 3043 , 3042 , 3041 , 3040 , 3039 , 3038 , 3037 , 3036 , 3035 , 3034 , 3033 , 3032 , 3031 , 3030 , 3029 , 3028 , 3027 , 3026 , 3025 , 3024 , 3023 , 3022 , 3021 , 3020 , 3019 , 3018 , 3017 , 3016 , 3015 , 3014 , 3013 , 3012 , 3011 , 3010 , 3009 , 3008 , 3007 , 3006 , 3005 , 3004 , 3003 , 3002 , 3001 , 3000 , 2999 , 2998 , 2997 , 2996 , 2995 , 2994 , 2993 , 2992 , 2991 , 2990 , 2989 , 2988 , 2987 , 2986 , 2985 , 2984 , 2983 , 2982 , 2981 , 2980 , 2979 , 2978 , 2977 , 2976 , 2975 , 2974 , 2973 , 2972 , 2971 , 2970 , 2969 , 2968 , 2967 , 2966 , 2965 , 2964 , 2963 , 2962 , 2961 , 2960 , 2959 , 2958 , 2957 , 2956 , 2955 , 2954 , 2953 , 2952 , 2951 , 2950 , 2949 , 2948 , 2947 , 2946 , 2945 , 2944 , 2943 , 2942 , 2941 , 2940 , 2939 , 2938 , 2937 , 2936 , 2935 , 2934 , 2933 , 2932 , 2931 , 2930 , 2929 , 2928 , 2927 , 2926 , 2925 , 2924 , 2923 , 2922 , 2921 , 2920 , 2919 , 2918 , 2917 , 2916 , 2915 , 2914 , 2913 , 2912 , 2911 , 2910 , 2909 , 2908 , 2907 , 2906 , 2905 , 2904 , 2903 , 2902 , 2901 , 2900 , 2899 , 2898 , 2897 , 2896 , 2895 , 2894 , 2893 , 2892 , 2891 , 2890 , 2889 , 2888 , 2887 , 2886 , 2885 , 2884 , 2883 , 2882 , 2881 , 2880 , 2879 , 2878 , 2877 , 2876 , 2875 , 2874 , 2873 , 2872 , 2871 , 2870 , 2869 , 2868 , 2867 , 2866 , 2865 , 2864 , 2863 , 2862 , 2861 , 2860 , 2859 , 2858 , 2857 , 2856 , 2855 , 2854 , 2853 , 2852 , 2851 , 2850 , 2849 , 2848 , 2847 , 2846 , 2845 , 2844 , 2843 , 2842 , 2841 , 2840 , 2839 , 2838 , 2837 , 2836 , 2835 , 2834 , 2833 , 2832 , 2831 , 2830 , 2829 , 2828 , 2827 , 2826 , 2825 , 2824 , 2823 , 2822 , 2821 , 2820 , 2819 , 2818 , 2817 , 2816 , 2815 , 2814 , 2813 , 2812 , 2811 , 2810 , 2809 , 2808 , 2807 , 2806 , 2805 , 2804 , 2803 , 2802 , 2801 , 2800 , 2799 , 2798 , 2797 , 2796 , 2795 , 2794 , 2793 , 2792 , 2791 , 2790 , 2789 , 2788 , 2787 , 2786 , 2785 , 2784 , 2783 , 2782 , 2781 , 2780 , 2779 , 2778 , 2777 , 2776 , 2775 , 2774 , 2773 , 2772 , 2771 , 2770 , 2769 , 2768 , 2767 , 2766 , 2765 , 2764 , 2763 , 2762 , 2761 , 2760 , 2759 , 2758 , 2757 , 2756 , 2755 , 2754 , 2753 , 2752 , 2751 , 2750 , 2749 , 2748 , 2747 , 2746 , 2745 , 2744 , 2743 , 2742 , 2741 , 2740 , 2739 , 2738 , 2737 , 2736 , 2735 , 2734 , 2733 , 2732 , 2731 , 2730 , 2729 , 2728 , 2727 , 2726 , 2725 , 2724 , 2723 , 2722 , 2721 , 2720 , 2719 , 2718 , 2717 , 2716 , 2715 , 2714 , 2713 , 2712 , 2711 , 2710 , 2709 , 2708 , 2707 , 2706 , 2705 , 2704 , 2703 , 2702 , 2701 , 2700 , 2699 , 2698 , 2697 , 2696 , 2695 , 2694 , 2693 , 2692 , 2691 , 2690 , 2689 , 2688 , 2687 , 2686 , 2685 , 2684 , 2683 , 2682 , 2681 , 2680 , 2679 , 2678 , 2677 , 2676 , 2675 , 2674 , 2673 , 2672 , 2671 , 2670 , 2669 , 2668 , 2667 , 2666 , 2665 , 2664 , 2663 , 2662 , 2661 , 2660 , 2659 , 2658 , 2657 , 2656 , 2655 , 2654 , 2653 , 2652 , 2651 , 2650 , 2649 , 2648 , 2647 , 2646 , 2645 , 2644 , 2643 , 2642 , 2641 , 2640 , 2639 , 2638 , 2637 , 2636 , 2635 , 2634 , 2633 , 2632 , 2631 , 2630 , 2629 , 2628 , 2627 , 2626 , 2625 , 2624 , 2623 , 2622 , 2621 , 2620 , 2619 , 2618 , 2617 , 2616 , 2615 , 2614 , 2613 , 2612 , 2611 , 2610 , 2609 , 2608 , 2607 , 2606 , 2605 , 2604 , 2603 , 2602 , 2601 , 2600 , 2599 , 2598 , 2597 , 2596 , 2595 , 2594 , 2593 , 2592 , 2591 , 2590 , 2589 , 2588 , 2587 , 2586 , 2585 , 2584 , 2583 , 2582 , 2581 , 2580 , 2579 , 2578 , 2577 , 2576 , 2575 , 2574 , 2573 , 2572 , 2571 , 2570 , 2569 , 2568 , 2567 , 2566 , 2565 , 2564 , 2563 , 2562 , 2561 , 2560 , 2559 , 2558 , 2557 , 2556 , 2555 , 2554 , 2553 , 2552 , 2551 , 2550 , 2549 , 2548 , 2547 , 2546 , 2545 , 2544 , 2543 , 2542 , 2541 , 2540 , 2539 , 2538 , 2537 , 2536 , 2535 , 2534 , 2533 , 2532 , 2531 , 2530 , 2529 , 2528 , 2527 , 2526 , 2525 , 2524 , 2523 , 2522 , 2521 , 2520 , 2519 , 2518 , 2517 , 2516 , 2515 , 2514 , 2513 , 2512 , 2511 , 2510 , 2509 , 2508 , 2507 , 2506 , 2505 , 2504 , 2503 , 2502 , 2501 , 2500 , 2499 , 2498 , 2497 , 2496 , 2495 , 2494 , 2493 , 2492 , 2491 , 2490 , 2489 , 2488 , 2487 , 2486 , 2485 , 2484 , 2483 , 2482 , 2481 , 2480 , 2479 , 2478 , 2477 , 2476 , 2475 , 2474 , 2473 , 2472 , 2471 , 2470 , 2469 , 2468 , 2467 , 2466 , 2465 , 2464 , 2463 , 2462 , 2461 , 2460 , 2459 , 2458 , 2457 , 2456 , 2455 , 2454 , 2453 , 2452 , 2451 , 2450 , 2449 , 2448 , 2447 , 2446 , 2445 , 2444 , 2443 , 2442 , 2441 , 2440 , 2439 , 2438 , 2437 , 2436 , 2435 , 2434 , 2433 , 2432 , 2431 , 2430 , 2429 , 2428 , 2427 , 2426 , 2425 , 2424 , 2423 , 2422 , 2421 , 2420 , 2419 , 2418 , 2417 , 2416 , 2415 , 2414 , 2413 , 2412 , 2411 , 2410 , 2409 , 2408 , 2407 , 2406 , 2405 , 2404 , 2403 , 2402 , 2401 , 2400 , 2399 , 2398 , 2397 , 2396 , 2395 , 2394 , 2393 , 2392 , 2391 , 2390 , 2389 , 2388 , 2387 , 2386 , 2385 , 2384 , 2383 , 2382 , 2381 , 2380 , 2379 , 2378 , 2377 , 2376 , 2375 , 2374 , 2373 , 2372 , 2371 , 2370 , 2369 , 2368 , 2367 , 2366 , 2365 , 2364 , 2363 , 2362 , 2361 , 2360 , 2359 , 2358 , 2357 , 2356 , 2355 , 2354 , 2353 , 2352 , 2351 , 2350 , 2349 , 2348 , 2347 , 2346 , 2345 , 2344 , 2343 , 2342 , 2341 , 2340 , 2339 , 2338 , 2337 , 2336 , 2335 , 2334 , 2333 , 2332 , 2331 , 2330 , 2329 , 2328 , 2327 , 2326 , 2325 , 2324 , 2323 , 2322 , 2321 , 2320 , 2319 , 2318 , 2317 , 2316 , 2315 , 2314 , 2313 , 2312 , 2311 , 2310 , 2309 , 2308 , 2307 , 2306 , 2305 , 2304 , 2303 , 2302 , 2301 , 2300 , 2299 , 2298 , 2297 , 2296 , 2295 , 2294 , 2293 , 2292 , 2291 , 2290 , 2289 , 2288 , 2287 , 2286 , 2285 , 2284 , 2283 , 2282 , 2281 , 2280 , 2279 , 2278 , 2277 , 2276 , 2275 , 2274 , 2273 , 2272 , 2271 , 2270 , 2269 , 2268 , 2267 , 2266 , 2265 , 2264 , 2263 , 2262 , 2261 , 2260 , 2259 , 2258 , 2257 , 2256 , 2255 , 2254 , 2253 , 2252 , 2251 , 2250 , 2249 , 2248 , 2247 , 2246 , 2245 , 2244 , 2243 , 2242 , 2241 , 2240 , 2239 , 2238 , 2237 , 2236 , 2235 , 2234 , 2233 , 2232 , 2231 , 2230 , 2229 , 2228 , 2227 , 2226 , 2225 , 2224 , 2223 , 2222 , 2221 , 2220 , 2219 , 2218 , 2217 , 2216 , 2215 , 2214 , 2213 , 2212 , 2211 , 2210 , 2209 , 2208 , 2207 , 2206 , 2205 , 2204 , 2203 , 2202 , 2201 , 2200 , 2199 , 2198 , 2197 , 2196 , 2195 , 2194 , 2193 , 2192 , 2191 , 2190 , 2189 , 2188 , 2187 , 2186 , 2185 , 2184 , 2183 , 2182 , 2181 , 2180 , 2179 , 2178 , 2177 , 2176 , 2175 , 2174 , 2173 , 2172 , 2171 , 2170 , 2169 , 2168 , 2167 , 2166 , 2165 , 2164 , 2163 , 2162 , 2161 , 2160 , 2159 , 2158 , 2157 , 2156 , 2155 , 2154 , 2153 , 2152 , 2151 , 2150 , 2149 , 2148 , 2147 , 2146 , 2145 , 2144 , 2143 , 2142 , 2141 , 2140 , 2139 , 2138 , 2137 , 2136 , 2135 , 2134 , 2133 , 2132 , 2131 , 2130 , 2129 , 2128 , 2127 , 2126 , 2125 , 2124 , 2123 , 2122 , 2121 , 2120 , 2119 , 2118 , 2117 , 2116 , 2115 , 2114 , 2113 , 2112 , 2111 , 2110 , 2109 , 2108 , 2107 , 2106 , 2105 , 2104 , 2103 , 2102 , 2101 , 2100 , 2099 , 2098 , 2097 , 2096 , 2095 , 2094 , 2093 , 2092 , 2091 , 2090 , 2089 , 2088 , 2087 , 2086 , 2085 , 2084 , 2083 , 2082 , 2081 , 2080 , 2079 , 2078 , 2077 , 2076 , 2075 , 2074 , 2073 , 2072 , 2071 , 2070 , 2069 , 2068 , 2067 , 2066 , 2065 , 2064 , 2063 , 2062 , 2061 , 2060 , 2059 , 2058 , 2057 , 2056 , 2055 , 2054 , 2053 , 2052 , 2051 , 2050 , 2049 , 2048 , 2047 , 2046 , 2045 , 2044 , 2043 , 2042 , 2041 , 2040 , 2039 , 2038 , 2037 , 2036 , 2035 , 2034 , 2033 , 2032 , 2031 , 2030 , 2029 , 2028 , 2027 , 2026 , 2025 , 2024 , 2023 , 2022 , 2021 , 2020 , 2019 , 2018 , 2017 , 2016 , 2015 , 2014 , 2013 , 2012 , 2011 , 2010 , 2009 , 2008 , 2007 , 2006 , 2005 , 2004 , 2003 , 2002 , 2001 , 2000 , 1999 , 1998 , 1997 , 1996 , 1995 , 1994 , 1993 , 1992 , 1991 , 1990 , 1989 , 1988 , 1987 , 1986 , 1985 , 1984 , 1983 , 1982 , 1981 , 1980 , 1979 , 1978 , 1977 , 1976 , 1975 , 1974 , 1973 , 1972 , 1971 , 1970 , 1969 , 1968 , 1967 , 1966 , 1965 , 1964 , 1963 , 1962 , 1961 , 1960 , 1959 , 1958 , 1957 , 1956 , 1955 , 1954 , 1953 , 1952 , 1951 , 1950 , 1949 , 1948 , 1947 , 1946 , 1945 , 1944 , 1943 , 1942 , 1941 , 1940 , 1939 , 1938 , 1937 , 1936 , 1935 , 1934 , 1933 , 1932 , 1931 , 1930 , 1929 , 1928 , 1927 , 1926 , 1925 , 1924 , 1923 , 1922 , 1921 , 1920 , 1919 , 1918 , 1917 , 1916 , 1915 , 1914 , 1913 , 1912 , 1911 , 1910 , 1909 , 1908 , 1907 , 1906 , 1905 , 1904 , 1903 , 1902 , 1901 , 1900 , 1899 , 1898 , 1897 , 1896 , 1895 , 1894 , 1893 , 1892 , 1891 , 1890 , 1889 , 1888 , 1887 , 1886 , 1885 , 1884 , 1883 , 1882 , 1881 , 1880 , 1879 , 1878 , 1877 , 1876 , 1875 , 1874 , 1873 , 1872 , 1871 , 1870 , 1869 , 1868 , 1867 , 1866 , 1865 , 1864 , 1863 , 1862 , 1861 , 1860 , 1859 , 1858 , 1857 , 1856 , 1855 , 1854 , 1853 , 1852 , 1851 , 1850 , 1849 , 1848 , 1847 , 1846 , 1845 , 1844 , 1843 , 1842 , 1841 , 1840 , 1839 , 1838 , 1837 , 1836 , 1835 , 1834 , 1833 , 1832 , 1831 , 1830 , 1829 , 1828 , 1827 , 1826 , 1825 , 1824 , 1823 , 1822 , 1821 , 1820 , 1819 , 1818 , 1817 , 1816 , 1815 , 1814 , 1813 , 1812 , 1811 , 1810 , 1809 , 1808 , 1807 , 1806 , 1805 , 1804 , 1803 , 1802 , 1801 , 1800 , 1799 , 1798 , 1797 , 1796 , 1795 , 1794 , 1793 , 1792 , 1791 , 1790 , 1789 , 1788 , 1787 , 1786 , 1785 , 1784 , 1783 , 1782 , 1781 , 1780 , 1779 , 1778 , 1777 , 1776 , 1775 , 1774 , 1773 , 1772 , 1771 , 1770 , 1769 , 1768 , 1767 , 1766 , 1765 , 1764 , 1763 , 1762 , 1761 , 1760 , 1759 , 1758 , 1757 , 1756 , 1755 , 1754 , 1753 , 1752 , 1751 , 1750 , 1749 , 1748 , 1747 , 1746 , 1745 , 1744 , 1743 , 1742 , 1741 , 1740 , 1739 , 1738 , 1737 , 1736 , 1735 , 1734 , 1733 , 1732 , 1731 , 1730 , 1729 , 1728 , 1727 , 1726 , 1725 , 1724 , 1723 , 1722 , 1721 , 1720 , 1719 , 1718 , 1717 , 1716 , 1715 , 1714 , 1713 , 1712 , 1711 , 1710 , 1709 , 1708 , 1707 , 1706 , 1705 , 1704 , 1703 , 1702 , 1701 , 1700 , 1699 , 1698 , 1697 , 1696 , 1695 , 1694 , 1693 , 1692 , 1691 , 1690 , 1689 , 1688 , 1687 , 1686 , 1685 , 1684 , 1683 , 1682 , 1681 , 1680 , 1679 , 1678 , 1677 , 1676 , 1675 , 1674 , 1673 , 1672 , 1671 , 1670 , 1669 , 1668 , 1667 , 1666 , 1665 , 1664 , 1663 , 1662 , 1661 , 1660 , 1659 , 1658 , 1657 , 1656 , 1655 , 1654 , 1653 , 1652 , 1651 , 1650 , 1649 , 1648 , 1647 , 1646 , 1645 , 1644 , 1643 , 1642 , 1641 , 1640 , 1639 , 1638 , 1637 , 1636 , 1635 , 1634 , 1633 , 1632 , 1631 , 1630 , 1629 , 1628 , 1627 , 1626 , 1625 , 1624 , 1623 , 1622 , 1621 , 1620 , 1619 , 1618 , 1617 , 1616 , 1615 , 1614 , 1613 , 1612 , 1611 , 1610 , 1609 , 1608 , 1607 , 1606 , 1605 , 1604 , 1603 , 1602 , 1601 , 1600 , 1599 , 1598 , 1597 , 1596 , 1595 , 1594 , 1593 , 1592 , 1591 , 1590 , 1589 , 1588 , 1587 , 1586 , 1585 , 1584 , 1583 , 1582 , 1581 , 1580 , 1579 , 1578 , 1577 , 1576 , 1575 , 1574 , 1573 , 1572 , 1571 , 1570 , 1569 , 1568 , 1567 , 1566 , 1565 , 1564 , 1563 , 1562 , 1561 , 1560 , 1559 , 1558 , 1557 , 1556 , 1555 , 1554 , 1553 , 1552 , 1551 , 1550 , 1549 , 1548 , 1547 , 1546 , 1545 , 1544 , 1543 , 1542 , 1541 , 1540 , 1539 , 1538 , 1537 , 1536 , 1535 , 1534 , 1533 , 1532 , 1531 , 1530 , 1529 , 1528 , 1527 , 1526 , 1525 , 1524 , 1523 , 1522 , 1521 , 1520 , 1519 , 1518 , 1517 , 1516 , 1515 , 1514 , 1513 , 1512 , 1511 , 1510 , 1509 , 1508 , 1507 , 1506 , 1505 , 1504 , 1503 , 1502 , 1501 , 1500 , 1499 , 1498 , 1497 , 1496 , 1495 , 1494 , 1493 , 1492 , 1491 , 1490 , 1489 , 1488 , 1487 , 1486 , 1485 , 1484 , 1483 , 1482 , 1481 , 1480 , 1479 , 1478 , 1477 , 1476 , 1475 , 1474 , 1473 , 1472 , 1471 , 1470 , 1469 , 1468 , 1467 , 1466 , 1465 , 1464 , 1463 , 1462 , 1461 , 1460 , 1459 , 1458 , 1457 , 1456 , 1455 , 1454 , 1453 , 1452 , 1451 , 1450 , 1449 , 1448 , 1447 , 1446 , 1445 , 1444 , 1443 , 1442 , 1441 , 1440 , 1439 , 1438 , 1437 , 1436 , 1435 , 1434 , 1433 , 1432 , 1431 , 1430 , 1429 , 1428 , 1427 , 1426 , 1425 , 1424 , 1423 , 1422 , 1421 , 1420 , 1419 , 1418 , 1417 , 1416 , 1415 , 1414 , 1413 , 1412 , 1411 , 1410 , 1409 , 1408 , 1407 , 1406 , 1405 , 1404 , 1403 , 1402 , 1401 , 1400 , 1399 , 1398 , 1397 , 1396 , 1395 , 1394 , 1393 , 1392 , 1391 , 1390 , 1389 , 1388 , 1387 , 1386 , 1385 , 1384 , 1383 , 1382 , 1381 , 1380 , 1379 , 1378 , 1377 , 1376 , 1375 , 1374 , 1373 , 1372 , 1371 , 1370 , 1369 , 1368 , 1367 , 1366 , 1365 , 1364 , 1363 , 1362 , 1361 , 1360 , 1359 , 1358 , 1357 , 1356 , 1355 , 1354 , 1353 , 1352 , 1351 , 1350 , 1349 , 1348 , 1347 , 1346 , 1345 , 1344 , 1343 , 1342 , 1341 , 1340 , 1339 , 1338 , 1337 , 1336 , 1335 , 1334 , 1333 , 1332 , 1331 , 1330 , 1329 , 1328 , 1327 , 1326 , 1325 , 1324 , 1323 , 1322 , 1321 , 1320 , 1319 , 1318 , 1317 , 1316 , 1315 , 1314 , 1313 , 1312 , 1311 , 1310 , 1309 , 1308 , 1307 , 1306 , 1305 , 1304 , 1303 , 1302 , 1301 , 1300 , 1299 , 1298 , 1297 , 1296 , 1295 , 1294 , 1293 , 1292 , 1291 , 1290 , 1289 , 1288 , 1287 , 1286 , 1285 , 1284 , 1283 , 1282 , 1281 , 1280 , 1279 , 1278 , 1277 , 1276 , 1275 , 1274 , 1273 , 1272 , 1271 , 1270 , 1269 , 1268 , 1267 , 1266 , 1265 , 1264 , 1263 , 1262 , 1261 , 1260 , 1259 , 1258 , 1257 , 1256 , 1255 , 1254 , 1253 , 1252 , 1251 , 1250 , 1249 , 1248 , 1247 , 1246 , 1245 , 1244 , 1243 , 1242 , 1241 , 1240 , 1239 , 1238 , 1237 , 1236 , 1235 , 1234 , 1233 , 1232 , 1231 , 1230 , 1229 , 1228 , 1227 , 1226 , 1225 , 1224 , 1223 , 1222 , 1221 , 1220 , 1219 , 1218 , 1217 , 1216 , 1215 , 1214 , 1213 , 1212 , 1211 , 1210 , 1209 , 1208 , 1207 , 1206 , 1205 , 1204 , 1203 , 1202 , 1201 , 1200 , 1199 , 1198 , 1197 , 1196 , 1195 , 1194 , 1193 , 1192 , 1191 , 1190 , 1189 , 1188 , 1187 , 1186 , 1185 , 1184 , 1183 , 1182 , 1181 , 1180 , 1179 , 1178 , 1177 , 1176 , 1175 , 1174 , 1173 , 1172 , 1171 , 1170 , 1169 , 1168 , 1167 , 1166 , 1165 , 1164 , 1163 , 1162 , 1161 , 1160 , 1159 , 1158 , 1157 , 1156 , 1155 , 1154 , 1153 , 1152 , 1151 , 1150 , 1149 , 1148 , 1147 , 1146 , 1145 , 1144 , 1143 , 1142 , 1141 , 1140 , 1139 , 1138 , 1137 , 1136 , 1135 , 1134 , 1133 , 1132 , 1131 , 1130 , 1129 , 1128 , 1127 , 1126 , 1125 , 1124 , 1123 , 1122 , 1121 , 1120 , 1119 , 1118 , 1117 , 1116 , 1115 , 1114 , 1113 , 1112 , 1111 , 1110 , 1109 , 1108 , 1107 , 1106 , 1105 , 1104 , 1103 , 1102 , 1101 , 1100 , 1099 , 1098 , 1097 , 1096 , 1095 , 1094 , 1093 , 1092 , 1091 , 1090 , 1089 , 1088 , 1087 , 1086 , 1085 , 1084 , 1083 , 1082 , 1081 , 1080 , 1079 , 1078 , 1077 , 1076 , 1075 , 1074 , 1073 , 1072 , 1071 , 1070 , 1069 , 1068 , 1067 , 1066 , 1065 , 1064 , 1063 , 1062 , 1061 , 1060 , 1059 , 1058 , 1057 , 1056 , 1055 , 1054 , 1053 , 1052 , 1051 , 1050 , 1049 , 1048 , 1047 , 1046 , 1045 , 1044 , 1043 , 1042 , 1041 , 1040 , 1039 , 1038 , 1037 , 1036 , 1035 , 1034 , 1033 , 1032 , 1031 , 1030 , 1029 , 1028 , 1027 , 1026 , 1025 , 1024 , 1023 , 1022 , 1021 , 1020 , 1019 , 1018 , 1017 , 1016 , 1015 , 1014 , 1013 , 1012 , 1011 , 1010 , 1009 , 1008 , 1007 , 1006 , 1005 , 1004 , 1003 , 1002 , 1001 , 1000 , 999 , 998 , 997 , 996 , 995 , 994 , 993 , 992 , 991 , 990 , 989 , 988 , 987 , 986 , 985 , 984 , 983 , 982 , 981 , 980 , 979 , 978 , 977 , 976 , 975 , 974 , 973 , 972 , 971 , 970 , 969 , 968 , 967 , 966 , 965 , 964 , 963 , 962 , 961 , 960 , 959 , 958 , 957 , 956 , 955 , 954 , 953 , 952 , 951 , 950 , 949 , 948 , 947 , 946 , 945 , 944 , 943 , 942 , 941 , 940 , 939 , 938 , 937 , 936 , 935 , 934 , 933 , 932 , 931 , 930 , 929 , 928 , 927 , 926 , 925 , 924 , 923 , 922 , 921 , 920 , 919 , 918 , 917 , 916 , 915 , 914 , 913 , 912 , 911 , 910 , 909 , 908 , 907 , 906 , 905 , 904 , 903 , 902 , 901 , 900 , 899 , 898 , 897 , 896 , 895 , 894 , 893 , 892 , 891 , 890 , 889 , 888 , 887 , 886 , 885 , 884 , 883 , 882 , 881 , 880 , 879 , 878 , 877 , 876 , 875 , 874 , 873 , 872 , 871 , 870 , 869 , 868 , 867 , 866 , 865 , 864 , 863 , 862 , 861 , 860 , 859 , 858 , 857 , 856 , 855 , 854 , 853 , 852 , 851 , 850 , 849 , 848 , 847 , 846 , 845 , 844 , 843 , 842 , 841 , 840 , 839 , 838 , 837 , 836 , 835 , 834 , 833 , 832 , 831 , 830 , 829 , 828 , 827 , 826 , 825 , 824 , 823 , 822 , 821 , 820 , 819 , 818 , 817 , 816 , 815 , 814 , 813 , 812 , 811 , 810 , 809 , 808 , 807 , 806 , 805 , 804 , 803 , 802 , 801 , 800 , 799 , 798 , 797 , 796 , 795 , 794 , 793 , 792 , 791 , 790 , 789 , 788 , 787 , 786 , 785 , 784 , 783 , 782 , 781 , 780 , 779 , 778 , 777 , 776 , 775 , 774 , 773 , 772 , 771 , 770 , 769 , 768 , 767 , 766 , 765 , 764 , 763 , 762 , 761 , 760 , 759 , 758 , 757 , 756 , 755 , 754 , 753 , 752 , 751 , 750 , 749 , 748 , 747 , 746 , 745 , 744 , 743 , 742 , 741 , 740 , 739 , 738 , 737 , 736 , 735 , 734 , 733 , 732 , 731 , 730 , 729 , 728 , 727 , 726 , 725 , 724 , 723 , 722 , 721 , 720 , 719 , 718 , 717 , 716 , 715 , 714 , 713 , 712 , 711 , 710 , 709 , 708 , 707 , 706 , 705 , 704 , 703 , 702 , 701 , 700 , 699 , 698 , 697 , 696 , 695 , 694 , 693 , 692 , 691 , 690 , 689 , 688 , 687 , 686 , 685 , 684 , 683 , 682 , 681 , 680 , 679 , 678 , 677 , 676 , 675 , 674 , 673 , 672 , 671 , 670 , 669 , 668 , 667 , 666 , 665 , 664 , 663 , 662 , 661 , 660 , 659 , 658 , 657 , 656 , 655 , 654 , 653 , 652 , 651 , 650 , 649 , 648 , 647 , 646 , 645 , 644 , 643 , 642 , 641 , 640 , 639 , 638 , 637 , 636 , 635 , 634 , 633 , 632 , 631 , 630 , 629 , 628 , 627 , 626 , 625 , 624 , 623 , 622 , 621 , 620 , 619 , 618 , 617 , 616 , 615 , 614 , 613 , 612 , 611 , 610 , 609 , 608 , 607 , 606 , 605 , 604 , 603 , 602 , 601 , 600 , 599 , 598 , 597 , 596 , 595 , 594 , 593 , 592 , 591 , 590 , 589 , 588 , 587 , 586 , 585 , 584 , 583 , 582 , 581 , 580 , 579 , 578 , 577 , 576 , 575 , 574 , 573 , 572 , 571 , 570 , 569 , 568 , 567 , 566 , 565 , 564 , 563 , 562 , 561 , 560 , 559 , 558 , 557 , 556 , 555 , 554 , 553 , 552 , 551 , 550 , 549 , 548 , 547 , 546 , 545 , 544 , 543 , 542 , 541 , 540 , 539 , 541 , 540 , 542 , 539 , 538 , 537 , 536 , 535 , 534 , 533 , 532 , 531 , 530 , 529 , 528 , 527 , 526 , 525 , 524 , 523 , 522 , 521 , 520 , 519 , 518 , 517 , 516 , 515 , 514 , 513 , 512 , 511 , 510 , 509 , 508 , 507 , 506 , 505 , 504 , 503 , 502 , 501 , 500 , 499 , 498 , 497 , 496 , 495 , 494 , 493 , 492 , 491 , 490 , 489 , 488 , 487 , 486 , 485 , 484 , 483 , 482 , 481 , 480 , 479 , 478 , 477 , 476 , 475 , 474 , 473 , 472 , 471 , 470 , 469 , 468 , 467 , 466 , 465 , 464 , 463 , 462 , 461 , 460 , 459 , 458 , 457 , 456 , 455 , 454 , 453 , 452 , 451 , 450 , 449 , 448 , 447 , 446 , 445 , 444 , 443 , 442 , 441 , 440 , 439 , 438 , 437 , 436 , 435 , 434 , 433 , 432 , 431 , 430 , 429 , 428 , 427 , 426 , 425 , 424 , 423 , 422 , 421 , 420 , 419 , 418 , 417 , 416 , 415 , 414 , 413 , 412 , 411 , 410 , 409 , 408 , 407 , 406 , 405 , 404 , 403 , 402 , 401 , 400 , 399 , 398 , 397 , 396 , 395 , 394 , 393 , 392 , 391 , 390 , 389 , 388 , 387 , 386 , 385 , 384 , 383 , 382 , 381 , 380 , 379 , 378 , 377 , 376 , 375 , 374 , 373 , 372 , 371 , 370 , 369 , 368 , 367 , 366 , 365 , 364 , 363 , 362 , 361 , 360 , 359 , 358 , 357 , 356 , 355 , 354 , 353 , 352 , 351 , 350 , 349 , 348 , 347 , 346 , 345 , 344 , 343 , 342 , 341 , 340 , 339 , 338 , 337 , 336 , 335 , 334 , 333 , 332 , 331 , 330 , 329 , 328 , 327 , 326 , 325 , 324 , 323 , 322 , 321 , 320 , 319 , 318 , 317 , 316 , 315 , 314 , 313 , 312 , 311 , 310 , 309 , 308 , 307 , 306 , 305 , 304 , 303 , 302 , 301 , 300 , 299 , 298 , 297 , 296 , 295 , 294 , 293 , 292 , 291 , 290 , 289 , 288 , 287 , 286 , 285 , 284 , 283 , 282 , 281 , 280 , 279 , 278 , 277 , 276 , 275 , 274 , 273 , 272 , 271 , 270 , 269 , 268 , 267 , 266 , 265 , 264 , 263 , 262 , 261 , 260 , 259 , 258 , 257 , 256 , 255 , 254 , 253 , 252 , 251 , 250 , 249 , 248 , 247 , 246 , 245 , 244 , 243 , 242 , 241 , 240 , 239 , 238 , 237 , 236 , 235 , 234 , 233 , 232 , 231 , 230 , 229 , 228 , 227 , 226 , 225 , 224 , 223 , 222 , 221 , 220 , 219 , 218 , 217 , 216 , 215 , 214 , 213 , 212 , 211 , 210 , 209 , 208 , 207 , 206 , 205 , 204 , 203 , 202 , 201 , 200 , 199 , 198 , 197 , 196 , 195 , 194 , 193 , 192 , 191 , 190 , 189 , 188 , 187 , 186 , 185 , 184 , 183 , 182 , 181 , 180 , 179 , 178 , 177 , 176 , 175 , 174 , 173 , 172 , 171 , 170 , 169 , 168 , 167 , 166 , 165 , 164 , 163 , 162 , 161 , 160 , 159 , 158 , 157 , 156 , 155 , 154 , 153 , 152 , 151 , 150 , 149 , 148 , 147 , 146 , 145 , 144 , 143 , 142 , 141 , 140 , 139 , 138 , 137 , 136 , 135 , 134 , 133 , 132 , 131 , 130 , 129 , 128 , 127 , 126 , 125 , 124 , 123 , 122 , 121 , 120 , 119 , 118 , 117 , 116 , 115 , 114 , 113 , 112 , 111 , 110 , 109 , 108 , 107 , 106 , 105 , 104 , 103 , 102 , 101 , 100 , 99 , 98 , 97 , 96 , 95 , 94 , 93 , 92 , 91 , 90 , 89 , 88 , 87 , 86 , 85 , 84 , 83 , 82 , 81 , 80 , 79 , 78 , 77 , 76 , 75 , 74 , 73 , 72 , 71 , 70 , 69 , 68 , 67 , 66 , 65 , 64 , 63 , 62 , 61 , 60 , 59 , 58 , 57 , 56 , 55 , 54 , 53 , 52 , 51 , 50 , 49 , 48 , 47 , 46 , 45 , 44 , 43 , 42 , 41 , 40 , 39 , 38 , 37 , 36 , 35 , 34 , 33 , 32 , 31 , 30 , 29 , 28 , 27 , 26 , 25 , 24 , 23 , 22 , 21 , 20 , 19 , 18 , 17 , 16 , 15 , 14 , 13 , 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] : NEW_LINE INDENT return 3 NEW_LINE DEDENT m1 = 0 NEW_LINE for i in range ( len ( prices ) - 1 ) : NEW_LINE INDENT m = 0 NEW_LINE for j in range ( i + 1 , len ( prices ) ) : NEW_LINE INDENT p = prices [ j ] - prices [ i ] NEW_LINE if p > m : NEW_LINE INDENT m = p NEW_LINE DEDENT DEDENT if m1 < m : NEW_LINE INDENT m1 = m NEW_LINE DEDENT DEDENT return ( m1 ) NEW_LINE DEDENT DEDENT
import numpy as np NEW_LINE class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT max_profit = 0 NEW_LINE min_price = np . inf NEW_LINE for p in prices : NEW_LINE INDENT profit = p - min_price NEW_LINE if p < min_price : NEW_LINE INDENT min_price = p NEW_LINE DEDENT if profit > max_profit : NEW_LINE INDENT max_profit = profit NEW_LINE DEDENT DEDENT return max_profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT dp_arr = [ 0 ] * len ( prices ) NEW_LINE sell = - math . inf NEW_LINE buy = math . inf NEW_LINE profit = 0 NEW_LINE ind = 0 NEW_LINE while ( ind != len ( prices ) ) : NEW_LINE INDENT currPos = ind NEW_LINE if prices [ ind ] < buy : NEW_LINE INDENT buy = prices [ ind ] NEW_LINE DEDENT elif prices [ ind ] > buy : NEW_LINE INDENT while ( currPos != len ( prices ) ) : NEW_LINE INDENT print ( prices [ ind ] , prices [ currPos ] ) NEW_LINE profit = max ( profit , prices [ currPos ] - buy ) NEW_LINE dp_arr [ ind ] = profit NEW_LINE currPos += 1 NEW_LINE DEDENT buy = math . inf NEW_LINE profit = 0 NEW_LINE DEDENT ind += 1 NEW_LINE DEDENT print ( dp_arr ) NEW_LINE return max ( dp_arr ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT buy = 0 NEW_LINE sell = 0 NEW_LINE i = 0 NEW_LINE while i < len ( prices ) - 1 : NEW_LINE INDENT if prices [ i ] < prices [ i + 1 ] : NEW_LINE INDENT buy = prices [ i ] NEW_LINE sell = max ( prices [ i + 1 : ] ) NEW_LINE break NEW_LINE DEDENT i += 1 NEW_LINE DEDENT profit = sell - buy NEW_LINE if i == len ( prices ) - 1 : NEW_LINE INDENT return profit NEW_LINE DEDENT else : NEW_LINE INDENT for j in range ( i , len ( prices ) - 1 ) : NEW_LINE INDENT if prices [ j ] < buy : NEW_LINE INDENT buy = prices [ j ] NEW_LINE sell = max ( prices [ j + 1 : ] ) NEW_LINE profit = max ( profit , sell - buy ) NEW_LINE DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT maxes = [ ] NEW_LINE curMax = 0 NEW_LINE for i in range ( len ( prices ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if prices [ i ] > curMax : NEW_LINE INDENT curMax = prices [ i ] NEW_LINE DEDENT maxes . insert ( 0 , curMax ) NEW_LINE DEDENT curDiff = 0 NEW_LINE for i , val in enumerate ( prices ) : NEW_LINE INDENT diff = maxes [ i ] - val NEW_LINE if diff > curDiff : NEW_LINE INDENT curDiff = diff NEW_LINE DEDENT DEDENT return curDiff NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if not prices : NEW_LINE INDENT return 0 NEW_LINE DEDENT prices_min = [ prices [ 0 ] ] NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT prices_min . append ( prices [ i ] if prices [ i ] < prices_min [ - 1 ] else prices_min [ - 1 ] ) NEW_LINE DEDENT prices_max = [ prices [ len ( prices ) - 1 ] ] NEW_LINE for i in range ( len ( prices ) - 2 , 0 , - 1 ) : NEW_LINE INDENT prices_max . insert ( 0 , prices [ i ] if prices [ i ] > prices_max [ 0 ] else prices_max [ 0 ] ) NEW_LINE DEDENT return max ( 0 , max ( [ i - j for i , j in zip ( prices_max , prices_min ) ] ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT n = len ( prices ) NEW_LINE if n <= 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT i0 = 0 NEW_LINE while i0 <= n - 2 : NEW_LINE INDENT if prices [ i0 + 1 ] >= prices [ i0 ] : NEW_LINE INDENT break NEW_LINE DEDENT i0 += 1 NEW_LINE DEDENT if i0 == n - 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT mp = 0 NEW_LINE ilow = prices . index ( min ( prices [ i0 : ] ) ) NEW_LINE while ilow > i0 : NEW_LINE INDENT p = max ( prices [ ilow : ] ) - prices [ ilow ] NEW_LINE if p > mp : NEW_LINE INDENT mp = p NEW_LINE DEDENT ilow = prices . index ( min ( prices [ i0 : ilow ] ) ) NEW_LINE DEDENT if ilow == i0 : NEW_LINE INDENT p = max ( prices [ ilow : ] ) - prices [ ilow ] NEW_LINE if p > mp : NEW_LINE INDENT mp = p NEW_LINE DEDENT DEDENT return mp NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT import numpy as np NEW_LINE minprice , maxprice = np . inf , 0 NEW_LINE for price in prices : NEW_LINE INDENT minprice = min ( price , minprice ) NEW_LINE maxprice = max ( maxprice , price - minprice ) NEW_LINE DEDENT return maxprice NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if not prices : NEW_LINE INDENT return 0 NEW_LINE DEDENT min_profit = 999 NEW_LINE index = 0 NEW_LINE res = [ ] NEW_LINE for i in range ( len ( prices ) ) : NEW_LINE INDENT if prices [ i ] < min_profit : NEW_LINE INDENT min_profit = prices [ i ] NEW_LINE index = i NEW_LINE max_profit = max ( prices [ index : ] ) NEW_LINE if max_profit > min_profit : NEW_LINE INDENT res . append ( max_profit - min_profit ) NEW_LINE DEDENT DEDENT DEDENT print ( res ) NEW_LINE if res : NEW_LINE INDENT return ( max ( res ) ) NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if not prices : NEW_LINE INDENT return 0 NEW_LINE DEDENT min_profit = 999 NEW_LINE index = 0 NEW_LINE res = [ ] NEW_LINE for i in range ( len ( prices ) ) : NEW_LINE INDENT if prices [ i ] < min_profit : NEW_LINE INDENT min_profit = prices [ i ] NEW_LINE index = i NEW_LINE max_profit = max ( prices [ index : ] ) NEW_LINE if max_profit > min_profit : NEW_LINE INDENT res . append ( max_profit - min_profit ) NEW_LINE DEDENT DEDENT DEDENT if res : NEW_LINE INDENT return ( max ( res ) ) NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT DEDENT
def create_range_min_max_functions ( items ) : NEW_LINE INDENT N = len ( items ) NEW_LINE L = int ( math . log2 ( N ) ) NEW_LINE range_min = [ [ 0 ] * ( L + 1 ) for i in range ( N ) ] NEW_LINE range_max = [ [ 0 ] * ( L + 1 ) for i in range ( N ) ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT range_min [ i ] [ 0 ] = items [ i ] NEW_LINE range_max [ i ] [ 0 ] = items [ i ] NEW_LINE DEDENT for l in range ( 1 , L + 1 ) : NEW_LINE INDENT for i in range ( N - ( 1 << l ) + 1 ) : NEW_LINE INDENT j = i + ( 1 << ( l - 1 ) ) NEW_LINE range_min [ i ] [ l ] = min ( range_min [ i ] [ l - 1 ] , range_min [ j ] [ l - 1 ] ) NEW_LINE range_max [ i ] [ l ] = max ( range_max [ i ] [ l - 1 ] , range_max [ j ] [ l - 1 ] ) NEW_LINE DEDENT DEDENT def get_range_min ( i , j ) : NEW_LINE INDENT size = j - i + 1 NEW_LINE l = int ( math . log2 ( size ) ) NEW_LINE return min ( range_min [ i ] [ l ] , range_min [ j - ( 1 << l ) + 1 ] [ l ] ) NEW_LINE DEDENT def get_range_max ( i , j ) : NEW_LINE INDENT size = j - i + 1 NEW_LINE l = int ( math . log2 ( size ) ) NEW_LINE return max ( range_max [ i ] [ l ] , range_max [ j - ( 1 << l ) + 1 ] [ l ] ) NEW_LINE DEDENT return get_range_min , get_range_max NEW_LINE DEDENT class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if not prices : NEW_LINE INDENT return 0 NEW_LINE DEDENT N = len ( prices ) NEW_LINE get_range_min , get_range_max = create_range_min_max_functions ( prices ) NEW_LINE max_profit = 0 NEW_LINE for i in range ( 0 , N - 1 ) : NEW_LINE INDENT profit = get_range_max ( i + 1 , N - 1 ) - get_range_min ( 0 , i ) NEW_LINE if profit > max_profit : NEW_LINE INDENT max_profit = profit NEW_LINE DEDENT DEDENT return max_profit NEW_LINE DEDENT DEDENT
import numpy as np NEW_LINE class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) < 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT prices = np . array ( prices ) NEW_LINE out = 0 NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT buy = prices [ : i ] . min ( ) NEW_LINE out = max ( out , prices [ i ] - buy ) NEW_LINE DEDENT return out NEW_LINE DEDENT DEDENT
import numpy as np NEW_LINE class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT prices = np . asarray ( prices ) NEW_LINE max_profit = 0 NEW_LINE for i in range ( np . shape ( prices ) [ 0 ] - 1 ) : NEW_LINE INDENT max_profit_temp = np . max ( prices [ i + 1 : ] - prices [ i ] ) NEW_LINE max_profit = np . maximum ( max_profit_temp , max_profit ) NEW_LINE DEDENT return max_profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT self . profit = - sys . maxsize NEW_LINE self . doRecursive ( False , False , 0 , prices ) NEW_LINE return self . profit NEW_LINE DEDENT def doRecursive ( self , bought , sold , profit , prices ) : NEW_LINE INDENT if len ( prices ) == 0 or ( bought and sold ) : NEW_LINE INDENT if self . profit < profit : NEW_LINE INDENT self . profit = profit NEW_LINE DEDENT return NEW_LINE DEDENT while len ( prices ) > 1 and bought and prices [ 1 ] >= prices [ 0 ] : NEW_LINE INDENT prices . pop ( 0 ) NEW_LINE DEDENT while len ( prices ) > 1 and not bought and prices [ 1 ] <= prices [ 0 ] : NEW_LINE INDENT prices . pop ( 0 ) NEW_LINE DEDENT prices_clone = prices . copy ( ) NEW_LINE price = prices_clone . pop ( 0 ) NEW_LINE if not bought : NEW_LINE INDENT profit_b = profit - price NEW_LINE self . doRecursive ( True , sold , profit_b , prices_clone ) NEW_LINE DEDENT if not sold and bought : NEW_LINE INDENT profit_s = profit + price NEW_LINE self . doRecursive ( bought , True , profit_s , prices_clone ) NEW_LINE DEDENT self . doRecursive ( bought , sold , profit , prices_clone ) NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT p_dic = dict ( sorted ( Counter ( prices ) . items ( ) ) ) NEW_LINE max_prof = 0 NEW_LINE N = len ( prices ) NEW_LINE for i in range ( N - 1 ) : NEW_LINE INDENT buy = prices [ i ] NEW_LINE p_dic [ buy ] -= 1 NEW_LINE if p_dic [ buy ] == 0 : NEW_LINE INDENT p_dic . pop ( buy ) NEW_LINE DEDENT sell = list ( p_dic . keys ( ) ) [ - 1 ] NEW_LINE max_prof = max ( max_prof , sell - buy ) NEW_LINE DEDENT return max_prof NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT buy = 1000 NEW_LINE sell = 0 NEW_LINE profit = 0 NEW_LINE n = len ( prices ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT sell = 0 NEW_LINE if prices [ i ] < buy : NEW_LINE INDENT buy = prices [ i ] NEW_LINE for j in range ( i , n ) : NEW_LINE INDENT if prices [ j ] > sell and prices [ j ] >= buy : NEW_LINE INDENT sell = prices [ j ] NEW_LINE print ( buy , sell ) NEW_LINE DEDENT DEDENT DEDENT if profit < sell - buy : NEW_LINE INDENT profit = sell - buy NEW_LINE DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT def profits ( ) : NEW_LINE INDENT i = 0 NEW_LINE while i < len ( prices ) - 1 : NEW_LINE INDENT price_today = prices [ i ] NEW_LINE best_sell_price = price_today NEW_LINE for future_price in prices [ i + 1 : ] : NEW_LINE INDENT i += 1 NEW_LINE if future_price < price_today : NEW_LINE INDENT break NEW_LINE DEDENT elif future_price > best_sell_price : NEW_LINE INDENT best_sell_price = future_price NEW_LINE DEDENT DEDENT yield best_sell_price - price_today NEW_LINE DEDENT else : NEW_LINE INDENT yield 0 NEW_LINE DEDENT DEDENT return max ( profits ( ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT def profits ( ) : NEW_LINE INDENT i = 0 NEW_LINE while i < len ( prices ) - 1 : NEW_LINE INDENT price_today = prices [ i ] NEW_LINE for future_price in prices [ i + 1 : ] : NEW_LINE INDENT i += 1 NEW_LINE if future_price < price_today : NEW_LINE INDENT break NEW_LINE DEDENT yield future_price - price_today NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT yield 0 NEW_LINE DEDENT DEDENT return max ( profits ( ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT max_profit = 0 NEW_LINE i = 0 NEW_LINE while i < len ( prices ) - 1 : NEW_LINE INDENT price_today = prices [ i ] NEW_LINE for future_price in prices [ i + 1 : ] : NEW_LINE INDENT i += 1 NEW_LINE if future_price < price_today : NEW_LINE INDENT break NEW_LINE DEDENT profit = future_price - price_today NEW_LINE max_profit = max ( profit , max_profit ) NEW_LINE DEDENT DEDENT return max_profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT maxes = { } NEW_LINE profit = 0 NEW_LINE for i , price in enumerate ( prices ) : NEW_LINE INDENT if i > 0 : NEW_LINE INDENT maxes [ price ] = i NEW_LINE DEDENT DEDENT for max_price in maxes . keys ( ) : NEW_LINE INDENT index = maxes [ max_price ] NEW_LINE profit = max ( profit , max_price - min ( prices [ : index ] ) ) NEW_LINE DEDENT return profit NEW_LINE NEW_LINE DEDENT DEDENT
import math NEW_LINE class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT self . cache = { } NEW_LINE if not prices : NEW_LINE INDENT return 0 NEW_LINE DEDENT prices = list ( self . reduce ( prices ) ) NEW_LINE if not prices : NEW_LINE INDENT return 0 NEW_LINE DEDENT l , h = self . profit ( prices , 0 , len ( prices ) ) NEW_LINE return h - l NEW_LINE DEDENT def reduce ( self , prices ) : NEW_LINE INDENT NEW_LINE direction = 0 NEW_LINE prev = prices [ 0 ] NEW_LINE for curr in prices [ 1 : ] : NEW_LINE INDENT new_diff = curr - prev NEW_LINE new_direction = math . copysign ( 1 , new_diff ) NEW_LINE if direction == new_direction : NEW_LINE INDENT prev = curr NEW_LINE continue NEW_LINE DEDENT yield prev NEW_LINE yield curr NEW_LINE direction = new_direction NEW_LINE prev = curr NEW_LINE DEDENT yield prev NEW_LINE DEDENT def profit ( self , prices , start , end ) -> Tuple [ int , int ] : NEW_LINE INDENT r = self . cache . get ( ( start , end ) ) NEW_LINE if r is not None : NEW_LINE INDENT return r NEW_LINE DEDENT first = prices [ start ] NEW_LINE if end - start == 1 : NEW_LINE INDENT r = first , first NEW_LINE self . cache [ ( start , end ) ] = r NEW_LINE return r NEW_LINE DEDENT lmin , lmax = self . profit ( prices , start + 1 , end ) NEW_LINE if first < lmin : NEW_LINE INDENT lmin = first NEW_LINE DEDENT rmin , rmax = self . profit ( prices , start , end - 1 ) NEW_LINE last = prices [ end - 1 ] NEW_LINE if rmax < last : NEW_LINE INDENT rmax = last NEW_LINE DEDENT if lmax - lmin < rmax - rmin : NEW_LINE INDENT r = rmin , rmax NEW_LINE DEDENT else : NEW_LINE INDENT r = lmin , lmax NEW_LINE DEDENT self . cache [ ( start , end ) ] = r NEW_LINE return r NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT a = [ ] NEW_LINE if len ( prices ) == 0 or prices == 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT while len ( prices ) != 0 or len ( prices ) != 0 : NEW_LINE INDENT g = prices . index ( min ( prices ) ) NEW_LINE f = prices [ g : ] NEW_LINE a . append ( max ( f ) - min ( f ) ) NEW_LINE prices = prices [ : g ] NEW_LINE DEDENT return max ( a ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT max_profit = 0 NEW_LINE for i , buy in enumerate ( prices [ : len ( prices ) - 1 ] ) : NEW_LINE INDENT sell = sorted ( prices [ i + 1 : ] , reverse = True ) [ 0 ] NEW_LINE max_profit = max ( max_profit , sell - buy ) NEW_LINE DEDENT return max_profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT res = 0 NEW_LINE m = len ( prices ) NEW_LINE for i in range ( m - 1 ) : NEW_LINE INDENT curr = prices . pop ( 0 ) NEW_LINE res = max ( res , max ( prices ) - curr ) NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) <= 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT prev_list = prices [ : 2 ] NEW_LINE res = 0 NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT new_val = prices [ i ] NEW_LINE if new_val - min ( prev_list ) > res : NEW_LINE INDENT res = new_val - min ( prev_list ) NEW_LINE DEDENT prev_list . append ( new_val ) NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT profit = 0 NEW_LINE if len ( prices ) <= 1 : NEW_LINE INDENT profit = 0 NEW_LINE DEDENT else : NEW_LINE INDENT while len ( prices ) > 1 : NEW_LINE INDENT i = prices [ 0 ] NEW_LINE print ( i ) NEW_LINE num = prices . pop ( 0 ) NEW_LINE dif = max ( prices ) - num NEW_LINE if dif > profit : NEW_LINE INDENT profit = dif NEW_LINE DEDENT DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT res = 0 NEW_LINE m = len ( prices ) NEW_LINE for i in range ( m - 1 ) : NEW_LINE INDENT curr = prices . pop ( 0 ) NEW_LINE res = max ( res , max ( prices ) - curr ) NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT global_max = 0 NEW_LINE while len ( prices ) > 1 : NEW_LINE INDENT value = prices . pop ( 0 ) NEW_LINE max_ = max ( prices ) - value NEW_LINE if max_ > global_max : NEW_LINE INDENT global_max = max_ NEW_LINE DEDENT DEDENT return global_max NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT profit = 0 NEW_LINE if len ( prices ) <= 1 : NEW_LINE INDENT profit = 0 NEW_LINE DEDENT else : NEW_LINE INDENT while len ( prices ) > 1 : NEW_LINE INDENT i = prices [ 0 ] NEW_LINE print ( i ) NEW_LINE num = prices . pop ( 0 ) NEW_LINE dif = max ( prices ) - num NEW_LINE if dif > profit : NEW_LINE INDENT profit = dif NEW_LINE DEDENT DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT hp = [ ] NEW_LINE ans = 0 NEW_LINE for i in range ( len ( prices ) ) : NEW_LINE INDENT heapq . heappush ( hp , prices [ i ] ) NEW_LINE k = heapq . nsmallest ( 1 , hp ) NEW_LINE if prices [ i ] > k [ 0 ] : NEW_LINE INDENT temp = prices [ i ] - k [ 0 ] NEW_LINE ans = max ( ans , temp ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT profit = 0 NEW_LINE if len ( prices ) <= 1 : NEW_LINE INDENT profit = 0 NEW_LINE DEDENT else : NEW_LINE INDENT while len ( prices ) > 1 : NEW_LINE INDENT i = prices [ 0 ] NEW_LINE print ( i ) NEW_LINE num = prices . pop ( 0 ) NEW_LINE dif = max ( prices ) - num NEW_LINE if dif > profit : NEW_LINE INDENT profit = dif NEW_LINE DEDENT DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT def calc_max_profit ( prices , purchase_price , max_profit = 0 ) : NEW_LINE INDENT max_sale_price = max ( prices ) NEW_LINE potential_profit = max_sale_price - purchase_price NEW_LINE max_profit = max ( potential_profit , max_profit ) NEW_LINE purchase_price = min ( prices . pop ( 0 ) , purchase_price ) NEW_LINE if len ( prices ) == 0 : NEW_LINE INDENT return max_profit NEW_LINE DEDENT else : NEW_LINE INDENT return calc_max_profit ( prices , purchase_price , max_profit ) NEW_LINE DEDENT DEDENT if len ( prices ) <= 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT purchase_price = prices . pop ( 0 ) NEW_LINE DEDENT return calc_max_profit ( prices , purchase_price ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) == 0 or len ( prices ) == 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT buy = 0 NEW_LINE sell = 1 NEW_LINE profit = prices [ sell ] - prices [ buy ] NEW_LINE if profit < 0 : NEW_LINE INDENT profit = 0 NEW_LINE DEDENT while sell < len ( prices ) : NEW_LINE INDENT minbuy = min ( prices [ buy : sell ] ) NEW_LINE buy = prices . index ( minbuy ) NEW_LINE if prices [ sell ] - prices [ buy ] > profit : NEW_LINE INDENT profit = prices [ sell ] - prices [ buy ] NEW_LINE DEDENT sell = sell + 1 NEW_LINE DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if not prices : NEW_LINE INDENT return 0 NEW_LINE DEDENT minVal = 10001 NEW_LINE maxVal = - 10001 NEW_LINE ans = 0 NEW_LINE for i in range ( len ( prices ) ) : NEW_LINE INDENT tmp = 0 NEW_LINE if prices [ i ] > maxVal : NEW_LINE INDENT maxVal = prices [ i ] NEW_LINE DEDENT if prices [ i ] < minVal : NEW_LINE INDENT minVal = prices [ i ] NEW_LINE DEDENT if prices . index ( maxVal ) < prices . index ( minVal ) : NEW_LINE INDENT maxVal = prices [ i ] NEW_LINE tmp = minVal - maxVal NEW_LINE DEDENT ans = max ( maxVal - minVal , ans , tmp ) NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT def find_local_minima ( l , i , e ) : NEW_LINE INDENT while ( i + 1 ) < e and l [ i + 1 ] < l [ i ] : i += 1 NEW_LINE return i NEW_LINE DEDENT def find_max ( l , i , e ) : NEW_LINE INDENT m_i , m = i , l [ i ] NEW_LINE while i < e : NEW_LINE INDENT if m < l [ i ] : m_i , m = i , l [ i ] NEW_LINE i += 1 NEW_LINE DEDENT return m_i , m NEW_LINE DEDENT len_ = len ( prices ) NEW_LINE if len_ == 0 : return 0 NEW_LINE sum_ = 0 NEW_LINE j = - 1 NEW_LINE i = find_local_minima ( prices , 0 , len_ ) NEW_LINE while i < ( len_ - 1 ) : NEW_LINE INDENT if i > j : NEW_LINE INDENT j , max_ = find_max ( prices , i + 1 , len_ ) NEW_LINE DEDENT sum_ = max ( max_ - prices [ i ] , sum_ ) NEW_LINE i = find_local_minima ( prices , i + 1 , len_ ) NEW_LINE DEDENT return sum_ NEW_LINE DEDENT DEDENT
import math NEW_LINE class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if not prices : NEW_LINE INDENT return 0 NEW_LINE DEDENT minVal = math . inf NEW_LINE maxVal = - math . inf NEW_LINE ans = 0 NEW_LINE for i in range ( len ( prices ) ) : NEW_LINE INDENT tmp = 0 NEW_LINE if prices [ i ] > maxVal : NEW_LINE INDENT maxVal = prices [ i ] NEW_LINE DEDENT if prices [ i ] < minVal : NEW_LINE INDENT minVal = prices [ i ] NEW_LINE DEDENT if prices . index ( maxVal ) < prices . index ( minVal ) : NEW_LINE INDENT maxVal = prices [ i ] NEW_LINE tmp = minVal - maxVal NEW_LINE DEDENT ans = max ( maxVal - minVal , ans , tmp ) NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if not prices : NEW_LINE INDENT return 0 NEW_LINE DEDENT minVal = 10001 NEW_LINE maxVal = - 10001 NEW_LINE ans = 0 NEW_LINE for i in range ( len ( prices ) ) : NEW_LINE INDENT tmp = 0 NEW_LINE if prices [ i ] > maxVal : NEW_LINE INDENT maxVal = prices [ i ] NEW_LINE DEDENT if prices [ i ] < minVal : NEW_LINE INDENT minVal = prices [ i ] NEW_LINE DEDENT if prices . index ( maxVal ) < prices . index ( minVal ) : NEW_LINE INDENT maxVal = prices [ i ] NEW_LINE tmp = minVal - maxVal NEW_LINE DEDENT ans = max ( maxVal - minVal , ans , tmp ) NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
import math NEW_LINE class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if not prices : NEW_LINE INDENT return 0 NEW_LINE DEDENT minVal = math . inf NEW_LINE maxVal = - math . inf NEW_LINE ans = 0 NEW_LINE for i in range ( len ( prices ) ) : NEW_LINE INDENT tmp = 0 NEW_LINE if prices [ i ] > maxVal : NEW_LINE INDENT maxVal = prices [ i ] NEW_LINE DEDENT if prices [ i ] < minVal : NEW_LINE INDENT minVal = prices [ i ] NEW_LINE DEDENT if prices . index ( maxVal ) < prices . index ( minVal ) : NEW_LINE INDENT maxVal = prices [ i ] NEW_LINE tmp = minVal - maxVal NEW_LINE DEDENT ans = max ( maxVal - minVal , ans , tmp ) NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if not prices or len ( prices ) < 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT s = sorted ( list ( set ( prices ) ) ) NEW_LINE minValPos , maxValPos , profit = - 1 , - 1 , 0 NEW_LINE mx = 0 NEW_LINE print ( s ) NEW_LINE while s : NEW_LINE INDENT minValPos = prices . index ( s . pop ( 0 ) ) NEW_LINE print ( " minValPos " , minValPos , " val " , prices [ minValPos ] ) NEW_LINE maxValPos = prices . index ( max ( prices [ minValPos : ] ) ) NEW_LINE print ( " maxValPos " , maxValPos , " val " , prices [ maxValPos ] ) NEW_LINE profit = prices [ maxValPos ] - prices [ minValPos ] NEW_LINE if profit > mx : NEW_LINE INDENT mx = profit NEW_LINE DEDENT DEDENT return mx NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT def find_local_minima ( l , i , e , m ) : NEW_LINE INDENT while ( i + 1 ) < e and ( l [ i ] > m or l [ i + 1 ] < l [ i ] ) : i += 1 NEW_LINE return i NEW_LINE DEDENT def find_max ( l , i , e ) : NEW_LINE INDENT m_i , m = i , l [ i ] NEW_LINE while i < e : NEW_LINE INDENT if m < l [ i ] : m_i , m = i , l [ i ] NEW_LINE i += 1 NEW_LINE DEDENT return m_i , m NEW_LINE DEDENT len_ = len ( prices ) NEW_LINE if len_ < 2 : return 0 NEW_LINE sum_ = 0 NEW_LINE j = - 1 NEW_LINE i = find_local_minima ( prices , 0 , len_ , prices [ 0 ] + 1 ) NEW_LINE min_ = prices [ i ] NEW_LINE while i < ( len_ - 1 ) : NEW_LINE INDENT if i > j : j , max_ = find_max ( prices , i + 1 , len_ ) NEW_LINE sum_ = max ( max_ - prices [ i ] , sum_ ) NEW_LINE i = find_local_minima ( prices , i + 1 , len_ , prices [ i ] ) NEW_LINE DEDENT return sum_ NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) < 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT highestProfit = 0 NEW_LINE previousPrices = { prices [ 0 ] : 0 } NEW_LINE for i in range ( len ( prices ) - 1 ) : NEW_LINE INDENT if prices [ i + 1 ] - min ( previousPrices ) > highestProfit : NEW_LINE INDENT highestProfit = prices [ i + 1 ] - min ( previousPrices ) NEW_LINE DEDENT previousPrices . update ( { prices [ i + 1 ] : i + 1 } ) NEW_LINE DEDENT if highestProfit == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return highestProfit NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , lst : List [ int ] ) -> int : NEW_LINE INDENT if all ( lst [ i ] >= lst [ i + 1 ] for i in range ( len ( lst ) - 1 ) ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT d = { } NEW_LINE profits = [ ] NEW_LINE for item in lst : NEW_LINE INDENT if item not in d . keys ( ) : NEW_LINE INDENT val = lst [ lst . index ( item ) : ] NEW_LINE try : NEW_LINE INDENT d [ item ] = max ( val [ 1 : ] ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT d [ item ] = 0 NEW_LINE DEDENT DEDENT DEDENT for key , val in d . items ( ) : NEW_LINE INDENT profits . append ( val - key ) NEW_LINE DEDENT return max ( profits ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT hash_table = { prices [ i ] : i for i in range ( 0 , len ( prices ) ) } NEW_LINE max_p = 0 NEW_LINE for i in hash_table : NEW_LINE INDENT j = hash_table [ i ] - 1 NEW_LINE while j >= 0 : NEW_LINE INDENT if i - prices [ j ] > max_p : NEW_LINE INDENT max_p = i - prices [ j ] NEW_LINE DEDENT j -= 1 NEW_LINE DEDENT DEDENT return max_p NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , lst : List [ int ] ) -> int : NEW_LINE INDENT if all ( lst [ i ] >= lst [ i + 1 ] for i in range ( len ( lst ) - 1 ) ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT d = { } NEW_LINE profits = [ ] NEW_LINE for item in lst : NEW_LINE INDENT if item not in d . keys ( ) : NEW_LINE INDENT val = lst [ lst . index ( item ) : ] NEW_LINE try : NEW_LINE INDENT d [ item ] = max ( val [ 1 : ] ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT d [ item ] = 0 NEW_LINE DEDENT DEDENT DEDENT for key , val in d . items ( ) : NEW_LINE INDENT profits . append ( val - key ) NEW_LINE DEDENT return max ( profits ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT hash_table = { prices [ i ] : i for i in range ( 0 , len ( prices ) ) } NEW_LINE max_p = 0 NEW_LINE for i in hash_table : NEW_LINE INDENT j = hash_table [ i ] - 1 NEW_LINE while j >= 0 : NEW_LINE INDENT if i - prices [ j ] > max_p : NEW_LINE INDENT max_p = i - prices [ j ] NEW_LINE DEDENT j -= 1 NEW_LINE DEDENT DEDENT return max_p NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) < 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT highestProfit = 0 NEW_LINE previousPrices = { prices [ 0 ] : 0 } NEW_LINE for i in range ( len ( prices ) - 1 ) : NEW_LINE INDENT if prices [ i + 1 ] - min ( previousPrices ) > highestProfit : NEW_LINE INDENT highestProfit = prices [ i + 1 ] - min ( previousPrices ) NEW_LINE DEDENT previousPrices . update ( { prices [ i + 1 ] : i + 1 } ) NEW_LINE DEDENT if highestProfit == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return highestProfit NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT profit = 0 NEW_LINE for idx , buy in enumerate ( prices [ : - 1 ] ) : NEW_LINE INDENT if buy >= max ( prices [ idx + 1 : ] ) : NEW_LINE INDENT continue NEW_LINE DEDENT for sell in prices [ idx + 1 : ] : NEW_LINE INDENT if profit < sell - buy : NEW_LINE INDENT profit = sell - buy NEW_LINE DEDENT DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT profit = 0 NEW_LINE for idx , buy in enumerate ( prices [ : - 1 ] ) : NEW_LINE INDENT max_left = max ( prices [ idx + 1 : ] ) NEW_LINE if buy >= max_left : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT if profit < max_left - buy : NEW_LINE INDENT profit = max_left - buy NEW_LINE DEDENT DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT a = prices NEW_LINE if len ( a ) == 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT ret = [ 0 ] NEW_LINE for i in range ( len ( a ) - 1 ) : NEW_LINE INDENT el = a [ i ] NEW_LINE m = max ( a [ i + 1 : ] ) NEW_LINE print ( el , m ) NEW_LINE r = m - el NEW_LINE if r < 0 : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT ret . append ( r ) NEW_LINE DEDENT DEDENT return max ( ret ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices ) : NEW_LINE INDENT maxProfit = 0 NEW_LINE while prices : NEW_LINE INDENT minPrice = min ( prices ) NEW_LINE minIndex = prices . index ( minPrice ) NEW_LINE if minIndex == len ( prices ) - 1 : NEW_LINE INDENT del prices [ minIndex ] NEW_LINE continue NEW_LINE DEDENT slicedList = prices [ minIndex + 1 : ] NEW_LINE maxPrice = max ( slicedList ) NEW_LINE maxIndex = slicedList . index ( maxPrice ) + minIndex + 1 NEW_LINE profit = maxPrice - minPrice NEW_LINE if profit > maxProfit : maxProfit = profit NEW_LINE del prices [ maxIndex ] NEW_LINE del prices [ minIndex ] NEW_LINE DEDENT return maxProfit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT result = maxtrade_here = 0 NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT maxtrade_here = prices [ i ] - min ( prices [ : i ] ) NEW_LINE result = max ( result , maxtrade_here ) NEW_LINE DEDENT return ( result ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT max_prof = 0 NEW_LINE for i in range ( len ( prices ) - 1 ) : NEW_LINE INDENT temp_prof = 0 NEW_LINE temp_prof = max ( prices [ i + 1 : ] ) - prices [ i ] NEW_LINE if temp_prof > max_prof : NEW_LINE INDENT max_prof = temp_prof NEW_LINE DEDENT DEDENT return max_prof NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT poss = [ 0 ] NEW_LINE for i , v in enumerate ( prices ) : NEW_LINE INDENT poss . append ( ( max ( prices [ i : ] ) - v ) ) NEW_LINE DEDENT return ( max ( poss ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT prices = prices [ : : - 1 ] NEW_LINE max_profit = 0 NEW_LINE lowest = None NEW_LINE while len ( prices ) > 1 : NEW_LINE INDENT highest = max ( prices ) NEW_LINE left = prices . index ( highest ) NEW_LINE right = prices [ left + 1 : ] NEW_LINE if right : NEW_LINE INDENT lowest = min ( lowest , min ( right ) ) if lowest else min ( right ) NEW_LINE profit = highest - lowest NEW_LINE max_profit = max ( max_profit , profit ) NEW_LINE DEDENT del prices [ left : ] NEW_LINE DEDENT return max_profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT profit = 0 NEW_LINE for i , j in enumerate ( prices [ : - 1 ] ) : NEW_LINE INDENT if j < max ( prices [ i + 1 : ] ) and profit < max ( prices [ i + 1 : ] ) - j : NEW_LINE INDENT profit = max ( prices [ i + 1 : ] ) - j NEW_LINE DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT maxprofit = 0 NEW_LINE for i in range ( len ( prices ) ) : NEW_LINE INDENT todaymaxprofit = max ( prices [ i : ] ) - prices [ i ] NEW_LINE if todaymaxprofit > maxprofit : NEW_LINE INDENT maxprofit = todaymaxprofit NEW_LINE DEDENT DEDENT return maxprofit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT maxProfit = 0 NEW_LINE for i in range ( len ( prices ) - 1 ) : NEW_LINE INDENT if max ( prices [ i + 1 : ] ) > prices [ i ] : NEW_LINE INDENT maxProfit = max ( maxProfit , max ( prices [ i + 1 : ] ) - prices [ i ] ) NEW_LINE DEDENT DEDENT return maxProfit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if ( prices == [ ] ) : return 0 NEW_LINE profits = [ max ( prices [ k : ] ) - prices [ k ] for k in range ( len ( prices ) ) ] NEW_LINE return max ( profits ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT def find_local_minima ( l , i , e ) : NEW_LINE INDENT while ( i + 1 ) < e and l [ i + 1 ] < l [ i ] : i += 1 NEW_LINE return i NEW_LINE DEDENT def find_max ( l , i , e ) : NEW_LINE INDENT m_i , m = i , l [ i ] NEW_LINE while i < e : NEW_LINE INDENT if m < l [ i ] : m_i , m = i , l [ i ] NEW_LINE i += 1 NEW_LINE DEDENT return m_i , m NEW_LINE DEDENT len_ = len ( prices ) NEW_LINE if len_ == 0 : return 0 NEW_LINE sum_ = 0 NEW_LINE j = - 1 NEW_LINE i = find_local_minima ( prices , 0 , len_ ) NEW_LINE while i < ( len_ - 1 ) : NEW_LINE INDENT if i > j : NEW_LINE INDENT j , max_ = find_max ( prices , i + 1 , len_ ) NEW_LINE DEDENT sum_ = max ( max_ - prices [ i ] , sum_ ) NEW_LINE i += 1 NEW_LINE DEDENT return sum_ NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT maxP = 0 NEW_LINE for i in range ( len ( prices ) - 1 ) : NEW_LINE INDENT temp = max ( prices [ i + 1 : ] ) - prices [ i ] NEW_LINE if temp > maxP : NEW_LINE INDENT maxP = temp NEW_LINE DEDENT DEDENT return maxP NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices ) : NEW_LINE INDENT maxProfit = 0 NEW_LINE while prices : NEW_LINE INDENT minPrice = min ( prices ) NEW_LINE minIndex = prices . index ( minPrice ) NEW_LINE if minIndex == len ( prices ) - 1 : NEW_LINE INDENT del prices [ minIndex ] NEW_LINE continue NEW_LINE DEDENT slicedList = prices [ minIndex + 1 : ] NEW_LINE maxPrice = max ( slicedList ) NEW_LINE maxIndex = slicedList . index ( maxPrice ) + minIndex + 1 NEW_LINE profit = maxPrice - minPrice NEW_LINE if profit > maxProfit : maxProfit = profit NEW_LINE del prices [ maxIndex ] NEW_LINE del prices [ minIndex ] NEW_LINE DEDENT return maxProfit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT hash_table = { prices [ i ] : i for i in range ( 0 , len ( prices ) ) } NEW_LINE max_p = 0 NEW_LINE for i in hash_table : NEW_LINE INDENT j = hash_table [ i ] - 1 NEW_LINE while j >= 0 : NEW_LINE INDENT if i - prices [ j ] > max_p : NEW_LINE INDENT max_p = i - prices [ j ] NEW_LINE DEDENT j -= 1 NEW_LINE DEDENT DEDENT return max_p NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT profit = 0 NEW_LINE while len ( prices ) > 1 : NEW_LINE INDENT buy = prices [ 0 ] NEW_LINE prices . pop ( 0 ) NEW_LINE sell = max ( prices ) NEW_LINE profit = max ( profit , sell - buy ) NEW_LINE DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT l = len ( prices ) NEW_LINE if l == 1 or l == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT dp = [ 0 ] * l NEW_LINE v = 0 NEW_LINE for i in range ( 1 , l ) : NEW_LINE INDENT dp [ i ] = prices [ i ] - min ( prices [ : i ] ) NEW_LINE DEDENT return max ( dp ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT res = 0 NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT res = max ( res , prices [ i ] - min ( prices [ 0 : i ] ) ) NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT maxp = 0 NEW_LINE if len ( prices ) < 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT if prices [ i ] - min ( prices [ : i ] ) > maxp : NEW_LINE INDENT maxp = prices [ i ] - min ( prices [ : i ] ) NEW_LINE DEDENT DEDENT return maxp NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT maxProf = [ 0 ] NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT maxProf . append ( max ( prices [ i ] - min ( prices [ : i ] ) , 0 ) ) NEW_LINE DEDENT return max ( maxProf ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , p : List [ int ] ) -> int : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( 1 , len ( p ) ) : NEW_LINE INDENT if p [ i - 1 ] < p [ i ] : NEW_LINE INDENT ans += p [ i ] - p [ i - 1 ] NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT total = 0 NEW_LINE for i in range ( len ( prices ) - 1 ) : NEW_LINE INDENT if prices [ i + 1 ] > prices [ i ] : NEW_LINE INDENT total = total + ( prices [ i + 1 ] - prices [ i ] ) NEW_LINE DEDENT DEDENT return total NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT profit = 0 NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT if prices [ i ] > prices [ i - 1 ] : NEW_LINE INDENT profit += prices [ i ] - prices [ i - 1 ] NEW_LINE DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT profit = 0 NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT if prices [ i ] > prices [ i - 1 ] : NEW_LINE INDENT profit += prices [ i ] - prices [ i - 1 ] NEW_LINE DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) == 0 or len ( prices ) == 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT profit = 0 NEW_LINE for i in range ( len ( prices ) - 1 ) : NEW_LINE INDENT if ( prices [ i + 1 ] - prices [ i ] ) > 0 : NEW_LINE INDENT profit += prices [ i + 1 ] - prices [ i ] NEW_LINE DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT maxProfit = 0 NEW_LINE if len ( prices ) in [ 0 , 1 ] : NEW_LINE INDENT return 0 NEW_LINE DEDENT for day in range ( 1 , len ( prices ) ) : NEW_LINE INDENT if prices [ day ] > prices [ day - 1 ] : NEW_LINE INDENT profit = prices [ day ] - prices [ day - 1 ] NEW_LINE maxProfit += profit NEW_LINE DEDENT DEDENT return maxProfit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT l = len ( prices ) NEW_LINE out = 0 NEW_LINE for i in range ( l - 1 ) : NEW_LINE INDENT if prices [ i + 1 ] > prices [ i ] : NEW_LINE INDENT cha = prices [ i + 1 ] - prices [ i ] NEW_LINE out += cha NEW_LINE DEDENT DEDENT return out NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT n = len ( prices ) NEW_LINE profit = 0 NEW_LINE l = 0 NEW_LINE r = 0 NEW_LINE while ( l < n - 1 ) : NEW_LINE INDENT while ( l < n - 1 and prices [ l ] >= prices [ l + 1 ] ) : NEW_LINE INDENT l += 1 NEW_LINE DEDENT r = l NEW_LINE while ( r < n - 1 and prices [ r ] <= prices [ r + 1 ] ) : NEW_LINE INDENT r += 1 NEW_LINE DEDENT profit += ( prices [ r ] - prices [ l ] ) NEW_LINE l = r NEW_LINE DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT if len ( prices ) in ( 0 , 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT profit = 0 NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT if prices [ i ] > prices [ i - 1 ] : NEW_LINE INDENT profit += prices [ i ] - prices [ i - 1 ] NEW_LINE DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT n = len ( prices ) NEW_LINE mincost = float ( 'inf' ) NEW_LINE maxprofit = 0 NEW_LINE totalprofit = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if prices [ j ] < mincost : NEW_LINE INDENT mincost = prices [ j ] NEW_LINE DEDENT if prices [ j ] - mincost > maxprofit : NEW_LINE INDENT maxprofit = prices [ j ] - mincost NEW_LINE DEDENT if j + 1 < n and prices [ j + 1 ] < prices [ j ] and maxprofit != 0 : NEW_LINE INDENT totalprofit += maxprofit NEW_LINE mincost = float ( 'inf' ) NEW_LINE maxprofit = 0 NEW_LINE DEDENT DEDENT return totalprofit + maxprofit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT max_profit = 0 NEW_LINE min_value = float ( 'inf' ) NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT if prices [ i ] > prices [ i - 1 ] : NEW_LINE INDENT max_profit += prices [ i ] - prices [ i - 1 ] NEW_LINE DEDENT DEDENT return max_profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT NEW_LINE n = len ( prices ) NEW_LINE if n == 0 or n == 1 : return 0 NEW_LINE dp = [ [ 0 for _ in range ( 2 ) ] for _ in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if i - 1 == - 1 : NEW_LINE INDENT dp [ i ] [ 0 ] = 0 NEW_LINE dp [ i ] [ 1 ] = - prices [ i ] NEW_LINE continue NEW_LINE DEDENT dp [ i ] [ 0 ] = max ( dp [ i - 1 ] [ 0 ] , dp [ i - 1 ] [ 1 ] + prices [ i ] ) NEW_LINE dp [ i ] [ 1 ] = max ( dp [ i - 1 ] [ 1 ] , dp [ i - 1 ] [ 0 ] - prices [ i ] ) NEW_LINE DEDENT return dp [ n - 1 ] [ 0 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices ) -> int : NEW_LINE INDENT total = 0 NEW_LINE local_min = None NEW_LINE for i , p in enumerate ( prices ) : NEW_LINE INDENT if i == 0 or local_min > p : NEW_LINE INDENT local_min = p NEW_LINE continue NEW_LINE DEDENT if i > 0 and not local_min is None : NEW_LINE INDENT total += p - local_min NEW_LINE local_min = p NEW_LINE DEDENT DEDENT return total NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProfit ( self , prices : List [ int ] ) -> int : NEW_LINE INDENT profit = 0 NEW_LINE for i in range ( 1 , len ( prices ) ) : NEW_LINE INDENT if prices [ i ] > prices [ i - 1 ] : NEW_LINE INDENT profit += prices [ i ] - prices [ i - 1 ] NEW_LINE DEDENT DEDENT return profit NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT res = nums [ 0 ] NEW_LINE big = res NEW_LINE small = res NEW_LINE for value in nums [ 1 : ] : NEW_LINE INDENT small , mid , big = sorted ( [ small * value , big * value , value ] ) NEW_LINE res = max ( res , big ) NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT dic = dict ( ) NEW_LINE for num in nums : NEW_LINE INDENT if not num in dic : NEW_LINE INDENT dic [ num ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT l = len ( nums ) NEW_LINE nums = set ( nums ) NEW_LINE new_l = len ( nums ) NEW_LINE if l == new_l : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT a = set ( nums ) NEW_LINE return len ( a ) != len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT return len ( nums ) != len ( set ( nums ) ) NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT return len ( set ( nums ) ) != len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT dict = { } NEW_LINE for x in nums : NEW_LINE INDENT if x in dict : NEW_LINE INDENT return True NEW_LINE DEDENT dict [ x ] = 0 NEW_LINE DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT return True if len ( set ( nums ) ) < len ( nums ) else False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT return len ( nums ) != len ( set ( nums ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT x = set ( nums ) NEW_LINE return ( len ( x ) < len ( nums ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT if not nums : NEW_LINE INDENT return False NEW_LINE DEDENT visited = set ( ) NEW_LINE for num in nums : NEW_LINE INDENT if num in visited : NEW_LINE INDENT return True NEW_LINE DEDENT visited . add ( num ) NEW_LINE DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT seen = set ( ) NEW_LINE for n in nums : NEW_LINE INDENT if n in seen : NEW_LINE INDENT return True NEW_LINE DEDENT seen . add ( n ) NEW_LINE DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT elem = { } NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] in elem : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT elem [ nums [ i ] ] = i NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT x = { } NEW_LINE for i in nums : NEW_LINE INDENT x [ i ] = 0 NEW_LINE DEDENT for i in nums : NEW_LINE INDENT if x [ i ] >= 1 : NEW_LINE INDENT return True NEW_LINE DEDENT x [ i ] += 1 NEW_LINE DEDENT return False NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT tracker = { } NEW_LINE for n in nums : NEW_LINE INDENT if n in tracker : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT tracker [ n ] = "" NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT without_dup = list ( set ( nums ) ) NEW_LINE return len ( without_dup ) != len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT return len ( set ( nums ) ) != len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT appeared = set ( ) NEW_LINE for n in nums : NEW_LINE INDENT if n in appeared : return True NEW_LINE appeared . add ( n ) NEW_LINE DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT return len ( nums ) != len ( set ( nums ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT obj = { } NEW_LINE for i in nums : NEW_LINE INDENT try : NEW_LINE INDENT obj [ i ] += 1 NEW_LINE return True NEW_LINE DEDENT except : NEW_LINE INDENT obj [ i ] = 1 NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT return len ( nums ) != len ( set ( nums ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT sort = sorted ( nums ) NEW_LINE prev = sort [ 0 ] NEW_LINE for i in range ( 1 , len ( sort ) ) : NEW_LINE INDENT if sort [ i ] == prev : NEW_LINE INDENT return True NEW_LINE DEDENT prev = sort [ i ] NEW_LINE DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT return len ( set ( nums ) ) != len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT uniques = { } NEW_LINE for num in nums : NEW_LINE INDENT if num in uniques : NEW_LINE INDENT return True NEW_LINE DEDENT uniques [ num ] = 0 NEW_LINE DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT counts = defaultdict ( int ) NEW_LINE for i , v in enumerate ( nums ) : NEW_LINE INDENT counts [ v ] += 1 NEW_LINE DEDENT for num in nums : NEW_LINE INDENT if counts [ num ] > 1 : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT s = set ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] in s : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT s . add ( nums [ i ] ) NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def containsDuplicate ( self , nums : List [ int ] ) -> bool : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT bucket = { } NEW_LINE for i in range ( min ( nums ) , max ( nums ) + 1 ) : NEW_LINE INDENT bucket [ i ] = 0 NEW_LINE DEDENT for i in nums : NEW_LINE INDENT bucket [ i ] += 1 NEW_LINE if bucket [ i ] > 1 : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT length = len ( nums ) NEW_LINE answer = [ 0 ] * length NEW_LINE answer [ 0 ] = 1 NEW_LINE for i in range ( 1 , length ) : NEW_LINE INDENT answer [ i ] = nums [ i - 1 ] * answer [ i - 1 ] NEW_LINE DEDENT R = 1 NEW_LINE for i in reversed ( range ( length ) ) : NEW_LINE INDENT answer [ i ] = answer [ i ] * R NEW_LINE R *= nums [ i ] NEW_LINE DEDENT return answer NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT temp = [ ] NEW_LINE total = 1 NEW_LINE zeroCount = 0 NEW_LINE for i in nums : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT zeroCount += 1 NEW_LINE continue NEW_LINE DEDENT else : NEW_LINE INDENT total = total * i NEW_LINE DEDENT DEDENT if zeroCount == len ( nums ) : NEW_LINE INDENT total = 0 NEW_LINE DEDENT for i in nums : NEW_LINE INDENT if zeroCount == 1 and i == 0 : NEW_LINE INDENT temp . append ( total ) NEW_LINE DEDENT elif zeroCount == 1 and i != 0 : NEW_LINE INDENT temp . append ( 0 ) NEW_LINE DEDENT elif zeroCount > 1 : NEW_LINE INDENT temp . append ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT temp . append ( total // i ) NEW_LINE DEDENT DEDENT return temp NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT res = [ 1 ] * len ( nums ) NEW_LINE left_prod = 1 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT res [ i ] *= left_prod NEW_LINE left_prod *= nums [ i ] NEW_LINE DEDENT right_prod = 1 NEW_LINE for i in range ( len ( nums ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT res [ i ] *= right_prod NEW_LINE right_prod *= nums [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT out = [ ] NEW_LINE p = 1 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT out . append ( p ) NEW_LINE p = p * nums [ i ] NEW_LINE DEDENT p = 1 NEW_LINE for i in range ( len ( nums ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT out [ i ] = out [ i ] * p NEW_LINE p = nums [ i ] * p NEW_LINE DEDENT return out NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT lis = [ ] NEW_LINE p = 1 NEW_LINE for i in nums : NEW_LINE INDENT p *= i NEW_LINE lis . append ( p ) NEW_LINE DEDENT p = 1 NEW_LINE for i in range ( len ( nums ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if i - 1 == - 1 : NEW_LINE INDENT lis [ 0 ] = p NEW_LINE DEDENT else : NEW_LINE INDENT lis [ i ] = lis [ i - 1 ] * p NEW_LINE p *= nums [ i ] NEW_LINE DEDENT DEDENT return lis NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE if n <= 1 : NEW_LINE INDENT return nums NEW_LINE DEDENT res = [ 1 ] * n NEW_LINE cum_prod = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT res [ i ] *= cum_prod NEW_LINE cum_prod *= nums [ i ] NEW_LINE DEDENT cum_prod = 1 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT res [ i ] *= cum_prod NEW_LINE cum_prod *= nums [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT length = len ( nums ) NEW_LINE L , R , answer = [ 0 ] * length , [ 0 ] * length , [ 0 ] * length NEW_LINE L [ 0 ] = 1 NEW_LINE for i in range ( 1 , length ) : NEW_LINE INDENT L [ i ] = nums [ i - 1 ] * L [ i - 1 ] NEW_LINE DEDENT R [ length - 1 ] = 1 NEW_LINE for i in reversed ( range ( length - 1 ) ) : NEW_LINE INDENT R [ i ] = nums [ i + 1 ] * R [ i + 1 ] NEW_LINE DEDENT for i in range ( length ) : NEW_LINE INDENT answer [ i ] = L [ i ] * R [ i ] NEW_LINE DEDENT return answer NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE if n <= 1 : NEW_LINE INDENT return nums NEW_LINE DEDENT res = [ 1 ] * n NEW_LINE cum_prod = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT res [ i ] *= cum_prod NEW_LINE cum_prod *= nums [ i ] NEW_LINE DEDENT cum_prod = 1 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT res [ i ] *= cum_prod NEW_LINE cum_prod *= nums [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums ) : NEW_LINE INDENT right = [ 1 ] NEW_LINE res = [ ] NEW_LINE L = 1 NEW_LINE for i in range ( len ( nums ) - 1 ) : NEW_LINE INDENT right . append ( right [ - 1 ] * nums [ len ( nums ) - 1 - i ] ) NEW_LINE DEDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT res . append ( L * right [ len ( nums ) - 1 - i ] ) NEW_LINE L = L * nums [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT res = list ( nums ) NEW_LINE nl = len ( nums ) NEW_LINE for i in range ( 1 , nl ) : NEW_LINE INDENT nums [ i ] = nums [ i - 1 ] * nums [ i ] NEW_LINE DEDENT for i in range ( nl - 2 , - 1 , - 1 ) : NEW_LINE INDENT res [ i ] = res [ i + 1 ] * res [ i ] NEW_LINE DEDENT for i in range ( nl ) : NEW_LINE INDENT l = nums [ i - 1 ] if i - 1 >= 0 else 1 NEW_LINE r = res [ i + 1 ] if i + 1 < nl else 1 NEW_LINE res [ i ] = r * l NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , arr : List [ int ] ) -> List [ int ] : NEW_LINE INDENT left = [ 1 ] NEW_LINE right = [ 1 ] NEW_LINE for i in range ( len ( arr ) ) : NEW_LINE INDENT left . append ( left [ - 1 ] * arr [ i ] ) NEW_LINE DEDENT left . append ( 1 ) NEW_LINE re = arr [ : : - 1 ] NEW_LINE for i in range ( len ( re ) ) : NEW_LINE INDENT right . append ( right [ - 1 ] * re [ i ] ) NEW_LINE DEDENT right . append ( 1 ) NEW_LINE right = right [ : : - 1 ] NEW_LINE arr = [ 1 ] + arr + [ 1 ] NEW_LINE print ( left ) NEW_LINE print ( right ) NEW_LINE print ( arr ) NEW_LINE ans = [ ] NEW_LINE for i in range ( 1 , len ( arr ) - 1 ) : NEW_LINE INDENT ans . append ( left [ i - 1 ] * right [ i + 1 ] ) NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT arr = nums NEW_LINE n = len ( arr ) NEW_LINE left = [ 0 ] * n NEW_LINE right = [ 0 ] * n NEW_LINE prod = [ 0 ] * n NEW_LINE left [ 0 ] = 1 NEW_LINE right [ n - 1 ] = 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT left [ i ] = arr [ i - 1 ] * left [ i - 1 ] NEW_LINE DEDENT for j in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT right [ j ] = arr [ j + 1 ] * right [ j + 1 ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT prod [ i ] = left [ i ] * right [ i ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT print ( prod [ i ] , end = ' ' ) NEW_LINE DEDENT return prod NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT if len ( nums ) == 1 : NEW_LINE INDENT return nums NEW_LINE DEDENT left = [ nums [ 0 ] ] NEW_LINE for i in range ( len ( nums ) - 1 ) : NEW_LINE INDENT left . append ( left [ - 1 ] * nums [ i + 1 ] ) NEW_LINE DEDENT right = [ nums [ - 1 ] ] NEW_LINE for i in list ( range ( len ( nums ) - 1 ) ) [ : : - 1 ] : NEW_LINE INDENT right . append ( right [ - 1 ] * nums [ i ] ) NEW_LINE DEDENT right = right [ : : - 1 ] NEW_LINE print ( left , right ) NEW_LINE ans = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT ans . append ( right [ 1 ] ) NEW_LINE DEDENT elif i == len ( nums ) - 1 : NEW_LINE INDENT ans . append ( left [ - 2 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT ans . append ( left [ i - 1 ] * right [ i + 1 ] ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT ans = collections . defaultdict ( list ) NEW_LINE res = [ ] NEW_LINE p_left = 1 NEW_LINE p_right = 1 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i > 0 : NEW_LINE INDENT p_left *= nums [ i - 1 ] NEW_LINE DEDENT ans [ i ] . append ( p_left ) NEW_LINE DEDENT for j in range ( len ( nums ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if j < len ( nums ) - 1 : NEW_LINE INDENT p_right *= nums [ j + 1 ] NEW_LINE DEDENT ans [ j ] . append ( p_right ) NEW_LINE DEDENT for k in range ( len ( nums ) ) : NEW_LINE INDENT product = ans [ k ] [ 0 ] * ans [ k ] [ 1 ] NEW_LINE res . append ( product ) NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT left = [ 1 ] * len ( nums ) NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT left [ i ] = left [ i - 1 ] * nums [ i - 1 ] NEW_LINE DEDENT print ( left ) NEW_LINE right = [ 1 ] * len ( nums ) NEW_LINE for i in range ( len ( nums ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT print ( right [ i ] , right [ i + 1 ] , nums [ i + 1 ] ) NEW_LINE right [ i ] = right [ i + 1 ] * nums [ i + 1 ] NEW_LINE DEDENT ans = [ ] NEW_LINE for i in range ( len ( right ) ) : NEW_LINE INDENT ans . append ( right [ i ] * left [ i ] ) NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT res = [ 1 ] * len ( nums ) NEW_LINE res [ - 1 ] = nums [ - 1 ] NEW_LINE accumulated = 1 NEW_LINE for index in range ( len ( res ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT print ( "index:" + str ( index ) ) NEW_LINE res [ index ] = nums [ index ] * res [ index + 1 ] NEW_LINE DEDENT print ( "res: " + str ( res ) ) NEW_LINE accumulated = 1 NEW_LINE for index in range ( 0 , len ( res ) - 1 ) : NEW_LINE INDENT curr = nums [ index ] NEW_LINE nums [ index ] = res [ index + 1 ] * accumulated NEW_LINE accumulated *= curr NEW_LINE print ( "accumulated: " + str ( accumulated ) ) NEW_LINE DEDENT nums [ - 1 ] = accumulated NEW_LINE return nums NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT res = [ 1 ] * len ( nums ) NEW_LINE for idx in range ( 1 , len ( nums ) ) : NEW_LINE INDENT res [ idx ] = nums [ idx - 1 ] * res [ idx - 1 ] NEW_LINE DEDENT back = 1 NEW_LINE for idx in range ( len ( nums ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT back *= nums [ idx + 1 ] NEW_LINE res [ idx ] *= back NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT left = [ 1 ] * len ( nums ) NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT left [ i ] = left [ i - 1 ] * nums [ i - 1 ] NEW_LINE DEDENT print ( left ) NEW_LINE right = [ 1 ] * len ( nums ) NEW_LINE for i in range ( len ( nums ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT print ( right [ i ] , right [ i + 1 ] , nums [ i + 1 ] ) NEW_LINE right [ i ] = right [ i + 1 ] * nums [ i + 1 ] NEW_LINE DEDENT ans = [ ] NEW_LINE for i in range ( len ( right ) ) : NEW_LINE INDENT ans . append ( right [ i ] * left [ i ] ) NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
import numpy as np NEW_LINE class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT left_prod = [ 1 ] NEW_LINE right_prod = [ 1 ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT n = nums [ i ] NEW_LINE left_prod . append ( left_prod [ - 1 ] * n ) NEW_LINE DEDENT for i in range ( len ( nums ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT n = nums [ i ] NEW_LINE right_prod . append ( right_prod [ - 1 ] * n ) NEW_LINE DEDENT left_prod = left_prod [ 1 : ] NEW_LINE right_prod = right_prod [ 1 : ] NEW_LINE right_prod . reverse ( ) NEW_LINE ans = [ right_prod [ 1 ] ] NEW_LINE for i in range ( 1 , len ( nums ) - 1 ) : NEW_LINE INDENT ans . append ( left_prod [ i - 1 ] * right_prod [ i + 1 ] ) NEW_LINE DEDENT ans . append ( left_prod [ - 2 ] ) NEW_LINE return ans NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT fromLeft = dict ( ) NEW_LINE fromRight = dict ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT fromLeft [ i ] = nums [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT fromLeft [ i ] = fromLeft [ i - 1 ] * nums [ i ] NEW_LINE DEDENT DEDENT for i in range ( len ( nums ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if i == len ( nums ) - 1 : NEW_LINE INDENT fromRight [ len ( nums ) - 1 ] = nums [ len ( nums ) - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT print ( i , fromRight [ i + 1 ] * nums [ i ] ) NEW_LINE fromRight [ i ] = fromRight [ i + 1 ] * nums [ i ] NEW_LINE DEDENT DEDENT output = [ None for i in range ( len ( nums ) ) ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT output [ i ] = fromRight [ 1 ] NEW_LINE DEDENT elif i == len ( nums ) - 1 : NEW_LINE INDENT output [ i ] = fromLeft [ len ( nums ) - 2 ] NEW_LINE DEDENT else : NEW_LINE INDENT output [ i ] = fromLeft [ i - 1 ] * fromRight [ i + 1 ] NEW_LINE DEDENT DEDENT return output NEW_LINE DEDENT DEDENT
import numpy NEW_LINE class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT output = [ 1 ] * len ( nums ) NEW_LINE left , right = 1 , 1 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT output [ i ] *= left NEW_LINE output [ - 1 - i ] *= right NEW_LINE left *= nums [ i ] NEW_LINE right *= nums [ - 1 - i ] NEW_LINE DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT retarray = [ ] NEW_LINE prod = 1 NEW_LINE for i in range ( 0 , len ( nums ) ) : NEW_LINE INDENT retarray . append ( prod ) NEW_LINE prod *= nums [ i ] NEW_LINE DEDENT prod = 1 NEW_LINE for i in range ( len ( nums ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT retarray [ i ] *= prod NEW_LINE prod *= nums [ i ] NEW_LINE DEDENT return retarray NEW_LINE DEDENT DEDENT
import numpy NEW_LINE class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT if nums . count ( 0 ) > 1 : NEW_LINE INDENT return [ 0 ] * len ( nums ) NEW_LINE DEDENT if nums . count ( 0 ) == 1 : NEW_LINE INDENT res = [ 0 ] * len ( nums ) NEW_LINE z = 0 NEW_LINE prod = 1 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT z = i NEW_LINE DEDENT else : NEW_LINE INDENT prod *= nums [ i ] NEW_LINE DEDENT DEDENT res [ z ] = prod NEW_LINE return res NEW_LINE DEDENT prod = 1 NEW_LINE for i in nums : NEW_LINE INDENT prod *= i NEW_LINE DEDENT res = [ ] NEW_LINE for i in nums : NEW_LINE INDENT res . append ( prod // i ) NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
import numpy NEW_LINE class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT prefixpdt = [ 1 ] * len ( nums ) NEW_LINE suffixpdt = [ 1 ] * len ( nums ) NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT prefixpdt [ i ] = prefixpdt [ i - 1 ] * nums [ i - 1 ] NEW_LINE DEDENT for i in range ( len ( nums ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT suffixpdt [ i ] = suffixpdt [ i + 1 ] * nums [ i + 1 ] NEW_LINE DEDENT return ( numpy . array ( prefixpdt ) * numpy . array ( suffixpdt ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT import numpy as np NEW_LINE values_array = np . zeros ( len ( nums ) , dtype = int ) NEW_LINE calculate ( 0 , values_array , nums , 1 ) NEW_LINE return values_array NEW_LINE DEDENT DEDENT def calculate ( index , values_array , nums , accumulated_value ) : NEW_LINE INDENT if index == len ( nums ) - 1 : NEW_LINE INDENT values_array [ index ] = accumulated_value NEW_LINE return nums [ index ] NEW_LINE DEDENT future = calculate ( index + 1 , values_array , nums , accumulated_value * nums [ index ] ) NEW_LINE values_array [ index ] = accumulated_value * future NEW_LINE return nums [ index ] * future NEW_LINE DEDENT
NEW_LINE class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE output_arr = [ 0 ] * len ( nums ) NEW_LINE left_arr = [ 0 ] * len ( nums ) NEW_LINE right_arr = [ 0 ] * len ( nums ) NEW_LINE left_arr [ 0 ] = 1 NEW_LINE right_arr [ n - 1 ] = 1 NEW_LINE for i in range ( 1 , len ( left_arr ) ) : NEW_LINE INDENT left_arr [ i ] = left_arr [ i - 1 ] * nums [ i - 1 ] NEW_LINE DEDENT for i in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT right_arr [ i ] = right_arr [ i + 1 ] * nums [ i + 1 ] NEW_LINE DEDENT for i in range ( len ( left_arr ) ) : NEW_LINE INDENT output_arr [ i ] = left_arr [ i ] * right_arr [ i ] NEW_LINE DEDENT return output_arr NEW_LINE DEDENT DEDENT NEW_LINE
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT memo = { } NEW_LINE L = len ( nums ) NEW_LINE product = 1 NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT product *= num NEW_LINE memo [ 0 , i ] = product NEW_LINE DEDENT print ( memo ) NEW_LINE product = 1 NEW_LINE for i , num in enumerate ( nums [ : : - 1 ] ) : NEW_LINE INDENT product *= num NEW_LINE memo [ L - 1 - i , L - 1 ] = product NEW_LINE DEDENT print ( memo ) NEW_LINE ans = [ ] NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT ans . append ( memo [ i + 1 , L - 1 ] ) NEW_LINE DEDENT elif i == L - 1 : NEW_LINE INDENT ans . append ( memo [ 0 , i - 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT ans . append ( memo [ 0 , i - 1 ] * memo [ i + 1 , L - 1 ] ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE res = [ 1 ] * n NEW_LINE left = 1 NEW_LINE right = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT res [ i ] *= left NEW_LINE res [ ~ i ] *= right NEW_LINE left *= nums [ i ] NEW_LINE right *= nums [ ~ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT length = len ( nums ) NEW_LINE ans = [ 0 ] * length NEW_LINE P = 1 NEW_LINE for i in range ( length ) : NEW_LINE INDENT ans [ i ] = P NEW_LINE P *= nums [ i ] NEW_LINE DEDENT R = 1 NEW_LINE for i in reversed ( range ( length ) ) : NEW_LINE INDENT ans [ i ] = ans [ i ] * R NEW_LINE R *= nums [ i ] NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE res = [ 1 for _ in range ( n ) ] NEW_LINE prefix = suffix = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT res [ i ] *= prefix NEW_LINE prefix *= nums [ i ] NEW_LINE DEDENT for j in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT res [ j ] *= suffix NEW_LINE suffix *= nums [ j ] NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT left = 1 NEW_LINE product = [ ] NEW_LINE for ele in nums : NEW_LINE INDENT product . append ( left ) NEW_LINE left *= ele NEW_LINE DEDENT right = 1 NEW_LINE for i in range ( len ( nums ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT product [ i ] *= right NEW_LINE right *= nums [ i ] NEW_LINE DEDENT return product NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT length = len ( nums ) NEW_LINE answer = [ 0 ] * length NEW_LINE answer [ 0 ] = 1 NEW_LINE for i in range ( 1 , length ) : NEW_LINE INDENT answer [ i ] = nums [ i - 1 ] * answer [ i - 1 ] NEW_LINE DEDENT R = 1 ; NEW_LINE for i in reversed ( range ( length ) ) : NEW_LINE INDENT answer [ i ] = answer [ i ] * R NEW_LINE R *= nums [ i ] NEW_LINE DEDENT return answer NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT left_mult = [ 1 for i in nums ] NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT left_mult [ i ] = left_mult [ i - 1 ] * nums [ i - 1 ] NEW_LINE DEDENT result = [ 1 for i in nums ] NEW_LINE right_mult = 1 NEW_LINE for j in range ( len ( nums ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT result [ j ] = left_mult [ j ] * right_mult NEW_LINE right_mult = right_mult * nums [ j ] NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT res = [ 1 ] * len ( nums ) NEW_LINE l_prod = r_prod = 1 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT res [ i ] *= l_prod NEW_LINE res [ ~ i ] *= r_prod NEW_LINE l_prod *= nums [ i ] NEW_LINE r_prod *= nums [ ~ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE pointer = 0 NEW_LINE nums . reverse ( ) NEW_LINE for point0 in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ point0 ] == 0 : NEW_LINE INDENT save = 0 NEW_LINE for i in range ( pointer , point0 + 1 ) : NEW_LINE INDENT temp = save NEW_LINE save = nums [ i ] NEW_LINE nums [ i ] = temp NEW_LINE DEDENT pointer += 1 NEW_LINE DEDENT DEDENT nums . reverse ( ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE zero_ptr = 0 NEW_LINE while zero_ptr < len ( nums ) and nums [ zero_ptr ] != 0 : NEW_LINE INDENT zero_ptr += 1 NEW_LINE DEDENT closest_ptr = zero_ptr NEW_LINE while ( closest_ptr + 1 ) < len ( nums ) and nums [ closest_ptr + 1 ] == 0 : NEW_LINE INDENT closest_ptr += 1 NEW_LINE DEDENT closest_ptr += 1 NEW_LINE while closest_ptr < len ( nums ) : NEW_LINE INDENT tmp = nums [ zero_ptr ] NEW_LINE nums [ zero_ptr ] = nums [ closest_ptr ] NEW_LINE nums [ closest_ptr ] = tmp NEW_LINE zero_ptr = closest_ptr NEW_LINE while nums [ zero_ptr - 1 ] == 0 : NEW_LINE INDENT zero_ptr -= 1 NEW_LINE DEDENT while nums [ closest_ptr ] == 0 : NEW_LINE INDENT closest_ptr += 1 NEW_LINE if closest_ptr >= len ( nums ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT return nums NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE N = len ( nums ) NEW_LINE if N <= 1 : NEW_LINE INDENT return nums NEW_LINE DEDENT j = N - 1 NEW_LINE e = N NEW_LINE while j >= 0 : NEW_LINE INDENT if nums [ j ] == 0 : NEW_LINE INDENT e -= 1 NEW_LINE for i in range ( j , e ) : NEW_LINE INDENT nums [ i ] = nums [ i + 1 ] NEW_LINE DEDENT nums [ e ] = 0 NEW_LINE DEDENT j -= 1 NEW_LINE DEDENT return nums NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE count = 0 NEW_LINE i = 0 NEW_LINE n = len ( nums ) NEW_LINE while i < n - count : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT for j in range ( i , n - 1 - count ) : NEW_LINE INDENT nums [ j ] = nums [ j + 1 ] NEW_LINE DEDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT while i < n : NEW_LINE INDENT nums [ i ] = 0 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT left = right = 0 NEW_LINE N = len ( nums ) NEW_LINE while True : NEW_LINE INDENT while left < N and nums [ left ] != 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT right = left + 1 NEW_LINE while right < N and nums [ right ] == 0 : NEW_LINE INDENT right += 1 NEW_LINE DEDENT if right >= len ( nums ) : return NEW_LINE nums [ left ] , nums [ right ] = nums [ right ] , nums [ left ] NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE zero_ptr = 0 NEW_LINE while zero_ptr < len ( nums ) and nums [ zero_ptr ] != 0 : NEW_LINE INDENT zero_ptr += 1 NEW_LINE DEDENT closest_ptr = zero_ptr NEW_LINE while ( closest_ptr + 1 ) < len ( nums ) and nums [ closest_ptr + 1 ] == 0 : NEW_LINE INDENT closest_ptr += 1 NEW_LINE DEDENT closest_ptr += 1 NEW_LINE while closest_ptr < len ( nums ) : NEW_LINE INDENT tmp = nums [ zero_ptr ] NEW_LINE nums [ zero_ptr ] = nums [ closest_ptr ] NEW_LINE nums [ closest_ptr ] = tmp NEW_LINE zero_ptr = closest_ptr NEW_LINE while nums [ zero_ptr - 1 ] == 0 : NEW_LINE INDENT zero_ptr -= 1 NEW_LINE DEDENT while nums [ closest_ptr ] == 0 : NEW_LINE INDENT closest_ptr += 1 NEW_LINE if closest_ptr >= len ( nums ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT return nums NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE i , j , n = 0 , 0 , len ( nums ) NEW_LINE if n == 1 : NEW_LINE INDENT return NEW_LINE DEDENT while i < n and j < n : NEW_LINE INDENT while i < n and nums [ i ] != 0 : NEW_LINE INDENT i += 1 NEW_LINE DEDENT j = i + 1 NEW_LINE while j < n and nums [ j ] == 0 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT if j < n : NEW_LINE INDENT nums [ i ] , nums [ j ] = nums [ j ] , nums [ i ] NEW_LINE DEDENT DEDENT return NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE l = len ( nums ) NEW_LINE while j < l : NEW_LINE INDENT while nums [ i ] != 0 : NEW_LINE INDENT i += 1 NEW_LINE if i == l : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT j = i NEW_LINE while nums [ j ] == 0 : NEW_LINE INDENT j += 1 NEW_LINE if j == l : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT nums [ i ] , nums [ j ] = nums [ j ] , nums [ i ] NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT zero_finder = - 1 NEW_LINE zero_placer = - 1 NEW_LINE for i in range ( len ( nums ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT zero_finder = i NEW_LINE for i in range ( zero_finder + 1 , len ( nums ) ) : NEW_LINE INDENT nums [ i - 1 ] = nums [ i ] NEW_LINE DEDENT nums [ zero_placer ] = 0 NEW_LINE zero_placer -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE ln = len ( nums ) NEW_LINE ctr = 0 NEW_LINE buf = 0 NEW_LINE while ctr < ln : NEW_LINE INDENT if nums [ ctr ] == 0 : NEW_LINE INDENT for i in range ( ctr , ln - 1 ) : NEW_LINE INDENT nums [ i ] = nums [ i + 1 ] NEW_LINE DEDENT nums [ - 1 ] = 0 NEW_LINE DEDENT else : NEW_LINE INDENT ctr += 1 NEW_LINE DEDENT buf += 1 NEW_LINE if buf >= ln : break NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE left = right = 0 NEW_LINE length = len ( nums ) NEW_LINE while left < length and right < length : NEW_LINE INDENT while left < length and nums [ left ] != 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT right = left + 1 NEW_LINE while right < length and nums [ right ] == 0 : NEW_LINE INDENT right += 1 NEW_LINE DEDENT if left < length and right < length : NEW_LINE INDENT temp = nums [ left ] NEW_LINE nums [ left ] = nums [ right ] NEW_LINE nums [ right ] = temp NEW_LINE DEDENT left = left + 1 NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE n = len ( nums ) NEW_LINE l , r = 0 , 0 NEW_LINE for r in range ( 1 , n ) : NEW_LINE INDENT if nums [ r ] != 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT while l < n and r < n : NEW_LINE INDENT if nums [ l ] != 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r = l + 1 NEW_LINE while r < n : NEW_LINE INDENT if nums [ r ] != 0 : NEW_LINE INDENT break NEW_LINE DEDENT r += 1 NEW_LINE DEDENT if l >= n or r >= n : NEW_LINE INDENT return NEW_LINE DEDENT nums [ l ] , nums [ r ] = nums [ r ] , nums [ l ] NEW_LINE l , r = l + 1 , r + 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE n = len ( nums ) NEW_LINE i = - 1 NEW_LINE for i , v in enumerate ( nums ) : NEW_LINE INDENT if v == 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if i == - 1 : NEW_LINE INDENT return NEW_LINE DEDENT while True : NEW_LINE INDENT j = i + 1 NEW_LINE while j < n : NEW_LINE INDENT if nums [ j ] != 0 : NEW_LINE INDENT break NEW_LINE DEDENT j += 1 NEW_LINE DEDENT if j == n : NEW_LINE INDENT return NEW_LINE DEDENT nums [ i ] , nums [ j ] = nums [ j ] , nums [ i ] NEW_LINE i += 1 NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE i , n = 0 , len ( nums ) NEW_LINE if n <= 1 : NEW_LINE INDENT return NEW_LINE DEDENT while i < n : NEW_LINE INDENT if nums [ i ] != 0 : NEW_LINE INDENT i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT j = i + 1 NEW_LINE while j < n and nums [ j ] == 0 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT if j < n : NEW_LINE INDENT nums [ i ] , nums [ j ] = nums [ j ] , nums [ i ] NEW_LINE DEDENT i += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE N = len ( nums ) NEW_LINE i = 0 NEW_LINE while i < N : NEW_LINE INDENT while i < N and nums [ i ] != 0 : NEW_LINE INDENT i += 1 NEW_LINE DEDENT if i >= N - 1 : NEW_LINE INDENT return NEW_LINE DEDENT j = i + 1 NEW_LINE while j < N and nums [ j ] == 0 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT if j > N - 1 : NEW_LINE INDENT return NEW_LINE DEDENT nums [ i ] = nums [ j ] NEW_LINE nums [ j ] = 0 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE idx = 0 NEW_LINE i = 0 NEW_LINE listLen = len ( nums ) NEW_LINE while i < listLen : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT j = i + 1 NEW_LINE while j < listLen and nums [ j ] == 0 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT if j < listLen : NEW_LINE INDENT nums [ i ] , nums [ j ] = nums [ j ] , nums [ i ] NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE left = 0 NEW_LINE right = len ( nums ) - 1 NEW_LINE while right > left : NEW_LINE INDENT if nums [ left ] != 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT elif nums [ right ] == 0 : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( left , right ) : NEW_LINE INDENT nums [ i ] = nums [ i + 1 ] NEW_LINE DEDENT nums [ right ] = 0 NEW_LINE DEDENT DEDENT return NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : list ) -> None : NEW_LINE INDENT NEW_LINE i = 0 NEW_LINE count_move = 0 NEW_LINE while i < len ( nums ) - count_move : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT for j in range ( i , len ( nums ) - 1 ) : NEW_LINE INDENT nums [ j ] = nums [ j + 1 ] NEW_LINE DEDENT nums [ - 1 ] = 0 NEW_LINE count_move += 1 NEW_LINE continue NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT return None NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE def bubbleToEnd ( nums , i ) : NEW_LINE INDENT target = nums [ i ] NEW_LINE for i in range ( i , len ( nums ) - 1 ) : NEW_LINE INDENT nums [ i ] = nums [ i + 1 ] NEW_LINE DEDENT nums [ - 1 ] = target NEW_LINE DEDENT i = 0 NEW_LINE nZeroes = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT if nums [ i ] == 0 and i < ( len ( nums ) - nZeroes ) : NEW_LINE INDENT nZeroes += 1 NEW_LINE bubbleToEnd ( nums , i ) NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE def shift_to_left ( nums : List [ int ] , from_index : int ) -> None : NEW_LINE INDENT for i in range ( from_index , len ( nums ) - 1 ) : NEW_LINE INDENT nums [ i ] = nums [ i + 1 ] NEW_LINE DEDENT nums [ len ( nums ) - 1 ] = 0 NEW_LINE DEDENT i = 0 NEW_LINE amount_of_zeros = 0 NEW_LINE while i != len ( nums ) - amount_of_zeros : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT shift_to_left ( nums , i ) NEW_LINE i -= 1 NEW_LINE amount_of_zeros += 1 NEW_LINE DEDENT i += 1 NEW_LINE NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE def moveRecursively ( nums ) : NEW_LINE INDENT numZeros = nums . count ( 0 ) NEW_LINE if len ( nums ) == 1 or numZeros == 0 : NEW_LINE INDENT return NEW_LINE DEDENT elif sum ( nums [ - numZeros : ] ) == 0 : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT nums . pop ( i ) NEW_LINE nums . append ( 0 ) NEW_LINE break NEW_LINE DEDENT DEDENT moveRecursively ( nums ) NEW_LINE DEDENT DEDENT moveRecursively ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE pos = 0 NEW_LINE zpos = 0 NEW_LINE n = len ( nums ) NEW_LINE while zpos < n : NEW_LINE INDENT while zpos < n and nums [ zpos ] == 0 : NEW_LINE INDENT zpos += 1 NEW_LINE DEDENT if zpos < n and pos < n and nums [ pos ] == 0 : NEW_LINE INDENT nums [ pos ] , nums [ zpos ] = nums [ zpos ] , nums [ pos ] NEW_LINE DEDENT pos += 1 NEW_LINE zpos = pos NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE zeros = [ ] NEW_LINE for i in nums : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT zeros . append ( 0 ) NEW_LINE DEDENT DEDENT non_zeros = [ ] NEW_LINE for i in nums : NEW_LINE INDENT if i != 0 : NEW_LINE INDENT non_zeros . append ( i ) NEW_LINE DEDENT DEDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT nums [ i ] = ( non_zeros + zeros ) [ i ] NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT j = i NEW_LINE while j > 0 and nums [ j - 1 ] == 0 : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT if j != i : NEW_LINE INDENT temp = nums [ i ] NEW_LINE nums [ i ] = 0 NEW_LINE nums [ j ] = temp NEW_LINE DEDENT DEDENT return None NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE lenth = len ( nums ) NEW_LINE ptr1 , ptr2 = 0 , lenth NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT if num == 0 : NEW_LINE INDENT ptr = i + 1 NEW_LINE while ptr < lenth : NEW_LINE INDENT if nums [ ptr ] != 0 : NEW_LINE INDENT temp = nums [ i ] NEW_LINE nums [ i ] = nums [ ptr ] NEW_LINE nums [ ptr ] = temp NEW_LINE break NEW_LINE DEDENT ptr += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != 0 : NEW_LINE INDENT j = i NEW_LINE while j > 0 and nums [ j - 1 ] == 0 : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT nums [ i ] , nums [ j ] = nums [ j ] , nums [ i ] NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE cnt = 0 NEW_LINE z = 0 NEW_LINE n = len ( nums ) NEW_LINE while True : NEW_LINE INDENT while z < len ( nums ) and nums [ z ] != 0 : NEW_LINE INDENT z += 1 NEW_LINE DEDENT nz = z NEW_LINE while nz < len ( nums ) and nums [ nz ] == 0 : NEW_LINE INDENT nz += 1 NEW_LINE DEDENT if nz != len ( nums ) : NEW_LINE INDENT for i in range ( n - nz ) : NEW_LINE INDENT nums [ z + i ] = nums [ nz + i ] NEW_LINE DEDENT for i in range ( n - ( nz - z ) , n ) : NEW_LINE INDENT nums [ i ] = 0 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE if len ( nums ) == 0 or len ( nums ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT def _find_next_non_zero ( start ) : NEW_LINE INDENT ptr = 1 NEW_LINE for index , num in enumerate ( nums [ start : ] ) : NEW_LINE INDENT if num != 0 : NEW_LINE INDENT return ptr + index NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT for index , val in enumerate ( nums ) : NEW_LINE INDENT if val != 0 : NEW_LINE INDENT continue NEW_LINE DEDENT non_zero = _find_next_non_zero ( index + 1 ) NEW_LINE if non_zero == - 1 : NEW_LINE INDENT return NEW_LINE DEDENT nums [ index ] = nums [ index + non_zero ] NEW_LINE nums [ index + non_zero ] = 0 NEW_LINE DEDENT return NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT from collections import Counter NEW_LINE def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE def findNonZero ( subarr ) : NEW_LINE INDENT for i in range ( len ( subarr ) ) : NEW_LINE INDENT if subarr [ i ] != 0 : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT curr = 0 NEW_LINE while curr < len ( nums ) - 1 : NEW_LINE INDENT if nums [ curr ] == 0 : NEW_LINE INDENT x = findNonZero ( nums [ curr : ] ) NEW_LINE if x == - 1 : NEW_LINE INDENT break NEW_LINE DEDENT nums [ curr ] , nums [ curr + x ] = nums [ curr + x ] , nums [ curr ] NEW_LINE DEDENT curr += 1 NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE c = nums . count ( 0 ) NEW_LINE while c != 0 : NEW_LINE INDENT i = nums . index ( 0 ) NEW_LINE for j in range ( i + 1 , len ( nums ) ) : NEW_LINE INDENT nums [ j - 1 ] = nums [ j ] NEW_LINE DEDENT nums [ len ( nums ) - 1 ] = 0 NEW_LINE c = c - 1 NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE length = len ( nums ) NEW_LINE i = 0 NEW_LINE while i < length and nums [ i ] != 0 : NEW_LINE INDENT i += 1 NEW_LINE DEDENT if i == length : NEW_LINE INDENT return NEW_LINE DEDENT j = i + 1 NEW_LINE while j < length : NEW_LINE INDENT while j < length - 1 and nums [ j ] == 0 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT nums [ j ] , nums [ i ] = nums [ i ] , nums [ j ] NEW_LINE i += 1 NEW_LINE j = i + 1 NEW_LINE DEDENT return nums NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE length = len ( nums ) NEW_LINE i = 0 NEW_LINE cnt = 0 NEW_LINE if 0 in nums : NEW_LINE INDENT while i < length : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT else : NEW_LINE INDENT j = i - cnt NEW_LINE nums [ i ] , nums [ i - cnt ] = nums [ i - cnt ] , nums [ i ] NEW_LINE i = j NEW_LINE cnt = 0 NEW_LINE DEDENT i += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE for curr in range ( 0 , len ( nums ) ) : NEW_LINE INDENT if nums [ curr ] == 0 : NEW_LINE INDENT nonZero = curr NEW_LINE while ( nonZero < len ( nums ) and nums [ nonZero ] == 0 ) : NEW_LINE INDENT nonZero = nonZero + 1 NEW_LINE DEDENT if nonZero == len ( nums ) : NEW_LINE INDENT return nums NEW_LINE DEDENT else : NEW_LINE INDENT nums [ curr ] = nums [ nonZero ] NEW_LINE nums [ nonZero ] = 0 NEW_LINE nonZero = nonZero + 1 NEW_LINE DEDENT DEDENT DEDENT return nums NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE if len ( nums ) > 0 : NEW_LINE INDENT p1 = 0 NEW_LINE p2 = 0 NEW_LINE N = len ( nums ) NEW_LINE while p1 < N - 1 : NEW_LINE INDENT if nums [ p1 ] != 0 : NEW_LINE INDENT p1 += 1 NEW_LINE p2 = p1 NEW_LINE DEDENT else : NEW_LINE INDENT p2 = p1 + 1 NEW_LINE while p2 < N - 1 and nums [ p2 ] == 0 : NEW_LINE INDENT p2 += 1 NEW_LINE DEDENT nums [ p1 ] , nums [ p2 ] = nums [ p2 ] , nums [ p1 ] NEW_LINE p1 += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE for i in range ( 0 , len ( nums ) ) : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT cnt = i NEW_LINE while nums [ cnt ] == 0 : NEW_LINE INDENT cnt += 1 NEW_LINE if cnt == len ( nums ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT nums [ cnt ] , nums [ i ] = nums [ i ] , nums [ cnt ] NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT j = i + 1 NEW_LINE while j < len ( nums ) and nums [ j ] == 0 : NEW_LINE INDENT j = j + 1 NEW_LINE DEDENT if j == len ( nums ) : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT temp = nums [ j ] NEW_LINE nums [ j ] = nums [ i ] NEW_LINE nums [ i ] = temp NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE while i < len ( nums ) and j < len ( nums ) : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT j = i + 1 NEW_LINE while j < len ( nums ) and nums [ j ] == 0 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT if j < len ( nums ) : NEW_LINE INDENT nums [ i ] , nums [ j ] = nums [ j ] , nums [ i ] NEW_LINE i += 1 NEW_LINE j += 1 NEW_LINE DEDENT else : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT if not nums or len ( nums ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT i , j = 0 , 1 NEW_LINE while j < len ( nums ) and j < len ( nums ) : NEW_LINE INDENT while i < len ( nums ) and nums [ i ] != 0 : NEW_LINE INDENT i += 1 NEW_LINE DEDENT if i >= len ( nums ) - 1 : NEW_LINE INDENT return NEW_LINE DEDENT j = i NEW_LINE while j < len ( nums ) and nums [ j ] == 0 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT if j > len ( nums ) - 1 : NEW_LINE INDENT return NEW_LINE DEDENT nums [ i ] , nums [ j ] = nums [ j ] , nums [ i ] NEW_LINE i += 1 NEW_LINE DEDENT return NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT j = i + 1 NEW_LINE while j < len ( nums ) and nums [ j ] == 0 : NEW_LINE INDENT j = j + 1 NEW_LINE DEDENT if j == len ( nums ) : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT temp = nums [ j ] NEW_LINE nums [ j ] = nums [ i ] NEW_LINE nums [ i ] = temp NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT r = i + 1 NEW_LINE while r < len ( nums ) and nums [ r ] == 0 : NEW_LINE INDENT r += 1 NEW_LINE DEDENT if r >= len ( nums ) : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT nums [ i ] , nums [ r ] = nums [ r ] , nums [ i ] NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT if not nums or len ( nums ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT one = 0 NEW_LINE zero = 0 NEW_LINE while ( one < len ( nums ) ) and zero < len ( nums ) : NEW_LINE INDENT while zero < len ( nums ) and nums [ zero ] != 0 : NEW_LINE INDENT zero += 1 NEW_LINE DEDENT one = zero NEW_LINE while one < len ( nums ) and nums [ one ] == 0 : NEW_LINE INDENT one += 1 NEW_LINE DEDENT if one < len ( nums ) and zero < len ( nums ) : NEW_LINE INDENT nums [ one ] , nums [ zero ] = nums [ zero ] , nums [ one ] NEW_LINE one += 1 NEW_LINE zero += 1 NEW_LINE DEDENT DEDENT return NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if not ( nums [ i ] ) : NEW_LINE INDENT j = i + 1 NEW_LINE while j < len ( nums ) : NEW_LINE INDENT if nums [ j ] : NEW_LINE INDENT nums [ i ] , nums [ j ] = nums [ j ] , nums [ i ] NEW_LINE i = j + 1 NEW_LINE j = len ( nums ) NEW_LINE DEDENT else : NEW_LINE INDENT j += 1 NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE start = 0 NEW_LINE end = len ( nums ) - 1 NEW_LINE while start < end : NEW_LINE INDENT if nums [ start ] == 0 : NEW_LINE INDENT self . rotate ( nums , start , end ) NEW_LINE end -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT start += 1 NEW_LINE DEDENT DEDENT return nums NEW_LINE DEDENT def rotate ( self , nums : List [ int ] , start , end ) : NEW_LINE INDENT while start < end : NEW_LINE INDENT nums [ start ] = nums [ start + 1 ] NEW_LINE start += 1 NEW_LINE DEDENT nums [ end ] = 0 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE zero_idx = 0 NEW_LINE curr_idx = 0 NEW_LINE while zero_idx < len ( nums ) : NEW_LINE INDENT if nums [ zero_idx ] == 0 : NEW_LINE INDENT curr_idx = zero_idx NEW_LINE while curr_idx < len ( nums ) : NEW_LINE INDENT if nums [ curr_idx ] : NEW_LINE INDENT nums [ zero_idx ] , nums [ curr_idx ] = nums [ curr_idx ] , nums [ zero_idx ] NEW_LINE break NEW_LINE DEDENT curr_idx += 1 NEW_LINE DEDENT DEDENT zero_idx += 1 NEW_LINE DEDENT return NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE if len ( nums ) == 1 : NEW_LINE INDENT return NEW_LINE DEDENT r = 0 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT r = i + 1 NEW_LINE while r < len ( nums ) and nums [ r ] == 0 : NEW_LINE INDENT r += 1 NEW_LINE DEDENT if r >= len ( nums ) : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT nums [ i ] , nums [ r ] = nums [ r ] , nums [ i ] NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE zero , non_zero = 0 , 0 NEW_LINE while zero < len ( nums ) : NEW_LINE INDENT while zero < len ( nums ) : NEW_LINE INDENT if nums [ zero ] == 0 : NEW_LINE INDENT break NEW_LINE DEDENT zero += 1 NEW_LINE DEDENT non_zero = zero + 1 NEW_LINE while non_zero < len ( nums ) : NEW_LINE INDENT if nums [ non_zero ] : NEW_LINE INDENT break NEW_LINE DEDENT non_zero += 1 NEW_LINE DEDENT if non_zero < len ( nums ) : NEW_LINE INDENT nums [ zero ] , nums [ non_zero ] = nums [ non_zero ] , nums [ zero ] NEW_LINE DEDENT zero += 1 NEW_LINE DEDENT return nums NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def gameOfLife ( self , board : List [ List [ int ] ] ) -> None : NEW_LINE INDENT NEW_LINE neighbors = [ ( 1 , 0 ) , ( 1 , - 1 ) , ( 0 , - 1 ) , ( - 1 , - 1 ) , ( - 1 , 0 ) , ( - 1 , 1 ) , ( 0 , 1 ) , ( 1 , 1 ) ] NEW_LINE rows = len ( board ) NEW_LINE cols = len ( board [ 0 ] ) NEW_LINE copy_board = [ [ board [ row ] [ col ] for col in range ( cols ) ] for row in range ( rows ) ] NEW_LINE for row in range ( rows ) : NEW_LINE INDENT for col in range ( cols ) : NEW_LINE INDENT live_neighbors = 0 NEW_LINE for neighbor in neighbors : NEW_LINE INDENT r = ( row + neighbor [ 0 ] ) NEW_LINE c = ( col + neighbor [ 1 ] ) NEW_LINE if ( r < rows and r >= 0 ) and ( c < cols and c >= 0 ) and ( copy_board [ r ] [ c ] == 1 ) : NEW_LINE INDENT live_neighbors += 1 NEW_LINE DEDENT DEDENT if copy_board [ row ] [ col ] == 1 and ( live_neighbors < 2 or live_neighbors > 3 ) : NEW_LINE INDENT board [ row ] [ col ] = 0 NEW_LINE DEDENT if copy_board [ row ] [ col ] == 0 and live_neighbors == 3 : NEW_LINE INDENT board [ row ] [ col ] = 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def gameOfLife ( self , board : List [ List [ int ] ] ) -> None : NEW_LINE INDENT NEW_LINE neighbors = [ ( 1 , 0 ) , ( 1 , - 1 ) , ( 0 , - 1 ) , ( - 1 , - 1 ) , ( - 1 , 0 ) , ( - 1 , 1 ) , ( 0 , 1 ) , ( 1 , 1 ) ] NEW_LINE rows = len ( board ) NEW_LINE cols = len ( board [ 0 ] ) NEW_LINE copy_board = [ [ board [ row ] [ col ] for col in range ( cols ) ] for row in range ( rows ) ] NEW_LINE for row in range ( rows ) : NEW_LINE INDENT for col in range ( cols ) : NEW_LINE INDENT live_neighbors = 0 NEW_LINE for neighbor in neighbors : NEW_LINE INDENT r = ( row + neighbor [ 0 ] ) NEW_LINE c = ( col + neighbor [ 1 ] ) NEW_LINE if ( r < rows and r >= 0 ) and ( c < cols and c >= 0 ) and ( copy_board [ r ] [ c ] == 1 ) : NEW_LINE INDENT live_neighbors += 1 NEW_LINE DEDENT DEDENT if copy_board [ row ] [ col ] == 1 and ( live_neighbors < 2 or live_neighbors > 3 ) : NEW_LINE INDENT board [ row ] [ col ] = 0 NEW_LINE DEDENT if copy_board [ row ] [ col ] == 0 and live_neighbors == 3 : NEW_LINE INDENT board [ row ] [ col ] = 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def gameOfLife ( self , board : List [ List [ int ] ] ) -> None : NEW_LINE INDENT NEW_LINE if not board or not board [ 0 ] : NEW_LINE INDENT return board NEW_LINE DEDENT num_rows = len ( board ) NEW_LINE num_cols = len ( board [ 0 ] ) NEW_LINE new_board = [ ] NEW_LINE for i in range ( num_rows ) : NEW_LINE INDENT new_row = [ ] NEW_LINE for j in range ( num_cols ) : NEW_LINE INDENT neighbors = [ ] NEW_LINE if i > 0 and j > 0 : NEW_LINE INDENT neighbors . append ( ( i - 1 , j - 1 ) ) NEW_LINE DEDENT if i < num_rows - 1 and j > 0 : NEW_LINE INDENT neighbors . append ( ( i + 1 , j - 1 ) ) NEW_LINE DEDENT if i > 0 and j < num_cols - 1 : NEW_LINE INDENT neighbors . append ( ( i - 1 , j + 1 ) ) NEW_LINE DEDENT if i < num_rows - 1 and j < num_cols - 1 : NEW_LINE INDENT neighbors . append ( ( i + 1 , j + 1 ) ) NEW_LINE DEDENT if i < num_rows - 1 : NEW_LINE INDENT neighbors . append ( ( i + 1 , j ) ) NEW_LINE DEDENT if i > 0 : NEW_LINE INDENT neighbors . append ( ( i - 1 , j ) ) NEW_LINE DEDENT if j < num_cols - 1 : NEW_LINE INDENT neighbors . append ( ( i , j + 1 ) ) NEW_LINE DEDENT if j > 0 : NEW_LINE INDENT neighbors . append ( ( i , j - 1 ) ) NEW_LINE DEDENT num_live_neighbors = 0 NEW_LINE for neighbor_i , neighbor_j in neighbors : NEW_LINE INDENT if board [ neighbor_i ] [ neighbor_j ] == 1 : NEW_LINE INDENT num_live_neighbors += 1 NEW_LINE DEDENT DEDENT if board [ i ] [ j ] == 1 : NEW_LINE INDENT new_cell_val = 1 if num_live_neighbors in [ 2 , 3 ] else 0 NEW_LINE DEDENT else : NEW_LINE INDENT new_cell_val = 1 if num_live_neighbors == 3 else 0 NEW_LINE DEDENT new_row . append ( new_cell_val ) NEW_LINE DEDENT new_board . append ( new_row ) NEW_LINE DEDENT for i in range ( num_rows ) : NEW_LINE INDENT for j in range ( num_cols ) : NEW_LINE INDENT board [ i ] [ j ] = new_board [ i ] [ j ] NEW_LINE DEDENT DEDENT return new_board NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def gameOfLife ( self , board : List [ List [ int ] ] ) -> None : NEW_LINE INDENT NEW_LINE neighbors = [ ( - 1 , - 1 ) , ( - 1 , 0 ) , ( - 1 , 1 ) , ( 0 , - 1 ) , ( 0 , 1 ) , ( 1 , - 1 ) , ( 1 , 0 ) , ( 1 , 1 ) ] NEW_LINE rows = len ( board ) NEW_LINE cols = len ( board [ 0 ] ) NEW_LINE for row in range ( rows ) : NEW_LINE INDENT for col in range ( cols ) : NEW_LINE INDENT live_neighbors = 0 NEW_LINE for neighbor in neighbors : NEW_LINE INDENT r = row + neighbor [ 0 ] NEW_LINE c = col + neighbor [ 1 ] NEW_LINE if 0 <= r < rows and 0 <= c < cols and abs ( board [ r ] [ c ] ) == 1 : NEW_LINE INDENT live_neighbors += 1 NEW_LINE DEDENT DEDENT if live_neighbors < 2 and board [ row ] [ col ] == 1 : NEW_LINE INDENT board [ row ] [ col ] = - 1 NEW_LINE DEDENT elif live_neighbors > 3 and board [ row ] [ col ] == 1 : NEW_LINE INDENT board [ row ] [ col ] = - 1 NEW_LINE DEDENT elif live_neighbors == 3 and board [ row ] [ col ] == 0 : NEW_LINE INDENT board [ row ] [ col ] = 2 NEW_LINE DEDENT DEDENT DEDENT for row in range ( rows ) : NEW_LINE INDENT for col in range ( cols ) : NEW_LINE INDENT if board [ row ] [ col ] == - 1 : NEW_LINE INDENT board [ row ] [ col ] = 0 NEW_LINE DEDENT elif board [ row ] [ col ] == 2 : NEW_LINE INDENT board [ row ] [ col ] = 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
class Cell : NEW_LINE INDENT def __init__ ( self , state , neighbors ) : NEW_LINE INDENT self . state = state NEW_LINE self . new_state = state NEW_LINE self . neighbors = neighbors NEW_LINE DEDENT DEDENT class Solution : NEW_LINE INDENT def gameOfLife ( self , board : List [ List [ int ] ] ) -> None : NEW_LINE INDENT NEW_LINE for i in range ( 0 , len ( board ) ) : NEW_LINE INDENT for j in range ( 0 , len ( board [ i ] ) ) : NEW_LINE INDENT cell = Cell ( board [ i ] [ j ] , [ ] ) NEW_LINE board [ i ] [ j ] = cell NEW_LINE DEDENT DEDENT for i in range ( 0 , len ( board ) ) : NEW_LINE INDENT for j in range ( 0 , len ( board [ i ] ) ) : NEW_LINE INDENT neighbors = [ ] NEW_LINE if j > 0 : NEW_LINE INDENT neighbors . append ( board [ i ] [ j - 1 ] . state ) NEW_LINE DEDENT if j < len ( board [ i ] ) - 1 : NEW_LINE INDENT neighbors . append ( board [ i ] [ j + 1 ] . state ) NEW_LINE DEDENT if i > 0 : NEW_LINE INDENT neighbors . append ( board [ i - 1 ] [ j ] . state ) NEW_LINE DEDENT if i < len ( board ) - 1 : NEW_LINE INDENT neighbors . append ( board [ i + 1 ] [ j ] . state ) NEW_LINE DEDENT if i > 0 and j > 0 : NEW_LINE INDENT neighbors . append ( board [ i - 1 ] [ j - 1 ] . state ) NEW_LINE DEDENT if i < len ( board ) - 1 and j < len ( board [ i ] ) - 1 : NEW_LINE INDENT neighbors . append ( board [ i + 1 ] [ j + 1 ] . state ) NEW_LINE DEDENT if i > 0 and j < len ( board [ i ] ) - 1 : NEW_LINE INDENT neighbors . append ( board [ i - 1 ] [ j + 1 ] . state ) NEW_LINE DEDENT if j > 0 and i < len ( board ) - 1 : NEW_LINE INDENT neighbors . append ( board [ i + 1 ] [ j - 1 ] . state ) NEW_LINE DEDENT board [ i ] [ j ] . neighbors = neighbors NEW_LINE cell = self . checkCellState ( board [ i ] [ j ] ) NEW_LINE board [ i ] [ j ] . new_state = cell . new_state NEW_LINE DEDENT DEDENT for i in range ( 0 , len ( board ) ) : NEW_LINE INDENT for j in range ( 0 , len ( board [ i ] ) ) : NEW_LINE INDENT board [ i ] [ j ] = board [ i ] [ j ] . new_state NEW_LINE DEDENT DEDENT DEDENT def checkCellState ( self , cell ) : NEW_LINE INDENT neighbor_1s = 0 NEW_LINE for neighbor in cell . neighbors : NEW_LINE INDENT if neighbor == 1 : NEW_LINE INDENT neighbor_1s += 1 NEW_LINE DEDENT DEDENT if neighbor_1s < 2 : NEW_LINE INDENT cell . new_state = 0 NEW_LINE DEDENT if neighbor_1s == 2 or neighbor_1s == 3 : NEW_LINE INDENT cell . new_state = cell . state NEW_LINE DEDENT if neighbor_1s > 3 : NEW_LINE INDENT cell . new_state = 0 NEW_LINE DEDENT if cell . state == 0 and neighbor_1s == 3 : NEW_LINE INDENT cell . new_state = 1 NEW_LINE DEDENT return cell NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def count ( self , board , i , j , m , n ) : NEW_LINE INDENT c = 0 NEW_LINE if 0 <= j + 1 < m and 0 <= i < n and board [ i ] [ j + 1 ] == 1 : NEW_LINE INDENT c += 1 NEW_LINE DEDENT if 0 <= j - 1 < m and 0 <= i < n and board [ i ] [ j - 1 ] == 1 : NEW_LINE INDENT c += 1 NEW_LINE DEDENT if 0 <= j < m and 0 <= i - 1 < n and board [ i - 1 ] [ j ] == 1 : NEW_LINE INDENT c += 1 NEW_LINE DEDENT if 0 <= j + 1 < m and 0 <= i - 1 < n and board [ i - 1 ] [ j + 1 ] == 1 : NEW_LINE INDENT c += 1 NEW_LINE DEDENT if 0 <= j + 1 < m and 0 <= i + 1 < n and board [ i + 1 ] [ j + 1 ] == 1 : NEW_LINE INDENT c += 1 NEW_LINE DEDENT if 0 <= j - 1 < m and 0 <= i + 1 < n and board [ i + 1 ] [ j - 1 ] == 1 : NEW_LINE INDENT c += 1 NEW_LINE DEDENT if 0 <= j < m and 0 <= i + 1 < n and board [ i + 1 ] [ j ] == 1 : NEW_LINE INDENT c += 1 NEW_LINE DEDENT if 0 <= j - 1 < m and 0 <= i - 1 < n and board [ i - 1 ] [ j - 1 ] == 1 : NEW_LINE INDENT c += 1 NEW_LINE DEDENT return c NEW_LINE DEDENT def gameOfLife ( self , board : List [ List [ int ] ] ) -> None : NEW_LINE INDENT NEW_LINE n = len ( board ) NEW_LINE m = len ( board [ 0 ] ) NEW_LINE x = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT x . append ( [ ] ) NEW_LINE for j in range ( m ) : NEW_LINE INDENT x [ i ] . append ( board [ i ] [ j ] ) NEW_LINE DEDENT DEDENT self . count ( board , 2 , 2 , m , n ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT if self . count ( board , i , j , m , n ) == 3 : NEW_LINE INDENT x [ i ] [ j ] = 1 NEW_LINE DEDENT if self . count ( board , i , j , m , n ) == 2 : NEW_LINE INDENT if x [ i ] [ j ] == 0 : NEW_LINE INDENT x [ i ] [ j ] = 0 NEW_LINE DEDENT else : NEW_LINE INDENT x [ i ] [ j ] = 1 NEW_LINE DEDENT DEDENT if self . count ( board , i , j , m , n ) > 3 or self . count ( board , i , j , m , n ) < 2 : NEW_LINE INDENT x [ i ] [ j ] = 0 NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT board [ i ] [ j ] = x [ i ] [ j ] NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def gameOfLife ( self , board : List [ List [ int ] ] ) -> None : NEW_LINE INDENT NEW_LINE if not board or not board [ 0 ] : NEW_LINE INDENT return board NEW_LINE DEDENT num_rows = len ( board ) NEW_LINE num_cols = len ( board [ 0 ] ) NEW_LINE for i in range ( num_rows ) : NEW_LINE INDENT for j in range ( num_cols ) : NEW_LINE INDENT neighbors = [ ] NEW_LINE if i > 0 and j > 0 : NEW_LINE INDENT neighbors . append ( ( i - 1 , j - 1 ) ) NEW_LINE DEDENT if i < num_rows - 1 and j > 0 : NEW_LINE INDENT neighbors . append ( ( i + 1 , j - 1 ) ) NEW_LINE DEDENT if i > 0 and j < num_cols - 1 : NEW_LINE INDENT neighbors . append ( ( i - 1 , j + 1 ) ) NEW_LINE DEDENT if i < num_rows - 1 and j < num_cols - 1 : NEW_LINE INDENT neighbors . append ( ( i + 1 , j + 1 ) ) NEW_LINE DEDENT if i < num_rows - 1 : NEW_LINE INDENT neighbors . append ( ( i + 1 , j ) ) NEW_LINE DEDENT if i > 0 : NEW_LINE INDENT neighbors . append ( ( i - 1 , j ) ) NEW_LINE DEDENT if j < num_cols - 1 : NEW_LINE INDENT neighbors . append ( ( i , j + 1 ) ) NEW_LINE DEDENT if j > 0 : NEW_LINE INDENT neighbors . append ( ( i , j - 1 ) ) NEW_LINE DEDENT num_live_neighbors = 0 NEW_LINE for neighbor_i , neighbor_j in neighbors : NEW_LINE INDENT if abs ( board [ neighbor_i ] [ neighbor_j ] ) == 1 : NEW_LINE INDENT num_live_neighbors += 1 NEW_LINE DEDENT DEDENT if board [ i ] [ j ] == 1 : NEW_LINE INDENT board [ i ] [ j ] = 1 if num_live_neighbors in [ 2 , 3 ] else - 1 NEW_LINE DEDENT else : NEW_LINE INDENT board [ i ] [ j ] = 2 if num_live_neighbors == 3 else 0 NEW_LINE DEDENT DEDENT DEDENT for i in range ( num_rows ) : NEW_LINE INDENT for j in range ( num_cols ) : NEW_LINE INDENT board [ i ] [ j ] = 1 if board [ i ] [ j ] > 0 else 0 NEW_LINE DEDENT DEDENT return board NEW_LINE DEDENT def gameOfLife_newboard ( self , board : List [ List [ int ] ] ) -> None : NEW_LINE INDENT NEW_LINE if not board or not board [ 0 ] : NEW_LINE INDENT return board NEW_LINE DEDENT num_rows = len ( board ) NEW_LINE num_cols = len ( board [ 0 ] ) NEW_LINE new_board = [ ] NEW_LINE for i in range ( num_rows ) : NEW_LINE INDENT new_row = [ ] NEW_LINE for j in range ( num_cols ) : NEW_LINE INDENT neighbors = [ ] NEW_LINE if i > 0 and j > 0 : NEW_LINE INDENT neighbors . append ( ( i - 1 , j - 1 ) ) NEW_LINE DEDENT if i < num_rows - 1 and j > 0 : NEW_LINE INDENT neighbors . append ( ( i + 1 , j - 1 ) ) NEW_LINE DEDENT if i > 0 and j < num_cols - 1 : NEW_LINE INDENT neighbors . append ( ( i - 1 , j + 1 ) ) NEW_LINE DEDENT if i < num_rows - 1 and j < num_cols - 1 : NEW_LINE INDENT neighbors . append ( ( i + 1 , j + 1 ) ) NEW_LINE DEDENT if i < num_rows - 1 : NEW_LINE INDENT neighbors . append ( ( i + 1 , j ) ) NEW_LINE DEDENT if i > 0 : NEW_LINE INDENT neighbors . append ( ( i - 1 , j ) ) NEW_LINE DEDENT if j < num_cols - 1 : NEW_LINE INDENT neighbors . append ( ( i , j + 1 ) ) NEW_LINE DEDENT if j > 0 : NEW_LINE INDENT neighbors . append ( ( i , j - 1 ) ) NEW_LINE DEDENT num_live_neighbors = 0 NEW_LINE for neighbor_i , neighbor_j in neighbors : NEW_LINE INDENT if board [ neighbor_i ] [ neighbor_j ] == 1 : NEW_LINE INDENT num_live_neighbors += 1 NEW_LINE DEDENT DEDENT if board [ i ] [ j ] == 1 : NEW_LINE INDENT new_cell_val = 1 if num_live_neighbors in [ 2 , 3 ] else 0 NEW_LINE DEDENT else : NEW_LINE INDENT new_cell_val = 1 if num_live_neighbors == 3 else 0 NEW_LINE DEDENT new_row . append ( new_cell_val ) NEW_LINE DEDENT new_board . append ( new_row ) NEW_LINE DEDENT for i in range ( num_rows ) : NEW_LINE INDENT for j in range ( num_cols ) : NEW_LINE INDENT board [ i ] [ j ] = new_board [ i ] [ j ] NEW_LINE DEDENT DEDENT return new_board NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def gameOfLife ( self , board : List [ List [ int ] ] ) -> None : NEW_LINE INDENT NEW_LINE if len ( board ) < 1 : NEW_LINE INDENT return NEW_LINE DEDENT updatedBoard = [ [ 0 for i in range ( len ( board [ 0 ] ) ) ] for j in range ( len ( board ) ) ] NEW_LINE n = len ( board ) NEW_LINE m = len ( board [ 0 ] ) NEW_LINE dirs = [ [ 0 , 1 ] , [ 1 , 0 ] , [ - 1 , 0 ] , [ 0 , - 1 ] , [ 1 , 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] , [ - 1 , - 1 ] ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT live , dead = 0 , 0 NEW_LINE for d in dirs : NEW_LINE INDENT r , c = i + d [ 0 ] , j + d [ 1 ] NEW_LINE if 0 <= r < n and 0 <= c < m : NEW_LINE INDENT if board [ r ] [ c ] == 1 : NEW_LINE INDENT live += 1 NEW_LINE DEDENT else : NEW_LINE INDENT dead += 1 NEW_LINE DEDENT DEDENT DEDENT if board [ i ] [ j ] == 0 : NEW_LINE INDENT if live == 3 : NEW_LINE INDENT updatedBoard [ i ] [ j ] = 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if live < 2 or live > 3 : NEW_LINE INDENT updatedBoard [ i ] [ j ] = 0 NEW_LINE DEDENT else : NEW_LINE INDENT updatedBoard [ i ] [ j ] = 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT board [ i ] [ j ] = updatedBoard [ i ] [ j ] NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def gameOfLife ( self , board : List [ List [ int ] ] ) -> None : NEW_LINE INDENT NEW_LINE row = len ( board ) NEW_LINE col = len ( board [ 0 ] ) NEW_LINE def count_neib ( r , c ) : NEW_LINE INDENT row_start = max ( 0 , r - 1 ) NEW_LINE col_start = max ( 0 , c - 1 ) NEW_LINE row_end = min ( row , r + 2 ) NEW_LINE col_end = min ( col , c + 2 ) NEW_LINE counter = 0 NEW_LINE for ii in range ( row_start , row_end ) : NEW_LINE INDENT for jj in range ( col_start , col_end ) : NEW_LINE INDENT if ( ii != r or jj != c ) and ( board [ ii ] [ jj ] in [ 1 , 2 ] ) : NEW_LINE INDENT counter += 1 NEW_LINE DEDENT DEDENT DEDENT return counter NEW_LINE DEDENT for ii in range ( row ) : NEW_LINE INDENT for jj in range ( col ) : NEW_LINE INDENT if board [ ii ] [ jj ] == 0 and count_neib ( ii , jj ) == 3 : NEW_LINE INDENT board [ ii ] [ jj ] = 3 NEW_LINE DEDENT elif board [ ii ] [ jj ] == 1 and ( count_neib ( ii , jj ) < 2 or count_neib ( ii , jj ) > 3 ) : NEW_LINE INDENT board [ ii ] [ jj ] = 2 NEW_LINE DEDENT DEDENT DEDENT for ii in range ( row ) : NEW_LINE INDENT for jj in range ( col ) : NEW_LINE INDENT board [ ii ] [ jj ] %= 2 NEW_LINE DEDENT DEDENT return board NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT desc_arr = list ( dict . fromkeys ( nums ) ) NEW_LINE desc_arr . sort ( reverse = True ) NEW_LINE if len ( desc_arr ) < 3 : NEW_LINE INDENT return desc_arr [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return desc_arr [ 2 ] NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) == 1 : return nums [ 0 ] NEW_LINE if len ( nums ) == 2 : return max ( nums [ 0 ] , nums [ 1 ] ) NEW_LINE m = mm = mmm = - float ( 'Inf' ) NEW_LINE for num in nums : NEW_LINE INDENT if num in [ m , mm , mmm ] : continue NEW_LINE if num > m : NEW_LINE INDENT m , mm , mmm = num , m , mm NEW_LINE DEDENT elif num > mm : NEW_LINE INDENT mm , mmm = num , mm NEW_LINE DEDENT elif num > mmm : NEW_LINE INDENT mmm = num NEW_LINE DEDENT DEDENT return mmm if mmm > - float ( 'Inf' ) else m NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT max_ = mid = min_ = float ( '-inf' ) NEW_LINE for n in nums : NEW_LINE INDENT if n > max_ : NEW_LINE INDENT max_ , mid , min_ = n , max_ , mid NEW_LINE DEDENT elif max_ > n > mid : NEW_LINE INDENT mid , min_ = n , mid NEW_LINE DEDENT elif mid > n > min_ : NEW_LINE INDENT min_ = n NEW_LINE DEDENT DEDENT return max_ if mid == float ( '-inf' ) or min_ == float ( '-inf' ) else min_ NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT tmp = sorted ( list ( set ( nums ) ) ) NEW_LINE if len ( tmp ) < 3 : NEW_LINE INDENT return max ( nums ) NEW_LINE DEDENT else : NEW_LINE INDENT tmp . reverse ( ) NEW_LINE return tmp [ 2 ] NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT nums = list ( set ( nums ) ) NEW_LINE if len ( nums ) < 3 : NEW_LINE INDENT return max ( nums ) NEW_LINE DEDENT else : NEW_LINE INDENT x = 3 NEW_LINE while x != 1 : NEW_LINE INDENT nums . remove ( max ( nums ) ) NEW_LINE x -= 1 NEW_LINE DEDENT return max ( nums ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT if not nums : NEW_LINE INDENT return [ ] NEW_LINE DEDENT i = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT t = nums [ i ] NEW_LINE if t == float ( 'inf' ) or t == 0 : NEW_LINE INDENT i += 1 NEW_LINE continue NEW_LINE DEDENT if nums [ t - 1 ] <= 0 : NEW_LINE INDENT nums [ t - 1 ] -= 1 NEW_LINE nums [ i ] = float ( 'inf' ) NEW_LINE i += 1 NEW_LINE DEDENT elif nums [ t - 1 ] == float ( 'inf' ) : NEW_LINE INDENT nums [ t - 1 ] = t NEW_LINE nums [ i ] = float ( 'inf' ) NEW_LINE i += 1 NEW_LINE DEDENT elif nums [ t - 1 ] == t : NEW_LINE INDENT if t - 1 != i : NEW_LINE INDENT nums [ t - 1 ] = 0 NEW_LINE nums [ i ] = float ( 'inf' ) NEW_LINE DEDENT i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums [ i ] , nums [ t - 1 ] = nums [ t - 1 ] , nums [ i ] NEW_LINE DEDENT DEDENT ans = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT ans . append ( i + 1 ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT if not nums : NEW_LINE INDENT return None NEW_LINE DEDENT result = [ ] NEW_LINE n = len ( nums ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ abs ( nums [ i ] ) - 1 ] < 0 : NEW_LINE INDENT result . append ( abs ( nums [ i ] ) ) NEW_LINE DEDENT else : NEW_LINE INDENT nums [ abs ( nums [ i ] ) - 1 ] *= - 1 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT if nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT nums [ i ] *= - 1 NEW_LINE DEDENT DEDENT return [ num * ( - 1 ) for num in nums if num < 0 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT s = set ( { } ) NEW_LINE ans = [ ] NEW_LINE for v in nums : NEW_LINE INDENT if v in s : NEW_LINE INDENT ans . append ( v ) NEW_LINE DEDENT else : NEW_LINE INDENT s . add ( v ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT res = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ abs ( nums [ i ] ) - 1 ] >= 0 : NEW_LINE INDENT nums [ abs ( nums [ i ] ) - 1 ] = - nums [ abs ( nums [ i ] ) - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( abs ( nums [ i ] ) ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT if not nums : NEW_LINE INDENT return [ ] NEW_LINE DEDENT i = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT if nums [ i ] == float ( 'inf' ) or nums [ i ] == 0 : NEW_LINE INDENT i += 1 NEW_LINE continue NEW_LINE DEDENT if nums [ nums [ i ] - 1 ] <= 0 : NEW_LINE INDENT nums [ nums [ i ] - 1 ] -= 1 NEW_LINE nums [ i ] = float ( 'inf' ) NEW_LINE i += 1 NEW_LINE DEDENT elif nums [ nums [ i ] - 1 ] == float ( 'inf' ) : NEW_LINE INDENT nums [ nums [ i ] - 1 ] = nums [ i ] NEW_LINE nums [ i ] = float ( 'inf' ) NEW_LINE i += 1 NEW_LINE DEDENT elif nums [ nums [ i ] - 1 ] == nums [ i ] : NEW_LINE INDENT if nums [ i ] - 1 != i : NEW_LINE INDENT nums [ nums [ i ] - 1 ] = 0 NEW_LINE nums [ i ] = float ( 'inf' ) NEW_LINE DEDENT i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT t = nums [ i ] NEW_LINE nums [ i ] , nums [ t - 1 ] = nums [ t - 1 ] , nums [ i ] NEW_LINE DEDENT DEDENT ans = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT ans . append ( i + 1 ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT i = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT j = nums [ i ] - 1 NEW_LINE if nums [ i ] <= len ( nums ) and nums [ i ] != nums [ j ] : NEW_LINE INDENT nums [ i ] , nums [ j ] = nums [ j ] , nums [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT dupes = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != i + 1 : NEW_LINE INDENT dupes . append ( nums [ i ] ) NEW_LINE DEDENT DEDENT return dupes NEW_LINE DEDENT DEDENT
class Solution ( object ) : NEW_LINE INDENT def findDuplicates ( self , nums ) : NEW_LINE INDENT NEW_LINE ans = [ ] NEW_LINE for num in nums : NEW_LINE INDENT if nums [ abs ( num ) - 1 ] < 0 : NEW_LINE INDENT ans . append ( abs ( num ) ) NEW_LINE DEDENT nums [ abs ( num ) - 1 ] *= - 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT out = [ ] NEW_LINE for i in nums : NEW_LINE INDENT j = abs ( i ) NEW_LINE if nums [ j - 1 ] < 0 : NEW_LINE INDENT out . append ( j ) NEW_LINE DEDENT else : NEW_LINE INDENT nums [ j - 1 ] = - nums [ j - 1 ] NEW_LINE DEDENT DEDENT return out NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT s = set ( nums ) NEW_LINE if not nums : NEW_LINE INDENT return [ ] NEW_LINE DEDENT res = [ ] NEW_LINE for x in range ( 1 , len ( nums ) + 1 ) : NEW_LINE INDENT if x not in s : NEW_LINE INDENT res . append ( x ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT x = len ( nums ) NEW_LINE consec = set ( range ( 1 , x + 1 ) ) NEW_LINE check = set ( nums ) NEW_LINE return list ( consec . difference ( check ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT full_nums = { i for i in range ( 1 , len ( nums ) + 1 ) } NEW_LINE nums = set ( nums ) NEW_LINE return list ( full_nums - nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE nums = set ( nums ) NEW_LINE ls = [ ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if i not in nums : NEW_LINE INDENT ls . append ( i ) NEW_LINE DEDENT DEDENT return ls NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT if not nums : NEW_LINE INDENT return nums NEW_LINE DEDENT upper = len ( nums ) NEW_LINE res = [ ] NEW_LINE s = frozenset ( nums ) NEW_LINE for i in range ( 1 , upper + 1 ) : NEW_LINE INDENT if i not in s : NEW_LINE INDENT res . append ( i ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT booleanTool = [ True ] * len ( nums ) NEW_LINE res = [ ] NEW_LINE for v in nums : NEW_LINE INDENT booleanTool [ v - 1 ] = False NEW_LINE DEDENT for i , t in enumerate ( booleanTool ) : NEW_LINE INDENT if t : NEW_LINE INDENT res . append ( i + 1 ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT sets = set ( nums ) NEW_LINE allset = set ( range ( 1 , len ( nums ) + 1 ) ) NEW_LINE return list ( allset - sets ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT set_nums = set ( nums ) NEW_LINE ans = [ ] NEW_LINE for i in range ( 1 , len ( nums ) + 1 ) : NEW_LINE INDENT if i not in set_nums : NEW_LINE INDENT ans . append ( i ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT missing = set ( range ( 1 , len ( nums ) + 1 ) ) NEW_LINE nums = set ( nums ) NEW_LINE missing = list ( missing . difference ( nums ) ) NEW_LINE return missing NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT sets = set ( nums ) NEW_LINE allset = set ( range ( 1 , len ( nums ) + 1 ) ) NEW_LINE left = allset - sets NEW_LINE return list ( left ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT sets = set ( nums ) NEW_LINE allset = set ( range ( 1 , len ( nums ) + 1 ) ) NEW_LINE return list ( allset - sets ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums ) : NEW_LINE INDENT length = len ( nums ) NEW_LINE set_of_numbers = set ( range ( 1 , length + 1 ) ) NEW_LINE for i in nums : NEW_LINE INDENT if i in set_of_numbers : NEW_LINE INDENT set_of_numbers . remove ( i ) NEW_LINE DEDENT DEDENT return set_of_numbers NEW_LINE DEDENT DEDENT ob1 = Solution ( ) NEW_LINE result = ob1 . findDisappearedNumbers ( [ 4 , 3 , 2 , 7 , 8 , 2 , 3 , 1 ] ) NEW_LINE
def find_disappeared_numbers ( nums ) : NEW_LINE INDENT res = set ( range ( 1 , len ( nums ) + 1 ) ) NEW_LINE for num in nums : NEW_LINE INDENT try : NEW_LINE INDENT res . remove ( num ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT return list ( res ) NEW_LINE DEDENT class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT return find_disappeared_numbers ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT for n in nums : NEW_LINE INDENT a = abs ( n ) - 1 NEW_LINE if nums [ a ] > 0 : nums [ a ] *= - 1 NEW_LINE DEDENT return [ i + 1 for i in range ( len ( nums ) ) if nums [ i ] > 0 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT stuff = set ( [ ] ) NEW_LINE for num in nums : NEW_LINE INDENT stuff . add ( num ) NEW_LINE DEDENT out = [ ] NEW_LINE for i in range ( 1 , len ( nums ) + 1 ) : NEW_LINE INDENT if i not in stuff : NEW_LINE INDENT out . append ( i ) NEW_LINE stuff . add ( i ) NEW_LINE DEDENT DEDENT return out NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT ctr = Counter ( nums ) NEW_LINE res = [ ] NEW_LINE for k in range ( 1 , len ( nums ) + 1 ) : NEW_LINE INDENT if k not in ctr : NEW_LINE INDENT res += [ k ] NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT count = len ( nums ) NEW_LINE dict = { } NEW_LINE for i in range ( count ) : NEW_LINE INDENT i += 1 NEW_LINE dict [ i ] = i NEW_LINE DEDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] in dict : NEW_LINE INDENT dict . __delitem__ ( nums [ i ] ) NEW_LINE DEDENT DEDENT res = [ x for x in dict . values ( ) ] NEW_LINE return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT x = abs ( nums [ i ] ) NEW_LINE if nums [ x - 1 ] > 0 : NEW_LINE INDENT nums [ x - 1 ] *= - 1 NEW_LINE DEDENT DEDENT res = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT res . append ( i + 1 ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT res = [ ] NEW_LINE for n in nums : NEW_LINE INDENT index = abs ( n ) - 1 NEW_LINE if nums [ index ] > 0 : NEW_LINE INDENT nums [ index ] = - nums [ index ] NEW_LINE DEDENT DEDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT res . append ( i + 1 ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT result = [ ] NEW_LINE length = len ( nums ) NEW_LINE nums = set ( nums ) NEW_LINE for i in range ( 1 , length + 1 ) : NEW_LINE INDENT if i not in nums : NEW_LINE INDENT result . append ( i ) NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT res = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ abs ( nums [ i ] ) - 1 ] > 0 : NEW_LINE INDENT nums [ abs ( nums [ i ] ) - 1 ] *= - 1 NEW_LINE DEDENT DEDENT for i , n in enumerate ( nums ) : NEW_LINE INDENT if n > 0 : NEW_LINE INDENT res . append ( i + 1 ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT for index in range ( len ( nums ) ) : NEW_LINE INDENT integer = abs ( nums [ index ] ) NEW_LINE nums [ integer - 1 ] = - 1 * ( abs ( nums [ integer - 1 ] ) ) NEW_LINE DEDENT NEW_LINE result = [ ] NEW_LINE for index , element in enumerate ( nums ) : NEW_LINE INDENT if element > 0 : result . append ( index + 1 ) NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT x = abs ( nums [ i ] ) NEW_LINE if nums [ x - 1 ] > 0 : NEW_LINE INDENT nums [ x - 1 ] *= - 1 NEW_LINE DEDENT DEDENT res = [ ] NEW_LINE print ( nums ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT res . append ( i + 1 ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT d = { i : 0 for i in range ( 1 , len ( nums ) + 1 ) } NEW_LINE for i in nums : NEW_LINE INDENT d [ i ] += 1 NEW_LINE DEDENT return [ i for i in d if d [ i ] == 0 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT for index , num in enumerate ( nums ) : NEW_LINE INDENT newIndex = abs ( nums [ index ] ) - 1 NEW_LINE nums [ newIndex ] = - abs ( nums [ newIndex ] ) NEW_LINE DEDENT res = [ ] NEW_LINE for index , num in enumerate ( nums ) : NEW_LINE INDENT if num > 0 : NEW_LINE INDENT res . append ( index + 1 ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT ans = [ ] NEW_LINE for v in nums : NEW_LINE INDENT if nums [ abs ( v ) - 1 ] > 0 : NEW_LINE INDENT nums [ abs ( v ) - 1 ] *= - 1 NEW_LINE DEDENT DEDENT for idx , val in enumerate ( nums ) : NEW_LINE INDENT if val > 0 : NEW_LINE INDENT ans . append ( idx + 1 ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT if nums is None or len ( nums ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT result = [ ] NEW_LINE for i in nums : NEW_LINE INDENT value = nums [ abs ( i ) - 1 ] NEW_LINE if value > 0 : NEW_LINE INDENT nums [ abs ( i ) - 1 ] = nums [ abs ( i ) - 1 ] * - 1 NEW_LINE DEDENT DEDENT print ( nums ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT result . append ( i + 1 ) NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT for idx , num in enumerate ( nums ) : NEW_LINE INDENT nums [ abs ( num ) - 1 ] = - abs ( nums [ abs ( num ) - 1 ] ) NEW_LINE DEDENT ans = [ ] NEW_LINE print ( nums ) NEW_LINE for i in range ( 0 , len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT ans . append ( i + 1 ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT result = [ ] NEW_LINE length = len ( nums ) NEW_LINE nums = set ( nums ) NEW_LINE for i in range ( 1 , length + 1 ) : NEW_LINE INDENT if i not in nums : NEW_LINE INDENT result . append ( i ) NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT result = [ ] NEW_LINE length = len ( nums ) NEW_LINE nums = set ( nums ) NEW_LINE for i in range ( 1 , length + 1 ) : NEW_LINE INDENT if i not in nums : NEW_LINE INDENT result . append ( i ) NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT i = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT cur = nums [ i ] NEW_LINE to_swap = nums [ cur - 1 ] NEW_LINE if cur != i + 1 and cur != to_swap : NEW_LINE INDENT tmp = to_swap NEW_LINE nums [ cur - 1 ] = cur NEW_LINE nums [ i ] = tmp NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT result = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i + 1 != nums [ i ] : NEW_LINE INDENT result . append ( i + 1 ) NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ abs ( nums [ i ] ) - 1 ] > 0 : NEW_LINE INDENT nums [ abs ( nums [ i ] ) - 1 ] = nums [ abs ( nums [ i ] ) - 1 ] * - 1 NEW_LINE DEDENT DEDENT print ( nums ) NEW_LINE ans = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT ans . append ( i + 1 ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT i = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT if nums [ i ] == i + 1 : NEW_LINE INDENT i += 1 NEW_LINE DEDENT elif nums [ nums [ i ] - 1 ] != nums [ i ] : NEW_LINE INDENT nums [ nums [ i ] - 1 ] , nums [ i ] = nums [ i ] , nums [ nums [ i ] - 1 ] NEW_LINE continue NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT res = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != i + 1 : NEW_LINE INDENT res . append ( i + 1 ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT N = len ( nums ) NEW_LINE if N == [ ] : NEW_LINE INDENT return [ ] NEW_LINE DEDENT i = 0 NEW_LINE while i < N : NEW_LINE INDENT idx = abs ( nums [ i ] ) NEW_LINE nums [ idx - 1 ] = - abs ( nums [ idx - 1 ] ) NEW_LINE i += 1 NEW_LINE DEDENT res = [ ] NEW_LINE print ( nums ) NEW_LINE for i , n in enumerate ( nums ) : NEW_LINE INDENT if n > 0 : NEW_LINE INDENT res . append ( i + 1 ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT i = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT j = nums [ i ] - 1 NEW_LINE if i != j and nums [ j ] != j + 1 : NEW_LINE INDENT nums [ i ] , nums [ j ] = nums [ j ] , nums [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT res = [ ] NEW_LINE for i , n in enumerate ( nums ) : NEW_LINE INDENT if i != n - 1 : NEW_LINE INDENT res += [ i + 1 ] NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT p = 0 NEW_LINE while p < len ( nums ) : NEW_LINE INDENT while nums [ p ] and nums [ p ] != p + 1 : NEW_LINE INDENT self . swap ( nums , p ) NEW_LINE DEDENT p += 1 NEW_LINE DEDENT res = [ i + 1 for i in range ( len ( nums ) ) if not nums [ i ] ] NEW_LINE return res NEW_LINE DEDENT def swap ( self , a , p ) : NEW_LINE INDENT if a [ p ] == a [ a [ p ] - 1 ] : NEW_LINE INDENT a [ p ] = None NEW_LINE DEDENT else : NEW_LINE INDENT ap = a [ p ] NEW_LINE a [ p ] = a [ ap - 1 ] NEW_LINE a [ ap - 1 ] = ap NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT p = 0 NEW_LINE while p < len ( nums ) : NEW_LINE INDENT while nums [ p ] and nums [ p ] != p + 1 : NEW_LINE INDENT self . swap ( nums , p ) NEW_LINE DEDENT p += 1 NEW_LINE DEDENT res = [ i + 1 for i in range ( len ( nums ) ) if not nums [ i ] ] NEW_LINE return res NEW_LINE DEDENT def swap ( self , a , p ) : NEW_LINE INDENT if a [ p ] == a [ a [ p ] - 1 ] : NEW_LINE INDENT a [ p ] = None NEW_LINE DEDENT else : NEW_LINE INDENT ap = a [ p ] NEW_LINE a [ p ] = a [ ap - 1 ] NEW_LINE a [ ap - 1 ] = ap NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT ans = [ ] NEW_LINE dup = [ ] NEW_LINE for v in nums : NEW_LINE INDENT if nums [ abs ( v ) - 1 ] < 0 : NEW_LINE INDENT dup . append ( abs ( v ) ) NEW_LINE DEDENT else : NEW_LINE INDENT nums [ abs ( v ) - 1 ] *= - 1 NEW_LINE DEDENT DEDENT print ( dup ) NEW_LINE for idx , val in enumerate ( nums ) : NEW_LINE INDENT if val > 0 : NEW_LINE INDENT ans . append ( idx + 1 ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT sets = set ( nums ) NEW_LINE allset = set ( range ( 1 , len ( nums ) + 1 ) ) NEW_LINE return list ( allset . difference ( sets ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT for index in range ( len ( nums ) ) : NEW_LINE INDENT follow = nums [ index ] NEW_LINE while ( follow >= 0 ) : NEW_LINE INDENT temp = nums [ follow - 1 ] NEW_LINE nums [ follow - 1 ] = - 1 NEW_LINE follow = temp NEW_LINE print ( follow ) NEW_LINE DEDENT DEDENT return [ position + 1 for position , value in enumerate ( nums ) if value > 0 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT ans = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT while nums [ i ] not in [ i + 1 , None ] : NEW_LINE INDENT target_index = nums [ i ] - 1 NEW_LINE if nums [ target_index ] != nums [ i ] : NEW_LINE INDENT self . _swap ( nums , i , target_index ) NEW_LINE DEDENT else : NEW_LINE INDENT nums [ i ] = None NEW_LINE DEDENT DEDENT DEDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] is None : NEW_LINE INDENT ans . append ( i + 1 ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT @ staticmethod NEW_LINE def _swap ( nums , i , j ) : NEW_LINE INDENT nums [ j ] , nums [ i ] = nums [ i ] , nums [ j ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT swap = True NEW_LINE while swap : NEW_LINE INDENT swap = False NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != i + 1 and nums [ nums [ i ] - 1 ] != nums [ i ] : NEW_LINE INDENT tmp = nums [ i ] NEW_LINE nums [ i ] = nums [ nums [ i ] - 1 ] NEW_LINE nums [ tmp - 1 ] = tmp NEW_LINE swap = True NEW_LINE DEDENT DEDENT DEDENT res = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != i + 1 : NEW_LINE INDENT res . append ( i + 1 ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT def findDisappearedNumbers_2 ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT cache = set ( nums ) NEW_LINE res = [ ] NEW_LINE for i in range ( 1 , len ( nums ) + 1 ) : NEW_LINE INDENT if i not in cache : NEW_LINE INDENT res . append ( i ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT output = [ i for i in range ( 1 , len ( nums ) + 1 ) ] NEW_LINE for index in sorted ( set ( nums ) , reverse = True ) : NEW_LINE INDENT del output [ index - 1 ] NEW_LINE DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT idx = abs ( nums [ i ] ) - 1 NEW_LINE if nums [ idx ] > 0 : NEW_LINE INDENT nums [ idx ] = - nums [ idx ] NEW_LINE DEDENT DEDENT values = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT values . append ( i + 1 ) NEW_LINE DEDENT DEDENT return values NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT for n in nums : NEW_LINE INDENT if nums [ abs ( n ) - 1 ] > 0 : NEW_LINE INDENT nums [ abs ( n ) - 1 ] *= - 1 NEW_LINE DEDENT DEDENT return [ i + 1 for i in range ( len ( nums ) ) if nums [ i ] > 0 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT swap = True NEW_LINE while swap : NEW_LINE INDENT swap = False NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != i + 1 and nums [ nums [ i ] - 1 ] != nums [ i ] : NEW_LINE INDENT tmp = nums [ i ] NEW_LINE nums [ i ] = nums [ nums [ i ] - 1 ] NEW_LINE nums [ tmp - 1 ] = tmp NEW_LINE swap = True NEW_LINE DEDENT DEDENT DEDENT res = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != i + 1 : NEW_LINE INDENT res . append ( i + 1 ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT def findDisappearedNumbers_2 ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT cache = set ( nums ) NEW_LINE res = [ ] NEW_LINE for i in range ( 1 , len ( nums ) + 1 ) : NEW_LINE INDENT if i not in cache : NEW_LINE INDENT res . append ( i ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT swap = True NEW_LINE while swap : NEW_LINE INDENT swap = False NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != i + 1 and nums [ nums [ i ] - 1 ] != nums [ i ] : NEW_LINE INDENT tmp = nums [ i ] NEW_LINE nums [ i ] = nums [ nums [ i ] - 1 ] NEW_LINE nums [ tmp - 1 ] = tmp NEW_LINE swap = True NEW_LINE DEDENT DEDENT DEDENT print ( swap , nums ) NEW_LINE res = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != i + 1 : NEW_LINE INDENT res . append ( i + 1 ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT def findDisappearedNumbers_2 ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT cache = set ( nums ) NEW_LINE res = [ ] NEW_LINE for i in range ( 1 , len ( nums ) + 1 ) : NEW_LINE INDENT if i not in cache : NEW_LINE INDENT res . append ( i ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT mod = True NEW_LINE while mod : NEW_LINE INDENT mod = False NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != i + 1 and nums [ i ] != nums [ nums [ i ] - 1 ] : NEW_LINE INDENT t = nums [ i ] NEW_LINE nums [ i ] = nums [ nums [ i ] - 1 ] NEW_LINE nums [ t - 1 ] = t NEW_LINE mod = True NEW_LINE DEDENT DEDENT DEDENT ans = [ i + 1 for i in range ( len ( nums ) ) if nums [ i ] != i + 1 ] NEW_LINE return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT mod = True NEW_LINE while mod : NEW_LINE INDENT mod = False NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != i + 1 and nums [ i ] != nums [ nums [ i ] - 1 ] : NEW_LINE INDENT t = nums [ i ] NEW_LINE nums [ i ] = nums [ nums [ i ] - 1 ] NEW_LINE nums [ t - 1 ] = t NEW_LINE mod = True NEW_LINE DEDENT DEDENT DEDENT ans = [ i + 1 for i in range ( len ( nums ) ) if nums [ i ] != i + 1 ] NEW_LINE return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT duplicates = [ ] NEW_LINE for idx in range ( len ( nums ) ) : NEW_LINE INDENT num = nums [ idx ] NEW_LINE resident = nums [ num - 1 ] NEW_LINE if resident == num and num - 1 != idx : NEW_LINE INDENT duplicates += [ num ] NEW_LINE DEDENT elif resident == num : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT nums [ idx ] = resident NEW_LINE nums [ num - 1 ] = num NEW_LINE DEDENT DEDENT for idx in range ( len ( nums ) ) : NEW_LINE INDENT num = nums [ idx ] NEW_LINE resident = nums [ num - 1 ] NEW_LINE if resident == num and num - 1 != idx : NEW_LINE INDENT duplicates += [ num ] NEW_LINE DEDENT elif resident == num : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT nums [ idx ] = resident NEW_LINE nums [ num - 1 ] = num NEW_LINE DEDENT DEDENT for idx in range ( len ( nums ) ) : NEW_LINE INDENT num = nums [ idx ] NEW_LINE resident = nums [ num - 1 ] NEW_LINE if resident == num and num - 1 != idx : NEW_LINE INDENT duplicates += [ num ] NEW_LINE DEDENT elif resident == num : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT nums [ idx ] = resident NEW_LINE nums [ num - 1 ] = num NEW_LINE DEDENT DEDENT for idx in range ( len ( nums ) ) : NEW_LINE INDENT num = nums [ idx ] NEW_LINE resident = nums [ num - 1 ] NEW_LINE if resident == num and num - 1 != idx : NEW_LINE INDENT duplicates += [ num ] NEW_LINE DEDENT elif resident == num : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT nums [ idx ] = resident NEW_LINE nums [ num - 1 ] = num NEW_LINE DEDENT DEDENT result = [ ] NEW_LINE for idx in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ idx ] != idx + 1 : NEW_LINE INDENT result += [ idx + 1 ] NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT numlen = len ( nums ) NEW_LINE if numlen == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT nums = Counter ( nums ) NEW_LINE result = [ ] NEW_LINE for num in range ( 1 , numlen + 1 ) : NEW_LINE INDENT if num not in nums : NEW_LINE INDENT result . append ( num ) NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT freq = [ 0 ] * 26 NEW_LINE for task in tasks : NEW_LINE INDENT freq [ ord ( task ) - ord ( 'A' ) ] += 1 NEW_LINE DEDENT freq . sort ( ) NEW_LINE most_freq = freq . pop ( ) NEW_LINE idle = ( most_freq - 1 ) * n NEW_LINE while freq and idle > 0 : NEW_LINE INDENT idle -= min ( most_freq - 1 , freq . pop ( ) ) NEW_LINE DEDENT idle = max ( 0 , idle ) NEW_LINE return idle + len ( tasks ) NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT frequencies = { } NEW_LINE for t in tasks : NEW_LINE INDENT frequencies . update ( { t : frequencies . get ( t , 0 ) + 1 } ) NEW_LINE DEDENT f_max_key = max ( frequencies , key = lambda x : frequencies [ x ] ) NEW_LINE f_max = frequencies . pop ( f_max_key ) NEW_LINE idle_time = ( f_max - 1 ) * n NEW_LINE for frequency in frequencies . values ( ) : NEW_LINE INDENT idle_time -= min ( f_max - 1 , frequency ) NEW_LINE DEDENT idle_time = max ( 0 , idle_time ) NEW_LINE return idle_time + len ( tasks ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT counter = [ 0 ] * 26 NEW_LINE maxi = 0 NEW_LINE maxCount = 0 NEW_LINE for task in tasks : NEW_LINE INDENT temp = ord ( task ) - ord ( 'A' ) NEW_LINE counter [ temp ] += 1 NEW_LINE if maxi == counter [ temp ] : NEW_LINE INDENT maxCount += 1 NEW_LINE DEDENT elif maxi < counter [ temp ] : NEW_LINE INDENT maxi = counter [ temp ] NEW_LINE maxCount = 1 NEW_LINE DEDENT DEDENT partCount = maxi - 1 NEW_LINE partLength = n - ( maxCount - 1 ) NEW_LINE emptySlots = partCount * partLength NEW_LINE availableTasks = len ( tasks ) - maxi * maxCount NEW_LINE idles = max ( 0 , emptySlots - availableTasks ) NEW_LINE return len ( tasks ) + idles NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT seen = { } NEW_LINE time = 0 NEW_LINE max_frequency = 0 NEW_LINE for i in range ( len ( tasks ) ) : NEW_LINE INDENT if tasks [ i ] not in seen : NEW_LINE INDENT seen [ tasks [ i ] ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT seen [ tasks [ i ] ] = seen [ tasks [ i ] ] + 1 NEW_LINE DEDENT max_frequency = max ( max_frequency , seen [ tasks [ i ] ] ) NEW_LINE DEDENT minimum_time = - 1 + max_frequency + ( max_frequency - 1 ) * n NEW_LINE current_time = 0 NEW_LINE for task in seen . keys ( ) : NEW_LINE INDENT if seen [ task ] == max_frequency : NEW_LINE INDENT minimum_time += 1 NEW_LINE DEDENT time += seen [ task ] NEW_LINE DEDENT return max ( minimum_time , time ) NEW_LINE return time NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT max_freq = 0 NEW_LINE max_freq_task = '' NEW_LINE task_freqs = [ 0 ] * 26 NEW_LINE for task in tasks : NEW_LINE INDENT idx = ord ( task [ 0 ] ) - ord ( 'A' ) NEW_LINE task_freqs [ idx ] += 1 NEW_LINE if task_freqs [ idx ] > max_freq : NEW_LINE INDENT max_freq = task_freqs [ idx ] NEW_LINE max_freq_task = task NEW_LINE DEDENT DEDENT ans = ( max_freq - 1 ) * ( n + 1 ) NEW_LINE counter = Counter ( task_freqs ) NEW_LINE ans += counter [ max_freq ] NEW_LINE return ans if ans >= len ( tasks ) else len ( tasks ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT table = { } NEW_LINE for task in tasks : NEW_LINE INDENT if task not in table : NEW_LINE INDENT table [ task ] = 0 NEW_LINE DEDENT table [ task ] += 1 NEW_LINE DEDENT idles = 0 NEW_LINE while table : NEW_LINE INDENT length = len ( table ) NEW_LINE keys = [ i for i in table ] NEW_LINE for key in keys : NEW_LINE INDENT table [ key ] -= 1 NEW_LINE if table [ key ] == 0 : NEW_LINE INDENT table . pop ( key ) NEW_LINE DEDENT DEDENT if len ( table ) == 0 : NEW_LINE INDENT break NEW_LINE DEDENT idles += ( n - length + 1 ) NEW_LINE DEDENT if idles < 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT else : NEW_LINE INDENT return idles + len ( tasks ) NEW_LINE DEDENT DEDENT DEDENT
from collections import Counter NEW_LINE class Solution : NEW_LINE INDENT def sortlst ( self , lst : List [ int ] , idx ) -> List [ int ] : NEW_LINE INDENT if idx >= len ( lst ) - 1 or lst [ idx ] >= lst [ idx + 1 ] : NEW_LINE INDENT return lst NEW_LINE DEDENT first_idx , last_idx = idx , idx + 1 NEW_LINE while first_idx > 0 and lst [ first_idx - 1 ] == lst [ first_idx ] : NEW_LINE INDENT first_idx -= 1 NEW_LINE DEDENT while last_idx < len ( lst ) - 1 and lst [ last_idx + 1 ] == lst [ last_idx ] : NEW_LINE INDENT last_idx += 1 NEW_LINE DEDENT lst = lst [ : first_idx ] + lst [ idx + 1 : last_idx + 1 ] + lst [ first_idx : idx + 1 ] + lst [ last_idx + 1 : ] NEW_LINE return lst NEW_LINE DEDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT N = len ( tasks ) NEW_LINE freq = list ( Counter ( tasks ) . values ( ) ) NEW_LINE freq . sort ( reverse = True ) NEW_LINE return_count = 0 NEW_LINE n += 1 NEW_LINE while len ( freq ) > 0 : NEW_LINE INDENT if n >= len ( freq ) : NEW_LINE INDENT if freq [ 0 ] == 1 : return_count += len ( freq ) NEW_LINE else : return_count += n NEW_LINE freq = list ( filter ( lambda x : x > 0 , map ( lambda x : x - 1 , freq ) ) ) NEW_LINE DEDENT else : NEW_LINE INDENT return_count += n NEW_LINE freq = list ( filter ( lambda x : x > 0 , map ( lambda x : x - 1 , freq [ : n ] ) ) ) + freq [ n : ] NEW_LINE freq = self . sortlst ( freq , n - 1 ) NEW_LINE DEDENT DEDENT return return_count NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT counter = [ 0 ] * 26 NEW_LINE maxi = 0 NEW_LINE maxCount = 0 NEW_LINE for task in tasks : NEW_LINE INDENT temp = ord ( task ) - ord ( 'A' ) NEW_LINE counter [ temp ] += 1 NEW_LINE if maxi == counter [ temp ] : NEW_LINE INDENT maxCount += 1 NEW_LINE DEDENT elif maxi < counter [ temp ] : NEW_LINE INDENT maxi = counter [ temp ] NEW_LINE maxCount = 1 NEW_LINE DEDENT DEDENT partCount = maxi - 1 NEW_LINE partLength = n - ( maxCount - 1 ) NEW_LINE emptySlots = partCount * partLength NEW_LINE availableTasks = len ( tasks ) - maxi * maxCount NEW_LINE idles = max ( 0 , emptySlots - availableTasks ) NEW_LINE return len ( tasks ) + idles NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT count = [ 0 ] * 26 NEW_LINE a = ord ( "A" ) NEW_LINE maxC = 0 NEW_LINE maxF = 0 NEW_LINE for v in tasks : NEW_LINE INDENT count [ ord ( v ) - a ] += 1 NEW_LINE if count [ ord ( v ) - a ] > maxC : NEW_LINE INDENT maxC = count [ ord ( v ) - a ] NEW_LINE maxF = 1 NEW_LINE DEDENT elif count [ ord ( v ) - a ] == maxC : NEW_LINE INDENT maxF += 1 NEW_LINE DEDENT DEDENT parts = maxC - 1 NEW_LINE idlePart = n - ( maxF - 1 ) NEW_LINE idleTotal = idlePart * parts NEW_LINE filling = len ( tasks ) - maxC * maxF NEW_LINE finalIdle = idleTotal - filling NEW_LINE if finalIdle < 0 : NEW_LINE INDENT finalIdle = 0 NEW_LINE DEDENT return len ( tasks ) + finalIdle NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT max_freq = 0 NEW_LINE num_elem_max_freq = 0 NEW_LINE hashmap = collections . defaultdict ( int ) NEW_LINE cur_freq = 0 NEW_LINE for ch in tasks : NEW_LINE INDENT hashmap [ ch ] += 1 NEW_LINE cur_freq = hashmap [ ch ] NEW_LINE if cur_freq == max_freq : NEW_LINE INDENT num_elem_max_freq += 1 NEW_LINE DEDENT if cur_freq > max_freq : NEW_LINE INDENT num_elem_max_freq = 1 NEW_LINE max_freq = cur_freq NEW_LINE DEDENT DEDENT num_empty_slots = max_freq - 1 NEW_LINE num_elem_empty_slot = n - ( num_elem_max_freq - 1 ) NEW_LINE task_used = max_freq * num_elem_max_freq NEW_LINE available_task = len ( tasks ) - task_used NEW_LINE num_elem_needed = num_elem_empty_slot * num_empty_slots NEW_LINE num_idles = max ( num_elem_needed - available_task , 0 ) NEW_LINE return len ( tasks ) + num_idles NEW_LINE DEDENT DEDENT
from heapq import * NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT task_frequency = { } NEW_LINE minimum_time = 0 NEW_LINE current_time = 0 NEW_LINE max_frequency = 0 NEW_LINE max_freq_task = None NEW_LINE for i in range ( len ( tasks ) ) : NEW_LINE INDENT if task_frequency . get ( tasks [ i ] ) == None : NEW_LINE INDENT task_frequency [ tasks [ i ] ] = 0 NEW_LINE DEDENT task_frequency [ tasks [ i ] ] += 1 NEW_LINE max_frequency = max ( max_frequency , task_frequency [ tasks [ i ] ] ) NEW_LINE DEDENT minimum_time = - 1 + max_frequency + ( max_frequency - 1 ) * n NEW_LINE current_time = 0 NEW_LINE for task in task_frequency . keys ( ) : NEW_LINE INDENT if task_frequency [ task ] == max_frequency : NEW_LINE INDENT minimum_time += 1 NEW_LINE DEDENT current_time += task_frequency [ task ] NEW_LINE DEDENT return max ( minimum_time , current_time ) NEW_LINE DEDENT DEDENT
class Solution ( object ) : NEW_LINE INDENT def leastInterval ( self , tasks , n ) : NEW_LINE INDENT NEW_LINE table = { } NEW_LINE for task in tasks : NEW_LINE INDENT if task not in table : NEW_LINE INDENT table [ task ] = 0 NEW_LINE DEDENT table [ task ] += 1 NEW_LINE DEDENT idles = 0 NEW_LINE while table : NEW_LINE INDENT length = len ( table ) NEW_LINE keys = [ i for i in table ] NEW_LINE for key in keys : NEW_LINE INDENT table [ key ] -= 1 NEW_LINE if table [ key ] == 0 : NEW_LINE INDENT table . pop ( key ) NEW_LINE DEDENT DEDENT if len ( table ) == 0 : NEW_LINE INDENT break NEW_LINE DEDENT idles += ( n - length + 1 ) NEW_LINE DEDENT if idles < 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT else : NEW_LINE INDENT return idles + len ( tasks ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT count = collections . defaultdict ( int ) NEW_LINE max_c = 0 NEW_LINE for t in tasks : NEW_LINE INDENT count [ t ] += 1 NEW_LINE max_c = max ( max_c , count [ t ] ) NEW_LINE DEDENT schedule = [ [ ] for i in range ( 0 , max_c ) ] NEW_LINE for t in count : NEW_LINE INDENT if ( count [ t ] == max_c ) : NEW_LINE INDENT for i in range ( 0 , max_c ) : NEW_LINE INDENT schedule [ i ] . append ( t ) NEW_LINE DEDENT count [ t ] = 0 NEW_LINE DEDENT DEDENT insert_pt = len ( schedule [ 0 ] ) NEW_LINE pt = 0 NEW_LINE for t in count : NEW_LINE INDENT for i in range ( 0 , count [ t ] ) : NEW_LINE INDENT schedule [ pt ] . insert ( insert_pt , t ) NEW_LINE pt = ( pt + 1 ) % ( max_c - 1 ) NEW_LINE DEDENT DEDENT time = 0 NEW_LINE for i in range ( len ( schedule ) - 1 ) : NEW_LINE INDENT time += max ( n + 1 , len ( schedule [ i ] ) ) NEW_LINE DEDENT time += len ( schedule [ - 1 ] ) NEW_LINE return time NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT counts = [ 0 ] * 26 NEW_LINE for t in tasks : NEW_LINE INDENT counts [ ord ( t ) - ord ( 'A' ) ] += 1 NEW_LINE DEDENT total = 0 NEW_LINE counts . sort ( ) NEW_LINE while counts [ 25 ] > 0 : NEW_LINE INDENT executed = 0 NEW_LINE for i in range ( 25 , - 1 , - 1 ) : NEW_LINE INDENT if counts [ i ] <= 0 : NEW_LINE INDENT break NEW_LINE DEDENT executed += 1 NEW_LINE counts [ i ] -= 1 NEW_LINE if executed > n : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if sum ( counts ) == 0 : NEW_LINE INDENT total += executed NEW_LINE DEDENT else : NEW_LINE INDENT total += max ( n + 1 , executed ) NEW_LINE DEDENT counts . sort ( ) NEW_LINE DEDENT return total NEW_LINE DEDENT DEDENT
import collections NEW_LINE import heapq NEW_LINE from typing import List NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT queue = [ - freq for freq in collections . Counter ( tasks ) . values ( ) ] NEW_LINE heapq . heapify ( queue ) NEW_LINE i = 0 NEW_LINE while queue : NEW_LINE INDENT buffer = [ ] NEW_LINE queue_size = len ( queue ) NEW_LINE for j in range ( n + 1 ) : NEW_LINE INDENT if queue : NEW_LINE INDENT freq = heapq . heappop ( queue ) NEW_LINE if freq < - 1 : NEW_LINE INDENT buffer . append ( freq + 1 ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT i += ( n + 1 if buffer else queue_size ) NEW_LINE if not buffer : NEW_LINE INDENT break NEW_LINE DEDENT for freq in buffer : NEW_LINE INDENT heapq . heappush ( queue , freq ) NEW_LINE DEDENT DEDENT return i NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT frequencies = [ 0 ] * 26 NEW_LINE for l in tasks : frequencies [ ord ( l ) - ord ( 'A' ) ] += 1 NEW_LINE f_max = max ( frequencies ) NEW_LINE n_max = frequencies . count ( f_max ) NEW_LINE return max ( len ( tasks ) , ( f_max - 1 ) * ( n + 1 ) + n_max ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT d = defaultdict ( int ) NEW_LINE heap = [ ] NEW_LINE for task in tasks : NEW_LINE INDENT d [ task ] += 1 NEW_LINE DEDENT for _ , count in d . items ( ) : NEW_LINE INDENT heapq . heappush ( heap , ( - 1 * count ) ) NEW_LINE DEDENT runs = 0 NEW_LINE while heap : NEW_LINE INDENT k = 0 NEW_LINE current = [ ] NEW_LINE while heap and k < n + 1 : NEW_LINE INDENT current . append ( heapq . heappop ( heap ) ) NEW_LINE k += 1 NEW_LINE DEDENT for count in current : NEW_LINE INDENT count += 1 NEW_LINE if count != 0 : NEW_LINE INDENT heapq . heappush ( heap , count ) NEW_LINE DEDENT DEDENT if not heap : NEW_LINE INDENT runs += k NEW_LINE DEDENT else : NEW_LINE INDENT runs += n + 1 NEW_LINE DEDENT DEDENT return runs NEW_LINE DEDENT DEDENT
import collections NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT count = collections . Counter ( tasks ) NEW_LINE heap = [ - count [ x ] for x in count ] NEW_LINE queue = collections . deque ( [ ] ) NEW_LINE heapq . heapify ( heap ) NEW_LINE ans = 0 NEW_LINE while heap : NEW_LINE INDENT temp = [ ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if heap : NEW_LINE INDENT temp . append ( heapq . heappop ( heap ) ) NEW_LINE DEDENT DEDENT for c in temp : NEW_LINE INDENT if c + 1 < 0 : NEW_LINE INDENT heapq . heappush ( heap , c + 1 ) NEW_LINE DEDENT DEDENT ans += len ( temp ) if not heap else n + 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT d = { } NEW_LINE l = [ ] NEW_LINE for t in tasks : NEW_LINE INDENT d [ t ] = d . get ( t , 0 ) + 1 NEW_LINE DEDENT for key in d . keys ( ) : NEW_LINE INDENT l . append ( ( d [ key ] , key ) ) NEW_LINE DEDENT res = 0 NEW_LINE while len ( l ) > 0 : NEW_LINE INDENT l . sort ( reverse = True ) NEW_LINE size = len ( l ) NEW_LINE timer = n + 1 NEW_LINE while size > 0 : NEW_LINE INDENT item = l . pop ( 0 ) NEW_LINE size -= 1 NEW_LINE res += 1 NEW_LINE if item [ 0 ] > 1 : NEW_LINE INDENT new_item = ( item [ 0 ] - 1 , item [ 1 ] ) NEW_LINE l . append ( new_item ) NEW_LINE DEDENT timer -= 1 NEW_LINE if timer == 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if len ( l ) > 0 and timer > 0 : NEW_LINE INDENT res += timer NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT task_count = { } NEW_LINE for task in tasks : NEW_LINE INDENT if task not in task_count : NEW_LINE INDENT task_count [ task ] = 0 NEW_LINE DEDENT task_count [ task ] += 1 NEW_LINE DEDENT max_heap = [ - count for count in task_count . values ( ) ] NEW_LINE heapq . heapify ( max_heap ) NEW_LINE cycles = 0 NEW_LINE while max_heap : NEW_LINE INDENT tasks = [ ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if max_heap : NEW_LINE INDENT max_count = heapq . heappop ( max_heap ) NEW_LINE tasks . append ( max_count ) NEW_LINE DEDENT DEDENT for task in tasks : NEW_LINE INDENT if task + 1 < 0 : NEW_LINE INDENT heapq . heappush ( max_heap , task + 1 ) NEW_LINE DEDENT DEDENT if max_heap : NEW_LINE INDENT cycles += n + 1 NEW_LINE DEDENT else : NEW_LINE INDENT cycles += len ( tasks ) NEW_LINE DEDENT DEDENT return cycles NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT counter = collections . Counter ( tasks ) NEW_LINE total_tasks , completed_tasks , cycles = len ( tasks ) , 0 , 0 NEW_LINE while completed_tasks < total_tasks : NEW_LINE INDENT unique_tasks = 0 NEW_LINE for k , c in counter . most_common ( n + 1 ) : NEW_LINE INDENT if c > 0 : NEW_LINE INDENT unique_tasks += 1 NEW_LINE counter [ k ] -= 1 NEW_LINE DEDENT DEDENT completed_tasks += unique_tasks NEW_LINE cycles += max ( ( n + 1 ) , unique_tasks ) NEW_LINE DEDENT if unique_tasks < n + 1 : NEW_LINE INDENT cycles -= ( ( n + 1 ) - unique_tasks ) NEW_LINE DEDENT return cycles NEW_LINE DEDENT DEDENT
import collections NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT count = collections . Counter ( tasks ) NEW_LINE heap = [ - count [ x ] for x in count ] NEW_LINE queue = collections . deque ( [ ] ) NEW_LINE heapq . heapify ( heap ) NEW_LINE ans = 0 NEW_LINE while heap : NEW_LINE INDENT temp = [ ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if heap : NEW_LINE INDENT temp . append ( heapq . heappop ( heap ) ) NEW_LINE DEDENT DEDENT for c in temp : NEW_LINE INDENT if c + 1 < 0 : NEW_LINE INDENT heapq . heappush ( heap , c + 1 ) NEW_LINE DEDENT DEDENT ans += len ( temp ) if not heap else n + 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
import collections NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT count = collections . Counter ( tasks ) NEW_LINE heap = [ - count [ x ] for x in count ] NEW_LINE queue = collections . deque ( [ ] ) NEW_LINE heapq . heapify ( heap ) NEW_LINE ans = 0 NEW_LINE while heap : NEW_LINE INDENT temp = [ ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if heap : NEW_LINE INDENT temp . append ( heapq . heappop ( heap ) ) NEW_LINE DEDENT DEDENT for c in temp : NEW_LINE INDENT if c + 1 < 0 : NEW_LINE INDENT heapq . heappush ( heap , c + 1 ) NEW_LINE DEDENT DEDENT ans += len ( temp ) if not heap else n + 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT counts = collections . Counter ( tasks ) NEW_LINE counts = counts . most_common ( ) NEW_LINE k = 1 NEW_LINE for i in range ( 1 , len ( counts ) ) : NEW_LINE INDENT if counts [ i ] [ 1 ] == counts [ 0 ] [ 1 ] : NEW_LINE INDENT k += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return max ( ( counts [ 0 ] [ 1 ] - 1 ) * ( n + 1 ) + k , len ( tasks ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT frequency = [ 0 ] * 26 NEW_LINE for t in tasks : NEW_LINE INDENT frequency [ ord ( t ) - ord ( "A" ) ] += 1 NEW_LINE DEDENT frequency . sort ( ) NEW_LINE f_max = frequency [ - 1 ] NEW_LINE idle = ( f_max - 1 ) * n NEW_LINE frequency . pop ( ) NEW_LINE while frequency and idle >= 0 : NEW_LINE INDENT idle -= min ( frequency . pop ( ) , f_max - 1 ) NEW_LINE DEDENT idle = max ( idle , 0 ) NEW_LINE return idle + len ( tasks ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT counter = [ 0 ] * 26 NEW_LINE for task in tasks : NEW_LINE INDENT index = ord ( task ) - ord ( 'A' ) NEW_LINE counter [ index ] -= 1 NEW_LINE DEDENT heap = [ count for count in counter if count < 0 ] NEW_LINE heapify ( heap ) NEW_LINE intervals = 0 NEW_LINE tasks = [ ] NEW_LINE while heap or tasks : NEW_LINE INDENT worked = 0 NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if heap : NEW_LINE INDENT worked += 1 NEW_LINE task = heappop ( heap ) NEW_LINE if task + 1 < 0 : tasks . append ( task + 1 ) NEW_LINE continue NEW_LINE DEDENT break NEW_LINE DEDENT if worked == n + 1 : NEW_LINE INDENT intervals += n + 1 NEW_LINE DEDENT elif worked < n + 1 and tasks : NEW_LINE INDENT intervals += n + 1 NEW_LINE DEDENT elif worked < n + 1 and not tasks : NEW_LINE INDENT intervals += worked NEW_LINE DEDENT while tasks : NEW_LINE INDENT heappush ( heap , tasks . pop ( ) ) NEW_LINE DEDENT DEDENT return intervals NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT k = n NEW_LINE if k == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT pending_tasks = [ ] NEW_LINE for t in set ( tasks ) : NEW_LINE INDENT heappush ( pending_tasks , ( - tasks . count ( t ) , t ) ) NEW_LINE DEDENT num_intervals = 0 NEW_LINE while len ( pending_tasks ) > 0 : NEW_LINE INDENT to_push = [ ] NEW_LINE count = 0 NEW_LINE while count <= k and len ( pending_tasks ) > 0 : NEW_LINE INDENT freq , t = heappop ( pending_tasks ) NEW_LINE if freq + 1 < 0 : NEW_LINE INDENT to_push . append ( ( freq + 1 , t ) ) NEW_LINE DEDENT count += 1 NEW_LINE DEDENT if len ( to_push ) > 0 : NEW_LINE INDENT num_intervals += k + 1 NEW_LINE for t in to_push : NEW_LINE INDENT heappush ( pending_tasks , t ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT num_intervals += count NEW_LINE DEDENT DEDENT return num_intervals NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT k = n NEW_LINE if k == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT pending_tasks = [ ] NEW_LINE cpu_tasks = { } NEW_LINE for t in set ( tasks ) : NEW_LINE INDENT heappush ( pending_tasks , ( - tasks . count ( t ) , t ) ) NEW_LINE DEDENT num_intervals = 0 NEW_LINE while len ( pending_tasks ) > 0 : NEW_LINE INDENT to_push = [ ] NEW_LINE count = 0 NEW_LINE while count <= k and len ( pending_tasks ) > 0 : NEW_LINE INDENT freq , t = heappop ( pending_tasks ) NEW_LINE freq += 1 NEW_LINE if freq < 0 : NEW_LINE INDENT to_push . append ( ( freq , t ) ) NEW_LINE DEDENT count += 1 NEW_LINE DEDENT if len ( to_push ) > 0 : NEW_LINE INDENT num_intervals += k + 1 NEW_LINE for t in to_push : NEW_LINE INDENT heappush ( pending_tasks , t ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT num_intervals += count NEW_LINE DEDENT DEDENT return num_intervals NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT dic = { } NEW_LINE for i in tasks : NEW_LINE INDENT dic [ i ] = dic . get ( i , 0 ) - 1 NEW_LINE DEDENT dv = list ( dic . values ( ) ) NEW_LINE heapq . heapify ( dv ) NEW_LINE time = 0 NEW_LINE while dv is not None : NEW_LINE INDENT temp = [ ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if dv : NEW_LINE INDENT temp . append ( - 1 * heapq . heappop ( dv ) ) NEW_LINE DEDENT DEDENT if not temp : NEW_LINE INDENT break NEW_LINE DEDENT for i in temp : NEW_LINE INDENT if ( i - 1 ) > 0 : NEW_LINE INDENT heapq . heappush ( dv , - 1 * ( i - 1 ) ) NEW_LINE DEDENT DEDENT if not dv : NEW_LINE INDENT time += len ( temp ) NEW_LINE DEDENT elif dv : NEW_LINE INDENT time += n + 1 NEW_LINE DEDENT DEDENT return time NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT counts = collections . Counter ( tasks ) NEW_LINE counts = counts . most_common ( ) NEW_LINE k = 1 NEW_LINE for i in range ( 1 , len ( counts ) ) : NEW_LINE INDENT if counts [ i ] [ 1 ] == counts [ 0 ] [ 1 ] : NEW_LINE INDENT k += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return max ( ( counts [ 0 ] [ 1 ] - 1 ) * ( n + 1 ) + k , len ( tasks ) ) NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT freq = { } NEW_LINE for task in tasks : NEW_LINE INDENT if task not in freq : NEW_LINE INDENT freq [ task ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT freq [ task ] += 1 NEW_LINE DEDENT DEDENT max_heap = [ ] NEW_LINE for task in freq : NEW_LINE INDENT heapq . heappush ( max_heap , ( - freq [ task ] , task ) ) NEW_LINE DEDENT ans = 0 NEW_LINE wait = [ ] NEW_LINE cur_cnt = None NEW_LINE while max_heap : NEW_LINE INDENT for i in range ( n + 1 ) : NEW_LINE INDENT if not max_heap : NEW_LINE INDENT cur_cnt = i NEW_LINE break NEW_LINE DEDENT freq_neg , task = heapq . heappop ( max_heap ) NEW_LINE if - freq_neg > 1 : NEW_LINE INDENT wait . append ( ( freq_neg + 1 , task ) ) NEW_LINE DEDENT DEDENT for item in wait : NEW_LINE INDENT heapq . heappush ( max_heap , item ) NEW_LINE DEDENT if max_heap : NEW_LINE INDENT ans += n + 1 NEW_LINE wait = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT ans += cur_cnt if cur_cnt is not None else n + 1 NEW_LINE return ans NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks , n ) : NEW_LINE INDENT curr_time , h = 0 , [ ] NEW_LINE for k , v in Counter ( tasks ) . items ( ) : NEW_LINE INDENT heappush ( h , ( - 1 * v , k ) ) NEW_LINE DEDENT while h : NEW_LINE INDENT temp = [ ] NEW_LINE for _ in range ( n + 1 ) : NEW_LINE INDENT curr_time += 1 NEW_LINE if h : NEW_LINE INDENT x , y = heappop ( h ) NEW_LINE if x != - 1 : NEW_LINE INDENT temp . append ( ( x + 1 , y ) ) NEW_LINE DEDENT DEDENT if not h and not temp : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for item in temp : NEW_LINE INDENT heappush ( h , item ) NEW_LINE DEDENT DEDENT return curr_time NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT def create_heap ( tasks ) : NEW_LINE INDENT heap = [ ] NEW_LINE counter = collections . Counter ( tasks ) NEW_LINE for ele , count in counter . items ( ) : NEW_LINE INDENT heapq . heappush ( heap , ( - count , ele ) ) NEW_LINE DEDENT return heap NEW_LINE DEDENT heap = create_heap ( tasks ) NEW_LINE result = 0 NEW_LINE while heap : NEW_LINE INDENT past_attempts = [ ] NEW_LINE for _ in range ( n + 1 ) : NEW_LINE INDENT if heap : NEW_LINE INDENT attempt = heapq . heappop ( heap ) NEW_LINE past_attempts . append ( attempt ) NEW_LINE DEDENT DEDENT for attempt in past_attempts : NEW_LINE INDENT if attempt [ 0 ] < - 1 : NEW_LINE INDENT heapq . heappush ( heap , ( attempt [ 0 ] + 1 , attempt [ 1 ] ) ) NEW_LINE DEDENT DEDENT if heap : NEW_LINE INDENT result += n + 1 NEW_LINE DEDENT else : NEW_LINE INDENT result += len ( past_attempts ) NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT k = n NEW_LINE if k == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT pending_tasks = [ ] NEW_LINE cpu_tasks = { } NEW_LINE for t in set ( tasks ) : NEW_LINE INDENT heappush ( pending_tasks , ( - tasks . count ( t ) , t ) ) NEW_LINE DEDENT num_intervals = 0 NEW_LINE while len ( pending_tasks ) > 0 : NEW_LINE INDENT to_push = [ ] NEW_LINE count = 0 NEW_LINE while count <= k and len ( pending_tasks ) > 0 : NEW_LINE INDENT freq , t = heappop ( pending_tasks ) NEW_LINE freq += 1 NEW_LINE if freq < 0 : NEW_LINE INDENT to_push . append ( ( freq , t ) ) NEW_LINE DEDENT count += 1 NEW_LINE DEDENT if len ( to_push ) > 0 : NEW_LINE INDENT num_intervals += k + 1 NEW_LINE for t in to_push : NEW_LINE INDENT heappush ( pending_tasks , t ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT num_intervals += count NEW_LINE DEDENT DEDENT return num_intervals NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks , n ) : NEW_LINE INDENT curr_time , h = 0 , [ ] NEW_LINE for k , v in Counter ( tasks ) . items ( ) : NEW_LINE INDENT heappush ( h , ( - 1 * v , k ) ) NEW_LINE DEDENT while h : NEW_LINE INDENT temp = [ ] NEW_LINE for _ in range ( n + 1 ) : NEW_LINE INDENT if not h and not temp : NEW_LINE INDENT break NEW_LINE DEDENT curr_time += 1 NEW_LINE if not h : continue NEW_LINE x , y = heappop ( h ) NEW_LINE if x != - 1 : NEW_LINE INDENT temp . append ( ( x + 1 , y ) ) NEW_LINE DEDENT DEDENT for item in temp : NEW_LINE INDENT heappush ( h , item ) NEW_LINE DEDENT DEDENT return curr_time NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks , n ) : NEW_LINE INDENT curr_time , h = 0 , [ ] NEW_LINE for k , v in Counter ( tasks ) . items ( ) : NEW_LINE INDENT heappush ( h , ( - 1 * v , k ) ) NEW_LINE DEDENT while h : NEW_LINE INDENT i , temp = 0 , [ ] NEW_LINE for _ in range ( n + 1 ) : NEW_LINE INDENT curr_time += 1 NEW_LINE if h : NEW_LINE INDENT x , y = heappop ( h ) NEW_LINE if x != - 1 : NEW_LINE INDENT temp . append ( ( x + 1 , y ) ) NEW_LINE DEDENT DEDENT if not h and not temp : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for item in temp : NEW_LINE INDENT heappush ( h , item ) NEW_LINE DEDENT DEDENT return curr_time NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT d = { } NEW_LINE for i in tasks : NEW_LINE INDENT if i not in d : NEW_LINE INDENT d [ i ] = - 1 NEW_LINE DEDENT else : NEW_LINE INDENT d [ i ] -= 1 NEW_LINE DEDENT DEDENT heap = [ ] NEW_LINE for i in d : NEW_LINE INDENT heap . append ( [ d [ i ] , i ] ) NEW_LINE DEDENT heapq . heapify ( heap ) NEW_LINE ans = 0 NEW_LINE while heap : NEW_LINE INDENT d = { } NEW_LINE length = len ( heap ) NEW_LINE for i in range ( min ( len ( heap ) , n + 1 ) ) : NEW_LINE INDENT p1 , p2 = heapq . heappop ( heap ) NEW_LINE d [ p2 ] = p1 NEW_LINE ans += 1 NEW_LINE DEDENT for i in d : NEW_LINE INDENT if d [ i ] != - 1 : NEW_LINE INDENT heapq . heappush ( heap , [ d [ i ] + 1 , i ] ) NEW_LINE DEDENT DEDENT if not heap : NEW_LINE INDENT return ans NEW_LINE DEDENT if n + 1 > length : NEW_LINE INDENT ans += n + 1 - length NEW_LINE DEDENT DEDENT return ans - ( n + 1 - len ( d ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks , n ) : NEW_LINE INDENT curr_time , h = 0 , [ ] NEW_LINE for k , v in Counter ( tasks ) . items ( ) : NEW_LINE INDENT heappush ( h , ( - 1 * v , k ) ) NEW_LINE DEDENT while h : NEW_LINE INDENT temp = [ ] NEW_LINE for _ in range ( n + 1 ) : NEW_LINE INDENT if not h and not temp : NEW_LINE INDENT return curr_time NEW_LINE DEDENT curr_time += 1 NEW_LINE if not h : continue NEW_LINE x , y = heappop ( h ) NEW_LINE if x != - 1 : NEW_LINE INDENT temp . append ( ( x + 1 , y ) ) NEW_LINE DEDENT DEDENT for item in temp : NEW_LINE INDENT heappush ( h , item ) NEW_LINE DEDENT DEDENT return curr_time NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : return len ( tasks ) NEW_LINE ct = Counter ( tasks ) NEW_LINE cts = sorted ( ct , key = lambda x : ct [ x ] ) NEW_LINE cost = 0 NEW_LINE while cts : NEW_LINE INDENT t = cts . pop ( ) NEW_LINE nt = ct [ t ] NEW_LINE ct [ t ] = 0 NEW_LINE if nt == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT cost += nt + n * ( nt - 1 ) NEW_LINE for i in range ( nt - 1 ) : NEW_LINE INDENT j = len ( cts ) - 1 NEW_LINE c = 0 NEW_LINE while j >= 0 and c < n : NEW_LINE INDENT t = cts [ j ] NEW_LINE ct [ t ] = max ( 0 , ct [ t ] - 1 ) NEW_LINE c += 1 NEW_LINE j -= 1 NEW_LINE DEDENT for t in cts : NEW_LINE INDENT if ct [ t ] <= 0 : NEW_LINE INDENT cts . remove ( t ) NEW_LINE DEDENT DEDENT cts = sorted ( ct , key = lambda x : ct [ x ] ) NEW_LINE DEDENT DEDENT return cost NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks , n ) : NEW_LINE INDENT curr_time , h = 0 , [ ] NEW_LINE for k , v in Counter ( tasks ) . items ( ) : NEW_LINE INDENT heappush ( h , ( - 1 * v , k ) ) NEW_LINE DEDENT while h : NEW_LINE INDENT temp = [ ] NEW_LINE for _ in range ( n + 1 ) : NEW_LINE INDENT curr_time += 1 NEW_LINE if h : NEW_LINE INDENT x , y = heappop ( h ) NEW_LINE if x != - 1 : NEW_LINE INDENT temp . append ( ( x + 1 , y ) ) NEW_LINE DEDENT DEDENT if not h and not temp : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for item in temp : NEW_LINE INDENT heappush ( h , item ) NEW_LINE DEDENT DEDENT return curr_time NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT numTasks = collections . Counter ( tasks ) NEW_LINE heap = [ ] NEW_LINE total = 0 NEW_LINE for key , val in numTasks . items ( ) : NEW_LINE INDENT heapq . heappush ( heap , ( - val , key ) ) NEW_LINE DEDENT while heap : NEW_LINE INDENT temp = [ ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if heap : NEW_LINE INDENT val , key = heapq . heappop ( heap ) NEW_LINE if val < - 1 : NEW_LINE INDENT val += 1 NEW_LINE temp . append ( ( val , key ) ) NEW_LINE DEDENT total += 1 NEW_LINE DEDENT elif temp : NEW_LINE INDENT total += 1 NEW_LINE DEDENT DEDENT for item in temp : NEW_LINE INDENT heapq . heappush ( heap , item ) NEW_LINE DEDENT DEDENT return total NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT h = [ ] NEW_LINE for cnt in collections . Counter ( tasks ) . values ( ) : NEW_LINE INDENT h . append ( ( 0 , - cnt ) ) NEW_LINE DEDENT heapq . heapify ( h ) NEW_LINE ans = 0 NEW_LINE while h : NEW_LINE INDENT time , count = heapq . heappop ( h ) NEW_LINE while h and h [ 0 ] [ 0 ] < time + 1 : NEW_LINE INDENT t , c = heapq . heappop ( h ) NEW_LINE heapq . heappush ( h , ( time + 1 , c ) ) NEW_LINE DEDENT count *= - 1 NEW_LINE ans += ( time - ans ) NEW_LINE ans += 1 NEW_LINE if count > 1 : NEW_LINE INDENT heapq . heappush ( h , ( ans + n , - ( count - 1 ) ) ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT ctr = collections . Counter ( tasks ) NEW_LINE pq = [ ( - fre , ele ) for ele , fre in ctr . items ( ) ] NEW_LINE heapq . heapify ( pq ) NEW_LINE cnt = 0 NEW_LINE while pq : NEW_LINE INDENT tmp = [ ] NEW_LINE for _ in range ( n + 1 ) : NEW_LINE INDENT cnt += 1 NEW_LINE if pq : NEW_LINE INDENT fre , ele = heapq . heappop ( pq ) NEW_LINE if fre + 1 < 0 : NEW_LINE INDENT tmp . append ( ( fre + 1 , ele ) ) NEW_LINE DEDENT DEDENT if not pq and not tmp : NEW_LINE INDENT return cnt NEW_LINE DEDENT DEDENT for item in tmp : NEW_LINE INDENT heapq . heappush ( pq , item ) NEW_LINE DEDENT DEDENT return cnt NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT h = [ ] NEW_LINE for cnt in collections . Counter ( tasks ) . values ( ) : NEW_LINE INDENT h . append ( ( 0 , - cnt ) ) NEW_LINE DEDENT heapq . heapify ( h ) NEW_LINE ans = 0 NEW_LINE while h : NEW_LINE INDENT time , count = heapq . heappop ( h ) NEW_LINE while h and h [ 0 ] [ 0 ] < time + 1 : NEW_LINE INDENT t , c = heapq . heappop ( h ) NEW_LINE heapq . heappush ( h , ( time + 1 , c ) ) NEW_LINE DEDENT count *= - 1 NEW_LINE if time > ans : NEW_LINE INDENT ans += ( time - ans ) NEW_LINE DEDENT ans += 1 NEW_LINE if count > 1 : NEW_LINE INDENT heapq . heappush ( h , ( ans + n , - ( count - 1 ) ) ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT h = [ ] NEW_LINE for cnt in collections . Counter ( tasks ) . values ( ) : NEW_LINE INDENT h . append ( ( 0 , - cnt ) ) NEW_LINE DEDENT heapq . heapify ( h ) NEW_LINE ans = 0 NEW_LINE while h : NEW_LINE INDENT time , count = heapq . heappop ( h ) NEW_LINE while h and h [ 0 ] [ 0 ] < time + 1 : NEW_LINE INDENT t , c = heapq . heappop ( h ) NEW_LINE heapq . heappush ( h , ( time + 1 , c ) ) NEW_LINE DEDENT count *= - 1 NEW_LINE ans += ( time - ans ) NEW_LINE ans += 1 NEW_LINE if count > 1 : NEW_LINE INDENT heapq . heappush ( h , ( ans + n , - ( count - 1 ) ) ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT h = [ ] NEW_LINE i = 0 NEW_LINE for cnt in sorted ( collections . Counter ( tasks ) . values ( ) ) [ : : - 1 ] : NEW_LINE INDENT h . append ( ( 0 , - cnt ) ) NEW_LINE DEDENT heapq . heapify ( h ) NEW_LINE NEW_LINE ans = 0 NEW_LINE for i in range ( len ( tasks ) ) : NEW_LINE INDENT time , count = heapq . heappop ( h ) NEW_LINE while h and h [ 0 ] [ 0 ] < time + 1 : NEW_LINE INDENT t , c = heapq . heappop ( h ) NEW_LINE heapq . heappush ( h , ( time + 1 , c ) ) NEW_LINE DEDENT count *= - 1 NEW_LINE if time > ans : NEW_LINE INDENT ans += ( time - ans ) NEW_LINE DEDENT if count > 1 : NEW_LINE INDENT heapq . heappush ( h , ( ans + n + 1 , - ( count - 1 ) ) ) NEW_LINE DEDENT ans += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
NEW_LINE NEW_LINE from heapq import heappush , heappop NEW_LINE from collections import Counter NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks , n ) : NEW_LINE INDENT curr_time , heap = 0 , [ ] NEW_LINE for key , val in Counter ( tasks ) . items ( ) : NEW_LINE INDENT heappush ( heap , ( - 1 * val , key ) ) NEW_LINE DEDENT while heap : NEW_LINE INDENT i , temp = 0 , [ ] NEW_LINE while i <= n : NEW_LINE INDENT curr_time += 1 NEW_LINE if heap : NEW_LINE INDENT x , y = heappop ( heap ) NEW_LINE if x != - 1 : NEW_LINE INDENT temp . append ( ( x + 1 , y ) ) NEW_LINE DEDENT DEDENT if not heap and not temp : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT for item in temp : NEW_LINE INDENT heappush ( heap , item ) NEW_LINE DEDENT DEDENT return curr_time NEW_LINE DEDENT DEDENT
from heapq import heappop , heappush NEW_LINE from collections import Counter NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks , n ) : NEW_LINE INDENT cnt , priorityH = 0 , [ ] NEW_LINE for k , v in Counter ( tasks ) . items ( ) : NEW_LINE INDENT heappush ( priorityH , ( - v , k ) ) NEW_LINE DEDENT while priorityH : NEW_LINE INDENT tempList = [ ] NEW_LINE k = n + 1 NEW_LINE while k > 0 : NEW_LINE INDENT cnt += 1 NEW_LINE k -= 1 NEW_LINE if priorityH : NEW_LINE INDENT x1 , x2 = heappop ( ( priorityH ) ) NEW_LINE if x1 != - 1 : NEW_LINE INDENT tempList . append ( ( x1 + 1 , x2 ) ) NEW_LINE DEDENT DEDENT if not priorityH and not tempList : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for taskEle in tempList : NEW_LINE INDENT heappush ( priorityH , taskEle ) NEW_LINE DEDENT DEDENT return cnt NEW_LINE NEW_LINE DEDENT DEDENT
from heapq import heappush , heappop NEW_LINE from collections import Counter NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks , n ) : NEW_LINE INDENT NEW_LINE curr_time , h = 0 , [ ] NEW_LINE for k , v in Counter ( tasks ) . items ( ) : NEW_LINE INDENT heappush ( h , ( - 1 * v , k ) ) NEW_LINE DEDENT while h : NEW_LINE INDENT i , temp = 0 , [ ] NEW_LINE while i <= n : NEW_LINE INDENT curr_time += 1 NEW_LINE if h : NEW_LINE INDENT x , y = heappop ( h ) NEW_LINE if x != - 1 : NEW_LINE INDENT temp . append ( ( x + 1 , y ) ) NEW_LINE DEDENT DEDENT if not h and not temp : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT for item in temp : NEW_LINE INDENT heappush ( h , item ) NEW_LINE DEDENT DEDENT return curr_time NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT NEW_LINE if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT count = collections . Counter ( tasks ) NEW_LINE heap = [ ( - count [ x ] , x ) for x in count ] NEW_LINE heapq . heapify ( heap ) NEW_LINE q = collections . deque ( ) NEW_LINE ans = 0 NEW_LINE while heap or q : NEW_LINE INDENT i = - 1 NEW_LINE while heap and i < n : NEW_LINE INDENT freq , task = heapq . heappop ( heap ) NEW_LINE ans += 1 NEW_LINE i += 1 NEW_LINE freq += 1 NEW_LINE if freq < 0 : NEW_LINE INDENT q . append ( ( freq , task ) ) NEW_LINE DEDENT DEDENT while q and i < n : NEW_LINE INDENT ans += 1 NEW_LINE i += 1 NEW_LINE DEDENT while q : NEW_LINE INDENT heapq . heappush ( heap , q [ 0 ] ) NEW_LINE q . popleft ( ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT count = Counter ( tasks ) NEW_LINE h = [ ] NEW_LINE for char , time in count . items ( ) : NEW_LINE INDENT heapq . heappush ( h , ( - time , char ) ) NEW_LINE DEDENT ans = 0 NEW_LINE while h : NEW_LINE INDENT i , temp = 0 , [ ] NEW_LINE while i <= n : NEW_LINE INDENT ans += 1 NEW_LINE if h : NEW_LINE INDENT neg_time , char = heapq . heappop ( h ) NEW_LINE time = - neg_time NEW_LINE time -= 1 NEW_LINE if time > 0 : NEW_LINE INDENT temp . append ( ( - time , char ) ) NEW_LINE DEDENT DEDENT if not h and not temp : NEW_LINE INDENT break NEW_LINE DEDENT i += 1 NEW_LINE DEDENT for t in temp : NEW_LINE INDENT heapq . heappush ( h , t ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT ch2freq = Counter ( tasks ) NEW_LINE pq = [ ] NEW_LINE for ch , freq in ch2freq . items ( ) : NEW_LINE INDENT heappush ( pq , ( - freq , ch ) ) NEW_LINE DEDENT count = 0 NEW_LINE while pq : NEW_LINE INDENT i = 0 NEW_LINE cooling = [ ] NEW_LINE while i <= n : NEW_LINE INDENT count += 1 NEW_LINE if pq : NEW_LINE INDENT freq , ch = heappop ( pq ) NEW_LINE if freq < - 1 : NEW_LINE INDENT cooling . append ( ( freq + 1 , ch ) ) NEW_LINE DEDENT DEDENT if not cooling and not pq : NEW_LINE INDENT break NEW_LINE DEDENT i += 1 NEW_LINE DEDENT for freq , ch in cooling : NEW_LINE INDENT heappush ( pq , ( freq , ch ) ) NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT DEDENT
import heapq NEW_LINE import collections NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT counter = collections . Counter ( tasks ) NEW_LINE heap = [ ] NEW_LINE for key , val in counter . items ( ) : NEW_LINE INDENT heapq . heappush ( heap , ( - val , key ) ) NEW_LINE DEDENT res = 0 NEW_LINE while heap : NEW_LINE INDENT index , temp = 0 , [ ] NEW_LINE while index <= n : NEW_LINE INDENT res += 1 NEW_LINE if heap : NEW_LINE INDENT val , key = heapq . heappop ( heap ) NEW_LINE if val != - 1 : NEW_LINE INDENT temp . append ( ( val + 1 , key ) ) NEW_LINE DEDENT DEDENT if not heap and not temp : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT index += 1 NEW_LINE DEDENT DEDENT for i in temp : NEW_LINE INDENT heapq . heappush ( heap , i ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT NEW_LINE taskCount = { task : 0 for task in tasks } NEW_LINE maxCount = 0 NEW_LINE for task in tasks : NEW_LINE INDENT taskCount [ task ] += 1 NEW_LINE maxCount = max ( taskCount [ task ] , maxCount ) NEW_LINE DEDENT maxCountTasks = sum ( [ 1 for task , count in taskCount . items ( ) if count == maxCount ] ) NEW_LINE NEW_LINE return max ( maxCount + ( maxCount - 1 ) * n + maxCountTasks - 1 , len ( tasks ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT import heapq NEW_LINE from collections import deque NEW_LINE def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT q = deque ( [ None ] * n ) NEW_LINE freqs = { } NEW_LINE for task in tasks : NEW_LINE INDENT if task not in freqs : NEW_LINE INDENT freqs [ task ] = 0 NEW_LINE DEDENT freqs [ task ] += 1 NEW_LINE DEDENT maxheap = [ ] NEW_LINE ntasks = len ( freqs ) NEW_LINE for char , freq in freqs . items ( ) : NEW_LINE INDENT heapq . heappush ( maxheap , - freq ) NEW_LINE DEDENT result = 0 NEW_LINE while ntasks : NEW_LINE INDENT push = None NEW_LINE if maxheap : NEW_LINE INDENT freq = heapq . heappop ( maxheap ) NEW_LINE if - freq > 1 : NEW_LINE INDENT push = freq + 1 NEW_LINE DEDENT else : NEW_LINE INDENT ntasks -= 1 NEW_LINE DEDENT DEDENT toheap = q . popleft ( ) NEW_LINE if toheap : NEW_LINE INDENT heapq . heappush ( maxheap , toheap ) NEW_LINE DEDENT q . append ( push ) NEW_LINE result += 1 NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT NEW_LINE if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT count = collections . Counter ( tasks ) NEW_LINE heap = [ ( - count [ x ] , x ) for x in count ] NEW_LINE heapq . heapify ( heap ) NEW_LINE q = collections . deque ( ) NEW_LINE ans = 0 NEW_LINE while heap or q : NEW_LINE INDENT i = - 1 NEW_LINE while i < n : NEW_LINE INDENT if heap : NEW_LINE INDENT freq , task = heapq . heappop ( heap ) NEW_LINE ans += 1 NEW_LINE i += 1 NEW_LINE freq += 1 NEW_LINE if freq < 0 : NEW_LINE INDENT q . append ( ( freq , task ) ) NEW_LINE DEDENT DEDENT elif q : NEW_LINE INDENT ans += 1 NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT return ans NEW_LINE DEDENT DEDENT while q : NEW_LINE INDENT heapq . heappush ( heap , q [ 0 ] ) NEW_LINE q . popleft ( ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def inverse ( self , num ) : NEW_LINE INDENT return - 1 * num NEW_LINE DEDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT task_count = Counter ( tasks ) NEW_LINE current_time = 0 NEW_LINE current_heap = [ ] NEW_LINE for k , v in task_count . items ( ) : NEW_LINE INDENT heappush ( current_heap , ( self . inverse ( v ) , k ) ) NEW_LINE DEDENT while current_heap : NEW_LINE INDENT index , temp = 0 , [ ] NEW_LINE while index <= n : NEW_LINE INDENT current_time += 1 NEW_LINE if current_heap : NEW_LINE INDENT timing , taskid = heappop ( current_heap ) NEW_LINE if timing != - 1 : NEW_LINE INDENT temp . append ( ( timing + 1 , taskid ) ) NEW_LINE DEDENT DEDENT if not current_heap and not temp : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT index += 1 NEW_LINE DEDENT DEDENT for item in temp : NEW_LINE INDENT heappush ( current_heap , item ) NEW_LINE DEDENT DEDENT return current_time NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT from collections import defaultdict NEW_LINE store = defaultdict ( int ) NEW_LINE heap = [ ] NEW_LINE import heapq NEW_LINE for j , i in enumerate ( tasks ) : NEW_LINE INDENT if i not in store : NEW_LINE INDENT store [ i ] = 1 NEW_LINE heapq . heappush ( heap , ( 0 , i ) ) NEW_LINE DEDENT else : NEW_LINE INDENT store [ i ] += 1 NEW_LINE DEDENT DEDENT time = 0 NEW_LINE while heap : NEW_LINE INDENT if heap [ 0 ] [ 0 ] <= time : NEW_LINE INDENT t , i = heapq . heappop ( heap ) NEW_LINE store [ i ] -= 1 NEW_LINE if store [ i ] > 0 : NEW_LINE INDENT heapq . heappush ( heap , ( t + n + 1 , i ) ) NEW_LINE DEDENT DEDENT time += 1 NEW_LINE DEDENT return time NEW_LINE DEDENT DEDENT
from heapq import heappush , heappop NEW_LINE import collections NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT least_unittime = 0 NEW_LINE heap = [ ] NEW_LINE tasks_count = collections . Counter ( tasks ) NEW_LINE for k , v in tasks_count . items ( ) : NEW_LINE INDENT heapq . heappush ( heap , ( - v , k ) ) NEW_LINE DEDENT while heap : NEW_LINE INDENT wait_time = 0 NEW_LINE temp = [ ] NEW_LINE while wait_time <= n : NEW_LINE INDENT least_unittime += 1 NEW_LINE if heap : NEW_LINE INDENT x , y = heapq . heappop ( heap ) NEW_LINE if x != - 1 : NEW_LINE INDENT temp . append ( ( x + 1 , y ) ) NEW_LINE DEDENT DEDENT if not heap and not temp : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT wait_time += 1 NEW_LINE DEDENT DEDENT for x in temp : NEW_LINE INDENT heapq . heappush ( heap , x ) NEW_LINE DEDENT DEDENT return least_unittime NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT m = collections . defaultdict ( int ) NEW_LINE for t in tasks : NEW_LINE INDENT m [ t ] += 1 NEW_LINE DEDENT output = 0 NEW_LINE heap = [ ] NEW_LINE for k , v in m . items ( ) : NEW_LINE INDENT heapq . heappush ( heap , ( - v , k ) ) NEW_LINE DEDENT while heap : NEW_LINE INDENT i = 0 NEW_LINE curr = [ ] NEW_LINE while i < n + 1 : NEW_LINE INDENT if heap : NEW_LINE INDENT freq , ch = heapq . heappop ( heap ) NEW_LINE freq += 1 NEW_LINE if freq != 0 : NEW_LINE INDENT curr . append ( ( freq , ch ) ) NEW_LINE DEDENT output += 1 NEW_LINE DEDENT elif curr : NEW_LINE INDENT output += 1 NEW_LINE DEDENT i += 1 NEW_LINE DEDENT for freq , ch in curr : NEW_LINE INDENT heapq . heappush ( heap , ( freq , ch ) ) NEW_LINE DEDENT DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct2 ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT nums_sorted = sorted ( nums ) NEW_LINE if len ( nums ) < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT return max ( nums_sorted [ - 1 ] * nums_sorted [ - 2 ] * nums_sorted [ - 3 ] , nums_sorted [ - 1 ] * nums_sorted [ 0 ] * nums_sorted [ 1 ] ) NEW_LINE DEDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT min1 , min2 = float ( 'inf' ) , float ( 'inf' ) NEW_LINE max1 , max2 , max3 = float ( '-inf' ) , float ( '-inf' ) , float ( '-inf' ) NEW_LINE for num in nums : NEW_LINE INDENT if num <= min1 : NEW_LINE INDENT min2 = min1 NEW_LINE min1 = num NEW_LINE DEDENT elif num < min2 : NEW_LINE INDENT min2 = num NEW_LINE DEDENT if num >= max1 : NEW_LINE INDENT max3 = max2 NEW_LINE max2 = max1 NEW_LINE max1 = num NEW_LINE DEDENT elif num >= max2 : NEW_LINE INDENT max3 = max2 NEW_LINE max2 = num NEW_LINE DEDENT elif num > max3 : NEW_LINE INDENT max3 = num NEW_LINE DEDENT DEDENT return max ( max1 * max2 * max3 , max1 * min1 * min2 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT nums . sort ( ) NEW_LINE return max ( nums [ - 1 ] * nums [ - 2 ] * nums [ - 3 ] , nums [ - 1 ] * nums [ 0 ] * nums [ 1 ] ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT nums . sort ( ) NEW_LINE return max ( nums [ 0 ] * nums [ 1 ] * nums [ - 1 ] , nums [ - 1 ] * nums [ - 2 ] * nums [ - 3 ] ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT min1 = math . inf NEW_LINE min2 = math . inf NEW_LINE max1 = - math . inf NEW_LINE max2 = - math . inf NEW_LINE max3 = - math . inf NEW_LINE for num in nums : NEW_LINE INDENT if num <= min1 : NEW_LINE INDENT min2 = min1 NEW_LINE min1 = num NEW_LINE DEDENT elif num <= min2 : NEW_LINE INDENT min2 = num NEW_LINE DEDENT if num >= max1 : NEW_LINE INDENT max3 = max2 NEW_LINE max2 = max1 NEW_LINE max1 = num NEW_LINE DEDENT elif num >= max2 : NEW_LINE INDENT max3 = max2 NEW_LINE max2 = num NEW_LINE DEDENT elif num >= max3 : NEW_LINE INDENT max3 = num NEW_LINE DEDENT DEDENT return max ( min1 * min2 * max1 , max1 * max2 * max3 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) == 3 : NEW_LINE INDENT return nums [ 0 ] * nums [ 1 ] * nums [ 2 ] NEW_LINE DEDENT nums . sort ( ) NEW_LINE num_negative , num_positive , num_zero = 0 , 0 , 0 NEW_LINE positives , negatives = [ ] , [ ] NEW_LINE for num in nums : NEW_LINE INDENT if num < 0 : NEW_LINE INDENT num_negative += 1 NEW_LINE negatives . append ( num ) NEW_LINE DEDENT elif num > 0 : NEW_LINE INDENT num_positive += 1 NEW_LINE positives . append ( num ) NEW_LINE DEDENT else : NEW_LINE INDENT num_zero += 1 NEW_LINE DEDENT DEDENT negatives . sort ( ) NEW_LINE positives . sort ( reverse = True ) NEW_LINE if num_negative == 0 or num_negative == 1 : NEW_LINE INDENT if num_positive >= 3 : NEW_LINE INDENT return positives [ 0 ] * positives [ 1 ] * positives [ 2 ] NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if num_positive == 0 : NEW_LINE INDENT if num_zero > 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT return negatives [ - 1 ] * negatives [ - 2 ] * negatives [ - 3 ] NEW_LINE DEDENT elif num_positive == 1 or num_positive == 2 : NEW_LINE INDENT return negatives [ 0 ] * negatives [ 1 ] * positives [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT return max ( negatives [ 0 ] * negatives [ 1 ] * positives [ 0 ] , positives [ 0 ] * positives [ 1 ] * positives [ 2 ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT import heapq NEW_LINE def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) < 4 : NEW_LINE INDENT return self . prod ( nums ) NEW_LINE DEDENT posNums , negNums , zeroNums = [ ] , [ ] , [ ] NEW_LINE for num in nums : NEW_LINE INDENT if num > 0 : NEW_LINE INDENT posNums . append ( num ) NEW_LINE DEDENT elif num < 0 : NEW_LINE INDENT negNums . append ( num ) NEW_LINE DEDENT else : NEW_LINE INDENT zeroNums . append ( num ) NEW_LINE DEDENT DEDENT if len ( posNums ) + len ( negNums ) < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT posNums , negNums = sorted ( posNums ) [ : : - 1 ] , sorted ( negNums ) NEW_LINE if not posNums : NEW_LINE INDENT return max ( self . prod ( negNums [ - 3 : ] ) , 0 if zeroNums else - float ( 'inf' ) ) NEW_LINE DEDENT if not negNums : NEW_LINE INDENT return self . prod ( posNums [ : 3 ] ) NEW_LINE DEDENT allPos = self . prod ( posNums [ : 3 ] ) if len ( posNums ) >= 3 else - float ( 'inf' ) NEW_LINE return max ( allPos , self . prod ( posNums [ : 2 ] ) * negNums [ 0 ] , self . prod ( [ posNums [ 0 ] ] + negNums [ : 2 ] ) , 0 if zeroNums else - float ( 'inf' ) ) NEW_LINE DEDENT def prod ( self , arr ) : NEW_LINE INDENT rtn = 1 NEW_LINE for num in arr : NEW_LINE INDENT rtn *= num NEW_LINE DEDENT return rtn NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT pos = [ ] NEW_LINE neg = [ ] NEW_LINE zeros = [ ] NEW_LINE for n in nums : NEW_LINE INDENT if n > 0 : NEW_LINE INDENT pos . append ( n ) NEW_LINE DEDENT if n < 0 : NEW_LINE INDENT neg . append ( n ) NEW_LINE DEDENT else : NEW_LINE INDENT zeros . append ( n ) NEW_LINE DEDENT DEDENT pos = sorted ( pos , reverse = 1 ) NEW_LINE neg = sorted ( neg , reverse = 1 ) NEW_LINE case1 = case2 = case3 = case4 = case5 = - float ( 'inf' ) NEW_LINE if len ( pos ) >= 3 : NEW_LINE INDENT case1 = pos [ 0 ] * pos [ 1 ] * pos [ 2 ] NEW_LINE DEDENT if len ( neg ) >= 3 : NEW_LINE INDENT case2 = neg [ 0 ] * neg [ 1 ] * neg [ 2 ] NEW_LINE DEDENT if len ( zeros ) > 0 : NEW_LINE INDENT case3 = 0 NEW_LINE DEDENT if len ( pos ) >= 2 and len ( neg ) >= 1 : NEW_LINE INDENT case4 = pos [ - 1 ] * pos [ - 2 ] * neg [ 0 ] NEW_LINE DEDENT if len ( neg ) >= 2 and len ( pos ) >= 1 : NEW_LINE INDENT case5 = neg [ - 1 ] * neg [ - 2 ] * pos [ 0 ] NEW_LINE DEDENT return int ( max ( [ case1 , case2 , case3 , case4 , case5 ] ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT all_pos = True NEW_LINE all_neg = True NEW_LINE all_nonzero = True NEW_LINE pos_maximums = [ 0 , 0 , 0 ] NEW_LINE neg_maximums = [ 0 , 0 , 0 ] NEW_LINE neg_minimums = [ - 1001 , - 1001 , - 1001 ] NEW_LINE for num in nums : NEW_LINE INDENT if num > 0 : NEW_LINE INDENT all_neg = False NEW_LINE if num >= pos_maximums [ 0 ] : NEW_LINE INDENT pos_maximums [ 2 ] = pos_maximums [ 1 ] NEW_LINE pos_maximums [ 1 ] = pos_maximums [ 0 ] NEW_LINE pos_maximums [ 0 ] = num NEW_LINE DEDENT elif num >= pos_maximums [ 1 ] : NEW_LINE INDENT pos_maximums [ 2 ] = pos_maximums [ 1 ] NEW_LINE pos_maximums [ 1 ] = num NEW_LINE DEDENT elif num >= pos_maximums [ 2 ] : NEW_LINE INDENT pos_maximums [ 2 ] = num NEW_LINE DEDENT DEDENT elif num < 0 : NEW_LINE INDENT all_pos = False NEW_LINE if - num >= - neg_maximums [ 0 ] : NEW_LINE INDENT neg_maximums [ 2 ] = neg_maximums [ 1 ] NEW_LINE neg_maximums [ 1 ] = neg_maximums [ 0 ] NEW_LINE neg_maximums [ 0 ] = num NEW_LINE DEDENT elif - num >= - neg_maximums [ 1 ] : NEW_LINE INDENT neg_maximums [ 2 ] = neg_maximums [ 1 ] NEW_LINE neg_maximums [ 1 ] = num NEW_LINE DEDENT elif - num >= - neg_maximums [ 2 ] : NEW_LINE INDENT neg_maximums [ 2 ] = num NEW_LINE DEDENT if - num < - neg_minimums [ 2 ] : NEW_LINE INDENT neg_minimums [ 0 ] = neg_minimums [ 1 ] NEW_LINE neg_minimums [ 1 ] = neg_minimums [ 2 ] NEW_LINE neg_minimums [ 2 ] = num NEW_LINE DEDENT elif - num < - neg_minimums [ 1 ] : NEW_LINE INDENT neg_minimums [ 0 ] = neg_minimums [ 1 ] NEW_LINE neg_minimums [ 1 ] = num NEW_LINE DEDENT elif - num < - neg_minimums [ 0 ] : NEW_LINE INDENT neg_minimums [ 0 ] = num NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT all_nonzero = False NEW_LINE DEDENT DEDENT pos_idx = 0 NEW_LINE neg_idx = 0 NEW_LINE maximums = [ ] NEW_LINE if all_pos : NEW_LINE INDENT return pos_maximums [ 0 ] * pos_maximums [ 1 ] * pos_maximums [ 2 ] NEW_LINE DEDENT if all_neg : NEW_LINE INDENT return max ( neg_maximums [ 0 ] * neg_maximums [ 1 ] * neg_maximums [ 2 ] , neg_minimums [ 0 ] * neg_minimums [ 1 ] * neg_minimums [ 2 ] ) if all_nonzero else 0 NEW_LINE DEDENT while pos_idx < len ( pos_maximums ) and neg_idx < len ( neg_maximums ) : NEW_LINE INDENT if pos_maximums [ pos_idx ] >= - neg_maximums [ neg_idx ] : NEW_LINE INDENT maximums += [ pos_maximums [ pos_idx ] ] NEW_LINE pos_idx += 1 NEW_LINE DEDENT else : NEW_LINE INDENT maximums += [ neg_maximums [ neg_idx ] ] NEW_LINE neg_idx += 1 NEW_LINE DEDENT DEDENT if pos_idx == len ( pos_maximums ) : NEW_LINE INDENT for idx in range ( neg_idx , len ( neg_maximums ) ) : NEW_LINE INDENT maximums += [ neg_maximums [ idx ] ] NEW_LINE DEDENT DEDENT if neg_idx == len ( neg_maximums ) : NEW_LINE INDENT for idx in range ( pos_idx , len ( pos_maximums ) ) : NEW_LINE INDENT maximums += [ pos_maximums [ idx ] ] NEW_LINE DEDENT DEDENT result = 0 NEW_LINE for i in range ( 0 , len ( maximums ) - 2 ) : NEW_LINE INDENT for j in range ( i + 1 , len ( maximums ) - 1 ) : NEW_LINE INDENT for k in range ( j + 1 , len ( maximums ) ) : NEW_LINE INDENT if maximums [ i ] * maximums [ j ] * maximums [ k ] > result : NEW_LINE INDENT result = maximums [ i ] * maximums [ j ] * maximums [ k ] NEW_LINE DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT all_pos = True NEW_LINE all_neg = True NEW_LINE all_nonzero = True NEW_LINE pos_maximums = [ 0 , 0 , 0 ] NEW_LINE neg_maximums = [ 0 , 0 , 0 ] NEW_LINE neg_minimums = [ - 1001 , - 1001 , - 1001 ] NEW_LINE for num in nums : NEW_LINE INDENT if num > 0 : NEW_LINE INDENT all_neg = False NEW_LINE if num >= pos_maximums [ 0 ] : NEW_LINE INDENT pos_maximums [ 2 ] = pos_maximums [ 1 ] NEW_LINE pos_maximums [ 1 ] = pos_maximums [ 0 ] NEW_LINE pos_maximums [ 0 ] = num NEW_LINE DEDENT elif num >= pos_maximums [ 1 ] : NEW_LINE INDENT pos_maximums [ 2 ] = pos_maximums [ 1 ] NEW_LINE pos_maximums [ 1 ] = num NEW_LINE DEDENT elif num >= pos_maximums [ 2 ] : NEW_LINE INDENT pos_maximums [ 2 ] = num NEW_LINE DEDENT DEDENT elif num < 0 : NEW_LINE INDENT all_pos = False NEW_LINE if - num >= - neg_maximums [ 0 ] : NEW_LINE INDENT neg_maximums [ 2 ] = neg_maximums [ 1 ] NEW_LINE neg_maximums [ 1 ] = neg_maximums [ 0 ] NEW_LINE neg_maximums [ 0 ] = num NEW_LINE DEDENT elif - num >= - neg_maximums [ 1 ] : NEW_LINE INDENT neg_maximums [ 2 ] = neg_maximums [ 1 ] NEW_LINE neg_maximums [ 1 ] = num NEW_LINE DEDENT elif - num >= - neg_maximums [ 2 ] : NEW_LINE INDENT neg_maximums [ 2 ] = num NEW_LINE DEDENT if - num < - neg_minimums [ 2 ] : NEW_LINE INDENT neg_minimums [ 0 ] = neg_minimums [ 1 ] NEW_LINE neg_minimums [ 1 ] = neg_minimums [ 2 ] NEW_LINE neg_minimums [ 2 ] = num NEW_LINE DEDENT elif - num < - neg_minimums [ 1 ] : NEW_LINE INDENT neg_minimums [ 0 ] = neg_minimums [ 1 ] NEW_LINE neg_minimums [ 1 ] = num NEW_LINE DEDENT elif - num < - neg_minimums [ 0 ] : NEW_LINE INDENT neg_minimums [ 0 ] = num NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT all_nonzero = False NEW_LINE DEDENT DEDENT pos_idx = 0 NEW_LINE neg_idx = 0 NEW_LINE maximums = [ ] NEW_LINE if all_pos : NEW_LINE INDENT return pos_maximums [ 0 ] * pos_maximums [ 1 ] * pos_maximums [ 2 ] NEW_LINE DEDENT if all_neg : NEW_LINE INDENT return max ( neg_maximums [ 0 ] * neg_maximums [ 1 ] * neg_maximums [ 2 ] , neg_minimums [ 0 ] * neg_minimums [ 1 ] * neg_minimums [ 2 ] ) if all_nonzero else 0 NEW_LINE DEDENT while pos_idx < len ( pos_maximums ) and neg_idx < len ( neg_maximums ) : NEW_LINE INDENT if pos_maximums [ pos_idx ] >= - neg_maximums [ neg_idx ] : NEW_LINE INDENT maximums += [ pos_maximums [ pos_idx ] ] NEW_LINE pos_idx += 1 NEW_LINE DEDENT else : NEW_LINE INDENT maximums += [ neg_maximums [ neg_idx ] ] NEW_LINE neg_idx += 1 NEW_LINE DEDENT DEDENT if pos_idx == len ( pos_maximums ) : NEW_LINE INDENT for idx in range ( neg_idx , len ( neg_maximums ) ) : NEW_LINE INDENT maximums += [ neg_maximums [ idx ] ] NEW_LINE DEDENT DEDENT if neg_idx == len ( neg_maximums ) : NEW_LINE INDENT for idx in range ( pos_idx , len ( pos_maximums ) ) : NEW_LINE INDENT maximums += [ pos_maximums [ idx ] ] NEW_LINE DEDENT DEDENT result = 0 NEW_LINE for i in range ( 0 , len ( maximums ) - 2 ) : NEW_LINE INDENT for j in range ( i + 1 , len ( maximums ) - 1 ) : NEW_LINE INDENT for k in range ( j + 1 , len ( maximums ) ) : NEW_LINE INDENT if maximums [ i ] * maximums [ j ] * maximums [ k ] > result : NEW_LINE INDENT result = maximums [ i ] * maximums [ j ] * maximums [ k ] NEW_LINE DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT all_pos = True NEW_LINE all_neg = True NEW_LINE all_nonzero = True NEW_LINE pos_maximums = [ 0 , 0 , 0 ] NEW_LINE neg_maximums = [ 0 , 0 , 0 ] NEW_LINE neg_minimums = [ - 1001 , - 1001 , - 1001 ] NEW_LINE for num in nums : NEW_LINE INDENT if num > 0 : NEW_LINE INDENT all_neg = False NEW_LINE if num >= pos_maximums [ 0 ] : NEW_LINE INDENT pos_maximums [ 2 ] = pos_maximums [ 1 ] NEW_LINE pos_maximums [ 1 ] = pos_maximums [ 0 ] NEW_LINE pos_maximums [ 0 ] = num NEW_LINE DEDENT elif num >= pos_maximums [ 1 ] : NEW_LINE INDENT pos_maximums [ 2 ] = pos_maximums [ 1 ] NEW_LINE pos_maximums [ 1 ] = num NEW_LINE DEDENT elif num >= pos_maximums [ 2 ] : NEW_LINE INDENT pos_maximums [ 2 ] = num NEW_LINE DEDENT DEDENT elif num < 0 : NEW_LINE INDENT all_pos = False NEW_LINE if - num >= - neg_maximums [ 0 ] : NEW_LINE INDENT neg_maximums [ 2 ] = neg_maximums [ 1 ] NEW_LINE neg_maximums [ 1 ] = neg_maximums [ 0 ] NEW_LINE neg_maximums [ 0 ] = num NEW_LINE DEDENT elif - num >= - neg_maximums [ 1 ] : NEW_LINE INDENT neg_maximums [ 2 ] = neg_maximums [ 1 ] NEW_LINE neg_maximums [ 1 ] = num NEW_LINE DEDENT elif - num >= - neg_maximums [ 2 ] : NEW_LINE INDENT neg_maximums [ 2 ] = num NEW_LINE DEDENT if - num < - neg_minimums [ 2 ] : NEW_LINE INDENT neg_minimums [ 0 ] = neg_minimums [ 1 ] NEW_LINE neg_minimums [ 1 ] = neg_minimums [ 2 ] NEW_LINE neg_minimums [ 2 ] = num NEW_LINE DEDENT elif - num < - neg_minimums [ 1 ] : NEW_LINE INDENT neg_minimums [ 0 ] = neg_minimums [ 1 ] NEW_LINE neg_minimums [ 1 ] = num NEW_LINE DEDENT elif - num < - neg_minimums [ 0 ] : NEW_LINE INDENT neg_minimums [ 0 ] = num NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT all_nonzero = False NEW_LINE DEDENT DEDENT pos_idx = 0 NEW_LINE neg_idx = 0 NEW_LINE maximums = [ ] NEW_LINE if all_pos : NEW_LINE INDENT return pos_maximums [ 0 ] * pos_maximums [ 1 ] * pos_maximums [ 2 ] NEW_LINE DEDENT if all_neg : NEW_LINE INDENT return neg_minimums [ 0 ] * neg_minimums [ 1 ] * neg_minimums [ 2 ] if all_nonzero else 0 NEW_LINE DEDENT while pos_idx < len ( pos_maximums ) and neg_idx < len ( neg_maximums ) : NEW_LINE INDENT if pos_maximums [ pos_idx ] >= - neg_maximums [ neg_idx ] : NEW_LINE INDENT maximums += [ pos_maximums [ pos_idx ] ] NEW_LINE pos_idx += 1 NEW_LINE DEDENT else : NEW_LINE INDENT maximums += [ neg_maximums [ neg_idx ] ] NEW_LINE neg_idx += 1 NEW_LINE DEDENT DEDENT if pos_idx == len ( pos_maximums ) : NEW_LINE INDENT for idx in range ( neg_idx , len ( neg_maximums ) ) : NEW_LINE INDENT maximums += [ neg_maximums [ idx ] ] NEW_LINE DEDENT DEDENT if neg_idx == len ( neg_maximums ) : NEW_LINE INDENT for idx in range ( pos_idx , len ( pos_maximums ) ) : NEW_LINE INDENT maximums += [ pos_maximums [ idx ] ] NEW_LINE DEDENT DEDENT result = 0 NEW_LINE for i in range ( 0 , len ( maximums ) - 2 ) : NEW_LINE INDENT for j in range ( i + 1 , len ( maximums ) - 1 ) : NEW_LINE INDENT for k in range ( j + 1 , len ( maximums ) ) : NEW_LINE INDENT if maximums [ i ] * maximums [ j ] * maximums [ k ] > result : NEW_LINE INDENT result = maximums [ i ] * maximums [ j ] * maximums [ k ] NEW_LINE DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT lowest = [ float ( "inf" ) ] * 2 NEW_LINE highest = [ float ( "-inf" ) ] * 3 NEW_LINE for num in nums : NEW_LINE INDENT lowest . append ( num ) NEW_LINE highest . append ( num ) NEW_LINE highest . sort ( ) NEW_LINE highest . pop ( 0 ) NEW_LINE lowest . sort ( ) NEW_LINE lowest . pop ( ) NEW_LINE DEDENT return max ( lowest [ 0 ] * lowest [ 1 ] * highest [ 2 ] , highest [ 0 ] * highest [ 1 ] * highest [ 2 ] ) NEW_LINE DEDENT DEDENT
import numpy as np NEW_LINE class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT largest = heapq . nlargest ( 3 , nums ) NEW_LINE smallest = heapq . nsmallest ( 2 , nums ) NEW_LINE return max ( np . prod ( largest ) , np . prod ( smallest + [ largest [ 0 ] ] ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT max1 , max2 , max3 = float ( '-inf' ) , float ( '-inf' ) , float ( '-inf' ) NEW_LINE min1 , min2 = float ( 'inf' ) , float ( 'inf' ) NEW_LINE for value in nums : NEW_LINE INDENT if value > max1 : NEW_LINE INDENT max3 = max2 NEW_LINE max2 = max1 NEW_LINE max1 = value NEW_LINE DEDENT elif value > max2 : NEW_LINE INDENT max3 = max2 NEW_LINE max2 = value NEW_LINE DEDENT elif value > max3 : NEW_LINE INDENT max3 = value NEW_LINE DEDENT if value < min1 : NEW_LINE INDENT min2 = min1 NEW_LINE min1 = value NEW_LINE DEDENT elif value < min2 : NEW_LINE INDENT min2 = value NEW_LINE DEDENT DEDENT return max ( max1 * max2 * max3 , min1 * min2 * max1 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT neg = 0 NEW_LINE maxPos = - float ( 'inf' ) NEW_LINE for i in nums : NEW_LINE INDENT if i < 0 : NEW_LINE INDENT neg += 1 NEW_LINE DEDENT else : NEW_LINE INDENT maxPos = max ( maxPos , i ) NEW_LINE DEDENT DEDENT q = [ ] NEW_LINE neg_val = float ( '-inf' ) NEW_LINE pos_val = float ( '-inf' ) NEW_LINE if neg > 1 : NEW_LINE INDENT for i in nums : NEW_LINE INDENT heapq . heappush ( q , i ) NEW_LINE DEDENT minOne = heapq . heappop ( q ) NEW_LINE minTwo = heapq . heappop ( q ) NEW_LINE if maxPos != - float ( 'inf' ) : NEW_LINE INDENT neg_val = minOne * minTwo * maxPos NEW_LINE DEDENT else : NEW_LINE INDENT minThree = heapq . heappop ( q ) NEW_LINE neg_val = minOne * minTwo * minThree NEW_LINE DEDENT DEDENT q = [ ] NEW_LINE for i in nums : NEW_LINE INDENT heapq . heappush ( q , - i ) NEW_LINE DEDENT maxOne = - heapq . heappop ( q ) NEW_LINE maxTwo = - heapq . heappop ( q ) NEW_LINE maxThree = - heapq . heappop ( q ) NEW_LINE pos_val = maxOne * maxTwo * maxThree NEW_LINE return max ( pos_val , neg_val ) NEW_LINE DEDENT DEDENT
from heapq import heappush , heappop NEW_LINE class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT maxQ , minQ = [ ] , [ ] NEW_LINE for n in nums : NEW_LINE INDENT heappush ( maxQ , n ) NEW_LINE heappush ( minQ , - n ) NEW_LINE if len ( maxQ ) > 3 : NEW_LINE INDENT heappop ( maxQ ) NEW_LINE DEDENT if len ( minQ ) > 2 : NEW_LINE INDENT heappop ( minQ ) NEW_LINE DEDENT DEDENT largest = float ( '-inf' ) NEW_LINE ans = 1 NEW_LINE while maxQ : NEW_LINE INDENT n = heappop ( maxQ ) NEW_LINE largest = max ( largest , n ) NEW_LINE ans *= n NEW_LINE DEDENT while minQ : NEW_LINE INDENT largest *= heappop ( minQ ) NEW_LINE DEDENT return max ( largest , ans ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT maxq = [ ] NEW_LINE minq = [ ] NEW_LINE print ( nums ) NEW_LINE for n in nums : NEW_LINE INDENT if maxq and len ( maxq ) >= 3 : NEW_LINE INDENT if n < - maxq [ 0 ] : NEW_LINE INDENT heapq . heappop ( maxq ) NEW_LINE heapq . heappush ( maxq , - n ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT heapq . heappush ( maxq , - n ) NEW_LINE DEDENT if minq and len ( minq ) >= 3 : NEW_LINE INDENT if n > minq [ 0 ] : NEW_LINE INDENT heapq . heappop ( minq ) NEW_LINE heapq . heappush ( minq , n ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT heapq . heappush ( minq , n ) NEW_LINE DEDENT DEDENT left = 1 NEW_LINE for x in minq : NEW_LINE INDENT left *= x NEW_LINE DEDENT right = 1 NEW_LINE for y in maxq : NEW_LINE INDENT right *= - y NEW_LINE DEDENT mix = None NEW_LINE print ( "mins" , maxq ) NEW_LINE if len ( maxq ) > 1 and max ( nums ) > 0 : NEW_LINE INDENT a , b = heapq . heappop ( maxq ) , heapq . heappop ( maxq ) NEW_LINE if len ( maxq ) > 0 : NEW_LINE INDENT a = heapq . heappop ( maxq ) NEW_LINE DEDENT a *= - 1 NEW_LINE b *= - 1 NEW_LINE print ( "mins" , a , b ) NEW_LINE if a < 0 and b < 0 : NEW_LINE INDENT mix = a * b * max ( nums ) NEW_LINE DEDENT DEDENT print ( left , right , max ( nums ) ) NEW_LINE print ( "maxs" , minq ) NEW_LINE print ( ) NEW_LINE N = len ( nums ) NEW_LINE nums . sort ( ) NEW_LINE print ( nums [ : 4 ] ) NEW_LINE if mix is not None : NEW_LINE INDENT return max ( left , right , mix ) NEW_LINE DEDENT return max ( left , right ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT nums . sort ( ) NEW_LINE return max ( nums [ - 1 ] * nums [ - 2 ] * nums [ - 3 ] , nums [ - 1 ] * nums [ 0 ] * nums [ 1 ] ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT nums . sort ( reverse = True ) NEW_LINE return max ( nums [ 0 ] * nums [ 1 ] * nums [ 2 ] , nums [ - 1 ] * nums [ - 2 ] * nums [ 0 ] ) NEW_LINE DEDENT DEDENT
from heapq import heappop , heappush NEW_LINE class Solution : NEW_LINE INDENT def maximumProduct ( self , nums ) : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT raise Error ( "bad_input_combination" ) NEW_LINE DEDENT min_pq = [ ] NEW_LINE max_pq = [ ] NEW_LINE for num in nums : NEW_LINE INDENT heappush ( min_pq , - 1 * num ) NEW_LINE if len ( min_pq ) > 2 : NEW_LINE INDENT heappop ( min_pq ) NEW_LINE DEDENT heappush ( max_pq , num ) NEW_LINE if len ( max_pq ) > 3 : NEW_LINE INDENT heappop ( max_pq ) NEW_LINE DEDENT DEDENT min1 , min2 = - 1 * heappop ( min_pq ) , - 1 * heappop ( min_pq ) NEW_LINE max1 , max2 , max3 = heappop ( max_pq ) , heappop ( max_pq ) , heappop ( max_pq ) NEW_LINE option1 = max3 * min1 * min2 NEW_LINE option2 = max1 * max2 * max3 NEW_LINE return max ( option1 , option2 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT largest = [ ] NEW_LINE smallest = [ ] NEW_LINE for n in nums : NEW_LINE INDENT heapq . heappush ( largest , n ) NEW_LINE heapq . heappush ( smallest , - n ) NEW_LINE if len ( largest ) > 3 : NEW_LINE INDENT heapq . heappop ( largest ) NEW_LINE heapq . heappop ( smallest ) NEW_LINE DEDENT DEDENT x = heapq . heappop ( largest ) * heapq . heappop ( largest ) NEW_LINE maxNum = heapq . heappop ( largest ) NEW_LINE heapq . heappop ( smallest ) NEW_LINE y = heapq . heappop ( smallest ) * heapq . heappop ( smallest ) NEW_LINE return maxNum * max ( x , y ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT mini , maxi = [ ] , [ ] NEW_LINE for n in nums : NEW_LINE INDENT heapq . heappush ( mini , - n ) NEW_LINE heapq . heappush ( maxi , n ) NEW_LINE if len ( mini ) > 2 : NEW_LINE INDENT heapq . heappop ( mini ) NEW_LINE DEDENT if len ( maxi ) > 3 : NEW_LINE INDENT heapq . heappop ( maxi ) NEW_LINE DEDENT DEDENT min1 , min2 = - heapq . heappop ( mini ) , - heapq . heappop ( mini ) NEW_LINE max1 , max2 , max3 = heapq . heappop ( maxi ) , heapq . heappop ( maxi ) , heapq . heappop ( maxi ) NEW_LINE a = min1 * min2 * max3 NEW_LINE b = max1 * max2 * max3 NEW_LINE return a if a > b else b NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT import numpy as np NEW_LINE pos = filter ( lambda a : a >= 0 , nums ) NEW_LINE neg = filter ( lambda a : a < 0 , nums ) NEW_LINE pos = sorted ( pos ) NEW_LINE neg = sorted ( neg , reverse = True ) NEW_LINE pos3 = pos [ - 3 : ] NEW_LINE neg3 = neg [ - 3 : ] NEW_LINE comb = pos3 + neg3 NEW_LINE print ( pos3 ) NEW_LINE maxmul = float ( - 100000 ) NEW_LINE if len ( pos3 ) == 0 : NEW_LINE INDENT return ( np . prod ( neg3 ) ) NEW_LINE DEDENT elif len ( neg3 ) == 0 : NEW_LINE INDENT return ( np . prod ( pos3 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT neg2 = neg [ - 2 : ] NEW_LINE mul1 = np . prod ( neg2 ) * pos3 [ - 1 ] NEW_LINE mul2 = np . prod ( pos3 [ - 3 : ] ) NEW_LINE return max ( mul1 , mul2 ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT nums . sort ( ) NEW_LINE print ( nums ) NEW_LINE return max ( nums [ 0 ] * nums [ 1 ] * nums [ len ( nums ) - 1 ] , nums [ len ( nums ) - 1 ] * nums [ len ( nums ) - 2 ] * nums [ len ( nums ) - 3 ] ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT return max ( sorted ( nums ) [ - 1 ] * sorted ( nums ) [ - 2 ] * sorted ( nums ) [ - 3 ] , sorted ( nums ) [ 0 ] * sorted ( nums ) [ 1 ] * sorted ( nums ) [ - 1 ] ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT nums . sort ( ) NEW_LINE product = max ( nums [ 0 ] * nums [ 1 ] * nums [ - 1 ] , nums [ - 1 ] * nums [ - 2 ] * nums [ - 3 ] ) NEW_LINE return product NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT n = len ( nums ) NEW_LINE nums . sort ( reverse = True ) NEW_LINE a = max ( nums [ 0 ] * nums [ 1 ] * nums [ 2 ] , nums [ 0 ] * nums [ n - 1 ] * nums [ n - 2 ] ) NEW_LINE return a NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT output = [ ] NEW_LINE res = [ ] NEW_LINE sorted_nums = sorted ( nums , reverse = True ) NEW_LINE for i in sorted_nums [ : 3 ] : NEW_LINE INDENT output . append ( i ) NEW_LINE DEDENT res . append ( output [ 0 ] * output [ 1 ] * output [ 2 ] ) NEW_LINE sorted_nums = sorted ( nums ) NEW_LINE res . append ( sorted_nums [ 0 ] * sorted_nums [ 1 ] * sorted_nums [ - 1 ] ) NEW_LINE print ( res ) NEW_LINE return max ( res ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , arr : List [ int ] ) -> int : NEW_LINE INDENT min1 , min2 = float ( "inf" ) , float ( "inf" ) NEW_LINE max3 , max2 , max1 = float ( "-inf" ) , float ( "-inf" ) , float ( "-inf" ) NEW_LINE ans = 0 NEW_LINE for i in range ( len ( arr ) ) : NEW_LINE INDENT cur = arr [ i ] NEW_LINE if cur < min1 : NEW_LINE INDENT min1 , min2 = cur , min1 NEW_LINE DEDENT elif cur < min2 : NEW_LINE INDENT min2 = cur NEW_LINE DEDENT if cur > max1 : NEW_LINE INDENT max1 , max2 , max3 = cur , max1 , max2 NEW_LINE DEDENT elif cur > max2 : NEW_LINE INDENT max2 , max3 = cur , max2 NEW_LINE DEDENT elif cur > max3 : NEW_LINE INDENT max3 = cur NEW_LINE DEDENT ans = max ( min1 * min2 * max1 , max3 * max2 * max1 ) NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) == 3 : return nums [ 0 ] * nums [ 1 ] * nums [ 2 ] NEW_LINE def maxk ( ns , k ) -> List [ int ] : NEW_LINE INDENT l = len ( ns ) NEW_LINE res = [ float ( '-inf' ) for _ in range ( k ) ] NEW_LINE temp_index = 0 NEW_LINE index_set = set ( ) NEW_LINE for n in range ( k ) : NEW_LINE INDENT for i in range ( l ) : NEW_LINE INDENT if i in index_set : continue NEW_LINE if ns [ i ] > res [ n ] : NEW_LINE INDENT res [ n ] = ns [ i ] NEW_LINE temp_index = i NEW_LINE DEDENT DEDENT index_set . add ( temp_index ) NEW_LINE DEDENT return res NEW_LINE DEDENT def mink ( ns , k ) -> List [ int ] : NEW_LINE INDENT l = len ( ns ) NEW_LINE res = [ float ( 'inf' ) for _ in range ( k ) ] NEW_LINE temp_index = 0 NEW_LINE index_set = set ( ) NEW_LINE for n in range ( k ) : NEW_LINE INDENT for i in range ( l ) : NEW_LINE INDENT if i in index_set : continue NEW_LINE if ns [ i ] < res [ n ] : NEW_LINE INDENT res [ n ] = ns [ i ] NEW_LINE temp_index = i NEW_LINE DEDENT DEDENT index_set . add ( temp_index ) NEW_LINE DEDENT return res NEW_LINE DEDENT numsP = [ ] NEW_LINE numsN = [ ] NEW_LINE nums0 = [ ] NEW_LINE for num in nums : NEW_LINE INDENT if num > 0 : numsP . append ( num ) NEW_LINE elif num == 0 : nums0 . append ( num ) NEW_LINE else : numsN . append ( num ) NEW_LINE DEDENT countP = len ( numsP ) NEW_LINE count0 = len ( nums0 ) NEW_LINE countN = len ( numsN ) NEW_LINE if countP >= 3 : NEW_LINE INDENT if countN >= 2 : NEW_LINE INDENT t1 = maxk ( numsP , 3 ) [ 0 ] * maxk ( numsP , 3 ) [ 1 ] * maxk ( numsP , 3 ) [ 2 ] NEW_LINE t2 = maxk ( numsP , 3 ) [ 0 ] * mink ( numsN , 2 ) [ 0 ] * mink ( numsN , 2 ) [ 1 ] NEW_LINE return max ( t1 , t2 ) NEW_LINE DEDENT else : NEW_LINE INDENT return maxk ( numsP , 3 ) [ 0 ] * maxk ( numsP , 3 ) [ 1 ] * maxk ( numsP , 3 ) [ 2 ] NEW_LINE DEDENT DEDENT elif countP > 0 : NEW_LINE INDENT if countN >= 2 : NEW_LINE INDENT return maxk ( numsP , 1 ) [ 0 ] * mink ( numsN , 2 ) [ 0 ] * mink ( numsN , 2 ) [ 1 ] NEW_LINE DEDENT else : return 0 NEW_LINE DEDENT else : NEW_LINE INDENT if count0 > 0 : return 0 NEW_LINE else : NEW_LINE INDENT return mink ( numsN , 3 ) [ 0 ] * mink ( numsN , 3 ) [ 1 ] * mink ( numsN , 3 ) [ 2 ] NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT nums . sort ( ) NEW_LINE return ( max ( nums [ 0 ] * nums [ 1 ] * nums [ - 1 ] , nums [ - 1 ] * nums [ - 2 ] * nums [ - 3 ] ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT nums . sort ( ) NEW_LINE return max ( nums [ 0 ] * nums [ 1 ] * nums [ - 1 ] , nums [ - 1 ] * nums [ - 2 ] * nums [ - 3 ] ) NEW_LINE DEDENT NEW_LINE DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT output = [ ] NEW_LINE res = [ ] NEW_LINE sorted_nums = sorted ( nums , reverse = True ) NEW_LINE for i in sorted_nums [ : 3 ] : NEW_LINE INDENT output . append ( i ) NEW_LINE DEDENT res . append ( output [ 0 ] * output [ 1 ] * output [ 2 ] ) NEW_LINE sorted_nums = sorted ( nums ) NEW_LINE res . append ( sorted_nums [ 0 ] * sorted_nums [ 1 ] * sorted_nums [ - 1 ] ) NEW_LINE return max ( res ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return None NEW_LINE DEDENT highest = max ( nums [ 0 ] , nums [ 1 ] ) NEW_LINE lowest = min ( nums [ 0 ] , nums [ 1 ] ) NEW_LINE highest_prod_2 = nums [ 0 ] * nums [ 1 ] NEW_LINE lowest_prod_2 = nums [ 0 ] * nums [ 1 ] NEW_LINE highest_prod_3 = nums [ 0 ] * nums [ 1 ] * nums [ 2 ] NEW_LINE for i in range ( 2 , len ( nums ) ) : NEW_LINE INDENT curr = nums [ i ] NEW_LINE highest_prod_3 = max ( highest_prod_3 , highest_prod_2 * curr , lowest_prod_2 * curr ) NEW_LINE highest_prod_2 = max ( highest_prod_2 , curr * highest , curr * lowest ) NEW_LINE lowest_prod_2 = min ( lowest_prod_2 , curr * highest , curr * lowest ) NEW_LINE highest = max ( highest , curr ) NEW_LINE lowest = min ( lowest , curr ) NEW_LINE DEDENT return highest_prod_3 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return None NEW_LINE DEDENT highest = max ( nums [ 0 ] , nums [ 1 ] ) NEW_LINE lowest = min ( nums [ 0 ] , nums [ 1 ] ) NEW_LINE highest_prod_2 = nums [ 0 ] * nums [ 1 ] NEW_LINE lowest_prod_2 = nums [ 0 ] * nums [ 1 ] NEW_LINE highest_prod_3 = nums [ 0 ] * nums [ 1 ] * nums [ 2 ] NEW_LINE for i in range ( 2 , len ( nums ) ) : NEW_LINE INDENT curr = nums [ i ] NEW_LINE highest_prod_3 = max ( highest_prod_3 , highest_prod_2 * curr , lowest_prod_2 * curr ) NEW_LINE highest_prod_2 = max ( highest_prod_2 , curr * highest , curr * lowest ) NEW_LINE lowest_prod_2 = min ( lowest_prod_2 , curr * highest , curr * lowest ) NEW_LINE highest = max ( highest , curr ) NEW_LINE lowest = min ( lowest , curr ) NEW_LINE DEDENT return highest_prod_3 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT highest_product_of_three = nums [ 0 ] * nums [ 1 ] * nums [ 2 ] NEW_LINE highest_product_of_two = nums [ 0 ] * nums [ 1 ] NEW_LINE lowest_product_of_two = nums [ 0 ] * nums [ 1 ] NEW_LINE highest_max = max ( nums [ 0 ] , nums [ 1 ] ) NEW_LINE lowest_min = min ( nums [ 0 ] , nums [ 1 ] ) NEW_LINE for i in nums [ 2 : ] : NEW_LINE INDENT highest_product_of_three = max ( highest_product_of_three , i * highest_product_of_two , i * lowest_product_of_two ) NEW_LINE highest_product_of_two = max ( highest_product_of_two , i * highest_max , i * lowest_min ) NEW_LINE lowest_product_of_two = min ( lowest_product_of_two , i * highest_max , i * lowest_min ) NEW_LINE highest_max = max ( highest_max , i ) NEW_LINE lowest_min = min ( lowest_min , i ) NEW_LINE DEDENT return highest_product_of_three NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT minTwo = nums [ 0 ] * nums [ 1 ] NEW_LINE maxTwo = nums [ 0 ] * nums [ 1 ] NEW_LINE minNum = min ( nums [ 0 ] , nums [ 1 ] ) NEW_LINE maxNum = max ( nums [ 0 ] , nums [ 1 ] ) NEW_LINE maxThree = nums [ 0 ] * nums [ 1 ] * nums [ 2 ] NEW_LINE for i in range ( 2 , len ( nums ) ) : NEW_LINE INDENT num = nums [ i ] NEW_LINE maxThree = max ( maxThree , minTwo * num , maxTwo * num ) NEW_LINE minTwo = min ( minTwo , minNum * num , maxNum * num ) NEW_LINE maxTwo = max ( maxTwo , maxNum * num , minNum * num ) NEW_LINE minNum = min ( minNum , num ) NEW_LINE maxNum = max ( maxNum , num ) NEW_LINE DEDENT return maxThree NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT min_heap = [ ] NEW_LINE max_heap = [ ] NEW_LINE for num in nums : NEW_LINE INDENT heapq . heappush ( min_heap , num ) NEW_LINE heapq . heappush ( max_heap , - num ) NEW_LINE if len ( min_heap ) > 3 : NEW_LINE INDENT heapq . heappop ( min_heap ) NEW_LINE DEDENT if len ( max_heap ) > 2 : NEW_LINE INDENT heapq . heappop ( max_heap ) NEW_LINE DEDENT DEDENT curr_prod = 1 NEW_LINE for num in min_heap : NEW_LINE INDENT curr_prod *= num NEW_LINE DEDENT return max ( - max_heap [ 0 ] * - max_heap [ 1 ] * max ( min_heap ) , curr_prod ) NEW_LINE DEDENT DEDENT
import math NEW_LINE class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT min_1 , min_2 = math . inf , math . inf NEW_LINE max_1 , max_2 , max_3 = - math . inf , - math . inf , - math . inf NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] >= max_1 : NEW_LINE INDENT max_3 = max_2 NEW_LINE max_2 = max_1 NEW_LINE max_1 = nums [ i ] NEW_LINE DEDENT elif nums [ i ] >= max_2 : NEW_LINE INDENT max_3 = max_2 NEW_LINE max_2 = nums [ i ] NEW_LINE DEDENT elif nums [ i ] >= max_3 : NEW_LINE INDENT max_3 = nums [ i ] NEW_LINE DEDENT if nums [ i ] <= 0 and nums [ i ] <= min_1 : NEW_LINE INDENT min_2 = min_1 NEW_LINE min_1 = nums [ i ] NEW_LINE DEDENT elif nums [ i ] <= 0 and nums [ i ] < min_2 : NEW_LINE INDENT min_2 = nums [ i ] NEW_LINE DEDENT DEDENT a = min_2 * min_1 * max_1 NEW_LINE b = max_1 * max_2 * max_3 NEW_LINE print ( 'a = ' , a ) NEW_LINE print ( "b = " , b ) NEW_LINE if a == math . inf or math . isnan ( a ) : NEW_LINE INDENT return b NEW_LINE DEDENT return max ( a , b ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if max ( nums ) <= 0 or min ( nums ) >= 0 : NEW_LINE INDENT maximum = 1 NEW_LINE for i in range ( 0 , 3 ) : NEW_LINE INDENT maximum *= max ( nums ) NEW_LINE nums . remove ( max ( nums ) ) NEW_LINE DEDENT return maximum NEW_LINE DEDENT else : NEW_LINE INDENT nums2 = nums . copy ( ) NEW_LINE max1 = 1 NEW_LINE max2 = 1 NEW_LINE for i in range ( 0 , 3 ) : NEW_LINE INDENT max1 *= max ( nums ) NEW_LINE nums . remove ( max ( nums ) ) NEW_LINE if i == 0 : NEW_LINE INDENT max2 *= max ( nums2 ) NEW_LINE nums2 . remove ( max ( nums2 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT max2 *= min ( nums2 ) NEW_LINE nums2 . remove ( min ( nums2 ) ) NEW_LINE DEDENT DEDENT return max ( [ max1 , max2 ] ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT low , high , prodMin , prodMax = min ( nums [ 0 ] , nums [ 1 ] ) , max ( nums [ 0 ] , nums [ 1 ] ) , nums [ 0 ] * nums [ 1 ] , nums [ 0 ] * nums [ 1 ] NEW_LINE result = float ( '-inf' ) NEW_LINE for i in range ( 2 , len ( nums ) ) : NEW_LINE INDENT result = max ( result , prodMax * nums [ i ] , prodMin * nums [ i ] ) NEW_LINE prodMax = max ( prodMax , low * nums [ i ] , high * nums [ i ] ) NEW_LINE prodMin = min ( prodMin , low * nums [ i ] , high * nums [ i ] ) NEW_LINE low = min ( low , nums [ i ] ) NEW_LINE high = max ( high , nums [ i ] ) NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) == 3 : return nums [ 0 ] * nums [ 1 ] * nums [ 2 ] NEW_LINE d_plus = [ ] NEW_LINE d_minus = [ ] NEW_LINE for x in nums : NEW_LINE INDENT if x < 0 : NEW_LINE INDENT x = x * - 1 NEW_LINE d_minus . append ( x ) NEW_LINE DEDENT else : NEW_LINE INDENT d_plus . append ( x ) NEW_LINE DEDENT DEDENT d_minus = sorted ( d_minus , reverse = True ) NEW_LINE if len ( d_plus ) == 0 : NEW_LINE INDENT return d_minus [ 0 ] * d_minus [ 1 ] * d_minus [ 2 ] NEW_LINE DEDENT d_plus = sorted ( d_plus , reverse = True ) NEW_LINE if len ( d_plus ) >= 3 : NEW_LINE INDENT if len ( d_minus ) >= 1 : NEW_LINE INDENT return max ( [ d_plus [ 0 ] * d_plus [ 1 ] * d_plus [ 2 ] , d_minus [ 0 ] * d_minus [ 1 ] * d_plus [ 0 ] ] ) NEW_LINE DEDENT else : NEW_LINE INDENT return d_plus [ 0 ] * d_plus [ 1 ] * d_plus [ 2 ] NEW_LINE DEDENT DEDENT if len ( d_plus ) == 1 : NEW_LINE INDENT return d_minus [ 0 ] * d_minus [ 1 ] * d_plus [ 0 ] NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT min1 = min2 = float ( 'inf' ) NEW_LINE max1 = max2 = max3 = float ( '-inf' ) NEW_LINE for num in nums : NEW_LINE INDENT if num <= min1 : NEW_LINE INDENT min2 = min1 NEW_LINE min1 = num NEW_LINE DEDENT elif num <= min2 : NEW_LINE INDENT min2 = num NEW_LINE DEDENT if num >= max1 : NEW_LINE INDENT max3 = max2 NEW_LINE max2 = max1 NEW_LINE max1 = num NEW_LINE DEDENT elif num >= max2 : NEW_LINE INDENT max3 = max2 NEW_LINE max2 = num NEW_LINE DEDENT elif num >= max3 : NEW_LINE INDENT max3 = num NEW_LINE DEDENT DEDENT return max ( min1 * min2 * max1 , max1 * max2 * max3 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maximumProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT max3 = nums [ 0 ] * nums [ 1 ] * nums [ 2 ] NEW_LINE max2 = nums [ 0 ] * nums [ 1 ] NEW_LINE min2 = nums [ 0 ] * nums [ 1 ] NEW_LINE max1 = max ( nums [ 0 ] , nums [ 1 ] ) NEW_LINE min1 = min ( nums [ 0 ] , nums [ 1 ] ) NEW_LINE for num in nums [ 2 : ] : NEW_LINE INDENT max3 = max ( max3 , max2 * num , min2 * num ) NEW_LINE max2 = max ( max2 , max1 * num , min1 * num ) NEW_LINE min2 = min ( min2 , max1 * num , min1 * num ) NEW_LINE max1 = max ( max1 , num ) NEW_LINE min1 = min ( min1 , num ) NEW_LINE DEDENT return max3 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT if not nums or not k or len ( nums ) < k * 3 : NEW_LINE INDENT return [ - 1 , - 1 , - 1 ] NEW_LINE DEDENT c = len ( nums ) - k NEW_LINE b = c - k NEW_LINE a = b - k NEW_LINE sum_c = sum ( nums [ c : c + k ] ) NEW_LINE sum_b = sum ( nums [ b : b + k ] ) NEW_LINE sum_a = sum ( nums [ a : a + k ] ) NEW_LINE max_c = sum_c NEW_LINE max_bc = sum_b + max_c NEW_LINE max_abc = sum_a + max_bc NEW_LINE window_c = [ c ] NEW_LINE window_bc = [ b , c ] NEW_LINE window_abc = [ a , b , c ] NEW_LINE while a > 0 : NEW_LINE INDENT c -= 1 NEW_LINE b -= 1 NEW_LINE a -= 1 NEW_LINE sum_c += nums [ c ] - nums [ c + k ] NEW_LINE sum_b += nums [ b ] - nums [ b + k ] NEW_LINE sum_a += nums [ a ] - nums [ a + k ] NEW_LINE if sum_c >= max_c : NEW_LINE INDENT max_c = sum_c NEW_LINE window_c = [ c ] NEW_LINE DEDENT if sum_b + max_c >= max_bc : NEW_LINE INDENT max_bc = sum_b + max_c NEW_LINE window_bc = [ b ] + window_c NEW_LINE DEDENT if sum_a + max_bc >= max_abc : NEW_LINE INDENT max_abc = sum_a + max_bc NEW_LINE window_abc = [ a ] + window_bc NEW_LINE DEDENT DEDENT return window_abc NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT if not nums or not k or len ( nums ) < k * 3 : NEW_LINE INDENT return [ - 1 , - 1 , - 1 ] NEW_LINE DEDENT c = len ( nums ) - k NEW_LINE b = c - k NEW_LINE a = b - k NEW_LINE sum_c = sum ( nums [ c : c + k ] ) NEW_LINE sum_b = sum ( nums [ b : b + k ] ) NEW_LINE sum_a = sum ( nums [ a : a + k ] ) NEW_LINE max_c = sum_c NEW_LINE max_bc = sum_b + max_c NEW_LINE max_abc = sum_a + max_bc NEW_LINE window_c = [ c ] NEW_LINE window_bc = [ b , c ] NEW_LINE window_abc = [ a , b , c ] NEW_LINE while a > 0 : NEW_LINE INDENT c -= 1 NEW_LINE b -= 1 NEW_LINE a -= 1 NEW_LINE sum_c += nums [ c ] - nums [ c + k ] NEW_LINE sum_b += nums [ b ] - nums [ b + k ] NEW_LINE sum_a += nums [ a ] - nums [ a + k ] NEW_LINE if sum_c >= max_c : NEW_LINE INDENT max_c = sum_c NEW_LINE window_c = [ c ] NEW_LINE DEDENT if sum_b + max_c >= max_bc : NEW_LINE INDENT max_bc = sum_b + max_c NEW_LINE window_bc = [ b ] + window_c NEW_LINE DEDENT if sum_a + max_bc >= max_abc : NEW_LINE INDENT max_abc = sum_a + max_bc NEW_LINE window_abc = [ a ] + window_bc NEW_LINE DEDENT DEDENT return window_abc NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT if not nums or len ( nums ) < ( 3 * k ) : NEW_LINE INDENT return [ - 1 , - 1 , - 1 ] NEW_LINE DEDENT c = len ( nums ) - k NEW_LINE b = c - k NEW_LINE a = b - k NEW_LINE sumC = sum ( nums [ c : c + k ] ) NEW_LINE sumB = sum ( nums [ b : b + k ] ) NEW_LINE sumA = sum ( nums [ a : a + k ] ) NEW_LINE maxC = sumC NEW_LINE maxBC = sumB + maxC NEW_LINE maxABC = sumA + maxBC NEW_LINE windowC = [ c ] NEW_LINE windowBC = [ b , c ] NEW_LINE windowABC = [ a , b , c ] NEW_LINE while a > 0 : NEW_LINE INDENT c -= 1 NEW_LINE b -= 1 NEW_LINE a -= 1 NEW_LINE sumC += nums [ c ] - nums [ c + k ] NEW_LINE sumB += nums [ b ] - nums [ b + k ] NEW_LINE sumA += nums [ a ] - nums [ a + k ] NEW_LINE if maxC <= sumC : NEW_LINE INDENT maxC = sumC NEW_LINE windowC = [ c ] NEW_LINE DEDENT if maxBC <= sumB + maxC : NEW_LINE INDENT maxBC = sumB + maxC NEW_LINE windowBC = [ b ] + windowC NEW_LINE DEDENT if maxABC <= sumA + maxBC : NEW_LINE INDENT maxABC = sumA + maxBC NEW_LINE windowABC = [ a ] + windowBC NEW_LINE DEDENT DEDENT return windowABC NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums , k ) : NEW_LINE INDENT w1 , w2 , w3 = sum ( nums [ : k ] ) , sum ( nums [ k : 2 * k ] ) , sum ( nums [ 2 * k : 3 * k ] ) NEW_LINE mw1 , mw2 , mw3 = w1 , w1 + w2 , w1 + w2 + w3 NEW_LINE mw1index , mw2index , mw3index = [ 0 ] , [ 0 , k ] , [ 0 , k , 2 * k ] NEW_LINE for i in range ( 1 , len ( nums ) - 3 * k + 1 ) : NEW_LINE INDENT w1 += nums [ i - 1 + k ] - nums [ i - 1 ] NEW_LINE w2 += nums [ i - 1 + 2 * k ] - nums [ i - 1 + k ] NEW_LINE w3 += nums [ i - 1 + 3 * k ] - nums [ i - 1 + 2 * k ] NEW_LINE if w1 > mw1 : NEW_LINE INDENT mw1 , mw1index = w1 , [ i ] NEW_LINE DEDENT if mw1 + w2 > mw2 : NEW_LINE INDENT mw2 , mw2index = mw1 + w2 , mw1index + [ i + k ] NEW_LINE DEDENT if mw2 + w3 > mw3 : NEW_LINE INDENT mw3 , mw3index = mw2 + w3 , mw2index + [ i + 2 * k ] NEW_LINE DEDENT DEDENT return mw3index NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT w1 , w2 , w3 = sum ( nums [ : k ] ) , sum ( nums [ k : 2 * k ] ) , sum ( nums [ 2 * k : 3 * k ] ) NEW_LINE mw1 , mw2 , mw3 = w1 , w1 + w2 , w1 + w2 + w3 NEW_LINE w1i , w2i , w3i = [ 0 ] , [ 0 , k ] , [ 0 , k , 2 * k ] NEW_LINE for i in range ( 1 , len ( nums ) - 3 * k + 1 ) : NEW_LINE INDENT w1 += nums [ k - 1 + i ] - nums [ i - 1 ] NEW_LINE w2 += nums [ 2 * k - 1 + i ] - nums [ k - 1 + i ] NEW_LINE w3 += nums [ 3 * k - 1 + i ] - nums [ 2 * k - 1 + i ] NEW_LINE if w1 > mw1 : NEW_LINE INDENT mw1 , w1i = w1 , [ i ] NEW_LINE DEDENT if mw1 + w2 > mw2 : NEW_LINE INDENT mw2 = mw1 + w2 NEW_LINE w2i = w1i + [ k + i ] NEW_LINE DEDENT if mw2 + w3 > mw3 : NEW_LINE INDENT mw3 = mw2 + w3 NEW_LINE w3i = w2i + [ i + 2 * k ] NEW_LINE DEDENT DEDENT return w3i NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT sums = [ ] NEW_LINE SUM = 0 NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT if i >= k : NEW_LINE INDENT SUM -= nums [ i - k ] NEW_LINE DEDENT SUM += num NEW_LINE if i >= k - 1 : NEW_LINE INDENT sums . append ( SUM ) NEW_LINE DEDENT DEDENT n = len ( sums ) NEW_LINE sums2 = [ ] NEW_LINE MAX1 = - sys . maxsize NEW_LINE for idx2 in range ( k , n - k ) : NEW_LINE INDENT if sums [ idx2 - k ] > MAX1 : NEW_LINE INDENT MAX1 = sums [ idx2 - k ] NEW_LINE idx1 = idx2 - k NEW_LINE DEDENT sums2 . append ( ( MAX1 + sums [ idx2 ] , idx1 , idx2 ) ) NEW_LINE DEDENT MAX2 = - sys . maxsize NEW_LINE MAX3 = - sys . maxsize NEW_LINE for idx3 in range ( 2 * k , n ) : NEW_LINE INDENT if MAX2 < sums2 [ idx3 - 2 * k ] [ 0 ] : NEW_LINE INDENT idx12 = [ sums2 [ idx3 - 2 * k ] [ 1 ] , sums2 [ idx3 - 2 * k ] [ 2 ] ] NEW_LINE MAX2 = sums2 [ idx3 - 2 * k ] [ 0 ] NEW_LINE DEDENT if MAX2 + sums [ idx3 ] > MAX3 : NEW_LINE INDENT res = idx12 + [ idx3 ] NEW_LINE MAX3 = MAX2 + sums [ idx3 ] NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT sum1 , sum2 , sum3 = sum ( nums [ 0 : k ] ) , sum ( nums [ k : 2 * k ] ) , sum ( nums [ 2 * k : 3 * k ] ) NEW_LINE maxSumOfOne = sum1 NEW_LINE maxSumOfTwo = sum1 + sum2 NEW_LINE maxSumOfThree = sum1 + sum2 + sum3 NEW_LINE bestIndexOfOne , bestIndicesOfTwo , bestIndicesOfThree = [ 0 ] , [ 0 , k ] , [ 0 , k , 2 * k ] NEW_LINE for i in range ( 1 , len ( nums ) - 3 * k + 1 ) : NEW_LINE INDENT sum1 = sum1 - nums [ i - 1 ] + nums [ i + k - 1 ] NEW_LINE sum2 = sum2 - nums [ i + k - 1 ] + nums [ i + 2 * k - 1 ] NEW_LINE sum3 = sum3 - nums [ i + 2 * k - 1 ] + nums [ i + 3 * k - 1 ] NEW_LINE if sum1 > maxSumOfOne : NEW_LINE INDENT maxSumOfOne = sum1 NEW_LINE bestIndexOfOne = [ i ] NEW_LINE DEDENT if maxSumOfOne + sum2 > maxSumOfTwo : NEW_LINE INDENT maxSumOfTwo = maxSumOfOne + sum2 NEW_LINE bestIndicesOfTwo = bestIndexOfOne + [ k + i ] NEW_LINE DEDENT if maxSumOfTwo + sum3 > maxSumOfThree : NEW_LINE INDENT maxSumOfThree = maxSumOfTwo + sum3 NEW_LINE bestIndicesOfThree = bestIndicesOfTwo + [ 2 * k + i ] NEW_LINE DEDENT DEDENT return bestIndicesOfThree NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT sums = [ sum ( nums [ : k ] ) ] NEW_LINE for i in range ( k , len ( nums ) ) : NEW_LINE INDENT sums . append ( sums [ - 1 ] + nums [ i ] - nums [ i - k ] ) NEW_LINE DEDENT n = len ( nums ) NEW_LINE dp1 = [ ( - 1 , float ( '-inf' ) ) ] * ( n - 3 * k + 1 ) NEW_LINE tmp1 = ( - 1 , float ( '-inf' ) ) NEW_LINE for i in range ( len ( dp1 ) ) : NEW_LINE INDENT if sums [ i ] > tmp1 [ - 1 ] : NEW_LINE INDENT tmp1 = ( i , sums [ i ] ) NEW_LINE DEDENT dp1 [ i ] = tmp1 NEW_LINE DEDENT dp2 = [ ( - 1 , - 1 , float ( '-inf' ) ) ] * ( n - 2 * k + 1 ) NEW_LINE tmp2 = ( - 1 , - 1 , float ( '-inf' ) ) NEW_LINE for i in range ( k , len ( dp2 ) ) : NEW_LINE INDENT if dp1 [ i - k ] [ - 1 ] + sums [ i ] > tmp2 [ - 1 ] : NEW_LINE INDENT tmp2 = ( dp1 [ i - k ] [ 0 ] , i , dp1 [ i - k ] [ 1 ] + sums [ i ] ) NEW_LINE DEDENT dp2 [ i ] = tmp2 NEW_LINE DEDENT dp3 = [ ( - 1 , - 1 , - 1 , float ( '-inf' ) ) ] * ( n - k + 1 ) NEW_LINE tmp3 = ( - 1 , - 1 , - 1 , float ( '-inf' ) ) NEW_LINE for i in range ( 2 * k , len ( dp3 ) ) : NEW_LINE INDENT if dp2 [ i - k ] [ - 1 ] + sums [ i ] > tmp3 [ - 1 ] : NEW_LINE INDENT tmp3 = ( dp2 [ i - k ] [ 0 ] , dp2 [ i - k ] [ 1 ] , i , dp2 [ i - k ] [ - 1 ] + sums [ i ] ) NEW_LINE DEDENT dp3 [ i ] = tmp3 NEW_LINE DEDENT return list ( dp3 [ - 1 ] [ : - 1 ] ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT if len ( nums ) < 3 * k : return [ ] NEW_LINE dp1 = [ ( 0 , 0 ) ] * len ( nums ) NEW_LINE dp2 = [ ( 0 , 0 , 0 ) ] * len ( nums ) NEW_LINE dp3 = [ ( 0 , 0 , 0 , 0 ) ] * len ( nums ) NEW_LINE dp1 [ k - 1 ] = ( sum ( nums [ : k ] ) , k - 1 ) NEW_LINE curval = sum ( nums [ : k ] ) NEW_LINE for i in range ( k , len ( nums ) ) : NEW_LINE INDENT curval = curval - nums [ i - k ] + nums [ i ] NEW_LINE if curval > dp1 [ i - 1 ] [ 0 ] : NEW_LINE INDENT dp1 [ i ] = ( curval , i ) NEW_LINE DEDENT else : NEW_LINE INDENT dp1 [ i ] = dp1 [ i - 1 ] NEW_LINE DEDENT DEDENT dp2 [ 2 * k - 1 ] = ( sum ( nums [ : 2 * k ] ) , k - 1 , 2 * k - 1 ) NEW_LINE dp2sum = sum ( nums [ k : 2 * k ] ) NEW_LINE for i in range ( 2 * k , len ( nums ) ) : NEW_LINE INDENT dp2sum = dp2sum + nums [ i ] - nums [ i - k ] NEW_LINE curval = dp2sum + dp1 [ i - k ] [ 0 ] NEW_LINE if curval > dp2 [ i - 1 ] [ 0 ] : NEW_LINE INDENT dp2 [ i ] = ( curval , dp1 [ i - k ] [ 1 ] , i ) NEW_LINE DEDENT else : NEW_LINE INDENT dp2 [ i ] = dp2 [ i - 1 ] NEW_LINE DEDENT DEDENT dp3 [ 3 * k - 1 ] = ( sum ( nums [ : 3 * k ] ) , k - 1 , 2 * k - 1 , 3 * k - 1 ) NEW_LINE ans = [ 0 , k , 2 * k ] NEW_LINE dp3sum = sum ( nums [ 2 * k : 3 * k ] ) NEW_LINE for i in range ( 3 * k , len ( nums ) ) : NEW_LINE INDENT dp3sum = dp3sum + nums [ i ] - nums [ i - k ] NEW_LINE curval = dp3sum + dp2 [ i - k ] [ 0 ] NEW_LINE if curval > dp3 [ i - 1 ] [ 0 ] : NEW_LINE INDENT dp3 [ i ] = ( curval , dp2 [ i - k ] [ 1 ] , dp2 [ i - k ] [ 2 ] , i ) NEW_LINE ans = [ dp2 [ i - k ] [ 1 ] - k + 1 , dp2 [ i - k ] [ 2 ] - k + 1 , i - k + 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT dp3 [ i ] = dp3 [ i - 1 ] NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT w = [ ] NEW_LINE temp_sum = 0 NEW_LINE for i , x in enumerate ( nums ) : NEW_LINE INDENT temp_sum += x NEW_LINE if i >= k : NEW_LINE INDENT temp_sum -= nums [ i - k ] NEW_LINE DEDENT if i >= k - 1 : NEW_LINE INDENT w . append ( temp_sum ) NEW_LINE DEDENT DEDENT left = [ 0 ] * len ( w ) NEW_LINE right = [ 0 ] * len ( w ) NEW_LINE best = 0 NEW_LINE for i in range ( len ( w ) ) : NEW_LINE INDENT if w [ i ] > w [ best ] : NEW_LINE INDENT best = i NEW_LINE DEDENT left [ i ] = best NEW_LINE DEDENT best = len ( w ) - 1 NEW_LINE for i in range ( len ( w ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if w [ i ] >= w [ best ] : NEW_LINE INDENT best = i NEW_LINE DEDENT right [ i ] = best NEW_LINE DEDENT ans = None NEW_LINE for j in range ( k , len ( w ) - k ) : NEW_LINE INDENT i , l = left [ j - k ] , right [ j + k ] NEW_LINE if ans is None or ( w [ i ] + w [ j ] + w [ l ] ) > ( w [ ans [ 0 ] ] + w [ ans [ 1 ] ] + w [ ans [ 2 ] ] ) : NEW_LINE INDENT ans = i , j , l NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT sums = [ ] NEW_LINE curr_sum = 0 NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT curr_sum += num NEW_LINE if i >= k : NEW_LINE INDENT curr_sum -= nums [ i - k ] NEW_LINE DEDENT if i >= k - 1 : NEW_LINE INDENT sums . append ( curr_sum ) NEW_LINE DEDENT DEDENT left_of_mid_array = [ 0 ] * len ( sums ) NEW_LINE max_left_sum_index = 0 NEW_LINE for i in range ( len ( sums ) ) : NEW_LINE INDENT if sums [ i ] > sums [ max_left_sum_index ] : NEW_LINE INDENT max_left_sum_index = i NEW_LINE DEDENT left_of_mid_array [ i ] = max_left_sum_index NEW_LINE DEDENT right_of_mid_array = [ 0 ] * len ( sums ) NEW_LINE max_right_sum_index = len ( sums ) - 1 NEW_LINE for i in range ( len ( sums ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if sums [ i ] >= sums [ max_right_sum_index ] : NEW_LINE INDENT max_right_sum_index = i NEW_LINE DEDENT right_of_mid_array [ i ] = max_right_sum_index NEW_LINE DEDENT result = None NEW_LINE for j in range ( k , len ( sums ) - k ) : NEW_LINE INDENT i , l = left_of_mid_array [ j - k ] , right_of_mid_array [ j + k ] NEW_LINE if result is None or ( sums [ i ] + sums [ j ] + sums [ l ] > sums [ result [ 0 ] ] + sums [ result [ 1 ] ] + sums [ result [ 2 ] ] ) : NEW_LINE INDENT result = i , j , l NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT pre = [ ] NEW_LINE pos = [ ] NEW_LINE n = len ( nums ) NEW_LINE cur = 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT cur += nums [ i ] NEW_LINE DEDENT maxv = cur NEW_LINE pre . append ( [ cur , 0 ] ) NEW_LINE for i in range ( k , n ) : NEW_LINE INDENT cur += nums [ i ] - nums [ i - k ] NEW_LINE if cur > maxv : NEW_LINE INDENT maxv = cur NEW_LINE pre . append ( [ maxv , i - k + 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT pre . append ( pre [ - 1 ] ) NEW_LINE DEDENT DEDENT cur = 0 NEW_LINE for i in range ( n - 1 , n - k - 1 , - 1 ) : NEW_LINE INDENT cur += nums [ i ] NEW_LINE DEDENT maxv = cur NEW_LINE pos . append ( [ cur , n - k ] ) NEW_LINE for i in range ( n - k - 1 , - 1 , - 1 ) : NEW_LINE INDENT cur += nums [ i ] - nums [ i + k ] NEW_LINE if cur >= maxv : NEW_LINE INDENT maxv = cur NEW_LINE pos . append ( [ maxv , i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT pos . append ( pos [ - 1 ] ) NEW_LINE DEDENT DEDENT pos . reverse ( ) NEW_LINE maxv = 0 NEW_LINE cur = 0 NEW_LINE result = [ ] NEW_LINE for i in range ( k - 1 , 2 * k - 1 ) : NEW_LINE INDENT cur += nums [ i ] NEW_LINE DEDENT for i in range ( 2 * k - 1 , n - k ) : NEW_LINE INDENT cur += nums [ i ] - nums [ i - k ] NEW_LINE temp = cur + pre [ i - 2 * k + 1 ] [ 0 ] + pos [ i + 1 ] [ 0 ] NEW_LINE if temp > maxv : NEW_LINE INDENT maxv = temp NEW_LINE result = [ pre [ i - 2 * k + 1 ] [ 1 ] , i - k + 1 , pos [ i + 1 ] [ 1 ] ] NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT w = [ ] NEW_LINE s = 0 NEW_LINE for i , val in enumerate ( nums ) : NEW_LINE INDENT s += val NEW_LINE if i >= k : NEW_LINE INDENT s -= nums [ i - k ] NEW_LINE DEDENT if i >= k - 1 : NEW_LINE INDENT w . append ( s ) NEW_LINE DEDENT DEDENT left = [ 0 ] * len ( w ) NEW_LINE best = 0 NEW_LINE for i in range ( len ( w ) ) : NEW_LINE INDENT if w [ i ] > w [ best ] : NEW_LINE INDENT best = i NEW_LINE DEDENT left [ i ] = best NEW_LINE DEDENT right = [ 0 ] * len ( w ) NEW_LINE best = len ( w ) - 1 NEW_LINE for i in range ( len ( w ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if w [ i ] >= w [ best ] : NEW_LINE INDENT best = i NEW_LINE DEDENT right [ i ] = best NEW_LINE DEDENT res = [ ] NEW_LINE for j in range ( k , len ( w ) - k ) : NEW_LINE INDENT l , r = left [ j - k ] , right [ j + k ] NEW_LINE if not res or w [ l ] + w [ j ] + w [ r ] > w [ res [ 0 ] ] + w [ res [ 1 ] ] + w [ res [ 2 ] ] : NEW_LINE INDENT res = [ l , j , r ] NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT NEW_LINE def maxSumOfThreeSubarrays ( self , nums , k ) : NEW_LINE INDENT NEW_LINE n = len ( nums ) NEW_LINE summ = [ 0 ] * ( n - k + 1 ) NEW_LINE max_left_sum = [ 0 ] * ( n - k + 1 ) NEW_LINE max_right_sum = [ 0 ] * ( n - k + 1 ) NEW_LINE max_left_sum_index = [ 0 ] * ( n - k + 1 ) NEW_LINE max_right_sum_index = [ 0 ] * ( n - k + 1 ) NEW_LINE curr = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT curr += nums [ i ] NEW_LINE if i >= k - 1 : NEW_LINE INDENT summ [ i - k + 1 ] = curr NEW_LINE curr -= nums [ i - k + 1 ] NEW_LINE DEDENT DEDENT max_left_sum [ 0 ] = summ [ 0 ] NEW_LINE max_left_sum_index [ 0 ] = 0 NEW_LINE for i in range ( 1 , len ( summ ) ) : NEW_LINE INDENT if summ [ i ] > max_left_sum [ i - 1 ] : NEW_LINE INDENT max_left_sum [ i ] = summ [ i ] NEW_LINE max_left_sum_index [ i ] = i NEW_LINE DEDENT else : NEW_LINE INDENT max_left_sum [ i ] = max_left_sum [ i - 1 ] NEW_LINE max_left_sum_index [ i ] = max_left_sum_index [ i - 1 ] NEW_LINE DEDENT DEDENT max_right_sum [ - 1 ] = summ [ - 1 ] NEW_LINE max_right_sum_index [ - 1 ] = len ( summ ) - 1 NEW_LINE for i in range ( len ( summ ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT if summ [ i ] >= max_right_sum [ i + 1 ] : NEW_LINE INDENT max_right_sum [ i ] = summ [ i ] NEW_LINE max_right_sum_index [ i ] = i NEW_LINE DEDENT else : NEW_LINE INDENT max_right_sum [ i ] = max_right_sum [ i + 1 ] NEW_LINE max_right_sum_index [ i ] = max_right_sum_index [ i + 1 ] NEW_LINE DEDENT DEDENT ans = float ( "-inf" ) NEW_LINE rst = [ ] NEW_LINE for i in range ( k , n - 2 * k + 1 ) : NEW_LINE INDENT temp = max_left_sum [ i - k ] + summ [ i ] + max_right_sum [ i + k ] NEW_LINE if temp > ans : NEW_LINE INDENT ans = temp NEW_LINE rst = [ max_left_sum_index [ i - k ] , i , max_right_sum_index [ i + k ] ] NEW_LINE DEDENT DEDENT return rst NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT w = [ ] NEW_LINE curr_sum = 0 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT curr_sum += nums [ i ] NEW_LINE if i >= k : NEW_LINE INDENT curr_sum += - nums [ i - k ] NEW_LINE DEDENT if i >= k - 1 : NEW_LINE INDENT w . append ( curr_sum ) NEW_LINE DEDENT DEDENT left = [ ] NEW_LINE best = 0 NEW_LINE for i , v in enumerate ( w ) : NEW_LINE INDENT if v > w [ best ] : NEW_LINE INDENT best = i NEW_LINE DEDENT left . append ( best ) NEW_LINE DEDENT right = [ 0 ] * len ( w ) NEW_LINE best = len ( w ) - 1 NEW_LINE for i in range ( len ( w ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if w [ i ] >= w [ best ] : NEW_LINE INDENT best = i NEW_LINE DEDENT right [ i ] = best NEW_LINE DEDENT print ( w , left , right ) NEW_LINE max_sum = curr_sum = 0 NEW_LINE l = m = r = 0 NEW_LINE for j in range ( k , len ( w ) - k ) : NEW_LINE INDENT left_sum = w [ left [ j - k ] ] NEW_LINE right_sum = w [ right [ j + k ] ] NEW_LINE curr_sum = left_sum + w [ j ] + right_sum NEW_LINE if curr_sum > max_sum : NEW_LINE INDENT max_sum = curr_sum NEW_LINE l = left [ j - k ] NEW_LINE r = right [ j + k ] NEW_LINE m = j NEW_LINE DEDENT DEDENT return [ l , m , r ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT if not nums : return [ ] NEW_LINE l = len ( nums ) NEW_LINE s = [ 0 ] * ( l + 1 ) NEW_LINE left = [ 0 ] * l NEW_LINE right = [ 0 ] * l NEW_LINE for i in range ( 1 , l + 1 ) : NEW_LINE INDENT s [ i ] = s [ i - 1 ] + nums [ i - 1 ] NEW_LINE DEDENT left_max = s [ k ] NEW_LINE for i in range ( k , l ) : NEW_LINE INDENT if s [ i + 1 ] - s [ i + 1 - k ] > left_max : NEW_LINE INDENT left [ i ] = i + 1 - k NEW_LINE left_max = s [ i + 1 ] - s [ i + 1 - k ] NEW_LINE DEDENT else : NEW_LINE INDENT left [ i ] = left [ i - 1 ] NEW_LINE DEDENT DEDENT right_max = s [ l ] - s [ l - k ] NEW_LINE right [ l - k ] = l - k NEW_LINE for i in range ( l - k - 1 , - 1 , - 1 ) : NEW_LINE INDENT if s [ i + k ] - s [ i ] >= right_max : NEW_LINE INDENT right [ i ] = i NEW_LINE right_max = s [ i + k ] - s [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT right [ i ] = right [ i + 1 ] NEW_LINE DEDENT DEDENT ans = [ - 1 , - 1 , - 1 ] NEW_LINE m = 0 NEW_LINE for i in range ( k , l - 2 * k + 1 ) : NEW_LINE INDENT l = left [ i - 1 ] NEW_LINE r = right [ i + k ] NEW_LINE total = ( s [ l + k ] - s [ l ] ) + ( s [ i + k ] - s [ i ] ) + ( s [ r + k ] - s [ r ] ) NEW_LINE if total > m : NEW_LINE INDENT ans = [ l , i , r ] NEW_LINE m = total NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE sum_k = [ 0 ] * ( n - k + 1 ) NEW_LINE sum_k [ 0 ] = sum ( nums [ : k ] ) NEW_LINE for i in range ( 1 , n - k + 1 ) : NEW_LINE INDENT sum_k [ i ] = sum_k [ i - 1 ] - nums [ i - 1 ] + nums [ i - 1 + k ] NEW_LINE DEDENT max_left = [ 0 ] * n NEW_LINE max_left [ k ] = sum_k [ 0 ] NEW_LINE max_left_ind = [ - 1 ] * n NEW_LINE max_left_ind [ k ] = 0 NEW_LINE for i in range ( 1 , n - k ) : NEW_LINE INDENT if sum_k [ i ] > max_left [ i + k - 1 ] : NEW_LINE INDENT max_left [ i + k ] = sum_k [ i ] NEW_LINE max_left_ind [ i + k ] = i NEW_LINE DEDENT else : NEW_LINE INDENT max_left [ i + k ] = max_left [ i + k - 1 ] NEW_LINE max_left_ind [ i + k ] = max_left_ind [ i + k - 1 ] NEW_LINE DEDENT DEDENT max_right = [ 0 ] * n NEW_LINE max_right [ n - k - 1 ] = sum_k [ n - k ] NEW_LINE max_right_ind = [ - 1 ] * n NEW_LINE max_right_ind [ n - k - 1 ] = n - k NEW_LINE for i in range ( n - k - 2 , - 1 , - 1 ) : NEW_LINE INDENT if sum_k [ i + 1 ] >= max_right [ i + 1 ] : NEW_LINE INDENT max_right [ i ] = sum_k [ i + 1 ] NEW_LINE max_right_ind [ i ] = i + 1 NEW_LINE DEDENT else : NEW_LINE INDENT max_right [ i ] = max_right [ i + 1 ] NEW_LINE max_right_ind [ i ] = max_right_ind [ i + 1 ] NEW_LINE DEDENT DEDENT cur_sum , cur_ind = float ( '-inf' ) , ( - 1 , - 1 , - 1 ) NEW_LINE for mid in range ( k , n - 2 * k + 1 ) : NEW_LINE INDENT left , right = mid , mid + k - 1 NEW_LINE new_sum = sum_k [ mid ] + max_right [ right ] + max_left [ left ] NEW_LINE new_ind = ( max_left_ind [ left ] , mid , max_right_ind [ right ] ) NEW_LINE if new_sum > cur_sum or ( new_sum == cur_sum and new_ind [ 0 ] < cur_ind [ 0 ] ) : NEW_LINE INDENT cur_sum , cur_ind = new_sum , new_ind NEW_LINE DEDENT DEDENT return cur_ind NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT result = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT start = i + 1 NEW_LINE end = len ( nums ) - 1 NEW_LINE if i != 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT while start < end : NEW_LINE INDENT if nums [ i ] + nums [ end ] + nums [ start ] < 0 : NEW_LINE INDENT start += 1 NEW_LINE DEDENT elif nums [ i ] + nums [ end ] + nums [ start ] > 0 : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ end ] , nums [ start ] ] ) NEW_LINE start += 1 NEW_LINE end -= 1 NEW_LINE while start < end and nums [ start ] == nums [ start - 1 ] : NEW_LINE INDENT start += 1 NEW_LINE DEDENT while start < end and end != len ( nums ) - 1 and nums [ end ] == nums [ end + 1 ] : NEW_LINE INDENT end -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE ret = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT temp = nums [ i ] NEW_LINE if i > 0 and nums [ i - 1 ] == temp : NEW_LINE INDENT continue NEW_LINE DEDENT p1 = i + 1 NEW_LINE p2 = len ( nums ) - 1 NEW_LINE while p1 < p2 : NEW_LINE INDENT if temp + nums [ p1 ] + nums [ p2 ] == 0 : NEW_LINE INDENT ret . append ( ( temp , nums [ p1 ] , nums [ p2 ] ) ) NEW_LINE p1 += 1 NEW_LINE p2 -= 1 NEW_LINE DEDENT elif temp + nums [ p1 ] + nums [ p2 ] > 0 : NEW_LINE INDENT p2 -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT p1 += 1 NEW_LINE DEDENT DEDENT DEDENT return set ( ret ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if not nums : NEW_LINE INDENT return [ ] NEW_LINE DEDENT resset = set ( ) NEW_LINE def twoSum ( target , lo , hi ) : NEW_LINE INDENT d = { } NEW_LINE for i in range ( lo , hi + 1 ) : NEW_LINE INDENT if d . get ( nums [ i ] ) != None : NEW_LINE INDENT resset . add ( ( - target , d [ nums [ i ] ] , nums [ i ] ) ) NEW_LINE DEDENT else : NEW_LINE INDENT d [ target - nums [ i ] ] = nums [ i ] NEW_LINE DEDENT DEDENT DEDENT nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT twoSum ( - nums [ i ] , i + 1 , len ( nums ) - 1 ) NEW_LINE DEDENT return resset NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT ans = [ ] NEW_LINE negatives = [ ] NEW_LINE positives = [ ] NEW_LINE zeroes = [ ] NEW_LINE for i in nums : NEW_LINE INDENT if i < 0 : NEW_LINE INDENT negatives . append ( i ) NEW_LINE DEDENT elif i > 0 : NEW_LINE INDENT positives . append ( i ) NEW_LINE DEDENT else : zeroes . append ( i ) NEW_LINE DEDENT if len ( zeroes ) > 2 : NEW_LINE INDENT ans . append ( [ 0 , 0 , 0 ] ) NEW_LINE DEDENT if len ( zeroes ) > 0 : NEW_LINE INDENT if len ( positives ) > len ( negatives ) : NEW_LINE INDENT checked = set ( ) NEW_LINE for i in negatives : NEW_LINE INDENT if i not in checked : NEW_LINE INDENT checked . add ( i ) NEW_LINE if - i in positives : NEW_LINE INDENT ans . append ( [ 0 , i , - i ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT else : NEW_LINE INDENT checked = set ( ) NEW_LINE for i in positives : NEW_LINE INDENT if i not in checked : NEW_LINE INDENT checked . add ( i ) NEW_LINE if - i in negatives : NEW_LINE INDENT ans . append ( [ 0 , i , - i ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT negatives . sort ( ) NEW_LINE positives . sort ( ) NEW_LINE n = len ( negatives ) NEW_LINE p = len ( positives ) NEW_LINE prev = 0 NEW_LINE for i in negatives : NEW_LINE INDENT if i != prev : NEW_LINE INDENT prev = i NEW_LINE checked = set ( ) NEW_LINE L = 0 NEW_LINE R = p - 1 NEW_LINE while ( R > L ) : NEW_LINE INDENT if positives [ L ] + positives [ R ] + i == 0 : NEW_LINE INDENT if ( ( positives [ L ] , positives [ R ] ) ) not in checked : NEW_LINE INDENT checked . add ( ( positives [ L ] , positives [ R ] ) ) NEW_LINE ans . append ( [ positives [ L ] , positives [ R ] , i ] ) NEW_LINE DEDENT L = L + 1 NEW_LINE DEDENT elif positives [ L ] + positives [ R ] + i > 0 : NEW_LINE INDENT R = R - 1 NEW_LINE DEDENT else : NEW_LINE INDENT L = L + 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT for i in positives : NEW_LINE INDENT if i != prev : NEW_LINE INDENT prev = i NEW_LINE L = 0 NEW_LINE R = n - 1 NEW_LINE while ( R > L ) : NEW_LINE INDENT if negatives [ L ] + negatives [ R ] + i == 0 : NEW_LINE INDENT if ( ( negatives [ L ] , negatives [ R ] ) ) not in checked : NEW_LINE INDENT checked . add ( ( negatives [ L ] , negatives [ R ] ) ) NEW_LINE ans . append ( [ negatives [ L ] , negatives [ R ] , i ] ) NEW_LINE DEDENT L = L + 1 NEW_LINE DEDENT elif negatives [ L ] + negatives [ R ] + i > 0 : NEW_LINE INDENT R = R - 1 NEW_LINE DEDENT else : NEW_LINE INDENT L = L + 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE res = [ ] NEW_LINE for i , n in enumerate ( nums ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l , r = i + 1 , len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT if nums [ l ] + nums [ r ] + n == 0 : NEW_LINE INDENT res . append ( [ n , nums [ l ] , nums [ r ] ] ) NEW_LINE l += 1 NEW_LINE while l < r and nums [ l ] == nums [ l - 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT r -= 1 NEW_LINE while l < r and nums [ r ] == nums [ r + 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT elif nums [ l ] + nums [ r ] + n < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT ls = [ ] NEW_LINE nums = sorted ( nums ) NEW_LINE for i , x in enumerate ( nums ) : NEW_LINE INDENT if i > 0 and x == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT waited = { } NEW_LINE for j , y in enumerate ( nums [ i + 1 : ] ) : NEW_LINE INDENT if y in waited and waited [ y ] != None : NEW_LINE INDENT ls . append ( [ x , y , waited [ y ] ] ) NEW_LINE waited [ y ] = None NEW_LINE DEDENT else : NEW_LINE INDENT if - x - y not in waited : NEW_LINE INDENT waited [ - x - y ] = y NEW_LINE DEDENT DEDENT DEDENT DEDENT return ls NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i == 0 or ( i > 0 and nums [ i ] != nums [ i - 1 ] ) : NEW_LINE INDENT low = i + 1 NEW_LINE high = len ( nums ) - 1 NEW_LINE target = 0 - nums [ i ] NEW_LINE while low < high : NEW_LINE INDENT if target == nums [ low ] + nums [ high ] : NEW_LINE INDENT res . append ( [ nums [ low ] , nums [ high ] , nums [ i ] ] ) NEW_LINE while low < high and nums [ low ] == nums [ low + 1 ] : NEW_LINE INDENT low += 1 NEW_LINE DEDENT while low < high and nums [ high ] == nums [ high - 1 ] : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT low += 1 NEW_LINE high -= 1 NEW_LINE DEDENT elif target > nums [ low ] + nums [ high ] : NEW_LINE INDENT low += 1 NEW_LINE DEDENT elif target < nums [ low ] + nums [ high ] : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE ans = [ ] NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT left = i + 1 NEW_LINE right = len ( nums ) - 1 NEW_LINE while left < right : NEW_LINE INDENT total = nums [ i ] + nums [ left ] + nums [ right ] NEW_LINE if total < 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT elif total > 0 : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans . append ( [ nums [ i ] , nums [ left ] , nums [ right ] ] ) NEW_LINE while left < right and nums [ left ] == nums [ left + 1 ] : NEW_LINE INDENT left += 1 NEW_LINE DEDENT while left < right and nums [ right ] == nums [ right - 1 ] : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT left += 1 NEW_LINE right -= 1 NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if min ( nums ) > 0 or max ( nums ) < 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT nums . sort ( ) NEW_LINE res = [ ] NEW_LINE for i , n in enumerate ( nums ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l , r = i + 1 , len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT if nums [ l ] + nums [ r ] + n == 0 : NEW_LINE INDENT res . append ( [ n , nums [ l ] , nums [ r ] ] ) NEW_LINE l += 1 NEW_LINE while l < r and nums [ l ] == nums [ l - 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT r -= 1 NEW_LINE while l < r and nums [ r ] == nums [ r + 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT elif nums [ l ] + nums [ r ] + n < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT output = set ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if ( i > 0 and nums [ i ] == nums [ i - 1 ] ) : NEW_LINE INDENT continue NEW_LINE DEDENT compl = - nums [ i ] NEW_LINE hashmap = { } NEW_LINE for j in range ( i + 1 , len ( nums ) ) : NEW_LINE INDENT if compl - nums [ j ] in hashmap : NEW_LINE INDENT output . add ( tuple ( sorted ( ( - compl , nums [ j ] , compl - nums [ j ] ) ) ) ) NEW_LINE DEDENT if nums [ j ] not in hashmap : NEW_LINE INDENT hashmap [ nums [ j ] ] = j NEW_LINE DEDENT DEDENT DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res = set ( ) NEW_LINE if len ( nums ) <= 2 : return [ ] NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT lookup = { } NEW_LINE if nums [ i ] != nums [ i - 1 ] or i == 0 : NEW_LINE INDENT for a , b in enumerate ( nums [ i + 1 : ] ) : NEW_LINE INDENT target = - nums [ i ] - b NEW_LINE if target in lookup : NEW_LINE INDENT res . add ( tuple ( sorted ( ( nums [ i ] , b , target ) ) ) ) NEW_LINE DEDENT lookup [ b ] = a NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT res , dups = set ( ) , set ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] not in dups : NEW_LINE INDENT cache = set ( ) NEW_LINE dups . add ( nums [ i ] ) NEW_LINE for left in range ( i + 1 , len ( nums ) ) : NEW_LINE INDENT complement = 0 - nums [ i ] - nums [ left ] NEW_LINE if complement in cache : NEW_LINE INDENT res . add ( tuple ( sorted ( ( nums [ i ] , nums [ left ] , complement ) ) ) ) NEW_LINE DEDENT cache . add ( nums [ left ] ) NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE res = [ ] NEW_LINE for i , n in enumerate ( nums ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT l , r = i + 1 , len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT if nums [ l ] + nums [ r ] + n == 0 : NEW_LINE INDENT res . append ( [ n , nums [ l ] , nums [ r ] ] ) NEW_LINE l += 1 NEW_LINE while l < r and nums [ l ] == nums [ l - 1 ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT r -= 1 NEW_LINE while l < r and nums [ r ] == nums [ r + 1 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT elif nums [ l ] + nums [ r ] + n < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i == 0 or nums [ i ] != nums [ i - 1 ] : NEW_LINE INDENT for lst in self . twoSumII ( nums , i + 1 , 0 - nums [ i ] ) : NEW_LINE INDENT result . append ( [ nums [ i ] ] + lst ) NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT def twoSumII ( self , nums : List [ int ] , start : int , target : int ) -> List [ List [ int ] ] : NEW_LINE INDENT result = [ ] NEW_LINE s = set ( ) NEW_LINE for i in range ( start , len ( nums ) ) : NEW_LINE INDENT if len ( result ) == 0 or result [ - 1 ] [ 1 ] != nums [ i ] : NEW_LINE INDENT complement = target - nums [ i ] NEW_LINE if complement in s : NEW_LINE INDENT result . append ( [ complement , nums [ i ] ] ) NEW_LINE DEDENT DEDENT s . add ( nums [ i ] ) NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
import numpy as np NEW_LINE class Solution : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . result = [ ] NEW_LINE DEDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT length = len ( nums ) NEW_LINE if length == 0 : NEW_LINE INDENT return nums NEW_LINE DEDENT elif length == 1 or length == 2 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT nums . sort ( ) NEW_LINE trios = [ ] NEW_LINE left = 0 NEW_LINE right = length - 1 NEW_LINE while left < length - 2 and nums [ left ] * nums [ length - 1 ] <= 0 : NEW_LINE INDENT right = length - 1 NEW_LINE mid = left + 1 NEW_LINE while mid < right : NEW_LINE INDENT total = nums [ left ] + nums [ right ] + nums [ mid ] NEW_LINE if total == 0 : NEW_LINE INDENT trios . append ( [ nums [ left ] , nums [ mid ] , nums [ right ] ] ) NEW_LINE mid += 1 NEW_LINE while mid < right and nums [ mid ] == nums [ mid - 1 ] : NEW_LINE INDENT mid += 1 NEW_LINE DEDENT right -= 1 NEW_LINE while mid < right and right < length - 1 and nums [ right ] == nums [ right + 1 ] : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT elif total < 0 : NEW_LINE INDENT mid += 1 NEW_LINE while mid < right and nums [ mid ] == nums [ mid - 1 ] : NEW_LINE INDENT mid += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT right -= 1 NEW_LINE while mid < right and right < length - 1 and nums [ right ] == nums [ right + 1 ] : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT DEDENT left += 1 NEW_LINE while left > 0 and left < length - 2 and nums [ left ] == nums [ left - 1 ] : NEW_LINE INDENT left += 1 NEW_LINE DEDENT DEDENT return trios NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT h = { } NEW_LINE result = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT h [ num ] = i NEW_LINE DEDENT for j , num1 in enumerate ( nums ) : NEW_LINE INDENT if j and nums [ j - 1 ] == nums [ j ] : NEW_LINE INDENT continue NEW_LINE DEDENT for k , num2 in enumerate ( nums [ j + 1 : ] ) : NEW_LINE INDENT if k and nums [ j + 1 + k - 1 ] == nums [ j + 1 + k ] : NEW_LINE INDENT continue NEW_LINE DEDENT if - ( num1 + num2 ) in h : NEW_LINE INDENT i = h [ - ( num1 + num2 ) ] NEW_LINE if i > ( j + 1 + k ) : NEW_LINE INDENT result . append ( [ num1 , num2 , - ( num1 + num2 ) ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE pairs = [ ] NEW_LINE for i in range ( 0 , len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT target = 0 - nums [ i ] NEW_LINE l , r = i + 1 , len ( nums ) - 1 NEW_LINE pair = [ ] NEW_LINE while l < r : NEW_LINE INDENT if nums [ l ] + nums [ r ] == target : NEW_LINE INDENT if [ nums [ i ] , nums [ l ] , nums [ r ] ] not in pair : NEW_LINE INDENT pair . append ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) NEW_LINE DEDENT l += 1 NEW_LINE DEDENT if nums [ l ] + nums [ r ] > target : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT if nums [ l ] + nums [ r ] < target : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT if len ( pair ) > 0 : NEW_LINE INDENT pairs . extend ( pair ) NEW_LINE DEDENT DEDENT DEDENT return pairs NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT triplets = [ ] NEW_LINE nums . sort ( ) NEW_LINE nums_length = len ( nums ) NEW_LINE for idx , num in enumerate ( nums ) : NEW_LINE INDENT if idx > 0 and nums [ idx ] == nums [ idx - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT target = - 1 * nums [ idx ] NEW_LINE low = idx + 1 NEW_LINE high = nums_length - 1 NEW_LINE while low < high : NEW_LINE INDENT if nums [ low ] + nums [ high ] == target : NEW_LINE INDENT triplets . append ( [ nums [ idx ] , nums [ low ] , nums [ high ] ] ) NEW_LINE low += 1 NEW_LINE high -= 1 NEW_LINE while low < high and nums [ low ] == nums [ low - 1 ] : NEW_LINE INDENT low += 1 NEW_LINE DEDENT DEDENT elif nums [ low ] + nums [ high ] < target : NEW_LINE INDENT low += 1 NEW_LINE DEDENT elif nums [ low ] + nums [ high ] > target : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT DEDENT DEDENT return triplets NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums = sorted ( nums ) NEW_LINE n = len ( nums ) NEW_LINE ans = [ ] NEW_LINE i = 0 NEW_LINE while i < n - 2 : NEW_LINE INDENT j , z = i + 1 , n - 1 NEW_LINE target = 0 - nums [ i ] NEW_LINE while j < z : NEW_LINE INDENT cur = nums [ j ] + nums [ z ] NEW_LINE if cur == target : NEW_LINE INDENT ans . append ( [ nums [ i ] , nums [ j ] , nums [ z ] ] ) NEW_LINE j += 1 NEW_LINE while j < z and nums [ j ] == nums [ j - 1 ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT DEDENT elif cur > target : NEW_LINE INDENT z -= 1 NEW_LINE while j < z and nums [ z ] == nums [ z + 1 ] : NEW_LINE INDENT z -= 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT j += 1 NEW_LINE while j < z and nums [ j ] == nums [ j - 1 ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT DEDENT DEDENT i += 1 NEW_LINE while i < n - 2 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT triplets = [ ] NEW_LINE nums . sort ( ) NEW_LINE nums_length = len ( nums ) NEW_LINE for idx in range ( nums_length ) : NEW_LINE INDENT if idx > 0 and nums [ idx ] == nums [ idx - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT target = - 1 * nums [ idx ] NEW_LINE low = idx + 1 NEW_LINE high = nums_length - 1 NEW_LINE while low < high : NEW_LINE INDENT if nums [ low ] + nums [ high ] == target : NEW_LINE INDENT triplets . append ( [ nums [ idx ] , nums [ low ] , nums [ high ] ] ) NEW_LINE low += 1 NEW_LINE high -= 1 NEW_LINE while low < high and nums [ low ] == nums [ low - 1 ] : NEW_LINE INDENT low += 1 NEW_LINE DEDENT DEDENT elif nums [ low ] + nums [ high ] < target : NEW_LINE INDENT low += 1 NEW_LINE DEDENT elif nums [ low ] + nums [ high ] > target : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT DEDENT DEDENT return triplets NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT output = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT low , high = i + 1 , len ( nums ) - 1 NEW_LINE while low < high : NEW_LINE INDENT total = nums [ i ] + nums [ low ] + nums [ high ] NEW_LINE if total < 0 : NEW_LINE INDENT low += 1 NEW_LINE DEDENT elif total > 0 : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT output . append ( ( nums [ i ] , nums [ low ] , nums [ high ] ) ) NEW_LINE while low < high and nums [ low ] == nums [ low + 1 ] : NEW_LINE INDENT low += 1 NEW_LINE DEDENT while low < high and nums [ high ] == nums [ high - 1 ] : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT low += 1 NEW_LINE high -= 1 NEW_LINE DEDENT DEDENT DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT result = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i == 0 or nums [ i - 1 ] != nums [ i ] : NEW_LINE INDENT result = self . check ( i , nums , result ) NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT def check ( self , anchor , nums , result ) : NEW_LINE INDENT low = anchor + 1 NEW_LINE high = len ( nums ) - 1 NEW_LINE while low < high and low < len ( nums ) and high >= 0 : NEW_LINE INDENT number = nums [ anchor ] + nums [ low ] + nums [ high ] NEW_LINE if number > 0 : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT elif number < 0 : NEW_LINE INDENT low += 1 NEW_LINE DEDENT else : NEW_LINE INDENT result . append ( [ nums [ anchor ] , nums [ low ] , nums [ high ] ] ) NEW_LINE low += 1 NEW_LINE high -= 1 NEW_LINE while low < high and nums [ low - 1 ] == nums [ low ] : NEW_LINE INDENT low += 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE pairs = [ ] NEW_LINE for i in range ( 0 , len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT target = 0 - nums [ i ] NEW_LINE l , r = i + 1 , len ( nums ) - 1 NEW_LINE pair = [ ] NEW_LINE while l < r : NEW_LINE INDENT if nums [ l ] + nums [ r ] == target : NEW_LINE INDENT pair . append ( [ nums [ i ] , nums [ l ] , nums [ r ] ] ) NEW_LINE l += 1 NEW_LINE while nums [ l ] == nums [ l - 1 ] and l < r : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT if nums [ l ] + nums [ r ] > target : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT if nums [ l ] + nums [ r ] < target : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT if len ( pair ) > 0 : NEW_LINE INDENT pairs . extend ( pair ) NEW_LINE DEDENT DEDENT DEDENT return pairs NEW_LINE DEDENT DEDENT
NEW_LINE class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT output = set ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if ( i > 0 and nums [ i ] == nums [ i - 1 ] ) : NEW_LINE INDENT continue NEW_LINE DEDENT compl = - nums [ i ] NEW_LINE hashmap = { } NEW_LINE for j in range ( i + 1 , len ( nums ) ) : NEW_LINE INDENT if compl - nums [ j ] in hashmap : NEW_LINE INDENT output . add ( tuple ( sorted ( ( - compl , nums [ j ] , compl - nums [ j ] ) ) ) ) NEW_LINE DEDENT if nums [ j ] not in hashmap : NEW_LINE INDENT hashmap [ nums [ j ] ] = j NEW_LINE DEDENT DEDENT DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE ans = [ ] NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT left = i + 1 NEW_LINE right = len ( nums ) - 1 NEW_LINE while left < right : NEW_LINE INDENT if nums [ left ] + nums [ right ] == - nums [ i ] : NEW_LINE INDENT if left > i + 1 and nums [ left ] == nums [ left - 1 ] : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT ans . append ( [ nums [ i ] , nums [ left ] , nums [ right ] ] ) NEW_LINE DEDENT left += 1 NEW_LINE right -= 1 NEW_LINE DEDENT elif nums [ left ] + nums [ right ] < - nums [ i ] : NEW_LINE INDENT left += 1 NEW_LINE DEDENT else : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT def find ( a , x ) : NEW_LINE INDENT 'Locate the leftmost value exactly equal to x' NEW_LINE i = bisect_left ( a , x ) NEW_LINE if i != len ( a ) and a [ i ] == x : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT nums . sort ( ) NEW_LINE i = bisect_left ( nums , 0 ) NEW_LINE neg = nums [ : i ] NEW_LINE pos = nums [ i : ] NEW_LINE triples = [ ] NEW_LINE for i in range ( len ( neg ) ) : NEW_LINE INDENT if i == 0 or neg [ i ] > neg [ i - 1 ] : NEW_LINE INDENT for j in range ( i + 1 , len ( neg ) ) : NEW_LINE INDENT if find ( pos , - neg [ i ] - neg [ j ] ) and ( j == i + 1 or neg [ j ] > neg [ j - 1 ] ) : NEW_LINE INDENT triples += [ [ nums [ i ] , nums [ j ] , - neg [ i ] - neg [ j ] ] ] NEW_LINE DEDENT DEDENT DEDENT DEDENT for i in range ( len ( pos ) ) : NEW_LINE INDENT if i == 0 or pos [ i ] > pos [ i - 1 ] : NEW_LINE INDENT for j in range ( i + 1 , len ( pos ) ) : NEW_LINE INDENT if find ( neg , - pos [ i ] - pos [ j ] ) and ( j == i + 1 or pos [ j ] > pos [ j - 1 ] ) : NEW_LINE INDENT triples += [ [ - pos [ i ] - pos [ j ] , pos [ i ] , pos [ j ] ] ] NEW_LINE DEDENT DEDENT DEDENT DEDENT if len ( pos ) >= 3 and pos [ 2 ] == 0 : NEW_LINE INDENT triples += [ [ 0 , 0 , 0 ] ] NEW_LINE DEDENT return triples NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i == 0 or nums [ i ] != nums [ i - 1 ] : NEW_LINE INDENT for lst in self . twoSumII ( nums , i + 1 , 0 - nums [ i ] ) : NEW_LINE INDENT result . append ( [ nums [ i ] ] + lst ) NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT def twoSumIII ( self , nums : List [ int ] , start : int , target : int ) -> List [ List [ int ] ] : NEW_LINE INDENT result = [ ] NEW_LINE low , high = start , len ( nums ) - 1 NEW_LINE while low < high : NEW_LINE INDENT sum = nums [ low ] + nums [ high ] ; NEW_LINE if sum < target : NEW_LINE INDENT low += 1 NEW_LINE DEDENT elif sum > target : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT result . append ( [ nums [ low ] , nums [ high ] ] ) NEW_LINE low += 1 NEW_LINE high -= 1 NEW_LINE while low < high and nums [ low ] == nums [ low - 1 ] : NEW_LINE INDENT low += 1 NEW_LINE DEDENT while low < high and nums [ high ] == nums [ high + 1 ] : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT def twoSumII ( self , nums : List [ int ] , start : int , target : int ) -> List [ List [ int ] ] : NEW_LINE INDENT result = [ ] NEW_LINE s = set ( ) NEW_LINE for i in range ( start , len ( nums ) ) : NEW_LINE INDENT if len ( result ) == 0 or result [ - 1 ] [ 1 ] != nums [ i ] : NEW_LINE INDENT complement = target - nums [ i ] NEW_LINE if complement in s : NEW_LINE INDENT result . append ( [ complement , nums [ i ] ] ) NEW_LINE DEDENT DEDENT s . add ( nums [ i ] ) NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE triplets = [ ] NEW_LINE i = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT print ( i ) NEW_LINE if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT i += 1 NEW_LINE continue NEW_LINE DEDENT lo = i + 1 NEW_LINE hi = len ( nums ) - 1 NEW_LINE while lo < hi : NEW_LINE INDENT if nums [ lo ] + nums [ hi ] == - nums [ i ] : NEW_LINE INDENT triplets . append ( [ nums [ lo ] , nums [ hi ] , nums [ i ] ] ) NEW_LINE lo += 1 NEW_LINE while lo < hi and nums [ lo ] == nums [ lo - 1 ] : NEW_LINE INDENT lo += 1 NEW_LINE DEDENT DEDENT elif nums [ lo ] + nums [ hi ] > - nums [ i ] : NEW_LINE INDENT hi -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT lo += 1 NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT return triplets NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums = sorted ( nums ) NEW_LINE n = len ( nums ) NEW_LINE if n < 3 : NEW_LINE INDENT return NEW_LINE DEDENT res = [ ] NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT left = i + 1 NEW_LINE right = n - 1 NEW_LINE while left < right : NEW_LINE INDENT sum_ = nums [ i ] + nums [ left ] + nums [ right ] NEW_LINE if sum_ == 0 : NEW_LINE INDENT res . append ( [ nums [ i ] , nums [ left ] , nums [ right ] ] ) NEW_LINE left += 1 NEW_LINE right -= 1 NEW_LINE while left < right and nums [ left ] == nums [ left - 1 ] : NEW_LINE INDENT left += 1 NEW_LINE DEDENT while left < right and nums [ right ] == nums [ right + 1 ] : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT elif sum_ < 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT else : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT output = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT low , high = i + 1 , len ( nums ) - 1 NEW_LINE while low < high : NEW_LINE INDENT total = nums [ i ] + nums [ low ] + nums [ high ] NEW_LINE if total < 0 : NEW_LINE INDENT low += 1 NEW_LINE DEDENT elif total > 0 : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT output . append ( ( nums [ i ] , nums [ low ] , nums [ high ] ) ) NEW_LINE while low < high and nums [ low ] == nums [ low + 1 ] : NEW_LINE INDENT low += 1 NEW_LINE DEDENT while low < high and nums [ high ] == nums [ high - 1 ] : NEW_LINE INDENT high -= 1 NEW_LINE DEDENT low += 1 NEW_LINE high -= 1 NEW_LINE DEDENT DEDENT DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT def find_sum ( i , target ) : NEW_LINE INDENT j = len ( nums ) - 1 NEW_LINE ii = i NEW_LINE while i < j : NEW_LINE INDENT if j < len ( nums ) - 1 and nums [ j ] == nums [ j + 1 ] : NEW_LINE INDENT j -= 1 ; continue NEW_LINE DEDENT if i > ii and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT i += 1 ; continue NEW_LINE DEDENT if nums [ i ] + nums [ j ] == target : NEW_LINE INDENT yield i , j NEW_LINE i += 1 ; j -= 1 NEW_LINE DEDENT elif nums [ i ] + nums [ j ] > target : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT DEDENT if not nums or len ( nums ) < 3 : return [ ] NEW_LINE ans = [ ] NEW_LINE nums . sort ( ) NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT for p , q in find_sum ( i + 1 , - nums [ i ] ) : NEW_LINE INDENT ans . append ( [ nums [ i ] , nums [ p ] , nums [ q ] ] ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE result = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT pt1 , pt2 = i + 1 , len ( nums ) - 1 NEW_LINE while pt1 < pt2 : NEW_LINE INDENT if pt1 > i + 1 and nums [ pt1 ] == nums [ pt1 - 1 ] : NEW_LINE INDENT pt1 += 1 NEW_LINE continue NEW_LINE DEDENT if pt2 < len ( nums ) - 1 and nums [ pt2 ] == nums [ pt2 + 1 ] : NEW_LINE INDENT pt2 -= 1 NEW_LINE continue NEW_LINE DEDENT curSum = nums [ i ] + nums [ pt1 ] + nums [ pt2 ] NEW_LINE if curSum == 0 : NEW_LINE INDENT result . append ( [ nums [ i ] , nums [ pt1 ] , nums [ pt2 ] ] ) NEW_LINE pt1 , pt2 = pt1 + 1 , pt2 - 1 NEW_LINE DEDENT elif curSum < 0 : NEW_LINE INDENT pt1 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT pt2 -= 1 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT lnums = len ( nums ) NEW_LINE h1 = { } NEW_LINE for i in range ( lnums ) : NEW_LINE INDENT if nums [ i ] not in h1 : NEW_LINE INDENT h1 [ nums [ i ] ] = 1 NEW_LINE DEDENT elif nums [ i ] == 0 : NEW_LINE INDENT h1 [ 0 ] += 1 NEW_LINE DEDENT elif h1 [ nums [ i ] ] < 2 : NEW_LINE INDENT h1 [ nums [ i ] ] += 1 NEW_LINE DEDENT DEDENT result = [ ] NEW_LINE if 0 in h1 and h1 [ 0 ] > 2 : NEW_LINE INDENT result . append ( [ 0 , 0 , 0 ] ) NEW_LINE h1 [ 0 ] = 1 NEW_LINE DEDENT for k1 , v1 in h1 . items ( ) : NEW_LINE INDENT h1 [ k1 ] = 0 NEW_LINE for i in range ( v1 ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT target = - k1 NEW_LINE h2 = { } NEW_LINE for k2 , v2 in h1 . items ( ) : NEW_LINE INDENT if v2 != 0 : NEW_LINE INDENT for j in range ( v2 ) : NEW_LINE INDENT if j == 0 : NEW_LINE INDENT complement = target - k2 NEW_LINE if k2 in h2 : NEW_LINE INDENT result . append ( [ k1 , k2 , h2 [ k2 ] ] ) NEW_LINE DEDENT else : NEW_LINE INDENT h2 [ complement ] = k2 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if target == 2 * k2 : NEW_LINE INDENT result . append ( [ k1 , k2 , k2 ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT DEDENT else : NEW_LINE INDENT target = - 2 * k1 NEW_LINE for k2 , v2 in h1 . items ( ) : NEW_LINE INDENT if v2 != 0 and target == k2 : NEW_LINE INDENT result . append ( [ k1 , k1 , k2 ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE a = [ ] NEW_LINE seen = set ( ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT break NEW_LINE DEDENT need = 0 - nums [ i ] NEW_LINE self . twoSum ( need , nums , seen , i , a ) NEW_LINE DEDENT return a NEW_LINE DEDENT def twoSum ( self , need , nums , seen , idx , a ) : NEW_LINE INDENT l = idx + 1 NEW_LINE r = len ( nums ) - 1 NEW_LINE while l < r : NEW_LINE INDENT s = nums [ l ] + nums [ r ] NEW_LINE if s == need : NEW_LINE INDENT if ( nums [ idx ] , nums [ l ] , nums [ r ] ) not in seen : NEW_LINE INDENT a . append ( [ nums [ idx ] , nums [ l ] , nums [ r ] ] ) NEW_LINE seen . add ( ( nums [ idx ] , nums [ l ] , nums [ r ] ) ) NEW_LINE DEDENT l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT elif s > need : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT elif s < need : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT def twoSum ( a , t , r , c , v ) : NEW_LINE INDENT d = { } NEW_LINE seen = { } NEW_LINE for i in a : NEW_LINE INDENT if i not in d : NEW_LINE INDENT d [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT d [ i ] += 1 NEW_LINE DEDENT DEDENT aa = sorted ( d ) NEW_LINE for i in aa : NEW_LINE INDENT if ( t - i in d and ( t - i not in seen or i not in seen ) ) : NEW_LINE INDENT if t - i == i and d [ i ] > 1 : NEW_LINE INDENT if str ( c ) + "," + str ( i ) + "," + str ( i ) not in v : NEW_LINE INDENT r . append ( [ c , i , i ] ) NEW_LINE DEDENT v [ str ( c ) + "," + str ( i ) + "," + str ( i ) ] = 0 NEW_LINE seen [ i ] = 0 NEW_LINE DEDENT elif t - i != i and d [ t - i ] > 0 and d [ i ] > 0 : NEW_LINE INDENT if str ( c ) + "," + str ( i ) + "," + str ( t - i ) not in v : NEW_LINE INDENT r . append ( [ c , i , t - i ] ) NEW_LINE DEDENT v [ str ( c ) + "," + str ( i ) + "," + str ( t - i ) ] = 0 NEW_LINE seen [ t - i ] = 0 NEW_LINE seen [ i ] = 0 NEW_LINE DEDENT d [ t - i ] -= 1 NEW_LINE DEDENT d [ i ] -= 1 NEW_LINE DEDENT DEDENT if len ( nums ) < 3 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT a = sorted ( nums ) NEW_LINE r = [ ] NEW_LINE ind = 0 NEW_LINE d = { } NEW_LINE prev = None NEW_LINE for i in a : NEW_LINE INDENT if not prev or prev != i : NEW_LINE INDENT twoSum ( a [ ind + 1 : ] , 0 - i , r , i , d ) NEW_LINE prev = i NEW_LINE DEDENT ind += 1 NEW_LINE DEDENT return r NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE res = set ( ) NEW_LINE numLen = len ( nums ) - 1 NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if nums [ i - 1 ] and nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT continue NEW_LINE DEDENT left = i + 1 NEW_LINE right = numLen NEW_LINE while left < right : NEW_LINE INDENT total = nums [ i ] + nums [ left ] + nums [ right ] NEW_LINE if total > 0 : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT elif total < 0 : NEW_LINE INDENT left += 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . add ( ( nums [ i ] , nums [ left ] , nums [ right ] ) ) NEW_LINE left += 1 NEW_LINE right -= 1 NEW_LINE DEDENT DEDENT DEDENT return list ( res ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def threeSum ( self , nums : List [ int ] ) -> List [ List [ int ] ] : NEW_LINE INDENT nums . sort ( ) NEW_LINE res = [ ] NEW_LINE for i in range ( len ( nums ) - 2 ) : NEW_LINE INDENT if i > 0 and nums [ i ] == nums [ i - 1 ] : continue NEW_LINE val = 0 - nums [ i ] NEW_LINE left , right = i + 1 , len ( nums ) - 1 NEW_LINE while ( left < right ) : NEW_LINE INDENT if left > i + 1 and nums [ left ] == nums [ left - 1 ] : NEW_LINE INDENT left += 1 NEW_LINE continue NEW_LINE DEDENT if right < len ( nums ) - 1 and nums [ right ] == nums [ right + 1 ] : NEW_LINE INDENT right -= 1 NEW_LINE continue NEW_LINE DEDENT if ( nums [ left ] + nums [ right ] == val ) : NEW_LINE INDENT res . append ( ( nums [ i ] , nums [ left ] , nums [ right ] ) ) NEW_LINE left += 1 NEW_LINE right -= 1 NEW_LINE DEDENT elif ( nums [ left ] + nums [ right ] < val ) : left += 1 NEW_LINE else : right -= 1 NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT i = 1 NEW_LINE j = 1 NEW_LINE while j < len ( nums ) : NEW_LINE INDENT if nums [ j ] == nums [ i - 1 ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums [ i ] = nums [ j ] NEW_LINE i += 1 NEW_LINE j += 1 NEW_LINE DEDENT DEDENT return len ( nums [ : i ] ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT s = set ( ) NEW_LINE d_i = [ ] NEW_LINE for i , n in enumerate ( nums ) : NEW_LINE INDENT if n not in s : NEW_LINE INDENT s . add ( n ) NEW_LINE DEDENT else : NEW_LINE INDENT d_i . append ( i ) NEW_LINE DEDENT DEDENT for i in range ( len ( d_i ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT del nums [ d_i [ i ] ] NEW_LINE DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT index = 0 NEW_LINE while index < len ( nums ) - 1 : NEW_LINE INDENT if nums [ index ] == nums [ index + 1 ] : NEW_LINE INDENT nums . pop ( index ) NEW_LINE DEDENT else : NEW_LINE INDENT index = index + 1 NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT index = 0 NEW_LINE while index < len ( nums ) - 1 : NEW_LINE INDENT if nums [ index ] == nums [ index + 1 ] : NEW_LINE INDENT y = nums . pop ( index ) NEW_LINE DEDENT else : NEW_LINE INDENT index = index + 1 NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT i = 0 NEW_LINE while i < len ( nums ) - 1 : NEW_LINE INDENT if nums [ i ] == nums [ i + 1 ] : NEW_LINE INDENT nums . pop ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT i = 1 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT if nums [ i ] == nums [ i - 1 ] : NEW_LINE INDENT nums . pop ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT insert = 1 NEW_LINE if not nums : NEW_LINE INDENT return 0 NEW_LINE DEDENT for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != nums [ i - 1 ] : NEW_LINE INDENT nums [ insert ] = nums [ i ] NEW_LINE insert += 1 NEW_LINE DEDENT DEDENT return insert NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT length = len ( nums ) NEW_LINE if length <= 1 : NEW_LINE INDENT return length NEW_LINE DEDENT insert = 1 NEW_LINE pull = 0 NEW_LINE while pull < length - 1 : NEW_LINE INDENT while nums [ pull ] <= nums [ insert - 1 ] : NEW_LINE INDENT pull += 1 NEW_LINE if pull == length : NEW_LINE INDENT return insert NEW_LINE DEDENT DEDENT nums [ insert ] = nums [ pull ] NEW_LINE insert += 1 NEW_LINE DEDENT return insert NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT last = 0 NEW_LINE for first in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ first ] != nums [ last ] : NEW_LINE INDENT last += 1 NEW_LINE nums [ last ] = nums [ first ] NEW_LINE DEDENT DEDENT return last + 1 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if nums : NEW_LINE INDENT curr = nums [ 0 ] NEW_LINE for x in range ( 1 , len ( nums ) ) : NEW_LINE INDENT if ( nums [ x ] == curr ) : nums [ x ] = '' NEW_LINE else : curr = nums [ x ] NEW_LINE DEDENT while ( '' in nums ) : NEW_LINE INDENT nums . remove ( '' ) NEW_LINE DEDENT DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT for i in range ( 0 , len ( nums ) - 1 ) : NEW_LINE INDENT if nums [ i ] == nums [ i + 1 ] : NEW_LINE INDENT nums [ i ] = "" NEW_LINE DEDENT DEDENT while "" in nums : NEW_LINE INDENT nums . remove ( "" ) NEW_LINE DEDENT print ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT counter = 0 NEW_LINE last_value = None NEW_LINE for num in reversed ( nums ) : NEW_LINE INDENT if num != last_value : NEW_LINE INDENT counter += 1 NEW_LINE last_value = num NEW_LINE DEDENT else : NEW_LINE INDENT nums . remove ( num ) NEW_LINE DEDENT DEDENT return counter NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def removeDuplicates ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if nums == [ ] : NEW_LINE INDENT return 0 NEW_LINE DEDENT current = nums [ 0 ] NEW_LINE rep = 0 NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT if num == current : NEW_LINE INDENT rep += 1 NEW_LINE DEDENT if num == current and rep == 2 : NEW_LINE INDENT nums [ i ] = 'x' NEW_LINE rep = 1 NEW_LINE DEDENT if num != current : NEW_LINE INDENT current = num NEW_LINE rep = 1 NEW_LINE DEDENT DEDENT while 'x' in nums : NEW_LINE INDENT nums . remove ( 'x' ) NEW_LINE DEDENT return len ( nums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , input ) : NEW_LINE INDENT if len ( input ) <= 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT h = [ ( hei , i ) for i , hei in enumerate ( input ) ] NEW_LINE heapq . heapify ( h ) NEW_LINE a , b = heapq . nlargest ( 2 , h ) NEW_LINE no1 , no1_i = a NEW_LINE no2 , no2_i = b NEW_LINE left = min ( no1_i , no2_i ) NEW_LINE right = max ( no1_i , no2_i ) NEW_LINE height = min ( no1 , no2 ) NEW_LINE width = right - left - 1 NEW_LINE prefilled_arr = [ min ( x , height ) for x in input [ left + 1 : right ] ] NEW_LINE pre_filled_volume = sum ( prefilled_arr ) NEW_LINE volume = ( height * width ) - pre_filled_volume NEW_LINE return volume + self . trap ( input [ 0 : left + 1 ] ) + self . trap ( input [ right : ] ) NEW_LINE DEDENT DEDENT
def water ( heights , start_i , end_i ) : NEW_LINE INDENT assert start_i < len ( heights ) NEW_LINE assert end_i < len ( heights ) NEW_LINE level = min ( heights [ start_i ] , heights [ end_i ] ) NEW_LINE result = 0 NEW_LINE for i in range ( start_i , end_i + 1 ) : NEW_LINE INDENT w = level - heights [ i ] NEW_LINE if w > 0 : NEW_LINE INDENT result += w NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT def trap ( heights : List [ int ] ) -> int : NEW_LINE INDENT if len ( heights ) < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT ordered_heights = sorted ( [ ( i , h ) for i , h in enumerate ( heights ) ] , key = lambda p : p [ 1 ] , reverse = True ) NEW_LINE two_heights = sorted ( [ p [ 0 ] for p in ordered_heights [ : 2 ] ] ) NEW_LINE heights_left = heights [ : two_heights [ 0 ] + 1 ] NEW_LINE heights_right = heights [ two_heights [ 1 ] : ] NEW_LINE return water ( heights , two_heights [ 0 ] , two_heights [ 1 ] ) + trap ( heights_left ) + trap ( heights_right ) NEW_LINE DEDENT class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT return trap ( height ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , h : List [ int ] ) -> int : NEW_LINE INDENT vol = 0 NEW_LINE i = 0 NEW_LINE while ( i < len ( h ) - 1 ) : NEW_LINE INDENT if ( h [ i ] < h [ i + 1 ] ) : NEW_LINE INDENT i = i + 1 NEW_LINE continue NEW_LINE DEDENT start = h [ i ] NEW_LINE end = 0 NEW_LINE v1 = 0 NEW_LINE block = 0 NEW_LINE for j in range ( i + 1 , len ( h ) ) : NEW_LINE INDENT if ( h [ j ] >= start ) : NEW_LINE INDENT end = h [ j ] NEW_LINE minVal = min ( h [ i ] , h [ j ] ) NEW_LINE interval = j - i - 1 NEW_LINE for k in range ( i + 1 , j ) : NEW_LINE INDENT block = min ( minVal , h [ k ] ) + block NEW_LINE DEDENT v1 = min ( h [ i ] , h [ j ] ) * interval - block NEW_LINE break NEW_LINE DEDENT elif j == len ( h ) - 1 : NEW_LINE INDENT newL = h [ i : len ( h ) ] NEW_LINE newL = newL [ : : - 1 ] NEW_LINE v1 = self . trap ( newL ) NEW_LINE break NEW_LINE DEDENT DEDENT if ( v1 > 0 ) : NEW_LINE INDENT vol = vol + v1 NEW_LINE i = j NEW_LINE DEDENT else : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT DEDENT return vol NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT pre_max = [ ] NEW_LINE post_max = [ ] NEW_LINE left_max = 0 NEW_LINE right_max = 0 NEW_LINE for i in range ( len ( height ) ) : NEW_LINE INDENT left_max = max ( left_max , height [ i ] ) NEW_LINE pre_max . append ( left_max ) NEW_LINE right_max = max ( right_max , height [ - i - 1 ] ) NEW_LINE post_max = [ right_max ] + post_max NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( len ( height ) ) : NEW_LINE INDENT ans += max ( 0 , - height [ i ] + min ( pre_max [ i ] , post_max [ i ] ) ) NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height ) : NEW_LINE INDENT return self . trap_index ( height , 0 , len ( height ) - 1 ) NEW_LINE DEDENT def trap_index ( self , height , i , j ) : NEW_LINE INDENT if j - i <= 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT ordered_heights = list ( set ( height [ i : j + 1 ] ) ) NEW_LINE ordered_heights . sort ( reverse = True ) NEW_LINE order_dict = { } NEW_LINE for k , h in enumerate ( ordered_heights ) : NEW_LINE INDENT order_dict [ h ] = k NEW_LINE DEDENT array = [ 0 , 0 , 0 , 0 ] NEW_LINE for k in range ( i , j + 1 ) : NEW_LINE INDENT if order_dict [ height [ k ] ] == 0 : NEW_LINE INDENT array [ 1 ] = k NEW_LINE DEDENT DEDENT for k in range ( i , j + 1 ) : NEW_LINE INDENT if order_dict [ height [ k ] ] == 0 : NEW_LINE INDENT array [ 0 ] = k NEW_LINE break NEW_LINE DEDENT DEDENT for k in range ( i , j + 1 ) : NEW_LINE INDENT if order_dict [ height [ k ] ] == 1 : NEW_LINE INDENT array [ 3 ] = k NEW_LINE DEDENT DEDENT for k in range ( i , j + 1 ) : NEW_LINE INDENT if order_dict [ height [ k ] ] == 1 : NEW_LINE INDENT array [ 2 ] = k NEW_LINE break NEW_LINE DEDENT DEDENT if array [ 0 ] == array [ 1 ] and array [ 0 ] == i : NEW_LINE INDENT return self . count_between ( height , i , array [ 3 ] ) + self . trap_index ( height , array [ 3 ] , j ) NEW_LINE DEDENT if array [ 0 ] == array [ 1 ] and array [ 0 ] == j : NEW_LINE INDENT return self . count_between ( height , array [ 2 ] , j ) + self . trap_index ( height , i , array [ 2 ] ) NEW_LINE DEDENT return self . count_between ( height , array [ 0 ] , array [ 1 ] ) + self . trap_index ( height , i , array [ 0 ] ) + self . trap_index ( height , array [ 1 ] , j ) NEW_LINE DEDENT def count_between ( self , height , i , j ) : NEW_LINE INDENT if j - i <= 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT base = min ( height [ i ] , height [ j ] ) NEW_LINE sum = 0 NEW_LINE for k in range ( i + 1 , j ) : NEW_LINE INDENT sum += base - height [ k ] NEW_LINE DEDENT return sum NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , h : List [ int ] ) -> int : NEW_LINE INDENT vol = 0 NEW_LINE i = 0 NEW_LINE while ( i < len ( h ) - 1 ) : NEW_LINE INDENT if ( h [ i ] < h [ i + 1 ] ) : NEW_LINE INDENT i = i + 1 NEW_LINE continue NEW_LINE DEDENT start = h [ i ] NEW_LINE end = 0 NEW_LINE v1 = 0 NEW_LINE block = 0 NEW_LINE for j in range ( i + 1 , len ( h ) ) : NEW_LINE INDENT if ( h [ j ] >= start ) : NEW_LINE INDENT end = h [ j ] NEW_LINE minVal = min ( h [ i ] , h [ j ] ) NEW_LINE interval = j - i - 1 NEW_LINE v1 = min ( h [ i ] , h [ j ] ) * interval - block NEW_LINE break NEW_LINE DEDENT block = block + h [ j ] NEW_LINE if j == len ( h ) - 1 : NEW_LINE INDENT newL = h [ i : len ( h ) ] NEW_LINE newL . reverse ( ) NEW_LINE v1 = self . trap ( newL ) NEW_LINE break NEW_LINE DEDENT DEDENT if ( v1 > 0 ) : NEW_LINE INDENT vol = vol + v1 NEW_LINE i = j NEW_LINE DEDENT else : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT DEDENT return vol NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT l = len ( height ) NEW_LINE left = [ - 1 ] NEW_LINE right = [ - 1 ] NEW_LINE for i in range ( l ) : NEW_LINE INDENT if left [ - 1 ] <= height [ i ] : NEW_LINE INDENT left . append ( height [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT left . append ( left [ - 1 ] ) NEW_LINE DEDENT if right [ 0 ] <= height [ l - i - 1 ] : NEW_LINE INDENT right = [ height [ l - i - 1 ] ] + right NEW_LINE DEDENT else : NEW_LINE INDENT right = [ right [ 0 ] ] + right NEW_LINE DEDENT DEDENT right . pop ( - 1 ) NEW_LINE left . pop ( 0 ) NEW_LINE res = 0 NEW_LINE for i in range ( l ) : NEW_LINE INDENT res += min ( left [ i ] , right [ i ] ) - height [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT if not height : return 0 NEW_LINE left = [ height [ 0 ] ] NEW_LINE right = [ height [ - 1 ] ] NEW_LINE for i in range ( 1 , len ( height ) ) : NEW_LINE INDENT left . append ( max ( left [ - 1 ] , height [ i ] ) ) NEW_LINE DEDENT for i in range ( len ( height ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT right = [ max ( right [ 0 ] , height [ i ] ) ] + right NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( len ( height ) ) : NEW_LINE INDENT ans += ( min ( left [ i ] , right [ i ] ) ) - height [ i ] NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , height : List [ int ] ) -> int : NEW_LINE INDENT if len ( height ) <= 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT left = [ height [ 0 ] ] NEW_LINE max_left = height [ 0 ] NEW_LINE for i in height [ 1 : ] : NEW_LINE INDENT max_left = max ( max_left , i ) NEW_LINE left += [ max_left ] NEW_LINE DEDENT right = [ height [ - 1 ] ] NEW_LINE max_right = height [ - 1 ] NEW_LINE for i in height [ - 2 : : - 1 ] : NEW_LINE INDENT max_right = max ( max_right , i ) NEW_LINE right = [ max_right ] + right NEW_LINE DEDENT capacity = 0 NEW_LINE for i in range ( len ( height ) ) : NEW_LINE INDENT capacity += min ( left [ i ] , right [ i ] ) - height [ i ] NEW_LINE DEDENT return capacity NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def trap ( self , h : List [ int ] ) -> int : NEW_LINE INDENT vol = 0 NEW_LINE i = 0 NEW_LINE while ( i < len ( h ) - 1 ) : NEW_LINE INDENT if ( h [ i ] < h [ i + 1 ] ) : NEW_LINE INDENT i = i + 1 NEW_LINE continue NEW_LINE DEDENT start = h [ i ] NEW_LINE end = 0 NEW_LINE v1 = 0 NEW_LINE block = 0 NEW_LINE for j in range ( i + 1 , len ( h ) ) : NEW_LINE INDENT if ( h [ j ] >= start ) : NEW_LINE INDENT end = h [ j ] NEW_LINE minVal = min ( h [ i ] , h [ j ] ) NEW_LINE interval = j - i - 1 NEW_LINE v1 = min ( h [ i ] , h [ j ] ) * interval - block NEW_LINE break NEW_LINE DEDENT block = block + h [ j ] NEW_LINE if j == len ( h ) - 1 : NEW_LINE INDENT newL = h [ i : len ( h ) ] NEW_LINE newL . reverse ( ) NEW_LINE v1 = self . trap ( newL ) NEW_LINE break NEW_LINE DEDENT DEDENT if ( v1 > 0 ) : NEW_LINE INDENT vol = vol + v1 NEW_LINE i = j NEW_LINE DEDENT else : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT DEDENT return vol NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def merge ( self , intervals : List [ List [ int ] ] ) -> List [ List [ int ] ] : NEW_LINE INDENT if len ( intervals ) <= 1 : NEW_LINE INDENT return intervals NEW_LINE DEDENT intervals . sort ( key = lambda x : x [ 0 ] ) NEW_LINE answer = [ ] NEW_LINE start , end = intervals [ 0 ] [ 0 ] , intervals [ 0 ] [ 1 ] NEW_LINE for i in intervals [ 1 : ] : NEW_LINE INDENT if i [ 0 ] <= end : NEW_LINE INDENT end = max ( end , i [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT answer . append ( [ start , end ] ) NEW_LINE start , end = i [ 0 ] , i [ 1 ] NEW_LINE DEDENT DEDENT answer . append ( [ start , end ] ) NEW_LINE return answer NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def search ( self , nums : List [ int ] , target : int ) -> bool : NEW_LINE INDENT n = len ( nums ) NEW_LINE if n == 0 : return False NEW_LINE end = n - 1 NEW_LINE start = 0 NEW_LINE while start <= end : NEW_LINE INDENT mid = start + ( end - start ) // 2 NEW_LINE if nums [ mid ] == target : NEW_LINE INDENT return True NEW_LINE DEDENT if not nums [ start ] != nums [ mid ] : NEW_LINE INDENT start += 1 NEW_LINE continue NEW_LINE DEDENT pivotArray = nums [ start ] <= nums [ mid ] NEW_LINE targetArray = nums [ start ] <= target NEW_LINE if pivotArray ^ targetArray : NEW_LINE INDENT if pivotArray : NEW_LINE INDENT start = mid + 1 NEW_LINE DEDENT else : NEW_LINE INDENT end = mid - 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if nums [ mid ] < target : NEW_LINE INDENT start = mid + 1 NEW_LINE DEDENT else : NEW_LINE INDENT end = mid - 1 NEW_LINE DEDENT DEDENT DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def search ( self , nums : List [ int ] , target : int ) -> bool : NEW_LINE INDENT a , b = 0 , len ( nums ) - 1 NEW_LINE while a <= b : NEW_LINE INDENT mid = a + ( b - a ) // 2 NEW_LINE if nums [ mid ] == target : NEW_LINE INDENT return True NEW_LINE DEDENT elif nums [ mid ] == nums [ a ] : NEW_LINE INDENT a += 1 NEW_LINE DEDENT elif nums [ mid ] >= nums [ a ] and nums [ a ] <= target < nums [ mid ] or nums [ mid ] < nums [ a ] and not ( nums [ mid ] < target <= nums [ b ] ) : NEW_LINE INDENT b = mid - 1 NEW_LINE DEDENT else : NEW_LINE INDENT a = mid + 1 NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT DEDENT
NEW_LINE class Solution : NEW_LINE INDENT def search ( self , nums : List [ int ] , target : int ) -> bool : NEW_LINE INDENT l , r = 0 , len ( nums ) NEW_LINE while l < r : NEW_LINE INDENT m = l + ( r - l ) // 2 NEW_LINE if nums [ m ] == target : NEW_LINE INDENT return True NEW_LINE DEDENT if nums [ m ] > nums [ l ] : NEW_LINE INDENT if nums [ l ] <= target < nums [ m ] : NEW_LINE INDENT r = m NEW_LINE DEDENT else : NEW_LINE INDENT l = m + 1 NEW_LINE DEDENT DEDENT elif nums [ m ] < nums [ l ] : NEW_LINE INDENT if nums [ m ] < target <= nums [ r - 1 ] : NEW_LINE INDENT l = m + 1 NEW_LINE DEDENT else : NEW_LINE INDENT r = m NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT l += 1 NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def search ( self , nums : List [ int ] , target : int ) -> bool : NEW_LINE INDENT if not nums : NEW_LINE INDENT return False NEW_LINE DEDENT l = 0 NEW_LINE r = len ( nums ) - 1 NEW_LINE while r > 0 and nums [ r ] == nums [ 0 ] : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT while l < r : NEW_LINE INDENT m = ( l + r + 1 ) // 2 NEW_LINE if target <= nums [ r ] : NEW_LINE INDENT if nums [ m ] > nums [ r ] or nums [ m ] <= target : NEW_LINE INDENT l = m NEW_LINE DEDENT else : NEW_LINE INDENT r = m - 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if nums [ m ] > nums [ r ] and nums [ m ] <= target : NEW_LINE INDENT l = m NEW_LINE DEDENT else : NEW_LINE INDENT r = m - 1 NEW_LINE DEDENT DEDENT DEDENT if nums [ l ] == target : NEW_LINE INDENT return True NEW_LINE DEDENT print ( l ) NEW_LINE return False NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def search ( self , nums : List [ int ] , target : int ) -> bool : NEW_LINE INDENT l , r = 0 , len ( nums ) - 1 NEW_LINE while l <= r : NEW_LINE INDENT mid = l + ( r - l ) // 2 NEW_LINE if nums [ mid ] == target : NEW_LINE INDENT return True NEW_LINE DEDENT while l < mid and nums [ l ] == nums [ mid ] : NEW_LINE INDENT l += 1 NEW_LINE DEDENT if nums [ l ] <= nums [ mid ] : NEW_LINE INDENT if nums [ l ] <= target < nums [ mid ] : NEW_LINE INDENT r = mid - 1 NEW_LINE DEDENT else : NEW_LINE INDENT l = mid + 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if nums [ mid ] < target <= nums [ r ] : NEW_LINE INDENT l = mid + 1 NEW_LINE DEDENT else : NEW_LINE INDENT r = mid - 1 NEW_LINE DEDENT DEDENT DEDENT return False NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def find_max ( self , arr ) : NEW_LINE INDENT n_count = 0 NEW_LINE l = - 1 NEW_LINE r = - 1 NEW_LINE for i , val in enumerate ( arr ) : NEW_LINE INDENT if val < 0 : NEW_LINE INDENT n_count += 1 NEW_LINE if l == - 1 : NEW_LINE INDENT l = i NEW_LINE r = i NEW_LINE DEDENT else : NEW_LINE INDENT r = i NEW_LINE DEDENT DEDENT DEDENT if len ( arr ) == 1 : NEW_LINE INDENT return arr [ 0 ] NEW_LINE DEDENT if len ( arr ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if n_count % 2 == 0 : NEW_LINE INDENT p = 1 NEW_LINE for i in arr : NEW_LINE INDENT p = p * abs ( i ) NEW_LINE DEDENT max_p = p NEW_LINE DEDENT else : NEW_LINE INDENT p = 1 NEW_LINE for i in arr [ : r ] : NEW_LINE INDENT p = p * abs ( i ) NEW_LINE DEDENT l_p = p NEW_LINE p = 1 NEW_LINE for i in arr [ l + 1 : ] : NEW_LINE INDENT p = p * abs ( i ) NEW_LINE DEDENT r_p = p NEW_LINE max_p = max ( l_p , r_p ) NEW_LINE DEDENT return max_p NEW_LINE DEDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT idx = 0 NEW_LINE lidx = 0 NEW_LINE if len ( nums ) == 1 : NEW_LINE INDENT return nums [ 0 ] NEW_LINE DEDENT ans_ = 0 NEW_LINE for idx , val in enumerate ( nums ) : NEW_LINE INDENT if val == 0 : NEW_LINE INDENT max_p = self . find_max ( nums [ lidx : idx ] ) NEW_LINE if max_p > ans_ : NEW_LINE INDENT ans_ = max_p NEW_LINE DEDENT lidx = idx + 1 NEW_LINE DEDENT DEDENT max_p = self . find_max ( nums [ lidx : idx + 1 ] ) NEW_LINE if max_p > ans_ : NEW_LINE INDENT ans_ = max_p NEW_LINE DEDENT return ans_ NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT maxp , minp , ans = nums [ 0 ] , nums [ 0 ] , nums [ 0 ] NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT A = maxp * nums [ i ] NEW_LINE B = minp * nums [ i ] NEW_LINE maxp = max ( nums [ i ] , A , B ) NEW_LINE minp = min ( nums [ i ] , A , B ) NEW_LINE ans = max ( ans , maxp ) NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if not nums : NEW_LINE INDENT return None NEW_LINE DEDENT max_product = nums [ 0 ] NEW_LINE pos = nums [ 0 ] if nums [ 0 ] > 0 else None NEW_LINE neg = nums [ 0 ] if nums [ 0 ] < 0 else None NEW_LINE for val in nums [ 1 : ] : NEW_LINE INDENT if val == 0 : NEW_LINE INDENT max_product = max ( max_product , val ) NEW_LINE neg , pos = None , None NEW_LINE DEDENT else : NEW_LINE INDENT if val < 0 : NEW_LINE INDENT neg , pos = pos * val if pos != None else val , neg * val if neg != None else None NEW_LINE DEDENT elif val > 0 : NEW_LINE INDENT neg , pos = neg * val if neg != None else None , pos * val if pos != None else val NEW_LINE DEDENT if pos != None : NEW_LINE INDENT max_product = max ( max_product , pos ) NEW_LINE DEDENT DEDENT DEDENT return max_product NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT max_so_far = nums [ 0 ] NEW_LINE min_so_far = nums [ 0 ] NEW_LINE result = max_so_far NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT curr = nums [ i ] NEW_LINE temp_max = max ( curr , max_so_far * curr , min_so_far * curr ) NEW_LINE min_so_far = min ( curr , max_so_far * curr , min_so_far * curr ) NEW_LINE max_so_far = temp_max NEW_LINE result = max ( max_so_far , result ) NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT n = len ( nums ) ; NEW_LINE if n == 0 : return 0 ; NEW_LINE minimum = nums [ 0 ] ; NEW_LINE maximum = nums [ 0 ] ; NEW_LINE result = nums [ 0 ] ; NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT e = nums [ i ] ; NEW_LINE if e < 0 : NEW_LINE INDENT newMinimum = min ( e , maximum * e ) ; NEW_LINE newMaximum = max ( e , minimum * e ) ; NEW_LINE maximum = newMaximum ; NEW_LINE minimum = newMinimum ; NEW_LINE DEDENT else : NEW_LINE INDENT minimum = min ( e , minimum * e ) ; NEW_LINE maximum = max ( e , maximum * e ) ; NEW_LINE DEDENT result = max ( maximum , result ) ; NEW_LINE DEDENT return result ; NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT n = len ( nums ) NEW_LINE f = [ 0 ] * n NEW_LINE g = [ 0 ] * n NEW_LINE f [ 0 ] = g [ 0 ] = nums [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if nums [ i ] >= 0 : NEW_LINE INDENT f [ i ] = max ( nums [ i ] , nums [ i ] * f [ i - 1 ] ) NEW_LINE g [ i ] = min ( nums [ i ] , nums [ i ] * g [ i - 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT f [ i ] = max ( nums [ i ] , nums [ i ] * g [ i - 1 ] ) NEW_LINE g [ i ] = min ( nums [ i ] , nums [ i ] * f [ i - 1 ] ) NEW_LINE DEDENT DEDENT return max ( f ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT cur_max = nums [ 0 ] NEW_LINE cur_min = nums [ 0 ] NEW_LINE final_max = nums [ 0 ] NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT temp = cur_max NEW_LINE cur_max = max ( max ( temp * nums [ i ] , cur_min * nums [ i ] ) , nums [ i ] ) NEW_LINE cur_min = min ( min ( temp * nums [ i ] , cur_min * nums [ i ] ) , nums [ i ] ) NEW_LINE final_max = max ( cur_max , final_max ) NEW_LINE DEDENT return final_max NEW_LINE DEDENT DEDENT
import heapq NEW_LINE from collections import defaultdict NEW_LINE from functools import lru_cache NEW_LINE from typing import List NEW_LINE class Solution : NEW_LINE INDENT NEW_LINE def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT def multiplyList ( myList ) : NEW_LINE INDENT result = 1 NEW_LINE for x in myList : NEW_LINE INDENT result = result * x NEW_LINE DEDENT return result NEW_LINE DEDENT if len ( nums ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if len ( nums ) == 1 : NEW_LINE INDENT return nums [ 0 ] NEW_LINE DEDENT heap = [ ] NEW_LINE left = 0 NEW_LINE right = 0 NEW_LINE result = nums [ left ] NEW_LINE while left < len ( nums ) : NEW_LINE INDENT neg_indexes = [ ] NEW_LINE if nums [ right ] < 0 : NEW_LINE INDENT neg_indexes . append ( right ) NEW_LINE DEDENT while True : NEW_LINE INDENT if left < len ( nums ) and nums [ left ] == 0 : NEW_LINE INDENT heapq . heappush ( heap , 0 ) NEW_LINE left += 1 NEW_LINE DEDENT if right < len ( nums ) - 1 : NEW_LINE INDENT right += 1 NEW_LINE if nums [ right ] < 0 : NEW_LINE INDENT neg_indexes . append ( right ) NEW_LINE DEDENT if nums [ right ] == 0 : NEW_LINE INDENT heapq . heappush ( heap , 0 ) NEW_LINE break NEW_LINE DEDENT DEDENT elif right == len ( nums ) - 1 : NEW_LINE INDENT right += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if neg_indexes and len ( neg_indexes ) % 2 != 0 and ( right > neg_indexes [ 0 ] + 1 or left < neg_indexes [ - 1 ] ) : NEW_LINE INDENT results = [ ] NEW_LINE if right > neg_indexes [ 0 ] + 1 : NEW_LINE INDENT results . append ( multiplyList ( nums [ neg_indexes [ 0 ] + 1 : right ] ) ) NEW_LINE DEDENT if left < neg_indexes [ - 1 ] : NEW_LINE INDENT results . append ( multiplyList ( nums [ left : neg_indexes [ - 1 ] ] ) ) NEW_LINE DEDENT result = max ( results ) NEW_LINE heapq . heappush ( heap , - result ) NEW_LINE DEDENT elif right > left : NEW_LINE INDENT result = multiplyList ( nums [ left : right ] ) NEW_LINE heapq . heappush ( heap , - result ) NEW_LINE DEDENT left = right + 1 NEW_LINE right = left NEW_LINE if left < len ( nums ) : NEW_LINE INDENT result = nums [ left ] NEW_LINE DEDENT DEDENT if heap : NEW_LINE INDENT return - heapq . heappop ( heap ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT n = len ( nums ) NEW_LINE if n == 1 : NEW_LINE INDENT return nums [ 0 ] NEW_LINE DEDENT arr = [ 0 ] * n NEW_LINE alt_arr = [ 0 ] * n NEW_LINE arr [ 0 ] = nums [ 0 ] NEW_LINE alt_arr [ 0 ] = nums [ 0 ] NEW_LINE arrx = [ 0 ] * n NEW_LINE alt_arrx = [ 0 ] * n NEW_LINE arrx [ n - 1 ] = nums [ n - 1 ] NEW_LINE alt_arrx [ n - 1 ] = nums [ n - 1 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if nums [ i ] < arr [ i - 1 ] * nums [ i ] or nums [ i ] < alt_arr [ i - 1 ] * nums [ i ] : NEW_LINE INDENT arr [ i ] = max ( arr [ i - 1 ] * nums [ i ] , alt_arr [ i - 1 ] * nums [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT arr [ i ] = nums [ i ] NEW_LINE DEDENT alt_arr [ i ] = alt_arr [ i - 1 ] * nums [ i ] NEW_LINE if nums [ i - 1 ] == 0 : NEW_LINE INDENT arr [ i ] = nums [ i ] NEW_LINE alt_arr [ i ] = nums [ i ] NEW_LINE DEDENT DEDENT for i in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT if nums [ i ] < arrx [ i + 1 ] * nums [ i ] or nums [ i ] < alt_arrx [ i + 1 ] * nums [ i ] : NEW_LINE INDENT arrx [ i ] = max ( arrx [ i + 1 ] * nums [ i ] , alt_arrx [ i + 1 ] * nums [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT arrx [ i ] = nums [ i ] NEW_LINE DEDENT alt_arrx [ i ] = alt_arrx [ i + 1 ] * nums [ i ] NEW_LINE if nums [ i + 1 ] == 0 : NEW_LINE INDENT arrx [ i ] = nums [ i ] NEW_LINE alt_arrx [ i ] = nums [ i ] NEW_LINE DEDENT DEDENT print ( f"arr- {arr}" ) NEW_LINE print ( f"alt_arr - {alt_arr}" ) NEW_LINE print ( f"arrx- {arrx}" ) NEW_LINE print ( f"alt_arrx - {alt_arrx}" ) NEW_LINE return max ( max ( arr ) , max ( arrx ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT maxGlobal = nums [ 0 ] NEW_LINE maxCurrent = nums [ 0 ] NEW_LINE minCurrent = nums [ 0 ] NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT maxTmp = maxCurrent NEW_LINE minTmp = minCurrent NEW_LINE maxCurrent = max ( maxTmp * nums [ i ] , minTmp * nums [ i ] , nums [ i ] ) NEW_LINE minCurrent = min ( maxTmp * nums [ i ] , minTmp * nums [ i ] , nums [ i ] ) NEW_LINE maxGlobal = max ( maxGlobal , maxCurrent ) NEW_LINE DEDENT return maxGlobal NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT dp = [ [ 0 , 0 ] for i in nums ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT dp [ i ] = [ nums [ i ] , nums [ i ] ] NEW_LINE DEDENT else : NEW_LINE INDENT big = max ( dp [ i - 1 ] [ 0 ] * nums [ i ] , nums [ i ] , dp [ i - 1 ] [ 1 ] * nums [ i ] ) NEW_LINE small = min ( dp [ i - 1 ] [ 0 ] * nums [ i ] , nums [ i ] , dp [ i - 1 ] [ 1 ] * nums [ i ] ) NEW_LINE dp [ i ] = [ big , small ] NEW_LINE DEDENT DEDENT return max ( [ i [ 0 ] for i in dp ] ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT ans = max ( nums ) NEW_LINE for i in range ( len ( nums ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT prod = 1 NEW_LINE for j in range ( i , - 1 , - 1 ) : NEW_LINE INDENT prod *= nums [ j ] NEW_LINE temp = ans NEW_LINE ans = max ( ans , prod ) NEW_LINE if ans > temp and j == 0 : NEW_LINE INDENT return ans NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT p_max = nums [ 0 ] NEW_LINE p_min = nums [ 0 ] NEW_LINE result = nums [ 0 ] NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT p_max_last = p_max NEW_LINE p_max = max ( max ( p_max * nums [ i ] , p_min * nums [ i ] ) , nums [ i ] ) NEW_LINE p_min = min ( min ( p_min * nums [ i ] , p_max_last * nums [ i ] ) , nums [ i ] ) NEW_LINE result = max ( result , p_max ) NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT lgTi = 1 NEW_LINE smTi = 1 NEW_LINE idx = 0 NEW_LINE best = float ( '-inf' ) NEW_LINE while idx < len ( nums ) : NEW_LINE INDENT lgTiTmp = max ( nums [ idx ] , lgTi * nums [ idx ] , smTi * nums [ idx ] ) NEW_LINE smTi = min ( nums [ idx ] , smTi * nums [ idx ] , lgTi * nums [ idx ] ) NEW_LINE lgTi = lgTiTmp NEW_LINE if lgTi > best : NEW_LINE INDENT best = lgTi NEW_LINE DEDENT idx += 1 NEW_LINE DEDENT return best NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT dp = [ [ 0 , 0 ] for i in nums ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT dp [ i ] = [ nums [ i ] , nums [ i ] ] NEW_LINE DEDENT else : NEW_LINE INDENT big = max ( dp [ i - 1 ] [ 0 ] * nums [ i ] , nums [ i ] , dp [ i - 1 ] [ 1 ] * nums [ i ] ) NEW_LINE small = min ( dp [ i - 1 ] [ 0 ] * nums [ i ] , nums [ i ] , dp [ i - 1 ] [ 1 ] * nums [ i ] ) NEW_LINE dp [ i ] = [ big , small ] NEW_LINE DEDENT DEDENT return max ( [ i [ 0 ] for i in dp ] ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT gmax = None NEW_LINE product = 1 NEW_LINE for n in nums : NEW_LINE INDENT product = product * n NEW_LINE if gmax is None or product > gmax : NEW_LINE INDENT gmax = product NEW_LINE DEDENT if product == 0 : NEW_LINE INDENT product = 1 NEW_LINE DEDENT DEDENT product = 1 NEW_LINE for n in reversed ( nums ) : NEW_LINE INDENT product = product * n NEW_LINE if product > gmax : NEW_LINE INDENT gmax = product NEW_LINE DEDENT if product == 0 : NEW_LINE INDENT product = 1 NEW_LINE DEDENT DEDENT return gmax NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxProduct ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT maxGlobal = nums [ 0 ] NEW_LINE maxCurrent = nums [ 0 ] NEW_LINE minCurrent = nums [ 0 ] NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT maxTmp = maxCurrent NEW_LINE minTmp = minCurrent NEW_LINE maxCurrent = max ( maxTmp * nums [ i ] , minTmp * nums [ i ] , nums [ i ] ) NEW_LINE minCurrent = min ( maxTmp * nums [ i ] , minTmp * nums [ i ] , nums [ i ] ) NEW_LINE maxGlobal = max ( maxGlobal , maxCurrent ) NEW_LINE DEDENT return maxGlobal NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minSubArrayLen ( self , s : int , nums : List [ int ] ) -> int : NEW_LINE INDENT numsLen = len ( nums ) NEW_LINE l = - 1 NEW_LINE r = - 1 NEW_LINE inf = int ( 1e9 + 7 ) NEW_LINE winSum = 0 NEW_LINE winLen = inf NEW_LINE while True : NEW_LINE INDENT if winSum >= s : NEW_LINE INDENT winLen = min ( winLen , r - l ) NEW_LINE l += 1 NEW_LINE winSum -= nums [ l ] NEW_LINE DEDENT else : NEW_LINE INDENT r += 1 NEW_LINE if r >= numsLen : NEW_LINE INDENT break NEW_LINE DEDENT winSum += nums [ r ] NEW_LINE DEDENT DEDENT if winLen == inf : NEW_LINE INDENT return 0 NEW_LINE DEDENT return winLen NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minSubArrayLen ( self , s : int , nums : List [ int ] ) -> int : NEW_LINE INDENT left = 0 NEW_LINE right = 0 NEW_LINE minimum = float ( 'inf' ) NEW_LINE cur_sum = 0 NEW_LINE while ( right < len ( nums ) ) : NEW_LINE INDENT cur_sum += nums [ right ] NEW_LINE while ( cur_sum >= s and left <= right ) : NEW_LINE INDENT minimum = min ( minimum , right - left + 1 ) NEW_LINE cur_sum -= nums [ left ] NEW_LINE left += 1 NEW_LINE DEDENT right += 1 NEW_LINE DEDENT return minimum if minimum != float ( 'inf' ) else 0 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minSubArrayLen ( self , s : int , nums : List [ int ] ) -> int : NEW_LINE INDENT return minSubarrayWithSum ( nums , s ) NEW_LINE DEDENT DEDENT def minSubarrayWithSum ( nums , minSum ) : NEW_LINE INDENT n , l , r , res = len ( nums ) , 0 , 0 , float ( "inf" ) NEW_LINE windowSum = 0 NEW_LINE while True : NEW_LINE INDENT if windowSum >= minSum : NEW_LINE INDENT res = min ( res , r - l ) NEW_LINE windowSum -= nums [ l ] NEW_LINE l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if r == n : break NEW_LINE windowSum += nums [ r ] NEW_LINE r += 1 NEW_LINE DEDENT DEDENT return res if res != float ( "inf" ) else 0 NEW_LINE DEDENT
class Solution : NEW_LINE INDENT def minSubArrayLen ( self , s : int , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) == 0 or s == 0 : return 0 NEW_LINE start = running_sum = 0 NEW_LINE ans = float ( 'inf' ) NEW_LINE for end , num in enumerate ( nums ) : NEW_LINE INDENT running_sum += num NEW_LINE while running_sum >= s : NEW_LINE INDENT ans = min ( ans , end + 1 - start ) NEW_LINE running_sum -= nums [ start ] NEW_LINE start += 1 NEW_LINE DEDENT DEDENT return ans if ans != float ( 'inf' ) else 0 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def minSubArrayLen ( self , s : int , nums : List [ int ] ) -> int : NEW_LINE INDENT if not nums : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( nums [ 0 ] > s ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT start , end = 0 , 1 NEW_LINE sum_value = nums [ 0 ] NEW_LINE min_len = float ( 'inf' ) NEW_LINE while end < len ( nums ) : NEW_LINE INDENT sum_value += nums [ end ] NEW_LINE if sum_value >= s : NEW_LINE INDENT while sum_value >= s : NEW_LINE INDENT sum_value -= nums [ start ] NEW_LINE start += 1 NEW_LINE DEDENT start -= 1 NEW_LINE sum_value += nums [ start ] NEW_LINE min_len = min ( min_len , end - start + 1 ) NEW_LINE DEDENT end += 1 NEW_LINE DEDENT if ( min_len == float ( 'inf' ) ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT return min_len NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT output = [ 1 for i in range ( len ( nums ) ) ] NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT output [ i ] = output [ i - 1 ] * nums [ i - 1 ] NEW_LINE DEDENT val = 1 NEW_LINE for i in reversed ( range ( len ( nums ) - 1 ) ) : NEW_LINE INDENT val = val * nums [ i + 1 ] NEW_LINE output [ i ] = output [ i ] * val NEW_LINE DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT result = [ 1 for _ in range ( len ( nums ) ) ] NEW_LINE tracker = 1 NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT result [ i ] = nums [ i - 1 ] * tracker NEW_LINE tracker = result [ i ] NEW_LINE DEDENT tracker = nums [ - 1 ] NEW_LINE for i in range ( len ( nums ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT result [ i ] = result [ i ] * tracker NEW_LINE tracker = tracker * nums [ i ] NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT length = len ( nums ) NEW_LINE left = [ 1 ] * length NEW_LINE right = [ 1 ] * length NEW_LINE output = [ ] NEW_LINE left_val = 1 NEW_LINE right_val = 1 NEW_LINE for i in range ( 1 , length ) : NEW_LINE INDENT left_val *= nums [ i - 1 ] NEW_LINE left [ i ] = left_val NEW_LINE DEDENT for j in range ( length - 2 , - 1 , - 1 ) : NEW_LINE INDENT right_val *= nums [ j + 1 ] NEW_LINE right [ j ] = right_val NEW_LINE DEDENT for i in range ( length ) : NEW_LINE INDENT output . append ( left [ i ] * right [ i ] ) NEW_LINE DEDENT return output NEW_LINE DEDENT DEDENT
from functools import reduce NEW_LINE class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT N = len ( nums ) NEW_LINE ans = [ 0 ] * N NEW_LINE left = [ 0 ] * N NEW_LINE right = [ 0 ] * N NEW_LINE left [ 0 ] = 1 NEW_LINE right [ - 1 ] = 1 NEW_LINE for i in range ( 1 , N ) : NEW_LINE INDENT left [ i ] = left [ i - 1 ] * nums [ i - 1 ] NEW_LINE right [ N - i - 1 ] = right [ N - i ] * nums [ N - i ] NEW_LINE DEDENT for i in range ( N ) : NEW_LINE INDENT ans [ i ] = left [ i ] * right [ i ] NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT prefix_prod = [ 1 ] * len ( nums ) NEW_LINE suffix_prod = [ 1 ] * len ( nums ) NEW_LINE j = len ( nums ) - 1 NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT prefix_prod [ i ] = prefix_prod [ i - 1 ] * nums [ i - 1 ] NEW_LINE suffix_prod [ j - 1 ] = suffix_prod [ j ] * nums [ j ] NEW_LINE j -= 1 NEW_LINE DEDENT ans = [ ] NEW_LINE for i in range ( 0 , len ( nums ) ) : NEW_LINE INDENT ans . append ( prefix_prod [ i ] * suffix_prod [ i ] ) NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT left = [ 1 ] * len ( nums ) NEW_LINE right = [ x for x in nums ] NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT j = ~ i NEW_LINE right [ j ] = right [ j + 1 ] * right [ j ] NEW_LINE DEDENT running = 1 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT left [ i ] = running NEW_LINE if i < len ( nums ) - 1 : NEW_LINE INDENT left [ i ] *= right [ i + 1 ] NEW_LINE DEDENT running *= nums [ i ] NEW_LINE DEDENT return left NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE left = [ 1 ] * n NEW_LINE right = [ 1 ] * n NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT left [ i ] = left [ i - 1 ] * nums [ i - 1 ] NEW_LINE DEDENT for i in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT right [ i ] = right [ i + 1 ] * nums [ i + 1 ] NEW_LINE DEDENT output = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT output [ i ] = left [ i ] * right [ i ] NEW_LINE DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT right = [ x for x in nums ] NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT j = ~ i NEW_LINE right [ j ] = right [ j + 1 ] * right [ j ] NEW_LINE DEDENT running = 1 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT right [ i ] = right [ i + 1 ] NEW_LINE DEDENT elif i == len ( nums ) - 1 : NEW_LINE INDENT right [ i ] = running NEW_LINE DEDENT else : NEW_LINE INDENT right [ i ] = right [ i + 1 ] * running NEW_LINE DEDENT running *= nums [ i ] NEW_LINE DEDENT return right NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT p = 1 NEW_LINE n = len ( nums ) NEW_LINE output = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT output . append ( p ) NEW_LINE p = p * nums [ i ] NEW_LINE DEDENT p = 1 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT output [ i ] = output [ i ] * p NEW_LINE p = p * nums [ i ] NEW_LINE DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def productExceptSelf ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT length = len ( nums ) NEW_LINE left = [ 1 ] * length NEW_LINE right = [ 1 ] * length NEW_LINE output = [ ] NEW_LINE left_val = 1 NEW_LINE right_val = 1 NEW_LINE for i in range ( 1 , length ) : NEW_LINE INDENT left_val *= nums [ i - 1 ] NEW_LINE left [ i ] = left_val NEW_LINE DEDENT print ( left ) NEW_LINE for j in range ( length - 2 , - 1 , - 1 ) : NEW_LINE INDENT right_val *= nums [ j + 1 ] NEW_LINE right [ j ] = right_val NEW_LINE DEDENT for i in range ( length ) : NEW_LINE INDENT output . append ( left [ i ] * right [ i ] ) NEW_LINE DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE count = 0 NEW_LINE for n in nums : NEW_LINE INDENT if n != 0 : NEW_LINE INDENT nums [ count ] = n NEW_LINE count += 1 NEW_LINE DEDENT DEDENT for i in range ( count , len ( nums ) ) : NEW_LINE INDENT nums [ i ] = 0 NEW_LINE DEDENT return nums NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT non_zero = 0 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != 0 : NEW_LINE INDENT nums [ non_zero ] = nums [ i ] NEW_LINE non_zero += 1 NEW_LINE DEDENT DEDENT for i in range ( non_zero , len ( nums ) ) : NEW_LINE INDENT nums [ i ] = 0 NEW_LINE DEDENT NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE last_zero = 0 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != 0 : NEW_LINE INDENT nums [ i ] , nums [ last_zero ] = nums [ last_zero ] , nums [ i ] NEW_LINE last_zero += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT lastnonZero = 0 NEW_LINE for i in range ( 0 , len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != 0 : NEW_LINE INDENT nums [ lastnonZero ] = nums [ i ] NEW_LINE lastnonZero += 1 NEW_LINE DEDENT DEDENT for x in range ( lastnonZero , len ( nums ) ) : NEW_LINE INDENT nums [ x ] = 0 NEW_LINE DEDENT NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE i = 0 NEW_LINE j = 1 NEW_LINE while j < len ( nums ) : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT nums [ i ] , nums [ j ] = nums [ j ] , nums [ i ] NEW_LINE DEDENT if nums [ i ] != 0 : NEW_LINE INDENT i += 1 NEW_LINE DEDENT j += 1 NEW_LINE NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE n = len ( nums ) NEW_LINE i = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if nums [ j ] != 0 : NEW_LINE INDENT nums [ i ] , nums [ j ] = nums [ j ] , nums [ i ] NEW_LINE i += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE i = 0 NEW_LINE counter = 0 NEW_LINE while i < len ( nums ) - counter : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT nums . append ( nums . pop ( i ) ) NEW_LINE counter += 1 NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE nonzero = 0 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != 0 : NEW_LINE INDENT nums [ nonzero ] , nums [ i ] = nums [ i ] , nums [ nonzero ] NEW_LINE nonzero += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE cnt = 0 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] == 0 : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums [ i - cnt ] = nums [ i ] NEW_LINE DEDENT DEDENT for i in range ( cnt ) : NEW_LINE INDENT nums [ - 1 - i ] = 0 NEW_LINE DEDENT return nums NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def getNextZero ( self , nums , currentIndex ) : NEW_LINE INDENT currentIndex += 1 ; NEW_LINE while currentIndex < len ( nums ) and nums [ currentIndex ] != 0 : NEW_LINE INDENT currentIndex += 1 ; NEW_LINE DEDENT return currentIndex ; NEW_LINE DEDENT def getNextNonZero ( self , nums , currentIndex ) : NEW_LINE INDENT currentIndex += 1 ; NEW_LINE while currentIndex < len ( nums ) and nums [ currentIndex ] == 0 : NEW_LINE INDENT currentIndex += 1 ; NEW_LINE DEDENT return currentIndex ; NEW_LINE DEDENT def swap ( self , nums , index1 , index2 ) : NEW_LINE INDENT nums [ index1 ] = nums [ index2 ] ; NEW_LINE nums [ index2 ] = 0 ; NEW_LINE DEDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE if len ( nums ) == 0 or len ( nums ) == 1 : NEW_LINE INDENT return ; NEW_LINE DEDENT p1 = self . getNextZero ( nums , - 1 ) ; NEW_LINE p2 = self . getNextNonZero ( nums , p1 ) ; NEW_LINE while p2 < len ( nums ) : NEW_LINE INDENT self . swap ( nums , p1 , p2 ) ; NEW_LINE p1 = self . getNextZero ( nums , p1 ) ; NEW_LINE p2 = self . getNextNonZero ( nums , p2 ) ; NEW_LINE DEDENT print ( nums ) ; NEW_LINE return ; NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE pos = 0 NEW_LINE l = len ( nums ) NEW_LINE for i in range ( l ) : NEW_LINE INDENT if nums [ i ] != 0 : NEW_LINE INDENT nums [ pos ] = nums [ i ] NEW_LINE if pos != i : NEW_LINE INDENT nums [ i ] = 0 NEW_LINE DEDENT pos += 1 NEW_LINE NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE length = len ( nums ) NEW_LINE index = 0 NEW_LINE num_zero = 0 NEW_LINE while index < length : NEW_LINE INDENT if nums [ index ] == 0 : NEW_LINE INDENT nums . pop ( index ) NEW_LINE num_zero += 1 NEW_LINE length -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT index += 1 NEW_LINE DEDENT DEDENT for i in range ( num_zero ) : NEW_LINE INDENT nums . append ( 0 ) NEW_LINE DEDENT DEDENT DEDENT
NEW_LINE class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE if ( len ( nums ) <= 1 ) : NEW_LINE INDENT return nums NEW_LINE DEDENT zeroStart = 0 NEW_LINE while ( zeroStart < len ( nums ) and nums [ zeroStart ] != 0 ) : NEW_LINE INDENT zeroStart += 1 NEW_LINE DEDENT zeroEnd = zeroStart NEW_LINE if ( zeroStart >= len ( nums ) ) : NEW_LINE INDENT return nums NEW_LINE DEDENT while ( zeroEnd < len ( nums ) - 1 ) : NEW_LINE INDENT if ( nums [ zeroEnd + 1 ] != 0 ) : NEW_LINE INDENT nums [ zeroStart ] = nums [ zeroEnd + 1 ] NEW_LINE nums [ zeroEnd + 1 ] = 0 NEW_LINE zeroStart += 1 NEW_LINE zeroEnd += 1 NEW_LINE DEDENT elif nums [ zeroEnd + 1 ] == 0 : NEW_LINE INDENT zeroEnd += 1 NEW_LINE DEDENT DEDENT return nums NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE count_0 = [ ] NEW_LINE for i , e in enumerate ( nums ) : NEW_LINE INDENT if e == 0 : NEW_LINE INDENT count_0 . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT if count_0 != [ ] : NEW_LINE INDENT nums [ count_0 [ 0 ] ] = e NEW_LINE nums [ i ] = 0 NEW_LINE count_0 = count_0 [ 1 : ] NEW_LINE count_0 . append ( i ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE pos = 0 NEW_LINE l = len ( nums ) NEW_LINE for i in range ( l ) : NEW_LINE INDENT if nums [ i ] != 0 : NEW_LINE INDENT nums [ pos ] = nums [ i ] NEW_LINE if pos != i : NEW_LINE INDENT nums [ i ] = 0 NEW_LINE DEDENT pos += 1 NEW_LINE NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def moveZeroes ( self , nums : List [ int ] ) -> None : NEW_LINE INDENT NEW_LINE left = 0 NEW_LINE right = 0 NEW_LINE while right < len ( nums ) : NEW_LINE INDENT if nums [ right ] != 0 : NEW_LINE INDENT nums [ left ] , nums [ right ] = nums [ right ] , nums [ left ] NEW_LINE left += 1 NEW_LINE DEDENT right += 1 NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT sorted_nums = list ( set ( nums ) ) NEW_LINE new = ( [ x for x in sorted_nums if x < 0 ] + [ x for x in sorted_nums if x >= 0 ] ) NEW_LINE for i in reversed ( range ( len ( new ) - 2 ) ) : NEW_LINE INDENT if new [ i ] != new [ i + 1 ] : NEW_LINE INDENT return new [ i ] NEW_LINE DEDENT DEDENT return new [ - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT count = 1 NEW_LINE newList = sorted ( nums , reverse = True ) NEW_LINE temp = newList [ 0 ] NEW_LINE if len ( newList ) < 3 : NEW_LINE INDENT return newList [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( 1 , len ( newList ) ) : NEW_LINE INDENT if newList [ i ] < temp : NEW_LINE INDENT count += 1 NEW_LINE temp = newList [ i ] NEW_LINE if count == 3 : NEW_LINE INDENT return newList [ i ] NEW_LINE DEDENT DEDENT DEDENT DEDENT if count < 3 : NEW_LINE INDENT return newList [ 0 ] NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT maximums = set ( ) NEW_LINE for num in nums : NEW_LINE INDENT maximums . add ( num ) NEW_LINE if len ( maximums ) > 3 : NEW_LINE INDENT maximums . remove ( min ( maximums ) ) NEW_LINE DEDENT DEDENT if len ( maximums ) == 3 : NEW_LINE INDENT return min ( maximums ) NEW_LINE DEDENT return max ( maximums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT maximums = set ( ) NEW_LINE for num in nums : NEW_LINE INDENT maximums . add ( num ) NEW_LINE if len ( maximums ) > 3 : NEW_LINE INDENT maximums . remove ( min ( maximums ) ) NEW_LINE DEDENT DEDENT if len ( maximums ) == 3 : NEW_LINE INDENT return min ( maximums ) NEW_LINE DEDENT return max ( maximums ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return max ( nums ) NEW_LINE DEDENT first , second , third = max ( nums ) , min ( nums ) , min ( nums ) NEW_LINE for elem in nums : NEW_LINE INDENT if second < elem < first : NEW_LINE INDENT third = second NEW_LINE second = elem NEW_LINE DEDENT if third < elem < second : NEW_LINE INDENT third = elem NEW_LINE DEDENT DEDENT return third if third != second else first NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT max_nums = [ float ( "-inf" ) , float ( "-inf" ) , float ( "-inf" ) ] NEW_LINE for num in nums : NEW_LINE INDENT if num not in max_nums : NEW_LINE INDENT if num > max_nums [ 2 ] : NEW_LINE INDENT max_nums = [ max_nums [ 1 ] , max_nums [ 2 ] , num ] NEW_LINE DEDENT elif num > max_nums [ 1 ] : NEW_LINE INDENT max_nums = [ max_nums [ 1 ] , num , max_nums [ 2 ] ] NEW_LINE DEDENT elif num > max_nums [ 0 ] : NEW_LINE INDENT max_nums = [ num , max_nums [ 1 ] , max_nums [ 2 ] ] NEW_LINE DEDENT print ( max_nums ) NEW_LINE DEDENT DEDENT if float ( "-inf" ) in max_nums : NEW_LINE INDENT return max ( nums ) NEW_LINE DEDENT return max_nums [ 0 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT first , second , third = None , None , None NEW_LINE nums = list ( set ( nums ) ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if first is None or nums [ i ] > first : NEW_LINE INDENT third = second NEW_LINE second = first NEW_LINE first = nums [ i ] NEW_LINE DEDENT elif second is None or nums [ i ] > second : NEW_LINE INDENT third = second NEW_LINE second = nums [ i ] NEW_LINE DEDENT elif third is None or nums [ i ] > third : NEW_LINE INDENT third = nums [ i ] NEW_LINE DEDENT DEDENT return third if third is not None else first NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT nums = list ( set ( nums ) ) NEW_LINE if len ( nums ) < 3 : NEW_LINE INDENT return max ( nums ) NEW_LINE DEDENT def find_klargest ( arr , k ) : NEW_LINE INDENT pivot_idx = random . randint ( 0 , len ( arr ) - 1 ) NEW_LINE pivot_val = arr [ pivot_idx ] NEW_LINE large = [ ] NEW_LINE small = [ ] NEW_LINE for i in range ( len ( arr ) ) : NEW_LINE INDENT if i == pivot_idx : NEW_LINE INDENT continue NEW_LINE DEDENT if arr [ i ] >= pivot_val : NEW_LINE INDENT large . append ( arr [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT small . append ( arr [ i ] ) NEW_LINE DEDENT DEDENT if len ( large ) == k - 1 : NEW_LINE INDENT return pivot_val NEW_LINE DEDENT if len ( large ) >= k : NEW_LINE INDENT return find_klargest ( large , k ) NEW_LINE DEDENT return find_klargest ( small , k - len ( large ) - 1 ) NEW_LINE DEDENT return find_klargest ( nums , 3 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT nums = sorted ( list ( set ( nums ) ) ) NEW_LINE if len ( nums ) < 3 : NEW_LINE INDENT return max ( nums ) NEW_LINE DEDENT else : NEW_LINE INDENT return nums [ - 3 ] NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT seen = { } NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT allVal = seen . values ( ) NEW_LINE if not nums [ i ] in allVal : NEW_LINE INDENT options = list ( allVal ) + [ nums [ i ] ] NEW_LINE for j in range ( min ( len ( options ) , 3 ) ) : NEW_LINE INDENT seen [ j + 1 ] = max ( options ) NEW_LINE options . pop ( options . index ( seen [ j + 1 ] ) ) NEW_LINE DEDENT DEDENT DEDENT return seen [ 3 ] if 3 in seen else seen [ 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT if len ( nums ) < 3 : NEW_LINE INDENT return max ( nums ) NEW_LINE DEDENT nums . sort ( ) NEW_LINE first , second = nums [ len ( nums ) - 1 ] , 0 NEW_LINE for i in range ( len ( nums ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT if second == 0 and nums [ i ] != first : NEW_LINE INDENT second = nums [ i ] NEW_LINE DEDENT if second != 0 and nums [ i ] != second : NEW_LINE INDENT return nums [ i ] NEW_LINE DEDENT DEDENT return first NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT max_list = [ ] NEW_LINE for n in nums : NEW_LINE INDENT if n not in max_list : NEW_LINE INDENT max_list = sorted ( max_list + [ n ] , reverse = True ) NEW_LINE if len ( max_list ) > 3 : NEW_LINE INDENT max_list = max_list [ : 3 ] NEW_LINE DEDENT DEDENT DEDENT return max_list [ 2 ] if len ( max_list ) == 3 else max_list [ 0 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT first , second , third = None , None , None NEW_LINE nums = list ( set ( nums ) ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if first is None or nums [ i ] > first : NEW_LINE INDENT third = second NEW_LINE second = first NEW_LINE first = nums [ i ] NEW_LINE DEDENT elif second is None or nums [ i ] > second : NEW_LINE INDENT third = second NEW_LINE second = nums [ i ] NEW_LINE DEDENT elif third is None or nums [ i ] > third : NEW_LINE INDENT third = nums [ i ] NEW_LINE DEDENT DEDENT return third if third is not None else first NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def thirdMax ( self , nums : List [ int ] ) -> int : NEW_LINE INDENT import numpy as np NEW_LINE nums = np . unique ( nums ) NEW_LINE if ( len ( nums ) >= 3 ) : NEW_LINE INDENT return nums [ - 3 ] ; NEW_LINE DEDENT else : NEW_LINE INDENT return max ( nums ) NEW_LINE DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT s = set ( ) NEW_LINE ans = [ ] NEW_LINE for num in nums : NEW_LINE INDENT if num in s : NEW_LINE INDENT ans . append ( num ) NEW_LINE DEDENT else : NEW_LINE INDENT s . add ( num ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT checked = set ( { } ) NEW_LINE res = [ ] NEW_LINE for num in nums : NEW_LINE INDENT if num in checked : NEW_LINE INDENT res . append ( num ) NEW_LINE DEDENT else : NEW_LINE INDENT checked . add ( num ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums ) : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT emap = { } NEW_LINE rmap = { } NEW_LINE for x in nums : NEW_LINE INDENT if x not in emap : NEW_LINE INDENT emap [ x ] = True NEW_LINE continue NEW_LINE DEDENT if x in emap : NEW_LINE INDENT rmap [ x ] = True NEW_LINE continue NEW_LINE DEDENT DEDENT return list ( rmap ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT res = [ ] NEW_LINE s = set ( ) NEW_LINE for i in nums : NEW_LINE INDENT if i not in s : NEW_LINE INDENT s . add ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( i ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT seen = set ( ) NEW_LINE output = list ( ) NEW_LINE for num in nums : NEW_LINE INDENT if num in seen : NEW_LINE INDENT output . append ( num ) NEW_LINE DEDENT else : NEW_LINE INDENT seen . add ( num ) NEW_LINE DEDENT DEDENT return output NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT hist = { } NEW_LINE for i in nums : NEW_LINE INDENT hist [ i ] = hist . get ( i , 0 ) + 1 NEW_LINE DEDENT return [ key for key in hist if hist [ key ] == 2 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT res = [ ] NEW_LINE for i in nums : NEW_LINE INDENT index = abs ( i ) - 1 NEW_LINE if nums [ index ] > 0 : NEW_LINE INDENT nums [ index ] *= - 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( index + 1 ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT seen = { } NEW_LINE ans = [ ] NEW_LINE for x in nums : NEW_LINE INDENT if x not in seen : NEW_LINE INDENT seen [ x ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT if seen [ x ] == 1 : NEW_LINE INDENT ans . append ( x ) NEW_LINE DEDENT seen [ x ] += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT seen = { } NEW_LINE ans = [ ] NEW_LINE for x in nums : NEW_LINE INDENT if x not in seen : NEW_LINE INDENT seen [ x ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT if seen [ x ] == 1 : NEW_LINE INDENT ans . append ( x ) NEW_LINE DEDENT seen [ x ] += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT num = set ( ) NEW_LINE res = [ ] NEW_LINE for i in nums : NEW_LINE INDENT if i in num : NEW_LINE INDENT res . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT num . add ( i ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT hmap = defaultdict ( int ) NEW_LINE for i in nums : NEW_LINE INDENT hmap [ i ] += 1 NEW_LINE DEDENT return [ i for i in hmap if hmap [ i ] != 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT if len ( nums ) == 0 : return [ ] NEW_LINE d = { } NEW_LINE for n in nums : NEW_LINE INDENT if n not in d : NEW_LINE INDENT d [ n ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT d [ n ] += 1 NEW_LINE DEDENT DEDENT dupes = [ ] NEW_LINE for key in d : NEW_LINE INDENT if d [ key ] == 2 : NEW_LINE INDENT dupes . append ( key ) NEW_LINE DEDENT DEDENT return dupes NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT res = [ ] NEW_LINE for n in nums : NEW_LINE INDENT if nums [ abs ( n ) - 1 ] < 0 : NEW_LINE INDENT res . append ( abs ( n ) ) NEW_LINE DEDENT else : NEW_LINE INDENT nums [ abs ( n ) - 1 ] *= - 1 NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT nums_set = set ( ) NEW_LINE res = [ ] NEW_LINE for i in nums : NEW_LINE INDENT if i in nums_set : NEW_LINE INDENT res . append ( i ) NEW_LINE DEDENT nums_set . add ( i ) NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT if not nums : NEW_LINE INDENT return [ ] NEW_LINE DEDENT res = [ ] NEW_LINE for element in nums : NEW_LINE INDENT if nums [ abs ( element ) - 1 ] < 0 : NEW_LINE INDENT res . append ( abs ( element ) ) NEW_LINE DEDENT else : NEW_LINE INDENT nums [ abs ( element ) - 1 ] *= - 1 NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT nums_set = set ( ) NEW_LINE res = [ ] NEW_LINE for i in nums : NEW_LINE INDENT if i in nums_set : NEW_LINE INDENT res . append ( i ) NEW_LINE DEDENT nums_set . add ( i ) NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT result = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ abs ( nums [ i ] ) - 1 ] < 0 : NEW_LINE INDENT result . append ( abs ( nums [ i ] ) ) NEW_LINE DEDENT else : NEW_LINE INDENT nums [ abs ( nums [ i ] ) - 1 ] *= - 1 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT if not nums : NEW_LINE INDENT return [ ] NEW_LINE DEDENT res = [ ] NEW_LINE for element in nums : NEW_LINE INDENT if nums [ abs ( element ) - 1 ] < 0 : NEW_LINE INDENT res . append ( abs ( element ) ) NEW_LINE DEDENT else : NEW_LINE INDENT nums [ abs ( element ) - 1 ] *= - 1 NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT res = [ ] NEW_LINE for num in nums : NEW_LINE INDENT if nums [ abs ( num ) - 1 ] > 0 : NEW_LINE INDENT nums [ abs ( num ) - 1 ] *= - 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( abs ( num ) ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT NEW_LINE NEW_LINE duplicates = [ ] NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT num %= len ( nums ) NEW_LINE if nums [ num ] > len ( nums ) : NEW_LINE INDENT duplicates . append ( num if num else len ( nums ) ) NEW_LINE DEDENT else : NEW_LINE INDENT nums [ num ] += len ( nums ) NEW_LINE DEDENT DEDENT return duplicates NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT res = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if ( nums [ abs ( nums [ i ] ) - 1 ] < 0 ) : NEW_LINE INDENT res . append ( abs ( nums [ i ] ) ) NEW_LINE DEDENT nums [ abs ( nums [ i ] ) - 1 ] *= - 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT ans = [ ] NEW_LINE for i in nums : NEW_LINE INDENT if nums [ abs ( i ) - 1 ] < 0 : NEW_LINE INDENT ans . append ( abs ( i ) ) NEW_LINE DEDENT nums [ abs ( i ) - 1 ] = - 1 * nums [ abs ( i ) - 1 ] NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT result = [ ] NEW_LINE for num in nums : NEW_LINE INDENT nums [ abs ( num ) - 1 ] *= - 1 NEW_LINE DEDENT for num in nums : NEW_LINE INDENT if nums [ abs ( num ) - 1 ] > 0 : NEW_LINE INDENT result . append ( abs ( num ) ) NEW_LINE nums [ abs ( num ) - 1 ] *= - 1 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT result = [ ] NEW_LINE for num in nums : NEW_LINE INDENT nums [ abs ( num ) - 1 ] *= - 1 NEW_LINE DEDENT for num in nums : NEW_LINE INDENT if nums [ abs ( num ) - 1 ] > 0 : NEW_LINE INDENT result . append ( abs ( num ) ) NEW_LINE nums [ abs ( num ) - 1 ] *= - 1 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT if not nums : NEW_LINE INDENT return None NEW_LINE DEDENT i = 0 NEW_LINE duplicates = [ ] NEW_LINE while i < len ( nums ) : NEW_LINE INDENT j = nums [ i ] - 1 NEW_LINE if nums [ i ] != nums [ j ] : NEW_LINE INDENT nums [ i ] , nums [ j ] = nums [ j ] , nums [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT i = 1 NEW_LINE for num in nums : NEW_LINE INDENT if num != i : NEW_LINE INDENT duplicates . append ( num ) NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return duplicates NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT import heapq NEW_LINE if nums == [ ] : NEW_LINE INDENT return [ ] NEW_LINE DEDENT heapq . heapify ( nums ) NEW_LINE prev = heapq . heappop ( nums ) NEW_LINE ret = [ ] NEW_LINE while nums : NEW_LINE INDENT curr = heapq . heappop ( nums ) NEW_LINE if prev == curr : NEW_LINE INDENT ret . append ( curr ) NEW_LINE DEDENT prev = curr NEW_LINE DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if 1 <= nums [ i ] <= n : NEW_LINE INDENT index = nums [ i ] - 1 NEW_LINE DEDENT if n < nums [ i ] <= 2 * n : NEW_LINE INDENT index = nums [ i ] - n - 1 NEW_LINE DEDENT if 2 * n < nums [ i ] <= 3 * n : NEW_LINE INDENT index = nums [ i ] - 2 * n - 1 NEW_LINE DEDENT nums [ index ] += n NEW_LINE DEDENT find = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if nums [ i ] > 2 * n : NEW_LINE INDENT find . append ( i + 1 ) NEW_LINE DEDENT DEDENT return find NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT table = { } NEW_LINE for num in nums : NEW_LINE INDENT if num in table : NEW_LINE INDENT table [ num ] = table [ num ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT table [ num ] = 1 NEW_LINE DEDENT DEDENT arr = [ num for num in nums if table [ num ] == 2 ] NEW_LINE return list ( set ( arr ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT if not nums : NEW_LINE INDENT return None NEW_LINE DEDENT for idx , num in enumerate ( nums ) : NEW_LINE INDENT num = num % len ( nums ) NEW_LINE nums [ num - 1 ] += len ( nums ) NEW_LINE DEDENT duplicate = [ ] NEW_LINE print ( nums ) NEW_LINE for idx , num in enumerate ( nums ) : NEW_LINE INDENT if num / len ( nums ) > 2 : NEW_LINE INDENT duplicate . append ( idx + 1 ) NEW_LINE DEDENT DEDENT return duplicate NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicatesHelper ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT nums_dictionary = { } NEW_LINE for num in nums : NEW_LINE INDENT if nums_dictionary . get ( num ) == None : NEW_LINE INDENT nums_dictionary [ num ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums_dictionary [ num ] += 1 NEW_LINE DEDENT DEDENT return [ x for x , count in nums_dictionary . items ( ) if count > 1 ] NEW_LINE DEDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT solution = set ( ) NEW_LINE current_position = 0 NEW_LINE while current_position < len ( nums ) : NEW_LINE INDENT if nums [ current_position ] == current_position + 1 or nums [ current_position ] == - 1 : NEW_LINE INDENT current_position += 1 NEW_LINE DEDENT else : NEW_LINE INDENT value = nums [ current_position ] NEW_LINE value_to_swap = nums [ value - 1 ] NEW_LINE if value_to_swap == value : NEW_LINE INDENT solution . add ( value_to_swap ) NEW_LINE nums [ current_position ] = - 1 NEW_LINE DEDENT else : NEW_LINE INDENT nums [ value - 1 ] , nums [ current_position ] = nums [ current_position ] , nums [ value - 1 ] NEW_LINE DEDENT DEDENT DEDENT return list ( solution ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDuplicates ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT output = set ( ) NEW_LINE i = len ( nums ) - 1 NEW_LINE while i >= 0 : NEW_LINE INDENT if nums [ i ] not in output : NEW_LINE INDENT output . add ( nums [ i ] ) NEW_LINE nums . pop ( i ) NEW_LINE DEDENT i -= 1 NEW_LINE DEDENT return nums NEW_LINE DEDENT DEDENT
from typing import List NEW_LINE class Solution : NEW_LINE INDENT def findDuplicates ( self , l : List [ int ] ) -> List [ int ] : NEW_LINE INDENT i = 0 NEW_LINE while i < len ( l ) : NEW_LINE INDENT j = l [ i ] - 1 NEW_LINE if i == j : NEW_LINE INDENT i += 1 NEW_LINE DEDENT elif l [ j ] == - 1 or l [ i ] == - 1 : NEW_LINE INDENT i += 1 NEW_LINE DEDENT elif l [ i ] == l [ j ] : NEW_LINE INDENT l [ j ] = - 1 NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT l [ i ] , l [ j ] = l [ j ] , l [ i ] NEW_LINE DEDENT DEDENT return [ i + 1 for i , v in enumerate ( l ) if v == - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT for n in nums : NEW_LINE INDENT i = abs ( n ) - 1 NEW_LINE if nums [ i ] > 0 : NEW_LINE INDENT nums [ i ] *= - 1 NEW_LINE DEDENT DEDENT res = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT res . append ( i + 1 ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT results = [ ] NEW_LINE nums_set = set ( ) NEW_LINE for n in nums : NEW_LINE INDENT if n not in nums_set : NEW_LINE INDENT nums_set . add ( n ) NEW_LINE DEDENT DEDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT if i + 1 not in nums_set : NEW_LINE INDENT results . append ( i + 1 ) NEW_LINE DEDENT DEDENT return results NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT isContinue = True NEW_LINE while isContinue : NEW_LINE INDENT isContinue = False NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != i + 1 : NEW_LINE INDENT tmp = nums [ nums [ i ] - 1 ] NEW_LINE if tmp != nums [ i ] : NEW_LINE INDENT nums [ nums [ i ] - 1 ] = nums [ i ] NEW_LINE nums [ i ] = tmp NEW_LINE isContinue = True NEW_LINE DEDENT DEDENT DEDENT DEDENT missingItems = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i + 1 != nums [ i ] : NEW_LINE INDENT missingItems . append ( i + 1 ) NEW_LINE DEDENT DEDENT return missingItems NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT for n in nums : NEW_LINE INDENT nums [ new_index ] = - abs ( nums [ ( new_index : = abs ( n ) - 1 ) ] ) NEW_LINE DEDENT return [ i for i in range ( 1 , len ( nums ) + 1 ) if nums [ i - 1 ] > 0 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT rst = [ ] NEW_LINE for num in nums : NEW_LINE INDENT index = abs ( num ) - 1 NEW_LINE if nums [ index ] > 0 : NEW_LINE INDENT nums [ index ] *= - 1 NEW_LINE DEDENT DEDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT rst . append ( i + 1 ) NEW_LINE DEDENT DEDENT return rst NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT for item in nums : NEW_LINE INDENT if nums [ abs ( item ) - 1 ] > 0 : NEW_LINE INDENT nums [ abs ( item ) - 1 ] *= - 1 NEW_LINE DEDENT print ( nums [ abs ( item ) - 1 ] ) NEW_LINE DEDENT result_list = [ ] NEW_LINE for index in range ( len ( nums ) ) : NEW_LINE INDENT print ( index ) NEW_LINE if nums [ index ] > 0 : NEW_LINE INDENT result_list . append ( index + 1 ) NEW_LINE DEDENT DEDENT return result_list NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT idx = abs ( nums [ i ] ) - 1 NEW_LINE nums [ idx ] = - abs ( nums [ idx ] ) NEW_LINE DEDENT return [ i + 1 for i in range ( n ) if nums [ i ] > 0 ] NEW_LINE DEDENT DEDENT
NEW_LINE class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT start = 0 NEW_LINE while start < len ( nums ) : NEW_LINE INDENT if nums [ start ] == start + 1 or nums [ start ] == nums [ nums [ start ] - 1 ] : NEW_LINE INDENT start += 1 NEW_LINE DEDENT else : NEW_LINE INDENT print ( nums [ start ] ) NEW_LINE print ( nums [ nums [ start ] - 1 ] ) NEW_LINE current = nums [ start ] NEW_LINE nums [ start ] = nums [ nums [ start ] - 1 ] NEW_LINE nums [ current - 1 ] = current NEW_LINE DEDENT DEDENT result = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != i + 1 : NEW_LINE INDENT result . append ( i + 1 ) NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def swap ( self , nums , idx , idy ) : NEW_LINE INDENT nums [ idx ] , nums [ idy ] = nums [ idy ] , nums [ idx ] NEW_LINE DEDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT idx = 0 NEW_LINE while idx < len ( nums ) : NEW_LINE INDENT if idx + 1 == nums [ idx ] : NEW_LINE INDENT idx += 1 NEW_LINE continue NEW_LINE DEDENT if nums [ nums [ idx ] - 1 ] == nums [ idx ] : NEW_LINE INDENT idx += 1 NEW_LINE DEDENT else : NEW_LINE INDENT self . swap ( nums , idx , nums [ idx ] - 1 ) NEW_LINE DEDENT DEDENT return ( x + 1 for x in range ( len ( nums ) ) if x + 1 != nums [ x ] ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT missingNumbers = [ ] NEW_LINE i = 0 NEW_LINE while i < len ( nums ) : NEW_LINE INDENT j = nums [ i ] - 1 NEW_LINE if nums [ i ] != nums [ j ] : NEW_LINE INDENT nums [ i ] , nums [ j ] = nums [ j ] , nums [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT missingNumbers = [ ] NEW_LINE DEDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] != i + 1 : NEW_LINE INDENT missingNumbers . append ( i + 1 ) NEW_LINE DEDENT DEDENT return missingNumbers NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT numlen = len ( nums ) NEW_LINE for idx in range ( numlen ) : NEW_LINE INDENT nidx = abs ( nums [ idx ] ) - 1 NEW_LINE if nums [ nidx ] > 0 : NEW_LINE INDENT nums [ nidx ] *= - 1 NEW_LINE DEDENT DEDENT result = [ ] NEW_LINE for idx in range ( 1 , numlen + 1 ) : NEW_LINE INDENT if nums [ idx - 1 ] > 0 : NEW_LINE INDENT result . append ( idx ) NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT arr = [ ] NEW_LINE for num in nums : NEW_LINE INDENT if abs ( num ) - 1 < len ( nums ) and nums [ abs ( num ) - 1 ] > 0 : NEW_LINE INDENT nums [ abs ( num ) - 1 ] *= - 1 NEW_LINE DEDENT DEDENT for i in range ( len ( nums ) ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT arr . append ( i + 1 ) NEW_LINE DEDENT DEDENT return arr NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT if not nums : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return list ( set ( range ( 1 , len ( nums ) + 1 ) ) - set ( nums ) ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def findDisappearedNumbers ( self , nums : List [ int ] ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT num = abs ( nums [ i ] ) NEW_LINE idx = num - 1 NEW_LINE if nums [ idx ] > 0 : NEW_LINE INDENT nums [ idx ] = - nums [ idx ] NEW_LINE DEDENT DEDENT idx = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if nums [ i ] > 0 : NEW_LINE INDENT nums [ idx ] = i + 1 NEW_LINE idx += 1 NEW_LINE DEDENT DEDENT return nums [ : idx ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT hashmap = defaultdict ( int ) NEW_LINE runSum = 0 NEW_LINE n = len ( nums ) NEW_LINE count = 0 NEW_LINE hashmap [ 0 ] = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT runSum += nums [ i ] NEW_LINE if ( runSum - k ) in hashmap : NEW_LINE INDENT count += hashmap [ runSum - k ] NEW_LINE DEDENT hashmap [ runSum ] += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT runningSums = { } NEW_LINE runningSums [ 0 ] = 1 NEW_LINE count = 0 NEW_LINE total = 0 NEW_LINE for end in range ( 0 , len ( nums ) ) : NEW_LINE INDENT total += nums [ end ] NEW_LINE if ( ( total - k ) in runningSums ) : NEW_LINE INDENT count += runningSums [ total - k ] NEW_LINE DEDENT if ( total in runningSums ) : NEW_LINE INDENT runningSums [ total ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT runningSums [ total ] = 1 NEW_LINE DEDENT DEDENT return count NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT n = len ( nums ) NEW_LINE count = 0 NEW_LINE hmap = { 0 : 1 } NEW_LINE sum1 = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum1 += nums [ i ] NEW_LINE if ( sum1 - k ) in hmap : NEW_LINE INDENT count += hmap [ sum1 - k ] NEW_LINE DEDENT if sum1 in hmap : NEW_LINE INDENT hmap [ sum1 ] += 1 NEW_LINE DEDENT else : hmap [ sum1 ] = 1 NEW_LINE DEDENT return count NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT hash_map = { } NEW_LINE hash_map [ 0 ] = 1 NEW_LINE count = 0 NEW_LINE sums = 0 NEW_LINE for n in nums : NEW_LINE INDENT sums += n NEW_LINE if sums - k in hash_map : NEW_LINE INDENT count += hash_map [ sums - k ] NEW_LINE DEDENT if sums not in hash_map : NEW_LINE INDENT hash_map [ sums ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT hash_map [ sums ] += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT dic = { } NEW_LINE count = 0 NEW_LINE sum_val = 0 NEW_LINE dic [ 0 ] = 1 NEW_LINE for i in range ( 0 , len ( nums ) ) : NEW_LINE INDENT sum_val += nums [ i ] NEW_LINE if sum_val - k in dic : NEW_LINE INDENT count += dic [ sum_val - k ] NEW_LINE DEDENT if sum_val not in dic : NEW_LINE INDENT dic [ sum_val ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT dic [ sum_val ] += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT aux_map = collections . defaultdict ( int ) NEW_LINE aux_map [ 0 ] = 1 NEW_LINE pre_sum = 0 NEW_LINE ans = 0 NEW_LINE for eachItem in nums : NEW_LINE INDENT pre_sum += eachItem NEW_LINE ans += aux_map . get ( pre_sum - k , 0 ) NEW_LINE aux_map [ pre_sum ] += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT d = collections . defaultdict ( int ) NEW_LINE d [ 0 ] = 1 NEW_LINE s = cnt = 0 NEW_LINE for n in nums : NEW_LINE INDENT s += n NEW_LINE if s - k in d : NEW_LINE INDENT cnt += d [ s - k ] NEW_LINE DEDENT d [ s ] += 1 NEW_LINE DEDENT return cnt NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT seen = defaultdict ( int ) NEW_LINE seen [ 0 ] = 1 NEW_LINE ret = 0 NEW_LINE summ = 0 NEW_LINE for num in nums : NEW_LINE INDENT summ += num NEW_LINE ret += seen [ summ - k ] NEW_LINE seen [ summ ] += 1 NEW_LINE DEDENT return ret NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def subarraySum ( self , ls , k ) : NEW_LINE INDENT prev = defaultdict ( int ) NEW_LINE curr , c = 0 , 0 NEW_LINE for i in range ( len ( ls ) ) : NEW_LINE INDENT curr += ls [ i ] NEW_LINE if curr == k : NEW_LINE INDENT c += 1 NEW_LINE DEDENT if ( curr - k ) in prev : NEW_LINE INDENT c += prev [ curr - k ] NEW_LINE DEDENT prev [ curr ] += 1 NEW_LINE DEDENT return c NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT results = { 0 : 1 } NEW_LINE count = 0 NEW_LINE csum = 0 NEW_LINE for idx , num in enumerate ( nums ) : NEW_LINE INDENT csum += num NEW_LINE diff = csum - k NEW_LINE if results . get ( diff ) : NEW_LINE INDENT count += results [ diff ] NEW_LINE DEDENT results [ csum ] = results . get ( csum , 0 ) + 1 NEW_LINE DEDENT return count NEW_LINE NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT d = defaultdict ( int ) NEW_LINE d [ 0 ] = 1 NEW_LINE count = 0 NEW_LINE sum_ = 0 NEW_LINE for n in nums : NEW_LINE INDENT sum_ += n NEW_LINE count += d . get ( sum_ - k , 0 ) NEW_LINE d [ sum_ ] += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT numsCountMap = { } NEW_LINE tempSum = 0 NEW_LINE keys = [ ] NEW_LINE result = 0 NEW_LINE for num in nums : NEW_LINE INDENT tempSum += num NEW_LINE if tempSum not in numsCountMap : NEW_LINE INDENT numsCountMap [ tempSum ] = 0 NEW_LINE DEDENT numsCountMap [ tempSum ] += 1 NEW_LINE keys . append ( tempSum ) NEW_LINE DEDENT diff = 0 NEW_LINE for i in range ( len ( keys ) ) : NEW_LINE INDENT num = k + diff NEW_LINE if num in numsCountMap : NEW_LINE INDENT result += numsCountMap [ num ] NEW_LINE DEDENT diff = keys [ i ] NEW_LINE numsCountMap [ diff ] -= 1 NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT prefix_array = [ ] NEW_LINE cum_sum = 0 NEW_LINE for i in nums : NEW_LINE INDENT cum_sum += i NEW_LINE prefix_array . append ( cum_sum ) NEW_LINE DEDENT count = 0 NEW_LINE hash_table = collections . Counter ( ) NEW_LINE hash_table [ 0 ] = 1 NEW_LINE for i in prefix_array : NEW_LINE INDENT count += hash_table [ i - k ] NEW_LINE hash_table [ i ] += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT n = len ( nums ) NEW_LINE res = 0 NEW_LINE cumSum = 0 NEW_LINE counter = Counter ( { 0 : 1 } ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT cumSum += nums [ i ] NEW_LINE res += counter [ cumSum - k ] NEW_LINE counter [ cumSum ] += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT preSum , count , res = 0 , Counter ( ) , 0 NEW_LINE count [ 0 ] += 1 NEW_LINE for num in nums : NEW_LINE INDENT preSum += num NEW_LINE res += count [ preSum - k ] NEW_LINE count [ preSum ] += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT d = { } NEW_LINE sums = [ ] NEW_LINE cum_sum = 0 NEW_LINE d [ ( 0 ) ] = [ - 1 ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT cum_sum += nums [ i ] NEW_LINE sums += [ cum_sum ] NEW_LINE if cum_sum not in d : NEW_LINE INDENT d [ ( cum_sum ) ] = [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT d [ ( cum_sum ) ] += [ i ] NEW_LINE DEDENT DEDENT total = 0 NEW_LINE print ( d ) NEW_LINE for idx in range ( len ( nums ) ) : NEW_LINE INDENT if ( sums [ idx ] - k ) in d : NEW_LINE INDENT for elem in d [ ( sums [ idx ] - k ) ] : NEW_LINE INDENT if elem < idx : NEW_LINE INDENT total += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return total NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT snums = [ 0 ] NEW_LINE for n in nums : NEW_LINE INDENT snums . append ( snums [ - 1 ] + n ) NEW_LINE DEDENT d = { } NEW_LINE for i , s in enumerate ( snums ) : NEW_LINE INDENT if s in d : NEW_LINE INDENT d [ s ] . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT d [ s ] = [ i ] NEW_LINE DEDENT DEDENT d = { k : [ d [ k ] , 0 ] for k in d } NEW_LINE count = 0 NEW_LINE for i , s in enumerate ( snums ) : NEW_LINE INDENT if s - k in d : NEW_LINE INDENT tmp = d [ s - k ] [ 1 ] NEW_LINE count = count + tmp NEW_LINE change = False NEW_LINE while tmp < len ( d [ s - k ] [ 0 ] ) and d [ s - k ] [ 0 ] [ tmp ] < i : NEW_LINE INDENT change = True NEW_LINE tmp = tmp + 1 NEW_LINE count = count + 1 NEW_LINE DEDENT d [ s - k ] [ 1 ] = max ( tmp - int ( change ) , 0 ) NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT d = Counter ( [ 0 ] ) NEW_LINE count = 0 NEW_LINE sum_ = 0 NEW_LINE for n in nums : NEW_LINE INDENT sum_ += n NEW_LINE count += d . get ( sum_ - k , 0 ) NEW_LINE d . update ( [ sum_ ] ) NEW_LINE DEDENT return count NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT d = Counter ( [ 0 ] ) NEW_LINE count = 0 NEW_LINE sum_ = 0 NEW_LINE for n in nums : NEW_LINE INDENT sum_ += n NEW_LINE count += d . get ( sum_ - k , 0 ) NEW_LINE d . update ( [ sum_ ] ) NEW_LINE DEDENT return count NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT d = Counter ( [ 0 ] ) NEW_LINE count = 0 NEW_LINE sum_ = 0 NEW_LINE for n in nums : NEW_LINE INDENT sum_ += n NEW_LINE count += d . get ( sum_ - k , 0 ) NEW_LINE d . update ( [ sum_ ] ) NEW_LINE DEDENT return count NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT countSums = { 0 : 1 } NEW_LINE total = 0 NEW_LINE ans = 0 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT total += nums [ i ] NEW_LINE if total - k in countSums : NEW_LINE INDENT ans += countSums [ total - k ] NEW_LINE DEDENT countSums [ total ] = countSums . get ( total , 0 ) + 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT cache , total , count = { } , 0 , 0 NEW_LINE for num in nums : NEW_LINE INDENT total += num NEW_LINE count += cache . get ( total - k , 0 ) NEW_LINE if total == k : NEW_LINE INDENT count += 1 NEW_LINE DEDENT cache [ total ] = cache . get ( total , 0 ) + 1 NEW_LINE print ( total , num , count ) NEW_LINE DEDENT return count NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def subarraySum0 ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT count , curr_sum , table = 0 , 0 , [ 0 ] NEW_LINE for n in nums : NEW_LINE INDENT curr_sum += n NEW_LINE table . append ( curr_sum ) NEW_LINE DEDENT for i in range ( 1 , len ( table ) ) : NEW_LINE INDENT for j in range ( i ) : NEW_LINE INDENT if table [ i ] - table [ j ] == k : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT m = defaultdict ( int , { 0 : 1 } ) NEW_LINE curr_sum , count = 0 , 0 NEW_LINE for n in nums : NEW_LINE INDENT curr_sum += n NEW_LINE count += m [ curr_sum - k ] NEW_LINE m [ curr_sum ] += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT pre = 0 NEW_LINE pre_sum = { 0 : 1 } NEW_LINE res = 0 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT pre += nums [ i ] NEW_LINE res += pre_sum . get ( pre - k , 0 ) NEW_LINE pre_sum [ pre ] = pre_sum . get ( pre , 0 ) + 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT cummulative_sums = { } NEW_LINE cummulative_sums [ 0 ] = 1 NEW_LINE sum = 0 NEW_LINE ret = 0 NEW_LINE for i , n in enumerate ( nums ) : NEW_LINE INDENT sum += n NEW_LINE if sum - k in cummulative_sums : NEW_LINE INDENT ret += cummulative_sums [ sum - k ] NEW_LINE DEDENT cummulative_sums [ sum ] = cummulative_sums . get ( sum , 0 ) + 1 NEW_LINE DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT if not nums : return 0 NEW_LINE prefix_sum = defaultdict ( int ) NEW_LINE rolling_sum = count = 0 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT rolling_sum += nums [ i ] NEW_LINE if rolling_sum == k : NEW_LINE INDENT count += 1 NEW_LINE DEDENT count += prefix_sum [ rolling_sum - k ] NEW_LINE prefix_sum [ rolling_sum ] += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT running_sum_map = defaultdict ( lambda : 0 , { 0 : 1 } ) NEW_LINE running_sum = 0 NEW_LINE count = 0 NEW_LINE for num in nums : NEW_LINE INDENT running_sum += num NEW_LINE count += running_sum_map [ running_sum - k ] NEW_LINE running_sum_map [ running_sum ] += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT DEDENT
class Solution ( object ) : NEW_LINE INDENT def subarraySum ( self , nums , k ) : NEW_LINE INDENT NEW_LINE count = 0 NEW_LINE sums = 0 NEW_LINE d = dict ( ) NEW_LINE d [ 0 ] = 1 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT sums += nums [ i ] NEW_LINE count += d . get ( sums - k , 0 ) NEW_LINE d [ sums ] = d . get ( sums , 0 ) + 1 NEW_LINE DEDENT return ( count ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums , k ) : NEW_LINE INDENT count = curr_sum = 0 NEW_LINE h = defaultdict ( int ) NEW_LINE for num in nums : NEW_LINE INDENT curr_sum += num NEW_LINE if curr_sum == k : NEW_LINE INDENT count += 1 NEW_LINE DEDENT count += h [ curr_sum - k ] NEW_LINE h [ curr_sum ] += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT DEDENT
import numpy as np NEW_LINE from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT if not nums : return 0 NEW_LINE total = 0 NEW_LINE cumsum = np . cumsum ( nums ) NEW_LINE dic = defaultdict ( int ) NEW_LINE dic [ 0 ] += 1 NEW_LINE for cs in cumsum : NEW_LINE INDENT total += dic [ cs - k ] NEW_LINE dic [ cs ] += 1 NEW_LINE DEDENT return total NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT if not nums : NEW_LINE INDENT return 0 NEW_LINE DEDENT counter = Counter ( ) NEW_LINE counter [ 0 ] = 1 NEW_LINE res = 0 NEW_LINE curr_sum = 0 NEW_LINE for num in nums : NEW_LINE INDENT curr_sum += num NEW_LINE res += counter [ curr_sum - k ] NEW_LINE counter [ curr_sum ] += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT mydic = { } NEW_LINE mysum = 0 NEW_LINE total = 0 NEW_LINE mydic [ 0 ] = 1 NEW_LINE for i in nums : NEW_LINE INDENT mysum += i NEW_LINE if mysum - k in mydic : NEW_LINE INDENT total += mydic [ mysum - k ] NEW_LINE DEDENT if mysum in mydic : NEW_LINE INDENT mydic [ mysum ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT mydic [ mysum ] = 1 NEW_LINE DEDENT DEDENT return total NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT cMap = { 0 : 1 } NEW_LINE curr = 0 NEW_LINE out = 0 NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT curr += nums [ i ] NEW_LINE if curr - k in cMap : NEW_LINE INDENT out += cMap [ curr - k ] NEW_LINE DEDENT if curr in cMap : NEW_LINE INDENT cMap [ curr ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT cMap [ curr ] = 1 NEW_LINE DEDENT DEDENT return out NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT n = len ( nums ) NEW_LINE dic = { 0 : 1 } NEW_LINE res = 0 NEW_LINE sumV = 0 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT sumV += nums [ i ] NEW_LINE if sumV - k in dic : NEW_LINE INDENT res += dic [ sumV - k ] NEW_LINE DEDENT if sumV in dic : NEW_LINE INDENT dic [ sumV ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT dic [ sumV ] = 1 NEW_LINE DEDENT DEDENT return res NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT cumsum = 0 NEW_LINE tmp = { } NEW_LINE tmp [ 0 ] = 1 NEW_LINE count = 0 NEW_LINE for num in nums : NEW_LINE INDENT cumsum += num NEW_LINE if cumsum - k in tmp : NEW_LINE INDENT count += tmp [ cumsum - k ] NEW_LINE DEDENT if cumsum in tmp : NEW_LINE INDENT tmp [ cumsum ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT tmp [ cumsum ] = 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT sumDict = { 0 : 1 } NEW_LINE currSum = 0 NEW_LINE numWays = 0 NEW_LINE for element in nums : NEW_LINE INDENT currSum += element NEW_LINE if currSum - k in sumDict : NEW_LINE INDENT numWays += sumDict [ currSum - k ] NEW_LINE DEDENT if currSum in sumDict : NEW_LINE INDENT sumDict [ currSum ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT sumDict [ currSum ] = 1 NEW_LINE DEDENT DEDENT return numWays NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT dict = { } NEW_LINE dict [ 0 ] = 1 NEW_LINE sum , count = 0 , 0 NEW_LINE for num in nums : NEW_LINE INDENT sum += num NEW_LINE count += dict . get ( sum - k , 0 ) NEW_LINE dict [ sum ] = dict . get ( sum , 0 ) + 1 NEW_LINE DEDENT return count NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def subarraySum ( self , nums : List [ int ] , k : int ) -> int : NEW_LINE INDENT count = 0 NEW_LINE total = 0 NEW_LINE a = 0 NEW_LINE sumCount = { 0 : 1 } NEW_LINE for num in nums : NEW_LINE INDENT total += num NEW_LINE a = total - k NEW_LINE if a in sumCount : NEW_LINE INDENT count += sumCount [ a ] NEW_LINE DEDENT if total in sumCount : NEW_LINE INDENT sumCount [ total ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT sumCount [ total ] = 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT ctr = Counter ( tasks ) NEW_LINE keys = sorted ( ctr , key = ctr . get , reverse = True ) NEW_LINE print ( keys ) NEW_LINE max_freq = ctr [ keys [ 0 ] ] NEW_LINE idle_time = ( max_freq - 1 ) * n NEW_LINE for k in keys [ 1 : ] : NEW_LINE INDENT freq = ctr [ k ] NEW_LINE idle_time -= min ( max_freq - 1 , freq ) NEW_LINE DEDENT idle_time = max ( 0 , idle_time ) NEW_LINE return ( idle_time + len ( tasks ) ) NEW_LINE DEDENT DEDENT
from collections import deque , Counter NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT dic = Counter ( tasks ) NEW_LINE pq = [ - 1 * cnt for cnt in dic . values ( ) ] NEW_LINE heapq . heapify ( pq ) NEW_LINE res = 0 NEW_LINE dq = deque ( [ None for _ in range ( n ) ] ) NEW_LINE while pq or ( dq and any ( dq ) ) : NEW_LINE INDENT if pq : NEW_LINE INDENT cnt = heapq . heappop ( pq ) NEW_LINE if cnt < - 1 : NEW_LINE INDENT dq . append ( cnt + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT dq . append ( None ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT dq . append ( None ) NEW_LINE DEDENT curr = dq . popleft ( ) NEW_LINE if curr : NEW_LINE INDENT heapq . heappush ( pq , curr ) NEW_LINE DEDENT res += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT task_map = defaultdict ( int ) NEW_LINE for task in tasks : NEW_LINE INDENT task_map [ task ] += 1 NEW_LINE DEDENT keys = list ( task_map . keys ( ) ) NEW_LINE keys . sort ( key = lambda x : task_map [ x ] , reverse = True ) NEW_LINE ret = 0 NEW_LINE while keys : NEW_LINE INDENT i , idx = - 1 , - 1 NEW_LINE finished_tasks = set ( ) NEW_LINE while i < n and len ( keys ) > 0 : NEW_LINE INDENT i += 1 NEW_LINE idx += 1 NEW_LINE ret += 1 NEW_LINE key_idx = idx % len ( keys ) NEW_LINE key = keys [ key_idx ] NEW_LINE if key in finished_tasks : NEW_LINE INDENT continue NEW_LINE DEDENT task_map [ key ] -= 1 NEW_LINE if task_map [ key ] == 0 : NEW_LINE INDENT del task_map [ key ] NEW_LINE del keys [ key_idx ] NEW_LINE idx -= 1 NEW_LINE DEDENT finished_tasks . add ( key ) NEW_LINE DEDENT keys . sort ( key = lambda x : task_map [ x ] , reverse = True ) NEW_LINE DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT tm = defaultdict ( int ) NEW_LINE for t in tasks : NEW_LINE INDENT tm [ t ] += 1 NEW_LINE DEDENT sort_val = sorted ( tm . values ( ) ) NEW_LINE ans = 0 NEW_LINE while len ( sort_val ) > 0 : NEW_LINE INDENT N = len ( sort_val ) NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if i >= N : pass NEW_LINE else : NEW_LINE INDENT sort_val [ N - 1 - i ] -= 1 NEW_LINE sort_val = [ x for x in sort_val if x > 0 ] NEW_LINE DEDENT ans += 1 NEW_LINE if len ( sort_val ) == 0 : break NEW_LINE DEDENT sort_val . sort ( ) NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT heap = [ ] NEW_LINE for _ , c in Counter ( tasks ) . items ( ) : NEW_LINE INDENT heapq . heappush ( heap , - c ) NEW_LINE DEDENT run = [ ] NEW_LINE count = n + 1 NEW_LINE result = 0 NEW_LINE while heap or run : NEW_LINE INDENT if count == 0 : NEW_LINE INDENT while run : NEW_LINE INDENT heapq . heappush ( heap , run . pop ( ) ) NEW_LINE DEDENT count = n + 1 NEW_LINE DEDENT result += 1 NEW_LINE count -= 1 NEW_LINE if not heap : NEW_LINE INDENT continue NEW_LINE DEDENT c = heapq . heappop ( heap ) NEW_LINE if c < - 1 : NEW_LINE INDENT run . append ( c + 1 ) NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT freq = [ 0 ] * 26 NEW_LINE for task in tasks : NEW_LINE INDENT freq [ ord ( task ) - ord ( "A" ) ] += 1 NEW_LINE DEDENT freq . sort ( ) NEW_LINE f_max = freq . pop ( ) NEW_LINE idle_time = ( f_max - 1 ) * n NEW_LINE while freq : NEW_LINE INDENT idle_time -= min ( ( f_max - 1 ) , freq . pop ( ) ) NEW_LINE DEDENT idle_time = max ( idle_time , 0 ) NEW_LINE return len ( tasks ) + idle_time NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if len ( tasks ) == 1 or n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT cmap = defaultdict ( int ) NEW_LINE for task in tasks : NEW_LINE INDENT cmap [ task ] += 1 NEW_LINE DEDENT pq = [ ] NEW_LINE for k , v in cmap . items ( ) : NEW_LINE INDENT pq . append ( [ - 1 * v , k ] ) NEW_LINE DEDENT heapify ( pq ) NEW_LINE q = deque ( ) NEW_LINE cpu = 0 NEW_LINE sched = [ ] NEW_LINE cooldown = n + 1 NEW_LINE while ( len ( pq ) or len ( q ) ) : NEW_LINE INDENT v , k = heappop ( pq ) NEW_LINE sched . append ( k ) NEW_LINE v += 1 NEW_LINE if ( v < 0 ) : NEW_LINE INDENT q . append ( [ v , k ] ) NEW_LINE DEDENT cooldown -= 1 NEW_LINE while ( len ( pq ) == 0 and cooldown > 0 and len ( q ) ) : NEW_LINE INDENT sched . append ( " " ) NEW_LINE cooldown -= 1 NEW_LINE DEDENT while ( cooldown == 0 and len ( q ) ) : NEW_LINE INDENT heappush ( pq , q . popleft ( ) ) NEW_LINE DEDENT if len ( q ) == 0 : NEW_LINE INDENT cooldown = n + 1 NEW_LINE DEDENT DEDENT return len ( sched ) NEW_LINE DEDENT DEDENT
from collections import deque , Counter NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT dic = Counter ( tasks ) NEW_LINE pq = [ - 1 * cnt for cnt in dic . values ( ) ] NEW_LINE heapq . heapify ( pq ) NEW_LINE res = 0 NEW_LINE dq = deque ( [ 0 for _ in range ( n ) ] ) NEW_LINE while pq or any ( dq ) : NEW_LINE INDENT cnt = 0 NEW_LINE if pq : NEW_LINE INDENT cnt = heapq . heappop ( pq ) + 1 NEW_LINE DEDENT dq . append ( cnt ) NEW_LINE curr = dq . popleft ( ) NEW_LINE if curr : NEW_LINE INDENT heapq . heappush ( pq , curr ) NEW_LINE DEDENT res += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
from collections import deque , Counter NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT dic = Counter ( tasks ) NEW_LINE pq = [ - 1 * cnt for cnt in dic . values ( ) ] NEW_LINE heapq . heapify ( pq ) NEW_LINE res = 0 NEW_LINE dq = deque ( [ 0 for _ in range ( n ) ] ) NEW_LINE while pq or ( dq and any ( dq ) ) : NEW_LINE INDENT if pq : NEW_LINE INDENT cnt = heapq . heappop ( pq ) NEW_LINE dq . append ( cnt + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT dq . append ( 0 ) NEW_LINE DEDENT curr = dq . popleft ( ) NEW_LINE if curr : NEW_LINE INDENT heapq . heappush ( pq , curr ) NEW_LINE DEDENT res += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
from collections import deque , Counter NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT dic = Counter ( tasks ) NEW_LINE pq = [ ] NEW_LINE for task , cnt in dic . items ( ) : NEW_LINE INDENT heapq . heappush ( pq , ( - 1 * cnt , task ) ) NEW_LINE DEDENT res = 0 NEW_LINE dq = deque ( [ None for _ in range ( n ) ] ) NEW_LINE while pq or ( dq and any ( dq ) ) : NEW_LINE INDENT if pq : NEW_LINE INDENT cnt , task = heapq . heappop ( pq ) NEW_LINE dq . append ( ( cnt + 1 , task ) if cnt + 1 else None ) NEW_LINE DEDENT else : NEW_LINE INDENT dq . append ( None ) NEW_LINE DEDENT curr = dq . popleft ( ) NEW_LINE if curr : NEW_LINE INDENT heapq . heappush ( pq , curr ) NEW_LINE DEDENT res += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
from heapq import * NEW_LINE from collections import Counter NEW_LINE from collections import deque NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT leng = len ( tasks ) NEW_LINE if n == 0 : NEW_LINE INDENT return leng NEW_LINE DEDENT hp = [ ] NEW_LINE que = deque ( ) NEW_LINE res = [ ] NEW_LINE for key , value in Counter ( tasks ) . items ( ) : NEW_LINE INDENT heappush ( hp , [ - value , key ] ) NEW_LINE DEDENT total = 0 NEW_LINE while total != leng : NEW_LINE INDENT if hp : NEW_LINE INDENT count , task = heappop ( hp ) NEW_LINE res . append ( task ) NEW_LINE total += 1 NEW_LINE que . append ( [ count + 1 , task ] ) NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( 'idle' ) NEW_LINE que . append ( [ 0 , '' ] ) NEW_LINE DEDENT if len ( que ) == n + 1 : NEW_LINE INDENT count , task = que . popleft ( ) NEW_LINE if - count > 0 : NEW_LINE INDENT heappush ( hp , [ count , task ] ) NEW_LINE DEDENT DEDENT DEDENT return len ( res ) NEW_LINE DEDENT DEDENT
from collections import Counter , deque NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT n_tasks = len ( tasks ) NEW_LINE task_freq = Counter ( tasks ) NEW_LINE heap = [ ( - freq , task ) for task , freq in task_freq . items ( ) ] NEW_LINE heapq . heapify ( heap ) NEW_LINE queue = deque ( [ ] ) NEW_LINE n_units = 0 NEW_LINE while n_tasks > 0 : NEW_LINE INDENT if len ( heap ) > 0 : NEW_LINE INDENT _freq , task = heapq . heappop ( heap ) NEW_LINE n_tasks -= 1 NEW_LINE if - _freq - 1 > 0 : NEW_LINE INDENT queue . append ( ( - _freq - 1 , task ) ) NEW_LINE DEDENT else : NEW_LINE INDENT queue . append ( ( 0 , None ) ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT queue . append ( ( 0 , None ) ) NEW_LINE DEDENT n_units += 1 NEW_LINE if len ( queue ) == n + 1 : NEW_LINE INDENT freq , task = queue . popleft ( ) NEW_LINE if freq > 0 : NEW_LINE INDENT heapq . heappush ( heap , ( - freq , task ) ) NEW_LINE DEDENT DEDENT DEDENT return n_units NEW_LINE DEDENT DEDENT
from collections import deque , Counter NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT dic = Counter ( tasks ) NEW_LINE pq = [ ] NEW_LINE for task , cnt in dic . items ( ) : NEW_LINE INDENT heapq . heappush ( pq , ( - 1 * cnt , task ) ) NEW_LINE DEDENT res = 0 NEW_LINE dq = deque ( [ None for _ in range ( n ) ] ) NEW_LINE while pq or ( dq and any ( dq ) ) : NEW_LINE INDENT if pq : NEW_LINE INDENT cnt , task = heapq . heappop ( pq ) NEW_LINE dq . append ( ( cnt + 1 , task ) if cnt + 1 else None ) NEW_LINE DEDENT else : NEW_LINE INDENT dq . append ( None ) NEW_LINE DEDENT curr = dq . popleft ( ) NEW_LINE if curr : NEW_LINE INDENT heapq . heappush ( pq , curr ) NEW_LINE DEDENT res += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
from collections import defaultdict , deque NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT time = 0 NEW_LINE incoming_tasks = defaultdict ( int ) NEW_LINE all_tasks_counter = 0 NEW_LINE for task in tasks : NEW_LINE INDENT incoming_tasks [ task ] += 1 NEW_LINE all_tasks_counter += 1 NEW_LINE DEDENT incoming_tasks = [ [ - v , k ] for k , v in incoming_tasks . items ( ) ] NEW_LINE heapq . heapify ( incoming_tasks ) NEW_LINE active_q = deque ( ) NEW_LINE while incoming_tasks or all_tasks_counter > 0 : NEW_LINE INDENT if incoming_tasks : NEW_LINE INDENT add_task = heapq . heappop ( incoming_tasks ) NEW_LINE active_q . append ( add_task ) NEW_LINE DEDENT else : NEW_LINE INDENT active_q . append ( [ 1 , 'idle' ] ) NEW_LINE DEDENT if len ( active_q ) == n + 1 : NEW_LINE INDENT pop_task = active_q . popleft ( ) NEW_LINE if pop_task [ 1 ] != 'idle' : NEW_LINE INDENT pop_task [ 0 ] += 1 NEW_LINE all_tasks_counter -= 1 NEW_LINE if pop_task [ 0 ] < 0 : NEW_LINE INDENT heapq . heappush ( incoming_tasks , pop_task ) NEW_LINE DEDENT DEDENT DEDENT time += 1 NEW_LINE DEDENT return time - n NEW_LINE DEDENT DEDENT
from collections import Counter , namedtuple NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT taskCounts = Counter ( tasks ) NEW_LINE maxCount = max ( taskCounts . values ( ) ) NEW_LINE pq = [ ] NEW_LINE totalCount = 0 NEW_LINE TaskInfo = namedtuple ( "TaskInfo" , [ "count" , "taskName" ] ) NEW_LINE for taskName , taskCount in taskCounts . items ( ) : NEW_LINE INDENT heapq . heappush ( pq , TaskInfo ( - taskCount , taskName ) ) NEW_LINE DEDENT while pq : NEW_LINE INDENT singleCycleTasks = [ ] NEW_LINE cycleLength = n + 1 NEW_LINE while pq and cycleLength > 0 : NEW_LINE INDENT task = heapq . heappop ( pq ) NEW_LINE print ( task . count , task . taskName ) NEW_LINE singleCycleTasks += [ TaskInfo ( - task . count - 1 , task . taskName ) ] NEW_LINE cycleLength -= 1 NEW_LINE totalCount += 1 NEW_LINE DEDENT for task in singleCycleTasks : NEW_LINE INDENT if ( task . count ) > 0 : NEW_LINE INDENT heapq . heappush ( pq , TaskInfo ( task . count * - 1 , task . taskName ) ) NEW_LINE DEDENT DEDENT if len ( pq ) == 0 : NEW_LINE INDENT return totalCount NEW_LINE DEDENT totalCount += cycleLength NEW_LINE print ( cycleLength * "IDLE" ) NEW_LINE DEDENT return totalCount NEW_LINE DEDENT DEDENT
from collections import defaultdict , deque NEW_LINE from heapq import heappush , heappop NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 or len ( tasks ) == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT freq = defaultdict ( int ) NEW_LINE for task in tasks : NEW_LINE INDENT freq [ task ] -= 1 NEW_LINE DEDENT max_heap = [ ] NEW_LINE for task , count in freq . items ( ) : NEW_LINE INDENT heappush ( max_heap , ( count , task ) ) NEW_LINE DEDENT cycles = 0 NEW_LINE q = deque ( ) NEW_LINE while len ( max_heap ) + len ( q ) > 0 : NEW_LINE INDENT if q : NEW_LINE INDENT count , task , time_since_last = q [ 0 ] NEW_LINE if cycles - time_since_last >= n + 1 : NEW_LINE INDENT q . popleft ( ) NEW_LINE heappush ( max_heap , ( count , task ) ) NEW_LINE DEDENT elif not max_heap : NEW_LINE INDENT cycles += 1 NEW_LINE continue NEW_LINE DEDENT DEDENT count , task = heappop ( max_heap ) NEW_LINE count += 1 NEW_LINE if count != 0 : NEW_LINE INDENT q . append ( ( count , task , cycles ) ) NEW_LINE DEDENT cycles += 1 NEW_LINE DEDENT return cycles NEW_LINE DEDENT DEDENT
from collections import deque , Counter NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT dic = Counter ( tasks ) NEW_LINE pq = [ ] NEW_LINE for task , cnt in dic . items ( ) : NEW_LINE INDENT heapq . heappush ( pq , ( - 1 * cnt , task ) ) NEW_LINE DEDENT res = 0 NEW_LINE dq = deque ( [ None for _ in range ( n ) ] ) NEW_LINE while pq or ( dq and any ( dq ) ) : NEW_LINE INDENT if pq : NEW_LINE INDENT cnt , task = heapq . heappop ( pq ) NEW_LINE if cnt < - 1 : NEW_LINE INDENT dq . append ( ( cnt + 1 , task ) ) NEW_LINE DEDENT else : NEW_LINE INDENT dq . append ( None ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT dq . append ( None ) NEW_LINE DEDENT curr = dq . popleft ( ) NEW_LINE if curr and curr [ 1 ] : NEW_LINE INDENT heapq . heappush ( pq , curr ) NEW_LINE DEDENT res += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT c = Counter ( tasks ) NEW_LINE res = '' NEW_LINE h = [ ] NEW_LINE for key , val in c . items ( ) : NEW_LINE INDENT heapq . heappush ( h , ( - val , key ) ) NEW_LINE DEDENT while len ( h ) + n > n : NEW_LINE INDENT arr = [ ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if h : NEW_LINE INDENT num , let = heapq . heappop ( h ) NEW_LINE num += 1 NEW_LINE res += let NEW_LINE arr . append ( ( num , let ) ) NEW_LINE DEDENT else : NEW_LINE INDENT res += '#' NEW_LINE DEDENT DEDENT print ( '------' ) NEW_LINE for num , let in arr : NEW_LINE INDENT if num != 0 : NEW_LINE INDENT heapq . heappush ( h , ( num , let ) ) NEW_LINE DEDENT DEDENT DEDENT while h : NEW_LINE INDENT num , let = heapq . heappop ( h ) NEW_LINE res = res + let + ( '#' * n ) NEW_LINE num += 1 NEW_LINE if num != 0 : NEW_LINE INDENT heapq . heappush ( h , ( num , let ) ) NEW_LINE DEDENT DEDENT res = re . sub ( r'#*$' , '' , res ) NEW_LINE return len ( res ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if len ( tasks ) == 0 or n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT freqs = defaultdict ( lambda : 0 ) NEW_LINE for t in tasks : NEW_LINE INDENT freqs [ t ] -= 1 NEW_LINE DEDENT items = [ ( v , k ) for k , v in freqs . items ( ) ] NEW_LINE heapq . heapify ( items ) NEW_LINE lastk = deque ( ) NEW_LINE intervalCount = 0 NEW_LINE done = False NEW_LINE while not done : NEW_LINE INDENT intervalCount += 1 NEW_LINE if len ( lastk ) > 0 and lastk [ 0 ] [ 2 ] < ( intervalCount - n ) : NEW_LINE INDENT heapq . heappush ( items , lastk . popleft ( ) [ : 2 ] ) NEW_LINE DEDENT if len ( items ) > 0 : NEW_LINE INDENT num , tsk = heapq . heappop ( items ) NEW_LINE num += 1 NEW_LINE if num != 0 : NEW_LINE INDENT lastk . append ( ( num , tsk , intervalCount ) ) NEW_LINE DEDENT DEDENT done = 0 == len ( lastk ) == len ( items ) NEW_LINE DEDENT return intervalCount NEW_LINE DEDENT DEDENT
from collections import deque , Counter NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT dic = Counter ( tasks ) NEW_LINE pq = [ ] NEW_LINE for task , cnt in dic . items ( ) : NEW_LINE INDENT heapq . heappush ( pq , ( - 1 * cnt , task ) ) NEW_LINE DEDENT res = 0 NEW_LINE dq = deque ( [ None for _ in range ( n ) ] ) NEW_LINE while pq or any ( dq ) : NEW_LINE INDENT if pq : NEW_LINE INDENT cnt , task = heapq . heappop ( pq ) NEW_LINE dq . append ( ( cnt + 1 , task ) if cnt + 1 else None ) NEW_LINE DEDENT else : NEW_LINE INDENT dq . append ( None ) NEW_LINE DEDENT curr = dq . popleft ( ) NEW_LINE if curr : NEW_LINE INDENT heapq . heappush ( pq , curr ) NEW_LINE DEDENT res += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT time = 0 NEW_LINE count = Counter ( tasks ) NEW_LINE arr = [ ] NEW_LINE pushback = [ ] NEW_LINE heapq . heapify ( pushback ) NEW_LINE heapq . heapify ( arr ) NEW_LINE for c in count : NEW_LINE INDENT heapq . heappush ( arr , [ - count [ c ] , c ] ) NEW_LINE DEDENT while arr or pushback : NEW_LINE INDENT if arr : NEW_LINE INDENT _ , ch = heapq . heappop ( arr ) NEW_LINE count [ ch ] -= 1 NEW_LINE if count [ ch ] > 0 : NEW_LINE INDENT heapq . heappush ( pushback , [ time , ch ] ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT pass NEW_LINE DEDENT if pushback and pushback [ 0 ] [ 0 ] <= time - n : NEW_LINE INDENT _ , ch = heapq . heappop ( pushback ) NEW_LINE heapq . heappush ( arr , [ - count [ ch ] , ch ] ) NEW_LINE DEDENT time += 1 NEW_LINE DEDENT return time NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT NEW_LINE if not tasks or n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT counts = Counter ( tasks ) NEW_LINE queue = deque ( ) NEW_LINE condition = len ( counts . items ( ) ) NEW_LINE i = 0 NEW_LINE while condition > 0 : NEW_LINE INDENT if queue and queue [ 0 ] [ 0 ] == i : NEW_LINE INDENT time , task , count = queue . popleft ( ) NEW_LINE counts [ task ] = count NEW_LINE DEDENT if counts : NEW_LINE INDENT maxTask = max ( counts , key = lambda key : counts [ key ] ) NEW_LINE if counts [ maxTask ] == 1 : NEW_LINE INDENT condition -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT queue . append ( [ i + n + 1 , maxTask , counts [ maxTask ] - 1 ] ) NEW_LINE DEDENT del counts [ maxTask ] NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return i NEW_LINE DEDENT DEDENT
from collections import deque , Counter NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if not n : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT dic = Counter ( tasks ) NEW_LINE pq = [ ] NEW_LINE for task , cnt in dic . items ( ) : NEW_LINE INDENT heapq . heappush ( pq , ( - 1 * cnt , task ) ) NEW_LINE DEDENT res = 0 NEW_LINE dq = deque ( [ None for _ in range ( n ) ] ) NEW_LINE while pq or ( dq and any ( dq ) ) : NEW_LINE INDENT if pq : NEW_LINE INDENT cnt , task = heapq . heappop ( pq ) NEW_LINE dq . append ( ( cnt + 1 , task ) if cnt + 1 else None ) NEW_LINE DEDENT else : NEW_LINE INDENT dq . append ( None ) NEW_LINE DEDENT curr = dq . popleft ( ) NEW_LINE if curr : NEW_LINE INDENT heapq . heappush ( pq , curr ) NEW_LINE DEDENT res += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT NEW_LINE if not tasks or n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT counts = Counter ( tasks ) NEW_LINE queue = deque ( ) NEW_LINE condition = len ( counts . items ( ) ) NEW_LINE i = 0 NEW_LINE while condition > 0 : NEW_LINE INDENT if queue and queue [ 0 ] [ 0 ] == i : NEW_LINE INDENT time , task , count = queue . popleft ( ) NEW_LINE counts [ task ] = count NEW_LINE DEDENT if counts : NEW_LINE INDENT maxTask = max ( counts , key = lambda key : counts [ key ] ) NEW_LINE if counts [ maxTask ] == 1 : NEW_LINE INDENT condition -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT queue . append ( [ i + n + 1 , maxTask , counts [ maxTask ] - 1 ] ) NEW_LINE DEDENT del counts [ maxTask ] NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return i NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT counter = Counter ( tasks ) NEW_LINE heap = [ ( - value , key ) for key , value in counter . items ( ) ] NEW_LINE heapify ( heap ) NEW_LINE window = deque ( [ ] ) NEW_LINE count = 0 NEW_LINE keys = set ( ) NEW_LINE while True : NEW_LINE INDENT if heap : NEW_LINE INDENT value , key = heappop ( heap ) NEW_LINE value += 1 NEW_LINE window += [ [ key , value ] ] NEW_LINE keys . add ( key ) NEW_LINE DEDENT else : NEW_LINE INDENT window += [ [ "idle" , - 1 ] ] NEW_LINE DEDENT if len ( window ) > n : NEW_LINE INDENT key , value = window . popleft ( ) NEW_LINE if key != "idle" : NEW_LINE INDENT if value : NEW_LINE INDENT heappush ( heap , ( value , key ) ) NEW_LINE DEDENT keys . remove ( key ) NEW_LINE DEDENT DEDENT count += 1 NEW_LINE if not keys and not heap : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return count - n NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT c = Counter ( tasks ) NEW_LINE res = '' NEW_LINE h = [ ] NEW_LINE for key , val in c . items ( ) : NEW_LINE INDENT heapq . heappush ( h , ( - val , key ) ) NEW_LINE DEDENT while len ( h ) + n > n : NEW_LINE INDENT arr = [ ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if h : NEW_LINE INDENT num , let = heapq . heappop ( h ) NEW_LINE num += 1 NEW_LINE res += let NEW_LINE arr . append ( ( num , let ) ) NEW_LINE DEDENT else : NEW_LINE INDENT res += '#' NEW_LINE DEDENT DEDENT print ( '------' ) NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if arr : NEW_LINE INDENT num , let = arr . pop ( ) NEW_LINE if num != 0 : NEW_LINE INDENT heapq . heappush ( h , ( num , let ) ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT while h : NEW_LINE INDENT num , let = heapq . heappop ( h ) NEW_LINE res = res + let + ( '#' * n ) NEW_LINE num += 1 NEW_LINE if num != 0 : NEW_LINE INDENT heapq . heappush ( h , ( num , let ) ) NEW_LINE DEDENT DEDENT res = re . sub ( r'#*$' , '' , res ) NEW_LINE return len ( res ) NEW_LINE DEDENT DEDENT
from heapq import * NEW_LINE from collections import Counter NEW_LINE from collections import deque NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT hp = [ ] NEW_LINE que = deque ( ) NEW_LINE res = [ ] NEW_LINE for key , value in Counter ( tasks ) . items ( ) : NEW_LINE INDENT heappush ( hp , [ - value , key ] ) NEW_LINE DEDENT total = 0 NEW_LINE while total != len ( tasks ) : NEW_LINE INDENT if hp : NEW_LINE INDENT count , task = heappop ( hp ) NEW_LINE res . append ( task ) NEW_LINE total += 1 NEW_LINE que . append ( [ count + 1 , task ] ) NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( 'idle' ) NEW_LINE que . append ( [ 0 , '' ] ) NEW_LINE DEDENT if len ( que ) == n + 1 : NEW_LINE INDENT count , task = que . popleft ( ) NEW_LINE if - count > 0 : NEW_LINE INDENT heappush ( hp , [ count , task ] ) NEW_LINE DEDENT DEDENT DEDENT return len ( res ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT counter = Counter ( tasks ) NEW_LINE c_d = { } NEW_LINE cur_t = 0 NEW_LINE res = 0 NEW_LINE while counter : NEW_LINE INDENT m_c , t = - 1 , "" NEW_LINE for task in counter : NEW_LINE INDENT if counter [ task ] >= m_c and ( task not in c_d or c_d [ task ] < cur_t ) : m_c , t = counter [ task ] , task NEW_LINE DEDENT if m_c == - 1 : NEW_LINE INDENT cd , t = float ( inf ) , "" NEW_LINE for k , v in c_d . items ( ) : NEW_LINE INDENT if k not in counter : continue NEW_LINE if v <= cd : NEW_LINE INDENT cd = v NEW_LINE t = k NEW_LINE DEDENT DEDENT res += cd + 2 - cur_t NEW_LINE cur_t = cd + 2 NEW_LINE DEDENT else : NEW_LINE INDENT res += 1 NEW_LINE cur_t += 1 NEW_LINE DEDENT counter [ t ] -= 1 NEW_LINE if counter [ t ] == 0 : del counter [ t ] NEW_LINE c_d [ t ] = cur_t - 1 + n NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT c = Counter ( tasks ) NEW_LINE res = '' NEW_LINE h = [ ] NEW_LINE for key , val in c . items ( ) : NEW_LINE INDENT heapq . heappush ( h , ( - val , key ) ) NEW_LINE DEDENT while len ( h ) + n > n : NEW_LINE INDENT arr = [ ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if h : NEW_LINE INDENT num , let = heapq . heappop ( h ) NEW_LINE num += 1 NEW_LINE res += let NEW_LINE arr . append ( ( num , let ) ) NEW_LINE DEDENT else : NEW_LINE INDENT res += '#' NEW_LINE DEDENT DEDENT print ( '------' ) NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if arr : NEW_LINE INDENT num , let = arr . pop ( ) NEW_LINE if num != 0 : NEW_LINE INDENT heapq . heappush ( h , ( num , let ) ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT while h : NEW_LINE INDENT num , let = heapq . heappop ( h ) NEW_LINE res = res + let + ( '#' * n ) NEW_LINE num += 1 NEW_LINE if num != 0 : NEW_LINE INDENT heapq . heappush ( h , ( num , let ) ) NEW_LINE DEDENT DEDENT res = re . sub ( r'#*$' , '' , res ) NEW_LINE return len ( res ) NEW_LINE DEDENT DEDENT
from heapq import * NEW_LINE from collections import deque NEW_LINE import collections NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT heap = [ ] NEW_LINE count = collections . Counter ( tasks ) NEW_LINE for key , value in count . items ( ) : NEW_LINE INDENT heappush ( heap , ( - value , key ) ) NEW_LINE DEDENT keys = len ( count . keys ( ) ) NEW_LINE timeout = deque ( ) NEW_LINE size = 0 NEW_LINE idle = ( 0 , "idle" ) NEW_LINE while keys : NEW_LINE INDENT value , task = heappop ( heap ) if heap else idle NEW_LINE size += 1 NEW_LINE value += 1 NEW_LINE if value < 0 : NEW_LINE INDENT timeout . append ( ( value , task ) ) NEW_LINE DEDENT else : NEW_LINE INDENT keys -= 1 if task != "idle" else 0 NEW_LINE timeout . append ( idle ) NEW_LINE DEDENT if len ( timeout ) > n : NEW_LINE INDENT poppedValue , poppedTask = timeout . popleft ( ) NEW_LINE if poppedTask != "idle" : NEW_LINE INDENT heappush ( heap , ( poppedValue , poppedTask ) ) NEW_LINE DEDENT DEDENT DEDENT return size NEW_LINE DEDENT DEDENT NEW_LINE NEW_LINE
from collections import deque , Counter NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT dic = Counter ( tasks ) NEW_LINE pq = [ ] NEW_LINE for task , cnt in dic . items ( ) : NEW_LINE INDENT heapq . heappush ( pq , ( - 1 * cnt , task ) ) NEW_LINE DEDENT res = 0 NEW_LINE dq = deque ( [ ] ) NEW_LINE while pq or ( dq and any ( dq ) ) : NEW_LINE INDENT if pq : NEW_LINE INDENT cnt , task = heapq . heappop ( pq ) NEW_LINE if cnt < - 1 : NEW_LINE INDENT dq . append ( ( cnt + 1 , task ) ) NEW_LINE DEDENT else : NEW_LINE INDENT dq . append ( None ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT dq . append ( None ) NEW_LINE DEDENT if len ( dq ) > n : NEW_LINE INDENT curr = dq . popleft ( ) NEW_LINE if curr and curr [ 1 ] : NEW_LINE INDENT heapq . heappush ( pq , curr ) NEW_LINE DEDENT DEDENT res += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
from collections import deque NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT elif tasks == [ ] : NEW_LINE INDENT return 0 NEW_LINE DEDENT m = { } NEW_LINE for elem in tasks : NEW_LINE INDENT if elem in m : NEW_LINE INDENT m [ elem ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT m [ elem ] = 1 NEW_LINE DEDENT DEDENT availableheap = [ ] NEW_LINE for key in m : NEW_LINE INDENT heapq . heappush ( availableheap , ( - 1 * m [ key ] , key ) ) NEW_LINE DEDENT unavailableList = deque ( ) NEW_LINE currentTime = 0 NEW_LINE while len ( availableheap ) > 0 or len ( unavailableList ) > 0 : NEW_LINE INDENT while len ( unavailableList ) > 0 and unavailableList [ 0 ] [ 0 ] <= currentTime : NEW_LINE INDENT x = unavailableList . popleft ( ) NEW_LINE heapq . heappush ( availableheap , ( x [ 1 ] , x [ 2 ] ) ) NEW_LINE DEDENT if len ( availableheap ) == 0 : NEW_LINE INDENT currentTime += 1 NEW_LINE continue NEW_LINE DEDENT curr = heapq . heappop ( availableheap ) NEW_LINE if curr [ 0 ] * - 1 > 1 : NEW_LINE INDENT unavailableList . append ( ( currentTime + n + 1 , curr [ 0 ] + 1 , curr [ 1 ] ) ) NEW_LINE DEDENT currentTime += 1 NEW_LINE DEDENT return currentTime NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT taskToFreq = Counter ( tasks ) NEW_LINE priority_queue = [ - freq for task , freq in taskToFreq . items ( ) ] NEW_LINE heapq . heapify ( priority_queue ) NEW_LINE TaskCoolOff = namedtuple ( "TaskCoolOff" , [ "left_to_do" , "timestamp" ] ) NEW_LINE cool_off = deque ( ) NEW_LINE ticks = 0 NEW_LINE while len ( priority_queue ) > 0 or cool_off : NEW_LINE INDENT while cool_off and ticks - cool_off [ 0 ] . timestamp > n : NEW_LINE INDENT heapq . heappush ( priority_queue , cool_off . popleft ( ) . left_to_do ) NEW_LINE DEDENT if len ( priority_queue ) > 0 : NEW_LINE INDENT freq = heapq . heappop ( priority_queue ) NEW_LINE if abs ( freq ) > 1 : NEW_LINE INDENT cool_off . append ( TaskCoolOff ( - ( abs ( freq ) - 1 ) , ticks ) ) NEW_LINE DEDENT DEDENT ticks += 1 NEW_LINE DEDENT return ticks NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT task_counts = list ( sorted ( Counter ( tasks ) . values ( ) ) ) NEW_LINE nmf = task_counts . pop ( ) NEW_LINE idle = ( nmf - 1 ) * n NEW_LINE while task_counts and idle > 0 : NEW_LINE INDENT c = task_counts . pop ( ) NEW_LINE idle -= min ( nmf - 1 , c ) NEW_LINE DEDENT return max ( idle , 0 ) + len ( tasks ) NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT c = Counter ( tasks ) NEW_LINE res = '' NEW_LINE h = [ ] NEW_LINE for key , val in c . items ( ) : NEW_LINE INDENT heapq . heappush ( h , ( - val , key ) ) NEW_LINE DEDENT while len ( h ) + n > n : NEW_LINE INDENT arr = [ ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if h : NEW_LINE INDENT num , let = heapq . heappop ( h ) NEW_LINE num += 1 NEW_LINE res += let NEW_LINE arr . append ( ( num , let ) ) NEW_LINE DEDENT else : NEW_LINE INDENT res += '#' NEW_LINE DEDENT DEDENT print ( '------' ) NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if arr : NEW_LINE INDENT num , let = arr . pop ( ) NEW_LINE if num != 0 : NEW_LINE INDENT heapq . heappush ( h , ( num , let ) ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT while h : NEW_LINE INDENT num , let = heapq . heappop ( h ) NEW_LINE res = res + let + ( '#' * n ) NEW_LINE num += 1 NEW_LINE if num != 0 : NEW_LINE INDENT heapq . heappush ( h , ( num , let ) ) NEW_LINE DEDENT DEDENT res = re . sub ( r'#*$' , '' , res ) NEW_LINE return len ( res ) NEW_LINE DEDENT DEDENT
from heapq import * NEW_LINE from collections import Counter NEW_LINE from collections import deque NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT hp = [ ] NEW_LINE que = deque ( ) NEW_LINE res = [ ] NEW_LINE for key , value in Counter ( tasks ) . items ( ) : NEW_LINE INDENT heappush ( hp , [ - value , key ] ) NEW_LINE DEDENT total = 0 NEW_LINE while total != len ( tasks ) : NEW_LINE INDENT if hp : NEW_LINE INDENT count , task = heappop ( hp ) NEW_LINE res . append ( task ) NEW_LINE total += 1 NEW_LINE que . append ( [ count + 1 , task ] ) NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( 'idle' ) NEW_LINE que . append ( [ 0 , '' ] ) NEW_LINE DEDENT if len ( que ) == n + 1 : NEW_LINE INDENT count , task = que . popleft ( ) NEW_LINE if - count > 0 : NEW_LINE INDENT heappush ( hp , [ count , task ] ) NEW_LINE DEDENT DEDENT DEDENT return len ( res ) NEW_LINE DEDENT DEDENT
from heapq import heappush , heappop , heapify NEW_LINE from collections import Counter , deque NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if not tasks : NEW_LINE INDENT return 0 NEW_LINE DEDENT freq = Counter ( tasks ) NEW_LINE h = [ ( - v , k ) for k , v in freq . items ( ) ] NEW_LINE heapify ( h ) NEW_LINE deque_len = 0 NEW_LINE queue = deque ( ) NEW_LINE step = 0 NEW_LINE while len ( h ) + deque_len > 0 : NEW_LINE INDENT step += 1 NEW_LINE if h : NEW_LINE INDENT current_priority , current_process = heappop ( h ) NEW_LINE current_priority = - current_priority NEW_LINE if current_priority > 1 : NEW_LINE INDENT deque_len += 1 NEW_LINE DEDENT else : NEW_LINE INDENT current_process = None NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT current_priority , current_process = 1 , None NEW_LINE DEDENT queue . append ( [ current_priority - 1 , current_process ] ) NEW_LINE if len ( queue ) > n : NEW_LINE INDENT priority , process = queue . popleft ( ) NEW_LINE if process : NEW_LINE INDENT heappush ( h , ( - priority , process ) ) NEW_LINE deque_len -= 1 NEW_LINE DEDENT DEDENT DEDENT return step NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT task_count = Counter ( tasks ) NEW_LINE current_time = 0 NEW_LINE current_heap = [ ] NEW_LINE for k , v in task_count . items ( ) : NEW_LINE INDENT heappush ( current_heap , ( - 1 * ( v ) , k ) ) NEW_LINE DEDENT while current_heap : NEW_LINE INDENT index , temp = 0 , [ ] NEW_LINE while index <= n : NEW_LINE INDENT current_time += 1 NEW_LINE if current_heap : NEW_LINE INDENT timing , taskid = heappop ( current_heap ) NEW_LINE if timing != - 1 : NEW_LINE INDENT temp . append ( ( timing + 1 , taskid ) ) NEW_LINE DEDENT DEDENT if not current_heap and not temp : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT index += 1 NEW_LINE DEDENT DEDENT for item in temp : NEW_LINE INDENT heappush ( current_heap , item ) NEW_LINE DEDENT DEDENT return current_time NEW_LINE NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT counter = [ 0 ] * 26 NEW_LINE highest = 0 NEW_LINE for task in tasks : NEW_LINE INDENT counter [ ord ( task ) - ord ( 'A' ) ] += 1 NEW_LINE highest = max ( highest , counter [ ord ( task ) - ord ( 'A' ) ] ) NEW_LINE DEDENT num_tasks_with_same_max = 0 NEW_LINE counter . sort ( reverse = True ) NEW_LINE i = 0 NEW_LINE while i < 26 and counter [ i ] == highest : NEW_LINE INDENT num_tasks_with_same_max += 1 NEW_LINE i += 1 NEW_LINE DEDENT return max ( ( n + 1 ) * ( highest - 1 ) + num_tasks_with_same_max , len ( tasks ) ) NEW_LINE DEDENT DEDENT
from heapq import heappush , heappop NEW_LINE from collections import Counter NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks , n ) : NEW_LINE INDENT curr_time , h = 0 , [ ] NEW_LINE for v in collections . Counter ( tasks ) . values ( ) : NEW_LINE INDENT heapq . heappush ( h , - 1 * v ) NEW_LINE DEDENT while h : NEW_LINE INDENT temp = [ ] NEW_LINE for _ in range ( n + 1 ) : NEW_LINE INDENT print ( h ) NEW_LINE curr_time += 1 NEW_LINE if h : NEW_LINE INDENT x = heapq . heappop ( h ) NEW_LINE if x != - 1 : NEW_LINE INDENT temp . append ( x + 1 ) NEW_LINE DEDENT DEDENT if not h and not temp : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for item in temp : NEW_LINE INDENT heapq . heappush ( h , item ) NEW_LINE DEDENT DEDENT return curr_time NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT tk = dict ( ) NEW_LINE for t in tasks : NEW_LINE INDENT tk [ t ] = tk . get ( t , 0 ) + 1 NEW_LINE DEDENT sortTk = list ( tk . values ( ) ) NEW_LINE sortTk . sort ( reverse = True ) NEW_LINE time = n + 1 NEW_LINE count = 0 NEW_LINE while sortTk [ 0 ] != 0 : NEW_LINE INDENT for i in range ( len ( sortTk ) ) : NEW_LINE INDENT if sortTk [ i ] > 0 and time > 0 : NEW_LINE INDENT sortTk [ i ] -= 1 NEW_LINE time -= 1 NEW_LINE count += 1 NEW_LINE DEDENT elif time == 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT sortTk . sort ( reverse = True ) NEW_LINE if sortTk [ 0 ] != 0 : NEW_LINE INDENT count += time NEW_LINE time = n + 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if not tasks or len ( tasks ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT task_dic = { } NEW_LINE for task in tasks : NEW_LINE INDENT if task in task_dic : NEW_LINE INDENT task_dic [ task ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT task_dic [ task ] = 1 NEW_LINE DEDENT DEDENT res = 0 NEW_LINE heap = [ ] NEW_LINE for k , v in task_dic . items ( ) : NEW_LINE INDENT heapq . heappush ( heap , ( v * - 1 , k ) ) NEW_LINE DEDENT while heap : NEW_LINE INDENT i = 0 NEW_LINE temp = [ ] NEW_LINE while i <= n : NEW_LINE INDENT if heap : NEW_LINE INDENT fre , cur = heapq . heappop ( heap ) NEW_LINE if fre < - 1 : NEW_LINE INDENT temp . append ( ( fre + 1 , cur ) ) NEW_LINE DEDENT i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if not temp : NEW_LINE INDENT return res NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT res += 1 NEW_LINE DEDENT for elem in temp : NEW_LINE INDENT heapq . heappush ( heap , elem ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
from collections import deque NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT elif tasks == [ ] : NEW_LINE INDENT return 0 NEW_LINE DEDENT m = { } NEW_LINE for elem in tasks : NEW_LINE INDENT if elem in m : NEW_LINE INDENT m [ elem ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT m [ elem ] = 1 NEW_LINE DEDENT DEDENT availableheap = [ ] NEW_LINE for key in m : NEW_LINE INDENT heapq . heappush ( availableheap , ( - 1 * m [ key ] , key ) ) NEW_LINE DEDENT unavailableList = deque ( ) NEW_LINE currentTime = 0 NEW_LINE while len ( availableheap ) > 0 or len ( unavailableList ) > 0 : NEW_LINE INDENT while len ( unavailableList ) > 0 and unavailableList [ 0 ] [ 0 ] <= currentTime : NEW_LINE INDENT x = unavailableList . popleft ( ) NEW_LINE heapq . heappush ( availableheap , ( x [ 1 ] , x [ 2 ] ) ) NEW_LINE DEDENT if len ( availableheap ) == 0 : NEW_LINE INDENT currentTime += 1 NEW_LINE continue NEW_LINE DEDENT curr = heapq . heappop ( availableheap ) NEW_LINE if curr [ 0 ] * - 1 > 1 : NEW_LINE INDENT unavailableList . append ( ( currentTime + n + 1 , curr [ 0 ] + 1 , curr [ 1 ] ) ) NEW_LINE DEDENT currentTime += 1 NEW_LINE DEDENT return currentTime NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT heap = [ 0 for i in range ( 26 ) ] NEW_LINE for i in tasks : NEW_LINE INDENT indx = ord ( i ) - 65 NEW_LINE heap [ indx ] -= 1 NEW_LINE DEDENT heapq . heapify ( heap ) NEW_LINE i = 0 NEW_LINE queue = [ ] NEW_LINE count = 0 NEW_LINE while i < len ( tasks ) : NEW_LINE INDENT count += 1 NEW_LINE if not heap : NEW_LINE INDENT queue . append ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT cur = heapq . heappop ( heap ) NEW_LINE if cur != 0 : NEW_LINE INDENT queue . append ( cur + 1 ) NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT queue . append ( 0 ) NEW_LINE DEDENT DEDENT if len ( queue ) > n : NEW_LINE INDENT heapq . heappush ( heap , queue . pop ( 0 ) ) NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT DEDENT
from heapq import heappush NEW_LINE from heapq import heappop NEW_LINE class TaskFrequency : NEW_LINE INDENT def __init__ ( self , task , freq ) : NEW_LINE INDENT self . task = task NEW_LINE self . freq = freq NEW_LINE DEDENT def __lt__ ( self , other ) : NEW_LINE INDENT if self . freq == other . freq : NEW_LINE INDENT return ord ( self . task ) > ord ( other . task ) NEW_LINE DEDENT return self . freq > other . freq NEW_LINE DEDENT DEDENT class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if not tasks or len ( tasks ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT task_heap = [ ] NEW_LINE freq_map = { } NEW_LINE for task in tasks : NEW_LINE INDENT if task in freq_map : NEW_LINE INDENT freq_map [ task ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT freq_map [ task ] = 1 NEW_LINE DEDENT DEDENT for task in freq_map : NEW_LINE INDENT task_freq = TaskFrequency ( task , freq_map [ task ] ) NEW_LINE heappush ( task_heap , task_freq ) NEW_LINE DEDENT time = 0 NEW_LINE while ( len ( task_heap ) > 0 ) : NEW_LINE INDENT temp_time = 0 NEW_LINE buffer_task = [ ] NEW_LINE while temp_time <= n : NEW_LINE INDENT if len ( task_heap ) > 0 : NEW_LINE INDENT task = task_heap [ 0 ] NEW_LINE if task . freq > 1 : NEW_LINE INDENT task . freq -= 1 NEW_LINE buffer_task . append ( task ) NEW_LINE DEDENT heappop ( task_heap ) NEW_LINE DEDENT time += 1 NEW_LINE if len ( task_heap ) == 0 and len ( buffer_task ) == 0 : NEW_LINE INDENT break NEW_LINE DEDENT temp_time += 1 NEW_LINE DEDENT for task in buffer_task : NEW_LINE INDENT heappush ( task_heap , task ) NEW_LINE DEDENT DEDENT return time NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks , n ) : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT freq = collections . defaultdict ( int ) NEW_LINE for char in tasks : NEW_LINE INDENT freq [ char ] += 1 NEW_LINE DEDENT heap = [ ] NEW_LINE for key , value in freq . items ( ) : NEW_LINE INDENT heapq . heappush ( heap , ( - value , key ) ) NEW_LINE DEDENT cooldown = collections . deque ( ) NEW_LINE result = [ ] NEW_LINE length = 0 NEW_LINE while len ( heap ) > 0 or len ( cooldown ) > 0 : NEW_LINE INDENT if len ( cooldown ) > 0 and ( length - cooldown [ 0 ] [ 0 ] ) > n : NEW_LINE INDENT cooldownLength , cooldownCount , cooldownElement = cooldown . popleft ( ) NEW_LINE if cooldownCount > 0 : NEW_LINE INDENT heapq . heappush ( heap , ( - ( cooldownCount ) , cooldownElement ) ) NEW_LINE DEDENT DEDENT if len ( heap ) > 0 : NEW_LINE INDENT count , element = heapq . heappop ( heap ) NEW_LINE count *= - 1 NEW_LINE if count > 1 : NEW_LINE INDENT cooldown . append ( ( length , count - 1 , element ) ) NEW_LINE DEDENT result . append ( element ) NEW_LINE DEDENT else : NEW_LINE INDENT result . append ( '#' ) NEW_LINE DEDENT length += 1 NEW_LINE DEDENT return len ( result ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT elif tasks == [ ] : NEW_LINE INDENT return 0 NEW_LINE DEDENT m = { } NEW_LINE for elem in tasks : NEW_LINE INDENT if elem in m : NEW_LINE INDENT m [ elem ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT m [ elem ] = 1 NEW_LINE DEDENT DEDENT availableheap = [ ] NEW_LINE for key in m : NEW_LINE INDENT heapq . heappush ( availableheap , ( - 1 * m [ key ] , key ) ) NEW_LINE DEDENT unavailableheap = [ ] NEW_LINE currentTime = 0 NEW_LINE while len ( availableheap ) > 0 or len ( unavailableheap ) > 0 : NEW_LINE INDENT while len ( unavailableheap ) > 0 and unavailableheap [ 0 ] [ 0 ] <= currentTime : NEW_LINE INDENT x = heapq . heappop ( unavailableheap ) NEW_LINE heapq . heappush ( availableheap , ( x [ 1 ] , x [ 2 ] ) ) NEW_LINE DEDENT if len ( availableheap ) == 0 : NEW_LINE INDENT currentTime += 1 NEW_LINE continue NEW_LINE DEDENT curr = heapq . heappop ( availableheap ) NEW_LINE if curr [ 0 ] * - 1 > 1 : NEW_LINE INDENT heapq . heappush ( unavailableheap , ( currentTime + n + 1 , curr [ 0 ] + 1 , curr [ 1 ] ) ) NEW_LINE DEDENT currentTime += 1 NEW_LINE DEDENT return currentTime NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT elif tasks == [ ] : NEW_LINE INDENT return 0 NEW_LINE DEDENT m = { } NEW_LINE for elem in tasks : NEW_LINE INDENT if elem in m : NEW_LINE INDENT m [ elem ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT m [ elem ] = 1 NEW_LINE DEDENT DEDENT availableheap = [ ] NEW_LINE for key in m : NEW_LINE INDENT heapq . heappush ( availableheap , ( - 1 * m [ key ] , key ) ) NEW_LINE DEDENT unavailableheap = [ ] NEW_LINE currentTime = 0 NEW_LINE while len ( availableheap ) > 0 or len ( unavailableheap ) > 0 : NEW_LINE INDENT while len ( unavailableheap ) > 0 and unavailableheap [ 0 ] [ 0 ] <= currentTime : NEW_LINE INDENT x = heapq . heappop ( unavailableheap ) NEW_LINE heapq . heappush ( availableheap , ( x [ 1 ] , x [ 2 ] ) ) NEW_LINE DEDENT if len ( availableheap ) == 0 : NEW_LINE INDENT currentTime += 1 NEW_LINE continue NEW_LINE DEDENT curr = heapq . heappop ( availableheap ) NEW_LINE if curr [ 0 ] * - 1 > 1 : NEW_LINE INDENT heapq . heappush ( unavailableheap , ( currentTime + n + 1 , curr [ 0 ] + 1 , curr [ 1 ] ) ) NEW_LINE DEDENT currentTime += 1 NEW_LINE DEDENT return currentTime NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT elif tasks == [ ] : NEW_LINE INDENT return 0 NEW_LINE DEDENT m = { } NEW_LINE for elem in tasks : NEW_LINE INDENT if elem in m : NEW_LINE INDENT m [ elem ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT m [ elem ] = 1 NEW_LINE DEDENT DEDENT availableheap = [ ] NEW_LINE for key in m : NEW_LINE INDENT heapq . heappush ( availableheap , ( - 1 * m [ key ] , key ) ) NEW_LINE DEDENT unavailableheap = [ ] NEW_LINE currentTime = 0 NEW_LINE while len ( availableheap ) > 0 or len ( unavailableheap ) > 0 : NEW_LINE INDENT while len ( unavailableheap ) > 0 and unavailableheap [ 0 ] [ 0 ] <= currentTime : NEW_LINE INDENT x = heapq . heappop ( unavailableheap ) NEW_LINE heapq . heappush ( availableheap , ( x [ 1 ] , x [ 2 ] ) ) NEW_LINE DEDENT if len ( availableheap ) == 0 : NEW_LINE INDENT currentTime += 1 NEW_LINE continue NEW_LINE DEDENT curr = heapq . heappop ( availableheap ) NEW_LINE if curr [ 0 ] * - 1 > 1 : NEW_LINE INDENT heapq . heappush ( unavailableheap , ( currentTime + n + 1 , curr [ 0 ] + 1 , curr [ 1 ] ) ) NEW_LINE DEDENT currentTime += 1 NEW_LINE DEDENT return currentTime NEW_LINE DEDENT DEDENT
import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT heap = [ 0 for i in range ( 26 ) ] NEW_LINE for i in tasks : NEW_LINE INDENT indx = ord ( i ) - 65 NEW_LINE heap [ indx ] -= 1 NEW_LINE DEDENT heapq . heapify ( heap ) NEW_LINE i = 0 NEW_LINE queue = [ ] NEW_LINE count = 0 NEW_LINE while i < len ( tasks ) : NEW_LINE INDENT count += 1 NEW_LINE if not heap : NEW_LINE INDENT queue . append ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT cur = heapq . heappop ( heap ) NEW_LINE if cur != 0 : NEW_LINE INDENT queue . append ( cur + 1 ) NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT queue . append ( 0 ) NEW_LINE DEDENT DEDENT if len ( queue ) > n : NEW_LINE INDENT heapq . heappush ( heap , queue . pop ( 0 ) ) NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT DEDENT
import bisect NEW_LINE import collections NEW_LINE def insert_into_can_run ( can_run , runnable ) : NEW_LINE INDENT insert_at = 0 NEW_LINE for can_runnable in can_run : NEW_LINE INDENT if can_runnable [ 1 ] < runnable [ 1 ] : NEW_LINE INDENT break NEW_LINE DEDENT insert_at += 1 NEW_LINE DEDENT can_run . insert ( insert_at , runnable ) NEW_LINE DEDENT class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT cant_run = [ ] NEW_LINE counts = collections . defaultdict ( int ) NEW_LINE for task in tasks : NEW_LINE INDENT counts [ task ] += 1 NEW_LINE DEDENT can_run = [ [ task , count ] for task , count in counts . items ( ) ] NEW_LINE can_run = sorted ( can_run , key = lambda x : - 1 * x [ 1 ] ) NEW_LINE counter = 1 NEW_LINE while can_run or cant_run : NEW_LINE INDENT if cant_run and cant_run [ 0 ] [ 1 ] == counter : NEW_LINE INDENT insert_into_can_run ( can_run , cant_run . pop ( 0 ) [ 0 ] ) NEW_LINE DEDENT if can_run : NEW_LINE INDENT runnable = can_run . pop ( 0 ) NEW_LINE runnable [ 1 ] -= 1 NEW_LINE if runnable [ 1 ] > 0 : NEW_LINE INDENT cant_run . append ( ( runnable , counter + n + 1 ) ) NEW_LINE DEDENT DEDENT counter += 1 NEW_LINE DEDENT return counter - 1 NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n <= 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT cnt = Counter ( tasks ) NEW_LINE L = [ ( - cnt [ task ] , task ) for task in cnt ] NEW_LINE heapq . heapify ( L ) NEW_LINE t = 0 NEW_LINE res = "" NEW_LINE finished = 0 NEW_LINE cooldown = [ ] NEW_LINE while finished < len ( tasks ) : NEW_LINE INDENT t += 1 NEW_LINE if len ( L ) == 0 : NEW_LINE INDENT res += "i" NEW_LINE DEDENT else : NEW_LINE INDENT freq , task = heapq . heappop ( L ) NEW_LINE res += task NEW_LINE finished += 1 NEW_LINE freq += 1 NEW_LINE if freq < 0 : NEW_LINE INDENT heapq . heappush ( cooldown , ( t , freq , task ) ) NEW_LINE DEDENT DEDENT while len ( cooldown ) > 0 and cooldown [ 0 ] [ 0 ] + n < t + 1 : NEW_LINE INDENT t_tem , freq_tem , task_tem = heapq . heappop ( cooldown ) NEW_LINE heapq . heappush ( L , ( freq_tem , task_tem ) ) NEW_LINE DEDENT DEDENT return t NEW_LINE DEDENT DEDENT
class Solution ( object ) : NEW_LINE INDENT def leastInterval ( self , tasks , n ) : NEW_LINE INDENT counts = collections . Counter ( tasks ) NEW_LINE h = [ ] NEW_LINE for i , j in counts . items ( ) : NEW_LINE INDENT heapq . heappush ( h , ( - j , i ) ) NEW_LINE DEDENT t_u = 0 NEW_LINE while h : NEW_LINE INDENT add_back2heap = [ ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT t_u += 1 NEW_LINE if h : NEW_LINE INDENT times , val = heapq . heappop ( h ) NEW_LINE if times < - 1 : NEW_LINE INDENT add_back2heap . append ( ( times + 1 , val ) ) NEW_LINE DEDENT DEDENT if not add_back2heap and not h : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for i in add_back2heap : NEW_LINE INDENT heapq . heappush ( h , i ) NEW_LINE DEDENT DEDENT return t_u NEW_LINE DEDENT DEDENT
from collections import Counter , deque NEW_LINE import heapq NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT task_heap = [ ( - count , task ) for task , count in Counter ( tasks ) . most_common ( ) ] NEW_LINE result = 0 NEW_LINE prev_tasks = deque ( ) NEW_LINE while len ( task_heap ) > 0 or len ( prev_tasks ) > 0 : NEW_LINE INDENT if len ( prev_tasks ) > 0 : NEW_LINE INDENT neg_count , task , timestamp = prev_tasks . popleft ( ) NEW_LINE if result - timestamp > n : NEW_LINE INDENT heapq . heappush ( task_heap , ( neg_count , task ) ) NEW_LINE DEDENT else : NEW_LINE INDENT prev_tasks . appendleft ( ( neg_count , task , timestamp ) ) NEW_LINE DEDENT DEDENT if len ( task_heap ) > 0 : NEW_LINE INDENT neg_count , task = heapq . heappop ( task_heap ) NEW_LINE neg_count += 1 NEW_LINE if neg_count != 0 : NEW_LINE INDENT prev_tasks . append ( ( neg_count , task , result ) ) NEW_LINE DEDENT DEDENT result += 1 NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT counter = collections . Counter ( tasks ) NEW_LINE task_heap = [ ] NEW_LINE for task , count in counter . items ( ) : NEW_LINE INDENT task_heap . append ( ( - count , task ) ) NEW_LINE DEDENT heapq . heapify ( task_heap ) NEW_LINE deque = [ None ] * n NEW_LINE res = 0 NEW_LINE while task_heap or deque != [ None ] * n : NEW_LINE INDENT res += 1 NEW_LINE if task_heap : NEW_LINE INDENT count , task = heapq . heappop ( task_heap ) NEW_LINE if - count > 1 : NEW_LINE INDENT deque . append ( ( count + 1 , task ) ) NEW_LINE DEDENT else : NEW_LINE INDENT deque . append ( None ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT deque . append ( None ) NEW_LINE DEDENT new = deque . pop ( 0 ) NEW_LINE if new is not None : NEW_LINE INDENT heapq . heappush ( task_heap , new ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
from collections import deque NEW_LINE from heapq import * NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT q = deque ( ) NEW_LINE t_ord = [ ] NEW_LINE d = { } NEW_LINE count = 0 NEW_LINE tasks . sort ( ) NEW_LINE for x in tasks : NEW_LINE INDENT d [ x ] = d . get ( x , 0 ) + 1 NEW_LINE DEDENT for k , v in d . items ( ) : NEW_LINE INDENT heappush ( t_ord , ( - v , k ) ) NEW_LINE DEDENT while len ( t_ord ) != 0 : NEW_LINE INDENT cool_q = deque ( ) NEW_LINE c = 0 NEW_LINE while c <= n : NEW_LINE INDENT if len ( t_ord ) != 0 : NEW_LINE INDENT cnt , tsk = heappop ( t_ord ) NEW_LINE if cnt != - 1 : NEW_LINE INDENT cool_q . append ( ( cnt + 1 , tsk ) ) NEW_LINE DEDENT DEDENT count += 1 NEW_LINE if len ( t_ord ) == 0 and len ( cool_q ) == 0 : NEW_LINE INDENT break NEW_LINE DEDENT c += 1 NEW_LINE DEDENT for x in cool_q : NEW_LINE INDENT heappush ( t_ord , x ) NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT items = Counter ( tasks ) NEW_LINE h = [ ] NEW_LINE for i in items : NEW_LINE INDENT heapq . heappush ( h , ( - items [ i ] , i ) ) NEW_LINE DEDENT curr = 0 NEW_LINE while h : NEW_LINE INDENT i = 0 NEW_LINE temp = [ ] NEW_LINE while i <= n : NEW_LINE INDENT curr += 1 NEW_LINE if h : NEW_LINE INDENT x , y = heapq . heappop ( h ) NEW_LINE if x != - 1 : NEW_LINE INDENT temp . append ( ( x + 1 , y ) ) NEW_LINE DEDENT DEDENT if not h and not temp : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT while temp : NEW_LINE INDENT heapq . heappush ( h , temp . pop ( ) ) NEW_LINE DEDENT DEDENT return curr NEW_LINE DEDENT DEDENT
from collections import Counter NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n <= 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT cnt = Counter ( tasks ) NEW_LINE L = [ ( - cnt [ task ] , task ) for task in cnt ] NEW_LINE heapq . heapify ( L ) NEW_LINE t = 0 NEW_LINE res = "" NEW_LINE finished = 0 NEW_LINE cooldown = [ ] NEW_LINE while finished < len ( tasks ) : NEW_LINE INDENT t += 1 NEW_LINE if len ( L ) == 0 : NEW_LINE INDENT res += "i" NEW_LINE DEDENT else : NEW_LINE INDENT freq , task = heapq . heappop ( L ) NEW_LINE res += task NEW_LINE finished += 1 NEW_LINE freq += 1 NEW_LINE if freq < 0 : NEW_LINE INDENT heapq . heappush ( cooldown , ( t , freq , task ) ) NEW_LINE DEDENT DEDENT while len ( cooldown ) > 0 and cooldown [ 0 ] [ 0 ] + n < t + 1 : NEW_LINE INDENT t_tem , freq_tem , task_tem = heapq . heappop ( cooldown ) NEW_LINE heapq . heappush ( L , ( freq_tem , task_tem ) ) NEW_LINE DEDENT DEDENT return t NEW_LINE DEDENT DEDENT
import heapq NEW_LINE from collections import Counter , deque NEW_LINE class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT h = [ ] NEW_LINE for task , c in collections . Counter ( tasks ) . items ( ) : NEW_LINE INDENT heappush ( h , [ - c , task ] ) NEW_LINE DEDENT time = 0 NEW_LINE times = collections . deque ( [ ] ) NEW_LINE while h or times : NEW_LINE INDENT if h : NEW_LINE INDENT c , task = heappop ( h ) NEW_LINE if c != - 1 : NEW_LINE INDENT times . append ( [ time + n , c + 1 , task ] ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT task = "idle" NEW_LINE DEDENT time += 1 NEW_LINE while times and time > times [ 0 ] [ 0 ] : NEW_LINE INDENT _ , c , task = times . popleft ( ) NEW_LINE heappush ( h , [ c , task ] ) NEW_LINE DEDENT DEDENT return time NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks , n ) : NEW_LINE INDENT NEW_LINE curr_time , h = 0 , [ ] NEW_LINE for k , v in Counter ( tasks ) . items ( ) : NEW_LINE INDENT heappush ( h , ( - 1 * v , k ) ) NEW_LINE DEDENT while h : NEW_LINE INDENT i , temp = 0 , [ ] NEW_LINE while i <= n : NEW_LINE INDENT curr_time += 1 NEW_LINE if h : NEW_LINE INDENT x , y = heappop ( h ) NEW_LINE if x != - 1 : NEW_LINE INDENT temp . append ( ( x + 1 , y ) ) NEW_LINE DEDENT DEDENT if not h and not temp : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT for item in temp : NEW_LINE INDENT heappush ( h , item ) NEW_LINE DEDENT DEDENT return curr_time NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def leastInterval ( self , tasks : List [ str ] , n : int ) -> int : NEW_LINE INDENT if n <= 0 : NEW_LINE INDENT return len ( tasks ) NEW_LINE DEDENT hash_map = collections . Counter ( tasks ) NEW_LINE heap = [ ] NEW_LINE for key , freq in hash_map . items ( ) : NEW_LINE INDENT heapq . heappush ( heap , ( - freq , key ) ) NEW_LINE DEDENT idel = 0 NEW_LINE cooldown = [ ] NEW_LINE times = 0 NEW_LINE print ( heap ) NEW_LINE while heap or cooldown : NEW_LINE INDENT if heap : NEW_LINE INDENT freq , key = heapq . heappop ( heap ) NEW_LINE freq = - freq NEW_LINE freq -= 1 NEW_LINE times += 1 NEW_LINE if freq > 0 : NEW_LINE INDENT heapq . heappush ( cooldown , ( times , freq , key ) ) NEW_LINE DEDENT if cooldown : NEW_LINE INDENT pre_time , pre_freq , pre_key = heapq . heappop ( cooldown ) NEW_LINE if ( times - pre_time ) >= n : NEW_LINE INDENT heapq . heappush ( heap , ( - pre_freq , pre_key ) ) NEW_LINE DEDENT else : NEW_LINE INDENT heapq . heappush ( cooldown , ( pre_time , pre_freq , pre_key ) ) NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT times += 1 NEW_LINE pre_time , pre_freq , pre_key = heapq . heappop ( cooldown ) NEW_LINE if ( times - pre_time ) >= n : NEW_LINE INDENT heapq . heappush ( heap , ( - pre_freq , pre_key ) ) NEW_LINE DEDENT else : NEW_LINE INDENT heapq . heappush ( cooldown , ( pre_time , pre_freq , pre_key ) ) NEW_LINE DEDENT DEDENT DEDENT return times NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT N = len ( nums ) NEW_LINE P = [ 0 ] NEW_LINE for num in nums : NEW_LINE INDENT P . append ( P [ - 1 ] + num ) NEW_LINE DEDENT dp = [ [ 0 , [ ] ] for _ in range ( N + 1 ) ] NEW_LINE for i in range ( 3 ) : NEW_LINE INDENT maxksum , max_idx = 0 , [ ] NEW_LINE dp2 = [ [ 0 , [ ] ] for _ in range ( N + 1 ) ] NEW_LINE for j in range ( i * k , N + 1 - ( 2 - i ) * k ) : NEW_LINE INDENT curr = P [ j ] - P [ j - k ] + dp [ j - k ] [ 0 ] NEW_LINE if curr > maxksum : NEW_LINE INDENT maxksum = curr NEW_LINE max_idx = dp [ j - k ] [ 1 ] + [ j - k ] NEW_LINE DEDENT dp2 [ j ] = [ maxksum , max_idx ] NEW_LINE DEDENT dp = dp2 NEW_LINE if i == 2 : NEW_LINE INDENT return max_idx NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT N = len ( nums ) NEW_LINE dp = { } NEW_LINE cum_sum = [ 0 ] * ( N + 1 ) NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT cum_sum [ i ] = cum_sum [ i - 1 ] + nums [ i - 1 ] NEW_LINE DEDENT def recurse ( i , m ) : NEW_LINE INDENT if m == 0 or i > ( N - m * k ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if ( i , m ) in dp : NEW_LINE INDENT return dp [ ( i , m ) ] NEW_LINE DEDENT choice_a = [ i ] + recurse ( i + k , m - 1 ) NEW_LINE choice_b = recurse ( i + 1 , m ) NEW_LINE ans = 0 NEW_LINE if len ( choice_a ) == m and len ( choice_b ) == m : NEW_LINE INDENT sum_a = sum_b = 0 NEW_LINE for index in choice_a : NEW_LINE INDENT sum_a += cum_sum [ index + k ] - cum_sum [ index ] NEW_LINE DEDENT for index in choice_b : NEW_LINE INDENT sum_b += cum_sum [ index + k ] - cum_sum [ index ] NEW_LINE DEDENT if sum_a >= sum_b : NEW_LINE INDENT ans = choice_a NEW_LINE DEDENT else : NEW_LINE INDENT ans = choice_b NEW_LINE DEDENT DEDENT elif len ( choice_a ) == m : NEW_LINE INDENT ans = choice_a NEW_LINE DEDENT elif len ( choice_b ) == m : NEW_LINE INDENT ans = choice_b NEW_LINE DEDENT dp [ ( i , m ) ] = ans NEW_LINE return ans NEW_LINE DEDENT return recurse ( 0 , 3 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE S = [ ] NEW_LINE s = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT s += nums [ i ] NEW_LINE if i >= k : NEW_LINE INDENT s -= nums [ i - k ] NEW_LINE DEDENT if i >= k - 1 : NEW_LINE INDENT S += [ s ] NEW_LINE DEDENT DEDENT T = [ [ 0 , [ ] ] for _ in range ( n + 1 ) ] NEW_LINE AT = [ [ 0 , [ ] ] for _ in range ( n + 1 ) ] NEW_LINE for t in 1 , 2 , 3 : NEW_LINE INDENT for i in range ( n - t * k + 1 ) : NEW_LINE INDENT T [ i ] = [ S [ i ] + AT [ i + k ] [ 0 ] , [ i ] + AT [ i + k ] [ 1 ] ] NEW_LINE DEDENT b = T [ n - t * k ] NEW_LINE for i in reversed ( range ( n - t * k + 1 ) ) : NEW_LINE INDENT if T [ i ] [ 0 ] >= b [ 0 ] : NEW_LINE INDENT b = T [ i ] NEW_LINE DEDENT AT [ i ] = b NEW_LINE DEDENT DEDENT return AT [ 0 ] [ 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT NEW_LINE prefix_sum = [ 0 ] + list ( accumulate ( nums ) ) NEW_LINE @ functools . lru_cache ( None ) NEW_LINE def search ( left , num_sub ) : NEW_LINE INDENT if num_sub == 0 or left > len ( nums ) - k : NEW_LINE INDENT return 0 , [ ] NEW_LINE DEDENT num_curr = prefix_sum [ left + k ] - prefix_sum [ left ] NEW_LINE sum1 , subs1 = search ( left + 1 , num_sub ) NEW_LINE sum2 , subs2 = search ( left + k , num_sub - 1 ) NEW_LINE if sum1 <= num_curr + sum2 : NEW_LINE INDENT return num_curr + sum2 , [ left ] + subs2 NEW_LINE DEDENT else : NEW_LINE INDENT return sum1 , subs1 NEW_LINE DEDENT DEDENT sum0 , sub0 = search ( 0 , 3 ) NEW_LINE return sub0 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT N = len ( nums ) NEW_LINE dp = { } NEW_LINE cum_sum = [ 0 ] * ( N + 1 ) NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT cum_sum [ i ] = cum_sum [ i - 1 ] + nums [ i - 1 ] NEW_LINE DEDENT def recurse ( i , m ) : NEW_LINE INDENT if m == 0 or i > ( N - m * k ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if ( i , m ) in dp : NEW_LINE INDENT return dp [ ( i , m ) ] NEW_LINE DEDENT choice_a = [ i ] + recurse ( i + k , m - 1 ) NEW_LINE choice_b = recurse ( i + 1 , m ) NEW_LINE ans = [ ] NEW_LINE if len ( choice_a ) == m and len ( choice_b ) == m : NEW_LINE INDENT sum_a = sum_b = 0 NEW_LINE for index in choice_a : NEW_LINE INDENT sum_a += cum_sum [ index + k ] - cum_sum [ index ] NEW_LINE DEDENT for index in choice_b : NEW_LINE INDENT sum_b += cum_sum [ index + k ] - cum_sum [ index ] NEW_LINE DEDENT if sum_a >= sum_b : NEW_LINE INDENT ans = choice_a NEW_LINE DEDENT else : NEW_LINE INDENT ans = choice_b NEW_LINE DEDENT DEDENT elif len ( choice_a ) == m : NEW_LINE INDENT ans = choice_a NEW_LINE DEDENT elif len ( choice_b ) == m : NEW_LINE INDENT ans = choice_b NEW_LINE DEDENT dp [ ( i , m ) ] = ans NEW_LINE return ans NEW_LINE DEDENT return recurse ( 0 , 3 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT NEW_LINE prefix_sum = [ 0 ] + list ( accumulate ( nums ) ) NEW_LINE @ functools . lru_cache ( None ) NEW_LINE def search ( left , num_sub ) : NEW_LINE INDENT if num_sub == 0 or left > len ( nums ) - k : NEW_LINE INDENT return 0 , [ ] NEW_LINE DEDENT num_curr = prefix_sum [ left + k ] - prefix_sum [ left ] NEW_LINE sum1 , subs1 = search ( left + 1 , num_sub ) NEW_LINE sum2 , subs2 = search ( left + k , num_sub - 1 ) NEW_LINE if sum1 <= num_curr + sum2 : NEW_LINE INDENT return num_curr + sum2 , [ left ] + subs2 NEW_LINE DEDENT else : NEW_LINE INDENT return sum1 , subs1 NEW_LINE DEDENT DEDENT sum0 , sub0 = search ( 0 , 3 ) NEW_LINE return sub0 NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT N = len ( nums ) NEW_LINE dp = { } NEW_LINE cum_sum = [ 0 ] * ( N + 1 ) NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT cum_sum [ i ] = cum_sum [ i - 1 ] + nums [ i - 1 ] NEW_LINE DEDENT def recurse ( i , m ) : NEW_LINE INDENT if m == 0 or i > ( N - m * k ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if ( i , m ) in dp : NEW_LINE INDENT return dp [ ( i , m ) ] NEW_LINE DEDENT choice_a = [ i ] + recurse ( i + k , m - 1 ) NEW_LINE choice_b = recurse ( i + 1 , m ) NEW_LINE ans = [ ] NEW_LINE if len ( choice_a ) == m and len ( choice_b ) == m : NEW_LINE INDENT sum_a = sum_b = 0 NEW_LINE for index in choice_a : NEW_LINE INDENT sum_a += cum_sum [ index + k ] - cum_sum [ index ] NEW_LINE DEDENT for index in choice_b : NEW_LINE INDENT sum_b += cum_sum [ index + k ] - cum_sum [ index ] NEW_LINE DEDENT if sum_a >= sum_b : NEW_LINE INDENT ans = choice_a NEW_LINE DEDENT else : NEW_LINE INDENT ans = choice_b NEW_LINE DEDENT DEDENT elif len ( choice_a ) == m : NEW_LINE INDENT ans = choice_a NEW_LINE DEDENT elif len ( choice_b ) == m : NEW_LINE INDENT ans = choice_b NEW_LINE DEDENT dp [ ( i , m ) ] = ans NEW_LINE return ans NEW_LINE DEDENT return recurse ( 0 , 3 ) NEW_LINE DEDENT DEDENT
MIN_INF = float ( '-inf' ) NEW_LINE p = 3 NEW_LINE class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE memo = [ [ None for _ in range ( p + 1 ) ] for i in range ( n ) ] NEW_LINE ksum = [ sum ( nums [ : k ] ) ] NEW_LINE for i in range ( 1 , n - k + 1 ) : NEW_LINE INDENT ksum . append ( ksum [ - 1 ] - nums [ i - 1 ] + nums [ i - 1 + k ] ) NEW_LINE DEDENT def dp ( i , m ) : NEW_LINE INDENT if m == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if i > n - k : NEW_LINE INDENT return MIN_INF NEW_LINE DEDENT if memo [ i ] [ m ] : NEW_LINE INDENT return memo [ i ] [ m ] NEW_LINE DEDENT taken = ksum [ i ] + dp ( i + k , m - 1 ) NEW_LINE not_taken = dp ( i + 1 , m ) NEW_LINE res = max ( taken , not_taken ) NEW_LINE memo [ i ] [ m ] = res NEW_LINE return res NEW_LINE DEDENT def dfs ( i , m ) : NEW_LINE INDENT if m == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if i > n - k : NEW_LINE INDENT return [ ] NEW_LINE DEDENT taken = ksum [ i ] + dp ( i + k , m - 1 ) NEW_LINE not_taken = dp ( i + 1 , m ) NEW_LINE if taken >= not_taken : NEW_LINE INDENT return [ i ] + dfs ( i + k , m - 1 ) NEW_LINE DEDENT return dfs ( i + 1 , m ) NEW_LINE DEDENT dp ( 0 , p ) NEW_LINE return dfs ( 0 , p ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT m = 3 NEW_LINE n = len ( nums ) NEW_LINE size = n + 1 - k NEW_LINE presum = [ 0 ] * size NEW_LINE for i in range ( k ) : NEW_LINE INDENT presum [ 0 ] += nums [ i ] NEW_LINE DEDENT for i in range ( 1 , n - k + 1 ) : NEW_LINE INDENT presum [ i ] += presum [ i - 1 ] + nums [ i + k - 1 ] - nums [ i - 1 ] NEW_LINE DEDENT @ lru_cache ( maxsize = None ) NEW_LINE def dp ( start , m ) : NEW_LINE INDENT if ( m == 0 ) : NEW_LINE INDENT return 0 , [ ] NEW_LINE DEDENT if ( start > size - 1 ) : NEW_LINE INDENT return 0 , [ ] NEW_LINE DEDENT mx = 0 NEW_LINE inc_max , inc_indexes = dp ( start + k , m - 1 ) NEW_LINE exc_max , exc_indexes = dp ( start + 1 , m ) NEW_LINE if exc_max > inc_max + presum [ start ] : NEW_LINE INDENT return exc_max , exc_indexes NEW_LINE DEDENT else : NEW_LINE INDENT return inc_max + presum [ start ] , [ start ] + inc_indexes NEW_LINE DEDENT DEDENT return dp ( 0 , 3 ) [ 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT N = len ( nums ) NEW_LINE P = [ 0 ] NEW_LINE for num in nums : NEW_LINE INDENT P . append ( P [ - 1 ] + num ) NEW_LINE DEDENT dp = [ [ 0 , [ ] ] for _ in range ( N + 1 ) ] NEW_LINE for i in range ( 3 ) : NEW_LINE INDENT maxk , indices = 0 , [ ] NEW_LINE dp2 = [ [ ] for _ in range ( N + 1 ) ] NEW_LINE for j in range ( i * k , N + 1 - ( 2 - i ) * k ) : NEW_LINE INDENT curr = P [ j ] - P [ j - k ] + dp [ j - k ] [ 0 ] NEW_LINE idx = dp [ j - k ] [ 1 ] + [ j - k ] NEW_LINE if curr > maxk : NEW_LINE INDENT maxk , indices = curr , idx NEW_LINE DEDENT dp2 [ j ] = [ maxk , indices ] NEW_LINE DEDENT dp = dp2 NEW_LINE if i == 2 : NEW_LINE INDENT return indices NEW_LINE DEDENT DEDENT DEDENT DEDENT
from functools import lru_cache NEW_LINE class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT dp = [ sum ( nums [ : k ] ) ] NEW_LINE for i in range ( k , len ( nums ) ) : NEW_LINE INDENT dp . append ( dp [ - 1 ] + nums [ i ] - nums [ i - k ] ) NEW_LINE DEDENT @ lru_cache ( None ) NEW_LINE def search ( idx , used ) : NEW_LINE INDENT if idx >= len ( dp ) or used == 3 : NEW_LINE INDENT return 0 , [ ] NEW_LINE DEDENT take_curr_sum , take_curr_idxs = search ( idx + k , used + 1 ) NEW_LINE skip_curr_sum , skip_curr_idxs = search ( idx + 1 , used ) NEW_LINE take_curr_sum += dp [ idx ] NEW_LINE if take_curr_sum >= skip_curr_sum : NEW_LINE INDENT return take_curr_sum , [ idx ] + take_curr_idxs NEW_LINE DEDENT else : NEW_LINE INDENT return skip_curr_sum , skip_curr_idxs NEW_LINE DEDENT DEDENT _ , result = search ( 0 , 0 ) NEW_LINE return result NEW_LINE DEDENT DEDENT
from functools import lru_cache NEW_LINE class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , K : int ) -> List [ int ] : NEW_LINE INDENT prefix = [ 0 ] + nums NEW_LINE for i in range ( 1 , len ( prefix ) ) : NEW_LINE INDENT prefix [ i ] += prefix [ i - 1 ] NEW_LINE DEDENT @ lru_cache ( None ) NEW_LINE def dfs ( idx , t ) : NEW_LINE INDENT cur , pos = 0 , [ ] NEW_LINE if t > 0 : NEW_LINE INDENT cur , pos = dfs ( idx - K , t - 1 ) NEW_LINE cur += prefix [ idx + 1 ] - prefix [ idx - K + 1 ] NEW_LINE pos += [ idx + 1 - K ] NEW_LINE if idx + 1 > t * K : NEW_LINE INDENT cur_ , pos_ = dfs ( idx - 1 , t ) NEW_LINE if cur_ > cur or ( cur_ == cur and tuple ( pos_ ) < tuple ( pos ) ) : NEW_LINE INDENT cur , pos = cur_ , pos_ NEW_LINE DEDENT DEDENT DEDENT return cur , pos . copy ( ) NEW_LINE DEDENT return dfs ( len ( nums ) - 1 , 3 ) [ - 1 ] NEW_LINE DEDENT DEDENT
class Solution ( object ) : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums , k ) : NEW_LINE INDENT NEW_LINE cachedSum = { } NEW_LINE n = len ( nums ) NEW_LINE @ lru_cache ( maxsize = None ) NEW_LINE def maxStartingAtIWithJGroups ( i , j ) : NEW_LINE INDENT if j == 0 or i > n - k : NEW_LINE INDENT return ( [ ] , 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT remainingGroup , sumFromPos = maxStartingAtIWithJGroups ( i + k , j - 1 ) NEW_LINE remainingGroup_ , sumFromPos_ = maxStartingAtIWithJGroups ( i + 1 , j ) NEW_LINE if sumFromPos + cachedSum [ i ] >= sumFromPos_ : NEW_LINE INDENT return ( [ i ] + remainingGroup , sumFromPos + cachedSum [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT return ( remainingGroup_ , sumFromPos_ ) NEW_LINE DEDENT DEDENT DEDENT cachedSum [ 0 ] = sum ( nums [ : k ] ) NEW_LINE for i in range ( 1 , len ( nums ) - k + 1 ) : NEW_LINE INDENT cachedSum [ i ] = cachedSum [ i - 1 ] - nums [ i - 1 ] + nums [ k + i - 1 ] NEW_LINE DEDENT return maxStartingAtIWithJGroups ( 0 , 3 ) [ 0 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT helper = [ [ None for i in range ( len ( nums ) ) ] for j in range ( 3 ) ] NEW_LINE sum_arr = [ None for i in range ( len ( nums ) - k + 1 ) ] NEW_LINE cur_sum = sum ( nums [ : k ] ) NEW_LINE ind = k NEW_LINE sum_arr [ 0 ] = cur_sum NEW_LINE while ind < len ( nums ) : NEW_LINE INDENT cur_sum += nums [ ind ] - nums [ ind - k ] NEW_LINE sum_arr [ ind - k + 1 ] = cur_sum NEW_LINE ind += 1 NEW_LINE DEDENT for i in range ( 3 ) : NEW_LINE INDENT for j in range ( i * k , len ( nums ) - ( 3 - i ) * k + 1 ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT helper [ i ] [ j ] = [ j , sum_arr [ j ] ] NEW_LINE DEDENT else : NEW_LINE INDENT closest_last = helper [ i - 1 ] [ j - k ] NEW_LINE if j == i * k : NEW_LINE INDENT helper [ i ] [ j ] = closest_last [ : - 1 ] + [ j , closest_last [ - 1 ] + sum_arr [ j ] ] NEW_LINE DEDENT else : NEW_LINE INDENT if helper [ i ] [ j - 1 ] [ - 1 ] - sum_arr [ j - 1 ] + sum_arr [ j ] >= closest_last [ - 1 ] + sum_arr [ j ] : NEW_LINE INDENT helper [ i ] [ j ] = helper [ i ] [ j - 1 ] [ : - 2 ] + [ j , helper [ i ] [ j - 1 ] [ - 1 ] - sum_arr [ j - 1 ] + sum_arr [ j ] ] NEW_LINE DEDENT else : NEW_LINE INDENT helper [ i ] [ j ] = closest_last [ : - 1 ] + [ j , closest_last [ - 1 ] + sum_arr [ j ] ] NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT max_sum = 0 NEW_LINE ind = None NEW_LINE for i in range ( len ( helper [ 0 ] ) ) : NEW_LINE INDENT if helper [ 2 ] [ i ] != None : NEW_LINE INDENT if ind == None or helper [ 2 ] [ i ] [ - 1 ] > max_sum : NEW_LINE INDENT ind = helper [ 2 ] [ i ] [ : - 1 ] NEW_LINE max_sum = helper [ 2 ] [ i ] [ - 1 ] NEW_LINE DEDENT DEDENT DEDENT return ind NEW_LINE DEDENT DEDENT
class Solution ( object ) : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums , k ) : NEW_LINE INDENT NEW_LINE cachedSum = { } NEW_LINE n = len ( nums ) NEW_LINE @ lru_cache ( maxsize = None ) NEW_LINE def maxStartingAtIWithJGroups ( i , j ) : NEW_LINE INDENT if j == 0 or i > n - k : NEW_LINE INDENT return ( [ ] , 0 ) NEW_LINE DEDENT elif i == n - k : NEW_LINE INDENT return ( [ n - k ] , cachedSum [ n - k ] ) NEW_LINE DEDENT else : NEW_LINE INDENT remainingGroup , sumFromPos = maxStartingAtIWithJGroups ( i + k , j - 1 ) NEW_LINE remainingGroup_ , sumFromPos_ = maxStartingAtIWithJGroups ( i + 1 , j ) NEW_LINE if sumFromPos + cachedSum [ i ] >= sumFromPos_ : NEW_LINE INDENT return ( [ i ] + remainingGroup , sumFromPos + cachedSum [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT return ( remainingGroup_ , sumFromPos_ ) NEW_LINE DEDENT DEDENT DEDENT cachedSum [ 0 ] = sum ( nums [ : k ] ) NEW_LINE for i in range ( 1 , len ( nums ) - k + 1 ) : NEW_LINE INDENT cachedSum [ i ] = cachedSum [ i - 1 ] - nums [ i - 1 ] + nums [ k + i - 1 ] NEW_LINE DEDENT return maxStartingAtIWithJGroups ( 0 , 3 ) [ 0 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT cumsum = [ 0 ] NEW_LINE sum = 0 NEW_LINE for ele in nums : NEW_LINE INDENT sum += ele NEW_LINE cumsum . append ( sum ) NEW_LINE DEDENT def get_range_sum ( i , j ) : NEW_LINE INDENT return cumsum [ j + 1 ] - cumsum [ i ] NEW_LINE DEDENT N = len ( nums ) NEW_LINE def dfs ( i , m , cache ) : NEW_LINE INDENT if m == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT elif N - i < m * k : NEW_LINE INDENT return [ ] NEW_LINE DEDENT elif ( i , m ) in cache : NEW_LINE INDENT return cache [ ( i , m ) ] NEW_LINE DEDENT choice_a = [ i ] + dfs ( i + k , m - 1 , cache ) NEW_LINE choice_b = dfs ( i + 1 , m , cache ) NEW_LINE if len ( choice_a ) == m and len ( choice_b ) == m : NEW_LINE INDENT a_sum = 0 NEW_LINE b_sum = 0 NEW_LINE for idx in choice_a : NEW_LINE INDENT a_sum += get_range_sum ( idx , idx + k - 1 ) NEW_LINE DEDENT for idx in choice_b : NEW_LINE INDENT b_sum += get_range_sum ( idx , idx + k - 1 ) NEW_LINE DEDENT if a_sum >= b_sum : NEW_LINE INDENT ans = choice_a NEW_LINE DEDENT else : NEW_LINE INDENT ans = choice_b NEW_LINE DEDENT DEDENT elif len ( choice_a ) == m : NEW_LINE INDENT ans = choice_a NEW_LINE DEDENT elif len ( choice_b ) == m : NEW_LINE INDENT ans = choice_b NEW_LINE DEDENT else : NEW_LINE INDENT ans = [ ] NEW_LINE DEDENT cache [ ( i , m ) ] = ans NEW_LINE return ans NEW_LINE DEDENT ans = dfs ( 0 , 3 , { } ) NEW_LINE return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT N = len ( nums ) NEW_LINE cumsum = [ 0 ] * ( N + 1 ) NEW_LINE for j in range ( 1 , N + 1 ) : NEW_LINE INDENT cumsum [ j ] = cumsum [ j - 1 ] + nums [ j - 1 ] NEW_LINE DEDENT def dfs ( i , m , cache ) : NEW_LINE INDENT if m == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if i > N - k * m : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if ( i , m ) in cache : NEW_LINE INDENT return cache [ ( i , m ) ] NEW_LINE DEDENT choice_a = [ i ] + dfs ( i + k , m - 1 , cache ) NEW_LINE choice_b = dfs ( i + 1 , m , cache ) NEW_LINE if len ( choice_a ) == m and len ( choice_b ) == m : NEW_LINE INDENT a_sum , b_sum = 0 , 0 NEW_LINE for idx in choice_a : NEW_LINE INDENT a_sum += cumsum [ idx + k ] - cumsum [ idx ] NEW_LINE DEDENT for idx in choice_b : NEW_LINE INDENT b_sum += cumsum [ idx + k ] - cumsum [ idx ] NEW_LINE DEDENT if a_sum >= b_sum : NEW_LINE INDENT ans = choice_a NEW_LINE DEDENT else : NEW_LINE INDENT ans = choice_b NEW_LINE DEDENT DEDENT elif len ( choice_a ) == m : NEW_LINE INDENT ans = choice_a NEW_LINE DEDENT elif len ( choice_b ) == m : NEW_LINE INDENT ans = choice_b NEW_LINE DEDENT else : NEW_LINE INDENT ans = [ ] NEW_LINE DEDENT cache [ ( i , m ) ] = ans NEW_LINE return ans NEW_LINE DEDENT ans = dfs ( 0 , 3 , { } ) NEW_LINE return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT sums = [ 0 ] * ( len ( nums ) + 1 ) NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT sums [ i + 1 ] = sums [ i ] + nums [ i ] NEW_LINE DEDENT dp = { } NEW_LINE def dpf ( sp , m ) -> list : NEW_LINE INDENT if ( m <= 0 or sp + k >= len ( sums ) ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if ( ( sp , m ) in dp ) : NEW_LINE INDENT return dp [ ( sp , m ) ] NEW_LINE DEDENT case1 = [ sp ] + dpf ( sp + k , m - 1 ) NEW_LINE case2 = dpf ( sp + 1 , m ) NEW_LINE if ( len ( case1 ) == m and len ( case2 ) == m ) : NEW_LINE INDENT sum1 = 0 NEW_LINE sum2 = 0 NEW_LINE for o in case1 : NEW_LINE INDENT sum1 += sums [ o + k ] - sums [ o ] NEW_LINE DEDENT for o in case2 : NEW_LINE INDENT sum2 += sums [ o + k ] - sums [ o ] NEW_LINE DEDENT ans = case2 if ( sum2 > sum1 ) else case1 NEW_LINE DEDENT elif ( len ( case1 ) == m ) : NEW_LINE INDENT ans = case1 NEW_LINE DEDENT elif ( len ( case2 ) == m ) : NEW_LINE INDENT ans = case2 NEW_LINE DEDENT else : NEW_LINE INDENT ans = [ ] NEW_LINE DEDENT dp [ ( sp , m ) ] = ans NEW_LINE return ans NEW_LINE DEDENT return dpf ( 0 , 3 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT helper = [ [ None for i in range ( len ( nums ) ) ] for j in range ( 3 ) ] NEW_LINE max_sum = 0 NEW_LINE ind = None NEW_LINE for i in range ( 3 ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT for j in range ( len ( nums ) - k + 1 ) : NEW_LINE INDENT if j == 0 : NEW_LINE INDENT helper [ i ] [ j ] = [ j , sum ( nums [ : k ] ) ] NEW_LINE DEDENT else : NEW_LINE INDENT helper [ i ] [ j ] = [ j , helper [ i ] [ j - 1 ] [ - 1 ] - nums [ j - 1 ] + nums [ j + k - 1 ] ] NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT for j in range ( i * k , len ( nums ) - ( 3 - i ) * k + 1 ) : NEW_LINE INDENT closest_last = helper [ i - 1 ] [ j - k ] NEW_LINE if j == i * k : NEW_LINE INDENT helper [ i ] [ j ] = closest_last [ : - 1 ] + [ j , closest_last [ - 1 ] + helper [ 0 ] [ j ] [ - 1 ] ] NEW_LINE DEDENT else : NEW_LINE INDENT if helper [ i ] [ j - 1 ] [ - 1 ] - helper [ 0 ] [ j - 1 ] [ - 1 ] >= closest_last [ - 1 ] : NEW_LINE INDENT helper [ i ] [ j ] = helper [ i ] [ j - 1 ] [ : - 2 ] + [ j , helper [ i ] [ j - 1 ] [ - 1 ] - helper [ 0 ] [ j - 1 ] [ - 1 ] + helper [ 0 ] [ j ] [ - 1 ] ] NEW_LINE DEDENT else : NEW_LINE INDENT helper [ i ] [ j ] = closest_last [ : - 1 ] + [ j , closest_last [ - 1 ] + helper [ 0 ] [ j ] [ - 1 ] ] NEW_LINE DEDENT DEDENT if i == 2 : NEW_LINE INDENT if ind == None or helper [ 2 ] [ j ] [ - 1 ] > max_sum : NEW_LINE INDENT ind = helper [ 2 ] [ j ] [ : - 1 ] NEW_LINE max_sum = helper [ 2 ] [ j ] [ - 1 ] NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return ind NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT last = 0 NEW_LINE sums = [ sum ( nums [ : k ] ) ] NEW_LINE for i in range ( k , len ( nums ) ) : NEW_LINE INDENT sums . append ( sums [ - 1 ] + nums [ i ] - nums [ i - k ] ) NEW_LINE DEDENT @ lru_cache ( None ) NEW_LINE def mst ( start , n ) : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return 0 , [ ] NEW_LINE DEDENT if start >= len ( sums ) : NEW_LINE INDENT return - inf , [ ] NEW_LINE DEDENT cb , ci = mst ( start + k , n - 1 ) NEW_LINE cb += sums [ start ] NEW_LINE ci = [ start ] + ci NEW_LINE nb , ni = mst ( start + 1 , n ) NEW_LINE return ( cb , ci ) if cb >= nb else ( nb , ni ) NEW_LINE DEDENT cb , ci = mst ( 0 , 3 ) NEW_LINE print ( cb ) NEW_LINE return ci NEW_LINE DEDENT DEDENT
MIN = - 1 NEW_LINE class Solution : NEW_LINE INDENT def compute_k_sum ( self ) : NEW_LINE INDENT self . k_sum = [ sum ( self . nums [ : self . k ] ) ] NEW_LINE for i in range ( 1 , len ( self . nums ) - self . k + 1 ) : NEW_LINE INDENT j = i - 1 NEW_LINE self . k_sum . append ( self . k_sum [ - 1 ] - self . nums [ j ] + self . nums [ j + self . k ] ) NEW_LINE DEDENT DEDENT def get ( self , i , n ) : NEW_LINE INDENT assert n <= 3 NEW_LINE if n == 0 : NEW_LINE INDENT return 0 , None NEW_LINE DEDENT min_len = i + n * self . k NEW_LINE if min_len > len ( self . nums ) : NEW_LINE INDENT return MIN , None NEW_LINE DEDENT if min_len == len ( self . nums ) : NEW_LINE INDENT return sum ( self . k_sum [ i + j * self . k ] for j in range ( n ) ) , i NEW_LINE DEDENT try : NEW_LINE INDENT return self . cache [ ( i , n ) ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT take_i_sum = self . k_sum [ i ] + self . get ( i + self . k , n - 1 ) [ 0 ] NEW_LINE skip_i_res = self . get ( i + 1 , n ) NEW_LINE if take_i_sum >= skip_i_res [ 0 ] : NEW_LINE INDENT ret = take_i_sum , i NEW_LINE DEDENT else : NEW_LINE INDENT ret = skip_i_res NEW_LINE DEDENT self . cache [ ( i , n ) ] = ret NEW_LINE return ret NEW_LINE DEDENT DEDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT self . nums = nums NEW_LINE self . k = k NEW_LINE self . compute_k_sum ( ) NEW_LINE self . cache = { } NEW_LINE for n in range ( 1 , 3 + 1 ) : NEW_LINE INDENT ub = len ( nums ) - n * k NEW_LINE for i in range ( ub , - 1 , - 1 ) : NEW_LINE INDENT self . get ( i , n ) NEW_LINE DEDENT DEDENT vis = 0 NEW_LINE ret = [ ] NEW_LINE for i in range ( 3 , 0 , - 1 ) : NEW_LINE INDENT _ , j = self . get ( vis , i ) NEW_LINE ret . append ( j ) NEW_LINE vis = j + k NEW_LINE DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE dp = [ [ 0 for i in range ( 3 ) ] for j in range ( n + 1 ) ] NEW_LINE dp_pick = [ [ 0 for i in range ( 3 ) ] for j in range ( n + 1 ) ] NEW_LINE dp_index = [ [ [ ] for i in range ( 3 ) ] for j in range ( n + 1 ) ] NEW_LINE curr = 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT curr = curr + nums [ i ] NEW_LINE DEDENT sum_k = [ 0 for i in range ( n ) ] NEW_LINE sum_k [ k - 1 ] = curr NEW_LINE for i in range ( k , n ) : NEW_LINE INDENT curr = curr + nums [ i ] NEW_LINE curr = curr - nums [ i - k ] NEW_LINE sum_k [ i ] = curr NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 3 ) : NEW_LINE INDENT if ( i < k ) : NEW_LINE INDENT continue NEW_LINE DEDENT if ( j == 0 ) : NEW_LINE INDENT dp_pick [ i ] [ j ] = sum_k [ i - 1 ] NEW_LINE if ( dp [ i - 1 ] [ j ] >= dp_pick [ i ] [ j ] ) : NEW_LINE INDENT dp_index [ i ] [ j ] = dp_index [ i - 1 ] [ j ] NEW_LINE DEDENT else : NEW_LINE INDENT dp_index [ i ] [ j ] = [ i - k ] NEW_LINE DEDENT dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp_pick [ i ] [ j ] ) NEW_LINE DEDENT else : NEW_LINE INDENT if ( dp [ i - k ] [ j - 1 ] == 0 ) : NEW_LINE INDENT dp_pick [ i ] [ j ] = 0 NEW_LINE DEDENT else : NEW_LINE INDENT dp_pick [ i ] [ j ] = dp [ i - k ] [ j - 1 ] + sum_k [ i - 1 ] NEW_LINE DEDENT if ( dp [ i - 1 ] [ j ] >= dp_pick [ i ] [ j ] ) : NEW_LINE INDENT dp_index [ i ] [ j ] = dp_index [ i - 1 ] [ j ] NEW_LINE DEDENT else : NEW_LINE INDENT dp_index [ i ] [ j ] = dp_index [ i - k ] [ j - 1 ] + [ i - k ] NEW_LINE DEDENT dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp_pick [ i ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT return dp_index [ n ] [ 2 ] NEW_LINE DEDENT DEDENT
MIN = - 1 NEW_LINE class Solution : NEW_LINE INDENT def compute_k_sum ( self ) : NEW_LINE INDENT self . k_sum = [ sum ( self . nums [ : self . k ] ) ] NEW_LINE for i in range ( 1 , len ( self . nums ) - self . k + 1 ) : NEW_LINE INDENT j = i - 1 NEW_LINE self . k_sum . append ( self . k_sum [ - 1 ] - self . nums [ j ] + self . nums [ j + self . k ] ) NEW_LINE DEDENT DEDENT def get ( self , i , n ) : NEW_LINE INDENT assert n <= 3 NEW_LINE if n == 0 : NEW_LINE INDENT return 0 , None NEW_LINE DEDENT min_len = i + n * self . k NEW_LINE assert min_len <= len ( self . nums ) NEW_LINE if min_len == len ( self . nums ) : NEW_LINE INDENT return sum ( self . k_sum [ i + j * self . k ] for j in range ( n ) ) , i NEW_LINE DEDENT try : NEW_LINE INDENT return self . cache [ ( i , n ) ] NEW_LINE DEDENT except KeyError : NEW_LINE INDENT take_i_sum = self . k_sum [ i ] + self . get ( i + self . k , n - 1 ) [ 0 ] NEW_LINE skip_i_res = self . get ( i + 1 , n ) NEW_LINE if take_i_sum >= skip_i_res [ 0 ] : NEW_LINE INDENT ret = take_i_sum , i NEW_LINE DEDENT else : NEW_LINE INDENT ret = skip_i_res NEW_LINE DEDENT self . cache [ ( i , n ) ] = ret NEW_LINE return ret NEW_LINE DEDENT DEDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT self . nums = nums NEW_LINE self . k = k NEW_LINE self . compute_k_sum ( ) NEW_LINE self . cache = { } NEW_LINE for n in range ( 1 , 3 + 1 ) : NEW_LINE INDENT ub = len ( nums ) - n * k - 1 NEW_LINE for i in range ( ub , - 1 , - 1 ) : NEW_LINE INDENT self . get ( i , n ) NEW_LINE DEDENT DEDENT vis = 0 NEW_LINE ret = [ ] NEW_LINE for i in range ( 3 , 0 , - 1 ) : NEW_LINE INDENT _ , j = self . get ( vis , i ) NEW_LINE ret . append ( j ) NEW_LINE vis = j + k NEW_LINE DEDENT return ret NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT def bruteforce ( ) : NEW_LINE INDENT memo = { } NEW_LINE def populate_memo ( p ) : NEW_LINE INDENT maxsum = 0 NEW_LINE maxidx = - 1 NEW_LINE left = 0 NEW_LINE csum = 0 NEW_LINE for right in range ( len ( nums ) ) : NEW_LINE INDENT csum += nums [ right ] NEW_LINE if right + 1 < p : NEW_LINE INDENT continue NEW_LINE DEDENT if right + 1 - left == p : NEW_LINE INDENT memo [ left ] = csum NEW_LINE csum -= nums [ left ] NEW_LINE left += 1 NEW_LINE DEDENT DEDENT DEDENT populate_memo ( k ) NEW_LINE from functools import lru_cache NEW_LINE @ lru_cache ( None ) NEW_LINE def find1max ( p , lo , hi ) : NEW_LINE INDENT NEW_LINE maxsum , maxidx = 0 , - 1 NEW_LINE for j in range ( lo , hi + 1 ) : NEW_LINE INDENT if j in memo and maxsum < memo [ j ] : NEW_LINE INDENT maxsum , maxidx = memo [ j ] , j NEW_LINE DEDENT DEDENT return maxsum , maxidx NEW_LINE DEDENT from functools import lru_cache NEW_LINE @ lru_cache ( None ) NEW_LINE def find2max ( p , lo , hi ) : NEW_LINE INDENT maxsum = 0 NEW_LINE result = None NEW_LINE for j in range ( lo , hi + 1 ) : NEW_LINE INDENT if j in memo : NEW_LINE INDENT nsum , nidx = find1max ( p , j + p , hi ) NEW_LINE if maxsum < memo [ j ] + nsum and nidx != - 1 : NEW_LINE INDENT maxsum = memo [ j ] + nsum NEW_LINE result = ( maxsum , j , nidx ) NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT from functools import lru_cache NEW_LINE @ lru_cache ( None ) NEW_LINE def find3max ( p , lo , hi ) : NEW_LINE INDENT NEW_LINE maxsum = 0 NEW_LINE result = None NEW_LINE for j in range ( lo , hi + 1 ) : NEW_LINE INDENT if j in memo : NEW_LINE INDENT resp2max = find2max ( p , j + p , hi ) NEW_LINE if not resp2max : NEW_LINE INDENT break NEW_LINE DEDENT tsum , oidx , tidx = resp2max NEW_LINE if maxsum < memo [ j ] + tsum and tidx != - 1 : NEW_LINE INDENT maxsum = memo [ j ] + tsum NEW_LINE result = ( maxsum , j , oidx , tidx ) NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT if not nums or len ( nums ) < 3 * k : NEW_LINE INDENT return [ ] NEW_LINE DEDENT return find3max ( k , 0 , len ( nums ) - 1 ) [ 1 : ] NEW_LINE DEDENT def another_appr ( ) : NEW_LINE INDENT NEW_LINE n = len ( nums ) NEW_LINE cumsum = [ 0 ] NEW_LINE for i in range ( k ) : NEW_LINE INDENT cumsum [ 0 ] += nums [ i ] NEW_LINE DEDENT for i in range ( k , n ) : NEW_LINE INDENT cumsum . append ( cumsum [ - 1 ] + nums [ i ] - nums [ i - k ] ) NEW_LINE DEDENT from functools import lru_cache NEW_LINE @ lru_cache ( None ) NEW_LINE def recurse ( i , m ) : NEW_LINE INDENT NEW_LINE if m == 0 or i + k > n : NEW_LINE INDENT return [ ] NEW_LINE DEDENT u = [ i ] + recurse ( i + k , m - 1 ) NEW_LINE v = recurse ( i + 1 , m ) NEW_LINE if len ( u ) == m and len ( v ) == m : NEW_LINE INDENT if sum ( cumsum [ choice ] for choice in u ) >= sum ( cumsum [ choice ] for choice in v ) : NEW_LINE INDENT return u NEW_LINE DEDENT else : NEW_LINE INDENT return v NEW_LINE DEDENT DEDENT elif len ( u ) == m : NEW_LINE INDENT return u NEW_LINE DEDENT elif len ( v ) == m : NEW_LINE INDENT return v NEW_LINE DEDENT else : NEW_LINE INDENT return [ ] NEW_LINE DEDENT DEDENT return recurse ( 0 , 3 ) NEW_LINE DEDENT return another_appr ( ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT if not nums : NEW_LINE INDENT return None NEW_LINE DEDENT n = len ( nums ) NEW_LINE if k > n // 3 : NEW_LINE INDENT return None NEW_LINE DEDENT leftMax = [ ( 0 , - 1 ) for i in range ( n ) ] NEW_LINE total = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT total += nums [ i ] NEW_LINE if i >= k - 1 : NEW_LINE INDENT if i == k - 1 : NEW_LINE INDENT leftMax [ i ] = ( total , i ) NEW_LINE DEDENT else : NEW_LINE INDENT leftMax [ i ] = max ( leftMax [ i - 1 ] , ( total , i ) , key = lambda entry : ( entry [ 0 ] , - entry [ 1 ] ) ) NEW_LINE DEDENT DEDENT if i >= k - 1 : NEW_LINE INDENT total -= nums [ i - k + 1 ] NEW_LINE DEDENT DEDENT print ( leftMax ) NEW_LINE rightMax = [ ( 0 , - 1 ) for i in range ( n ) ] NEW_LINE total = 0 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT total += nums [ i ] NEW_LINE if i <= n - k : NEW_LINE INDENT if i == n - k : NEW_LINE INDENT rightMax [ i ] = ( total , i ) NEW_LINE DEDENT else : NEW_LINE INDENT rightMax [ i ] = max ( rightMax [ i + 1 ] , ( total , i ) , key = lambda entry : ( entry [ 0 ] , - entry [ 1 ] ) ) NEW_LINE DEDENT DEDENT if i <= n - k : NEW_LINE INDENT total -= nums [ i + k - 1 ] NEW_LINE DEDENT DEDENT total = 0 NEW_LINE results = [ ] NEW_LINE maxResult = 0 NEW_LINE for i in range ( k , n - k ) : NEW_LINE INDENT total += nums [ i ] NEW_LINE if i >= 2 * k - 1 : NEW_LINE INDENT temp = total + leftMax [ i - k ] [ 0 ] + rightMax [ i + 1 ] [ 0 ] NEW_LINE if temp > maxResult : NEW_LINE INDENT maxResult = temp NEW_LINE results . clear ( ) NEW_LINE results . append ( leftMax [ i - k ] [ 1 ] - k + 1 ) NEW_LINE results . append ( i - k + 1 ) NEW_LINE results . append ( rightMax [ i + 1 ] [ 1 ] ) NEW_LINE DEDENT elif temp == maxResult : NEW_LINE INDENT results = min ( results , [ leftMax [ i - k ] [ 1 ] - k + 1 , i - k + 1 , rightMax [ i + 1 ] [ 1 ] ] ) NEW_LINE DEDENT DEDENT if i >= 2 * k - 1 : NEW_LINE INDENT total -= nums [ i - k + 1 ] NEW_LINE DEDENT DEDENT return results NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE pref = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT pref [ i + 1 ] = pref [ i ] + nums [ i ] NEW_LINE DEDENT dp = [ [ ( 0 , [ ] ) for i in range ( 4 ) ] for i in range ( n ) ] NEW_LINE dp [ k - 1 ] [ 1 ] = ( pref [ k ] - pref [ 0 ] , [ 0 ] ) NEW_LINE for i in range ( k , n ) : NEW_LINE INDENT for j in range ( 1 , 4 ) : NEW_LINE INDENT if i + 1 - j * k >= 0 : NEW_LINE INDENT k_behind = dp [ i - k ] [ j - 1 ] [ 0 ] + pref [ i + 1 ] - pref [ i - k + 1 ] NEW_LINE if dp [ i - 1 ] [ j ] [ 0 ] >= k_behind : NEW_LINE INDENT res = dp [ i - 1 ] [ j ] [ 1 ] [ : : ] NEW_LINE dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] [ 0 ] , res ) NEW_LINE DEDENT else : NEW_LINE INDENT res = dp [ i - k ] [ j - 1 ] [ 1 ] [ : : ] NEW_LINE res . append ( i - k + 1 ) NEW_LINE dp [ i ] [ j ] = ( k_behind , res ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT return dp [ - 1 ] [ - 1 ] [ 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE prefix_sums = [ 0 ] NEW_LINE for num in nums : NEW_LINE INDENT prefix_sums . append ( prefix_sums [ - 1 ] + num ) NEW_LINE DEDENT @ lru_cache ( None ) NEW_LINE def find ( last_idx , num_arrs ) : NEW_LINE INDENT if num_arrs == 0 : NEW_LINE INDENT return 0 , [ ] NEW_LINE DEDENT if last_idx < 0 : NEW_LINE INDENT return math . inf , [ ] NEW_LINE DEDENT total_sum , idxes = find ( last_idx - k , num_arrs - 1 ) NEW_LINE total_sum -= prefix_sums [ last_idx + 1 ] - prefix_sums [ last_idx + 1 - k ] NEW_LINE idxes = idxes + [ last_idx - k + 1 ] NEW_LINE return min ( find ( last_idx - 1 , num_arrs ) , ( total_sum , idxes ) ) NEW_LINE DEDENT return find ( n - 1 , 3 ) [ - 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT temp_sum = 0 NEW_LINE cumsum = [ 0 ] NEW_LINE for ele in nums : NEW_LINE INDENT temp_sum += ele NEW_LINE cumsum . append ( temp_sum ) NEW_LINE DEDENT def get_sum ( start_idx ) : NEW_LINE INDENT ans = cumsum [ start_idx + k ] - cumsum [ start_idx ] NEW_LINE return ans NEW_LINE DEDENT def dfs ( i , m , cache ) : NEW_LINE INDENT if m == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if len ( nums ) - i < k * m : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if ( i , m ) in cache : NEW_LINE INDENT return cache [ ( i , m ) ] NEW_LINE DEDENT a_choice = [ i ] + dfs ( i + k , m - 1 , cache ) NEW_LINE b_choice = dfs ( i + 1 , m , cache ) NEW_LINE if len ( a_choice ) == m and len ( b_choice ) == m : NEW_LINE INDENT a_sum , b_sum = 0 , 0 NEW_LINE for ele in a_choice : NEW_LINE INDENT a_sum += get_sum ( ele ) NEW_LINE DEDENT for ele in b_choice : NEW_LINE INDENT b_sum += get_sum ( ele ) NEW_LINE DEDENT if a_sum >= b_sum : NEW_LINE INDENT ans = a_choice NEW_LINE DEDENT else : NEW_LINE INDENT ans = b_choice NEW_LINE DEDENT DEDENT elif len ( a_choice ) == m : NEW_LINE INDENT ans = a_choice NEW_LINE DEDENT elif len ( b_choice ) == m : NEW_LINE INDENT ans = b_choice NEW_LINE DEDENT else : NEW_LINE INDENT ans = [ ] NEW_LINE DEDENT cache [ ( i , m ) ] = ans NEW_LINE return ans NEW_LINE DEDENT ans = dfs ( 0 , 3 , { } ) NEW_LINE return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums , k ) : NEW_LINE INDENT cur_sum = sum ( nums [ : k ] ) NEW_LINE max_sum1 = [ [ 0 , [ ] ] for _ in range ( len ( nums ) ) ] NEW_LINE max_sum2 , max_sum3 = copy . deepcopy ( max_sum1 ) , copy . deepcopy ( max_sum1 ) NEW_LINE for pos in range ( k - 1 , len ( nums ) ) : NEW_LINE INDENT cur_sum += nums [ pos ] NEW_LINE if pos >= k : NEW_LINE INDENT cur_sum -= nums [ pos - k ] NEW_LINE DEDENT if cur_sum > max_sum1 [ pos - 1 ] [ 0 ] : NEW_LINE INDENT max_sum1 [ pos ] = [ cur_sum , [ pos - k + 1 ] ] NEW_LINE DEDENT else : NEW_LINE INDENT max_sum1 [ pos ] = max_sum1 [ pos - 1 ] NEW_LINE DEDENT if cur_sum + max_sum1 [ pos - k ] [ 0 ] > max_sum2 [ pos - 1 ] [ 0 ] : NEW_LINE INDENT val = cur_sum + max_sum1 [ pos - k ] [ 0 ] NEW_LINE indices = max_sum1 [ pos - k ] [ 1 ] + [ pos - k + 1 ] NEW_LINE max_sum2 [ pos ] = [ val , indices ] NEW_LINE DEDENT else : NEW_LINE INDENT max_sum2 [ pos ] = max_sum2 [ pos - 1 ] NEW_LINE DEDENT if cur_sum + max_sum2 [ pos - k ] [ 0 ] > max_sum3 [ pos - 1 ] [ 0 ] : NEW_LINE INDENT val = cur_sum + max_sum2 [ pos - k ] [ 0 ] NEW_LINE indices = max_sum2 [ pos - k ] [ 1 ] + [ pos - k + 1 ] NEW_LINE max_sum3 [ pos ] = [ val , indices ] NEW_LINE DEDENT else : NEW_LINE INDENT max_sum3 [ pos ] = max_sum3 [ pos - 1 ] NEW_LINE DEDENT DEDENT return max_sum3 [ - 1 ] [ 1 ] NEW_LINE DEDENT DEDENT
import copy NEW_LINE class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT if k == 0 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if 3 * k > len ( nums ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT sum_list = [ ] NEW_LINE s = 0 NEW_LINE for n in nums : NEW_LINE INDENT s += n NEW_LINE sum_list . append ( s ) NEW_LINE DEDENT dp = [ [ [ 0 , [ ] ] for i in range ( 4 ) ] for j in range ( len ( nums ) ) ] NEW_LINE for count in range ( 1 , 4 ) : NEW_LINE INDENT dp [ k * count - 1 ] [ count ] [ 0 ] = sum_list [ k * count - 1 ] NEW_LINE for i in range ( count ) : NEW_LINE INDENT dp [ k * count - 1 ] [ count ] [ 1 ] . append ( k * i ) NEW_LINE DEDENT for i in range ( k * count , len ( nums ) ) : NEW_LINE INDENT if dp [ i - 1 ] [ count ] [ 0 ] >= dp [ i - k ] [ count - 1 ] [ 0 ] + sum_list [ i ] - sum_list [ i - k ] : NEW_LINE INDENT dp [ i ] [ count ] [ 0 ] = dp [ i - 1 ] [ count ] [ 0 ] NEW_LINE dp [ i ] [ count ] [ 1 ] = copy . deepcopy ( dp [ i - 1 ] [ count ] [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT indices = copy . deepcopy ( dp [ i - k ] [ count - 1 ] [ 1 ] ) NEW_LINE indices . append ( i - k + 1 ) NEW_LINE dp [ i ] [ count ] [ 0 ] = dp [ i - k ] [ count - 1 ] [ 0 ] + sum_list [ i ] - sum_list [ i - k ] NEW_LINE dp [ i ] [ count ] [ 1 ] = indices NEW_LINE DEDENT DEDENT DEDENT return dp [ len ( nums ) - 1 ] [ 3 ] [ 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT from copy import copy NEW_LINE pf_sum = [ 0 ] NEW_LINE for num in nums : NEW_LINE INDENT pf_sum . append ( pf_sum [ - 1 ] + num ) NEW_LINE DEDENT dp = [ [ ( 0 , [ ] ) for _ in range ( 3 + 1 ) ] for _ in range ( len ( nums ) + 1 ) ] NEW_LINE for i , num in enumerate ( nums , start = 1 ) : NEW_LINE INDENT for used in range ( 3 + 1 ) : NEW_LINE INDENT sum_max , idxes = dp [ i - 1 ] [ used ] NEW_LINE if i - k >= 0 and used - 1 >= 0 : NEW_LINE INDENT sum_max_contain_i = dp [ i - k ] [ used - 1 ] [ 0 ] + ( pf_sum [ i ] - pf_sum [ i - k ] ) NEW_LINE if sum_max_contain_i > sum_max : NEW_LINE INDENT sum_max = sum_max_contain_i NEW_LINE idxes = dp [ i - k ] [ used - 1 ] [ 1 ] + [ i - k + 1 - 1 ] NEW_LINE DEDENT DEDENT dp [ i ] [ used ] = ( sum_max , copy ( idxes ) ) NEW_LINE DEDENT DEDENT return dp [ - 1 ] [ 3 ] [ 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE sums = [ 0 ] * n NEW_LINE sumup = sum ( nums [ : k ] ) NEW_LINE sums [ k - 1 ] = sumup NEW_LINE for i in range ( k , n ) : NEW_LINE INDENT sumup += nums [ i ] NEW_LINE sumup -= nums [ i - k ] NEW_LINE sums [ i ] = sumup NEW_LINE DEDENT numArrays = 3 NEW_LINE dp = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT dp . append ( [ ] ) NEW_LINE for j in range ( numArrays + 1 ) : NEW_LINE INDENT dp [ i ] . append ( [ 0 , [ ] ] ) NEW_LINE DEDENT DEDENT for i in range ( k - 1 , n ) : NEW_LINE INDENT for j in range ( 1 , numArrays + 1 ) : NEW_LINE INDENT dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] NEW_LINE dp [ i ] [ j ] [ 1 ] = copy . deepcopy ( dp [ i - 1 ] [ j ] [ 1 ] ) NEW_LINE if dp [ i - k ] [ j - 1 ] [ 0 ] + sums [ i ] > dp [ i ] [ j ] [ 0 ] : NEW_LINE INDENT dp [ i ] [ j ] [ 0 ] = dp [ i - k ] [ j - 1 ] [ 0 ] + sums [ i ] NEW_LINE dp [ i ] [ j ] [ 1 ] = copy . deepcopy ( dp [ i - k ] [ j - 1 ] [ 1 ] ) NEW_LINE dp [ i ] [ j ] [ 1 ] . append ( i - k + 1 ) NEW_LINE DEDENT DEDENT DEDENT return dp [ n - 1 ] [ numArrays ] [ 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums , k ) : NEW_LINE INDENT n = len ( nums ) NEW_LINE best = ( 0 , [ 0 , 0 , 0 ] ) NEW_LINE dpL = [ ( 0 , 0 ) ] * ( n ) NEW_LINE dpR = [ ( 0 , 0 ) ] * ( n ) NEW_LINE cur = sum ( nums [ 0 : k ] ) NEW_LINE dpL [ 0 ] = ( cur , 0 ) NEW_LINE for i in range ( 1 , n - k + 1 ) : NEW_LINE INDENT cur += nums [ i + k - 1 ] NEW_LINE cur -= nums [ i - 1 ] NEW_LINE dpL [ i ] = dpL [ i - 1 ] if dpL [ i - 1 ] [ 0 ] >= cur else ( cur , i ) NEW_LINE DEDENT print ( dpL ) NEW_LINE cur = sum ( nums [ - k : ] ) NEW_LINE dpR [ n - k ] = ( cur , n - k ) NEW_LINE for i in range ( n - k - 1 , - 1 , - 1 ) : NEW_LINE INDENT cur += nums [ i ] NEW_LINE cur -= nums [ i + k ] NEW_LINE dpR [ i ] = dpR [ i + 1 ] if dpR [ i + 1 ] [ 0 ] > cur else ( cur , i ) NEW_LINE DEDENT for i in range ( k , n - 2 * k + 1 ) : NEW_LINE INDENT cur = dpL [ i - k ] [ 0 ] + sum ( nums [ i : i + k ] ) + dpR [ i + k ] [ 0 ] NEW_LINE if cur > best [ 0 ] : NEW_LINE INDENT best = ( cur , [ dpL [ i - k ] [ 1 ] , i , dpR [ i + k ] [ 1 ] ] ) NEW_LINE DEDENT DEDENT return best [ 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT if not nums or len ( nums ) < 3 * k : NEW_LINE INDENT return [ ] NEW_LINE DEDENT N = len ( nums ) NEW_LINE f = [ ( 0 , 0 ) ] * N NEW_LINE ts = sum ( nums [ : k - 1 ] ) NEW_LINE for i in range ( k - 1 , N ) : NEW_LINE INDENT ts += nums [ i ] NEW_LINE if ts > f [ i - 1 ] [ 0 ] : NEW_LINE INDENT f [ i ] = ( ts , i - k + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT f [ i ] = f [ i - 1 ] NEW_LINE DEDENT ts -= nums [ i - k + 1 ] NEW_LINE DEDENT e = [ ( 0 , 0 ) ] * ( N + 1 ) NEW_LINE ts = sum ( nums [ N - k + 1 : ] ) NEW_LINE for i in range ( N - k , - 1 , - 1 ) : NEW_LINE INDENT ts += nums [ i ] NEW_LINE if ts >= e [ i + 1 ] [ 0 ] : NEW_LINE INDENT e [ i ] = ( ts , i ) NEW_LINE DEDENT else : NEW_LINE INDENT e [ i ] = e [ i + 1 ] NEW_LINE DEDENT ts -= nums [ i + k - 1 ] NEW_LINE DEDENT ans = [ ] NEW_LINE mx = 0 NEW_LINE for i in range ( k , N - 2 * k + 1 ) : NEW_LINE INDENT t = sum ( nums [ i : i + k ] ) + f [ i - 1 ] [ 0 ] + e [ i + k ] [ 0 ] NEW_LINE if t > mx : NEW_LINE INDENT mx = t NEW_LINE ans = [ f [ i - 1 ] [ 1 ] , i , e [ i + k ] [ 1 ] ] NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT presum = { } NEW_LINE cur = 0 NEW_LINE maxsum = float ( '-inf' ) NEW_LINE maxidx = 0 NEW_LINE for i in range ( 0 , len ( nums ) ) : NEW_LINE INDENT cur += nums [ i ] NEW_LINE if i >= k : NEW_LINE INDENT cur -= nums [ i - k ] NEW_LINE DEDENT if i >= k - 1 : NEW_LINE INDENT if cur > maxsum : NEW_LINE INDENT maxsum = cur NEW_LINE maxidx = i - k + 1 NEW_LINE DEDENT presum [ i ] = ( maxsum , maxidx ) NEW_LINE DEDENT DEDENT postsum = { } NEW_LINE cur = 0 NEW_LINE maxsum = float ( '-inf' ) NEW_LINE maxidx = len ( nums ) - 1 NEW_LINE for i in range ( len ( nums ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT cur += nums [ i ] NEW_LINE if i < len ( nums ) - k : NEW_LINE INDENT cur -= nums [ i + k ] NEW_LINE DEDENT if i <= len ( nums ) - k : NEW_LINE INDENT if cur >= maxsum : NEW_LINE INDENT maxsum = cur NEW_LINE maxidx = i NEW_LINE DEDENT postsum [ i ] = ( maxsum , maxidx ) NEW_LINE DEDENT DEDENT ans = [ ] NEW_LINE res = float ( "-inf" ) NEW_LINE for i in range ( k , len ( nums ) - k - k + 1 ) : NEW_LINE INDENT pre = presum [ i - 1 ] [ 0 ] NEW_LINE mid = sum ( nums [ i : i + k ] ) NEW_LINE post = postsum [ i + k ] [ 0 ] NEW_LINE if pre + mid + post > res : NEW_LINE INDENT res = pre + mid + post NEW_LINE ans = [ presum [ i - 1 ] [ 1 ] , i , postsum [ i + k ] [ 1 ] ] NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT dp = [ [ None for _ in range ( len ( nums ) ) ] for _ in range ( 3 ) ] NEW_LINE window = deque ( ) NEW_LINE window . extend ( nums [ : k ] ) NEW_LINE toadd = k NEW_LINE while toadd < len ( nums ) : NEW_LINE INDENT dp [ 0 ] [ toadd - k ] = sum ( window ) NEW_LINE window . popleft ( ) NEW_LINE window . append ( nums [ toadd ] ) NEW_LINE toadd += 1 NEW_LINE DEDENT dp [ 0 ] [ toadd - k ] = sum ( window ) NEW_LINE print ( dp ) NEW_LINE lastmaxprev = - float ( "inf" ) NEW_LINE lastindexmax = - 1 NEW_LINE for i in range ( k , len ( nums ) - k + 1 ) : NEW_LINE INDENT lastprev = dp [ 0 ] [ i - k ] NEW_LINE if lastprev > lastmaxprev : NEW_LINE INDENT lastmaxprev = lastprev NEW_LINE lastindexmax = i - k NEW_LINE DEDENT dp [ 1 ] [ i ] = [ lastmaxprev + dp [ 0 ] [ i ] , lastindexmax , i ] NEW_LINE DEDENT print ( dp ) NEW_LINE lastmaxprevval = - float ( "inf" ) NEW_LINE lastindexmax = - 1 NEW_LINE for i in range ( 2 * k , len ( nums ) - k + 1 ) : NEW_LINE INDENT lastprev = dp [ 1 ] [ i - k ] NEW_LINE lastprevval = lastprev [ 0 ] NEW_LINE if lastprevval > lastmaxprevval : NEW_LINE INDENT lastmaxprevval = lastprevval NEW_LINE lastindexmax = i - k NEW_LINE DEDENT dp [ 2 ] [ i ] = [ lastmaxprevval + dp [ 0 ] [ i ] , dp [ 1 ] [ lastindexmax ] [ 1 ] , dp [ 1 ] [ lastindexmax ] [ 2 ] , i ] NEW_LINE DEDENT print ( dp ) NEW_LINE r = dp [ 2 ] NEW_LINE r = list ( filter ( lambda x : x != None , r ) ) NEW_LINE r . sort ( key = lambda x : - x [ 0 ] ) NEW_LINE return r [ 0 ] [ 1 : ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE if n == k * 3 : NEW_LINE INDENT return [ 0 + x * k for x in range ( n // 3 ) ] NEW_LINE DEDENT max_k_to_right = [ 0 ] * n NEW_LINE max_right_idx = [ 0 ] * n NEW_LINE curr_sum = max_sum = sum ( nums [ n - k : ] ) NEW_LINE idx = n - k NEW_LINE max_k_to_right [ n - k ] = max_sum NEW_LINE max_right_idx [ n - k ] = idx NEW_LINE for i in range ( n - k - 1 , - 1 , - 1 ) : NEW_LINE INDENT curr_sum += nums [ i ] NEW_LINE curr_sum -= nums [ i + k ] NEW_LINE if curr_sum >= max_sum : NEW_LINE INDENT max_sum = curr_sum NEW_LINE idx = i NEW_LINE DEDENT max_k_to_right [ i ] = max_sum NEW_LINE max_right_idx [ i ] = idx NEW_LINE DEDENT max_k_to_left = [ 0 ] * n NEW_LINE max_left_idx = [ 0 ] * n NEW_LINE curr_sum = max_sum = sum ( nums [ : k ] ) NEW_LINE idx = 0 NEW_LINE max_left_idx [ k - 1 ] = idx NEW_LINE max_k_to_left [ k - 1 ] = max_sum NEW_LINE max_res = 0 NEW_LINE res = [ ] NEW_LINE for i in range ( k , n ) : NEW_LINE INDENT curr_sum += nums [ i ] NEW_LINE curr_sum -= nums [ i - k ] NEW_LINE if curr_sum > max_sum : NEW_LINE INDENT max_sum = curr_sum NEW_LINE idx = i - k + 1 NEW_LINE DEDENT max_k_to_left [ i ] = max_sum NEW_LINE max_left_idx [ i ] = idx NEW_LINE if i - k >= 0 and i + k - 1 + k < n : NEW_LINE INDENT curr_best = max_k_to_left [ i - 1 ] + sum ( nums [ i : i + k ] ) + max_k_to_right [ i + k ] NEW_LINE if curr_best > max_res : NEW_LINE INDENT max_res = curr_best NEW_LINE res = [ max_left_idx [ i - 1 ] , i , max_right_idx [ i + k ] ] NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT if len ( nums ) < 3 * k : return [ ] NEW_LINE if len ( nums ) == 3 * k : return [ 0 , k , 2 * k ] NEW_LINE cur = 0 NEW_LINE cache = [ ] NEW_LINE for i in range ( len ( nums ) ) : NEW_LINE INDENT if i < k - 1 : NEW_LINE INDENT cur += nums [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT cur += nums [ i ] NEW_LINE if i >= k : NEW_LINE INDENT cur -= nums [ i - k ] NEW_LINE DEDENT cache . append ( cur ) NEW_LINE DEDENT DEDENT l , val = [ ] , 0 NEW_LINE for i in range ( len ( cache ) ) : NEW_LINE INDENT if cache [ i ] > val : NEW_LINE INDENT l . append ( i ) NEW_LINE val = cache [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT l . append ( l [ - 1 ] ) NEW_LINE DEDENT DEDENT r , val = [ ] , 0 NEW_LINE for i in range ( len ( cache ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if cache [ i ] >= val : NEW_LINE INDENT r = [ i ] + r NEW_LINE val = cache [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT r = r [ 0 : 1 ] + r NEW_LINE DEDENT DEDENT val = 0 NEW_LINE res = None NEW_LINE for j in range ( k , len ( nums ) - 2 * k + 1 ) : NEW_LINE INDENT if cache [ l [ j - k ] ] + cache [ j ] + cache [ r [ j + k ] ] > val : NEW_LINE INDENT res = [ l [ j - k ] , j , r [ j + k ] ] NEW_LINE val = cache [ l [ j - k ] ] + cache [ j ] + cache [ r [ j + k ] ] NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT s = [ ] NEW_LINE sumC = 0 NEW_LINE for i , num in enumerate ( nums ) : NEW_LINE INDENT sumC += num NEW_LINE if i + 1 > k : NEW_LINE INDENT sumC -= nums [ i - k ] NEW_LINE DEDENT if i - k + 1 >= 0 : NEW_LINE INDENT s . append ( sumC ) NEW_LINE DEDENT DEDENT left , maxIdx = [ ] , 0 NEW_LINE for i in range ( len ( nums ) - 1 - k + 1 + 1 ) : NEW_LINE INDENT if s [ i ] > s [ maxIdx ] : NEW_LINE INDENT maxIdx = i NEW_LINE DEDENT left . append ( maxIdx ) NEW_LINE DEDENT right , maxIdx = [ ] , len ( nums ) - k NEW_LINE for i in range ( len ( nums ) - k , - 1 , - 1 ) : NEW_LINE INDENT if s [ i ] >= s [ maxIdx ] : NEW_LINE INDENT maxIdx = i NEW_LINE DEDENT right = [ maxIdx ] + right NEW_LINE DEDENT res = [ - 1 ] * 3 NEW_LINE maxS = None NEW_LINE for i in range ( k , len ( nums ) - 2 * k + 1 ) : NEW_LINE INDENT if maxS is None or s [ left [ i - k ] ] + s [ i ] + s [ right [ i + k ] ] > maxS : NEW_LINE INDENT maxS = s [ left [ i - k ] ] + s [ i ] + s [ right [ i + k ] ] NEW_LINE res [ 0 ] = left [ i - k ] NEW_LINE res [ 1 ] = i NEW_LINE res [ 2 ] = right [ i + k ] NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT W = [ ] NEW_LINE summ = sum ( nums [ : k ] ) NEW_LINE W . append ( summ ) NEW_LINE for i in range ( k , len ( nums ) ) : NEW_LINE INDENT summ = summ - nums [ i - k ] + nums [ i ] NEW_LINE W . append ( summ ) NEW_LINE DEDENT left = [ 0 ] NEW_LINE best = 0 NEW_LINE for i in range ( 1 , len ( W ) ) : NEW_LINE INDENT if W [ best ] < W [ i ] : NEW_LINE INDENT best = i NEW_LINE DEDENT left . append ( best ) NEW_LINE DEDENT right = [ len ( W ) - 1 ] NEW_LINE best = len ( W ) - 1 NEW_LINE for i in range ( len ( W ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT if W [ best ] <= W [ i ] : NEW_LINE INDENT best = i NEW_LINE DEDENT right = [ best ] + right NEW_LINE DEDENT print ( W ) NEW_LINE print ( left ) NEW_LINE print ( right ) NEW_LINE ans = None NEW_LINE for i in range ( k , len ( W ) - k ) : NEW_LINE INDENT l , r = left [ i - k ] , right [ i + k ] NEW_LINE if not ans or W [ i ] + W [ l ] + W [ r ] > W [ ans [ 0 ] ] + W [ ans [ 1 ] ] + W [ ans [ 2 ] ] : NEW_LINE INDENT ans = l , i , r NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT window = [ ] NEW_LINE for i in range ( len ( nums ) - k + 1 ) : NEW_LINE INDENT window += sum ( nums [ i : i + k ] ) , NEW_LINE DEDENT left = [ 0 ] NEW_LINE best = window [ 0 ] NEW_LINE for i in range ( 1 , len ( window ) ) : NEW_LINE INDENT if window [ i ] > best : NEW_LINE INDENT best = window [ i ] NEW_LINE left += i , NEW_LINE DEDENT else : NEW_LINE INDENT left += left [ i - 1 ] , NEW_LINE DEDENT DEDENT right = [ len ( window ) - 1 ] * len ( window ) NEW_LINE best = window [ - 1 ] NEW_LINE for i in range ( len ( window ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT if window [ i ] >= best : NEW_LINE INDENT best = window [ i ] NEW_LINE right [ i ] = i NEW_LINE DEDENT else : NEW_LINE INDENT right [ i ] = right [ i + 1 ] NEW_LINE DEDENT DEDENT res = [ ] NEW_LINE for j in range ( k , len ( window ) - k ) : NEW_LINE INDENT l , r = left [ j - k ] , right [ j + k ] NEW_LINE if not res or ( window [ l ] + window [ j ] + window [ r ] ) > window [ res [ 0 ] ] + window [ res [ 1 ] ] + window [ res [ 2 ] ] : NEW_LINE INDENT res = [ l , j , r ] NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT window_sum = list ( map ( lambda i : sum ( nums [ i : i + k ] ) , range ( 0 , len ( nums ) - k + 1 ) ) ) NEW_LINE L = [ 0 ] * len ( window_sum ) NEW_LINE for i in range ( k , len ( L ) ) : NEW_LINE INDENT if window_sum [ L [ i - 1 ] ] < window_sum [ i - k ] : NEW_LINE INDENT L [ i ] = i - k NEW_LINE DEDENT else : NEW_LINE INDENT L [ i ] = L [ i - 1 ] NEW_LINE DEDENT DEDENT R = [ len ( window_sum ) - 1 ] * len ( window_sum ) NEW_LINE for i in range ( len ( R ) - k - 1 , - 1 , - 1 ) : NEW_LINE INDENT if window_sum [ R [ i + 1 ] ] <= window_sum [ i + k ] : NEW_LINE INDENT R [ i ] = i + k NEW_LINE DEDENT else : NEW_LINE INDENT R [ i ] = R [ i + 1 ] NEW_LINE DEDENT DEDENT max_sum = 0 NEW_LINE ans = [ ] NEW_LINE for i in range ( k , len ( window_sum ) - k ) : NEW_LINE INDENT if window_sum [ i ] + window_sum [ L [ i ] ] + window_sum [ R [ i ] ] > max_sum : NEW_LINE INDENT ans = [ L [ i ] , i , R [ i ] ] NEW_LINE max_sum = window_sum [ i ] + window_sum [ L [ i ] ] + window_sum [ R [ i ] ] NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT window_sum = [ ] NEW_LINE for i in range ( len ( nums ) - k + 1 ) : NEW_LINE INDENT window_sum . append ( sum ( nums [ i : i + k ] ) ) NEW_LINE DEDENT windows = collections . defaultdict ( lambda : [ 0 , [ ] ] ) NEW_LINE m = 3 NEW_LINE for s in range ( len ( nums ) - m * k + 1 ) : NEW_LINE INDENT for i in range ( 1 , m + 1 ) : NEW_LINE INDENT d = s + ( i - 1 ) * k NEW_LINE if window_sum [ d ] + windows [ i - 1 ] [ 0 ] > windows [ i ] [ 0 ] : NEW_LINE INDENT windows [ i ] [ 0 ] = window_sum [ d ] + windows [ i - 1 ] [ 0 ] NEW_LINE windows [ i ] [ 1 ] = windows [ i - 1 ] [ 1 ] + [ d ] NEW_LINE DEDENT DEDENT DEDENT return windows [ m ] [ 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT sum_list = [ ] NEW_LINE left_list = [ ] NEW_LINE right_list = [ ] NEW_LINE maxs = 0 NEW_LINE record = - 1 NEW_LINE for i in range ( len ( nums ) - k + 1 ) : NEW_LINE INDENT sum_list . append ( sum ( nums [ i : i + k ] ) ) NEW_LINE DEDENT left_list = [ 0 ] * len ( sum_list ) NEW_LINE best_left = 0 NEW_LINE right_list = [ 0 ] * len ( sum_list ) NEW_LINE best_right = len ( sum_list ) - 1 NEW_LINE for i in range ( len ( sum_list ) ) : NEW_LINE INDENT if sum_list [ i ] > sum_list [ best_left ] : NEW_LINE INDENT best_left = i NEW_LINE DEDENT left_list [ i ] = best_left NEW_LINE DEDENT for i in range ( len ( sum_list ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if sum_list [ i ] >= sum_list [ best_right ] : NEW_LINE INDENT best_right = i NEW_LINE DEDENT right_list [ i ] = best_right NEW_LINE DEDENT for i in range ( k , len ( sum_list ) - k ) : NEW_LINE INDENT if sum_list [ i ] + sum_list [ left_list [ i - k ] ] + sum_list [ right_list [ i + k ] ] > maxs : NEW_LINE INDENT record = i NEW_LINE maxs = sum_list [ i ] + sum_list [ left_list [ i - k ] ] + sum_list [ right_list [ i + k ] ] NEW_LINE DEDENT DEDENT return [ left_list [ record - k ] , record , right_list [ record + k ] ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT return self . sol2 ( nums , k ) NEW_LINE DEDENT def sol1 ( self , nums , k ) : NEW_LINE INDENT NEW_LINE result , n = [ ] , len ( nums ) NEW_LINE prefix_sum = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT prefix_sum [ i ] = prefix_sum [ i - 1 ] + nums [ i ] NEW_LINE DEDENT print ( prefix_sum ) NEW_LINE max_sum = - sys . maxsize NEW_LINE for i in range ( k , n - 2 * k + 1 ) : NEW_LINE INDENT middle = prefix_sum [ i + k - 1 ] - prefix_sum [ i - 1 ] NEW_LINE left_idx , left_sum = self . best_left ( nums , prefix_sum , 0 , i - 1 , k ) NEW_LINE right_idx , right_sum = self . best_left ( nums , prefix_sum , i + k , n - 1 , k ) NEW_LINE cur = left_sum + right_sum + middle NEW_LINE if cur > max_sum : NEW_LINE INDENT max_sum = cur NEW_LINE result = [ left_idx , i , right_idx ] NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT def best_left ( self , nums , prefix_sum , start , end , k ) : NEW_LINE INDENT prev = cur = max_sum = prefix_sum [ start + k - 1 ] - prefix_sum [ start - 1 ] NEW_LINE max_start = start NEW_LINE for i in range ( start + k - 1 , end + 1 ) : NEW_LINE INDENT cur = prefix_sum [ i ] - prefix_sum [ i - k ] NEW_LINE if cur > max_sum : NEW_LINE INDENT max_sum = cur NEW_LINE max_start = i - k + 1 NEW_LINE DEDENT prev = cur NEW_LINE DEDENT return max_start , max_sum NEW_LINE DEDENT def sol2 ( self , nums , k ) : NEW_LINE INDENT NEW_LINE n , result = len ( nums ) , [ ] NEW_LINE prefix_sum = [ 0 ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT prefix_sum . append ( prefix_sum [ - 1 ] + nums [ i ] ) NEW_LINE DEDENT maxsum = prefix_sum [ k ] - prefix_sum [ 0 ] NEW_LINE state_left = [ 0.1 ] * n NEW_LINE state_left [ k - 1 ] = k - 1 NEW_LINE for i in range ( k , n ) : NEW_LINE INDENT temp = prefix_sum [ i + 1 ] - prefix_sum [ i - k + 1 ] NEW_LINE if temp > maxsum : NEW_LINE INDENT maxsum = temp NEW_LINE state_left [ i ] = i NEW_LINE DEDENT else : NEW_LINE INDENT state_left [ i ] = state_left [ i - 1 ] NEW_LINE DEDENT DEDENT maxsum = prefix_sum [ n ] - prefix_sum [ n - k ] NEW_LINE state_right = [ 0.1 ] * n NEW_LINE state_right [ n - k ] = n - k NEW_LINE for j in range ( n - k - 1 , - 1 , - 1 ) : NEW_LINE INDENT temp = prefix_sum [ j + k ] - prefix_sum [ j ] NEW_LINE if temp >= maxsum : NEW_LINE INDENT maxsum = temp NEW_LINE state_right [ j ] = j NEW_LINE DEDENT else : NEW_LINE INDENT state_right [ j ] = state_right [ j + 1 ] NEW_LINE DEDENT DEDENT maxsum = - sys . maxsize NEW_LINE for i in range ( k , n - 2 * k + 1 ) : NEW_LINE INDENT middle = prefix_sum [ i + k ] - prefix_sum [ i ] NEW_LINE left = sum ( nums [ state_left [ i - 1 ] - k + 1 : state_left [ i - 1 ] + 1 ] ) NEW_LINE right = sum ( nums [ state_right [ i + k ] : state_right [ i + k ] + k ] ) NEW_LINE temp = left + middle + right NEW_LINE if temp > maxsum : NEW_LINE INDENT maxsum = temp NEW_LINE result = [ state_left [ i - 1 ] - k + 1 , i , state_right [ i + k ] ] NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT window = [ ] NEW_LINE for i in range ( len ( nums ) - k + 1 ) : NEW_LINE INDENT window += sum ( nums [ i : i + k ] ) , NEW_LINE DEDENT left = [ 0 ] NEW_LINE best = window [ 0 ] NEW_LINE for i in range ( 1 , len ( window ) ) : NEW_LINE INDENT if window [ i ] > best : NEW_LINE INDENT best = window [ i ] NEW_LINE left += i , NEW_LINE DEDENT else : NEW_LINE INDENT left += left [ i - 1 ] , NEW_LINE DEDENT DEDENT right = [ len ( window ) - 1 ] * len ( window ) NEW_LINE best = window [ - 1 ] NEW_LINE for i in range ( len ( window ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT if window [ i ] >= best : NEW_LINE INDENT best = window [ i ] NEW_LINE right [ i ] = i NEW_LINE DEDENT else : NEW_LINE INDENT right [ i ] = right [ i + 1 ] NEW_LINE DEDENT DEDENT res = [ ] NEW_LINE for j in range ( k , len ( window ) - k ) : NEW_LINE INDENT l , r = left [ j - k ] , right [ j + k ] NEW_LINE if not res or ( window [ l ] + window [ j ] + window [ r ] ) > window [ res [ 0 ] ] + window [ res [ 1 ] ] + window [ res [ 2 ] ] : NEW_LINE INDENT res = [ l , j , r ] NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT window_sums = [ ] NEW_LINE for i in range ( len ( nums ) - k + 1 ) : NEW_LINE INDENT window_sums . append ( sum ( nums [ i : i + k ] ) ) NEW_LINE DEDENT m = 3 NEW_LINE windows = collections . defaultdict ( lambda : [ 0 , [ ] ] ) NEW_LINE for s in range ( len ( nums ) - m * k + 1 ) : NEW_LINE INDENT for i in range ( 1 , m + 1 ) : NEW_LINE INDENT d = s + ( i - 1 ) * k NEW_LINE if window_sums [ d ] + windows [ i - 1 ] [ 0 ] > windows [ i ] [ 0 ] : NEW_LINE INDENT windows [ i ] [ 0 ] = window_sums [ d ] + windows [ i - 1 ] [ 0 ] NEW_LINE windows [ i ] [ 1 ] = windows [ i - 1 ] [ 1 ] + [ d ] NEW_LINE DEDENT DEDENT DEDENT return windows [ m ] [ 1 ] NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , n : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT arr = [ ] NEW_LINE for i in range ( len ( n ) - k + 1 ) : NEW_LINE INDENT arr . append ( sum ( n [ i : ( i + k ) ] ) ) NEW_LINE DEDENT dp1 = [ 0 ] NEW_LINE for i in range ( 1 , len ( arr ) - k - k ) : NEW_LINE INDENT if arr [ i ] > arr [ dp1 [ i - 1 ] ] : NEW_LINE INDENT dp1 . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT dp1 . append ( dp1 [ i - 1 ] ) NEW_LINE DEDENT DEDENT mx = arr [ k ] + arr [ 0 ] NEW_LINE dp2 = [ ] NEW_LINE for i in range ( k ) : NEW_LINE INDENT dp2 . append ( k ) NEW_LINE DEDENT for i in range ( k , len ( arr ) - k ) : NEW_LINE INDENT if arr [ i ] + arr [ dp1 [ i - k ] ] > mx : NEW_LINE INDENT dp2 . append ( i ) NEW_LINE mx = arr [ i ] + arr [ dp1 [ i - k ] ] NEW_LINE DEDENT else : NEW_LINE INDENT dp2 . append ( dp2 [ i - 1 ] ) NEW_LINE DEDENT DEDENT mx = arr [ 0 ] + arr [ k ] + arr [ k + k ] NEW_LINE dp3 = [ k + k ] NEW_LINE for i in range ( ( 2 * k ) + 1 , ( len ( arr ) ) ) : NEW_LINE INDENT j = dp2 [ i - k ] NEW_LINE l = dp1 [ j - k ] NEW_LINE val = arr [ i ] + arr [ j ] + arr [ l ] NEW_LINE if val > mx : NEW_LINE INDENT mx = val NEW_LINE dp3 . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT dp3 . append ( dp3 [ i - k - k - 1 ] ) NEW_LINE DEDENT DEDENT i = dp3 [ - 1 ] NEW_LINE j = dp2 [ i - k ] NEW_LINE k = dp1 [ j - k ] NEW_LINE return k , j , i NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT window = [ ] NEW_LINE for i in range ( len ( nums ) - k + 1 ) : NEW_LINE INDENT window += sum ( nums [ i : i + k ] ) , NEW_LINE DEDENT print ( window ) NEW_LINE left = [ 0 ] NEW_LINE best = window [ 0 ] NEW_LINE for i in range ( 1 , len ( window ) ) : NEW_LINE INDENT if window [ i ] > best : NEW_LINE INDENT best = window [ i ] NEW_LINE left += i , NEW_LINE DEDENT else : NEW_LINE INDENT left += left [ i - 1 ] , NEW_LINE DEDENT DEDENT right = [ len ( window ) - 1 ] * len ( window ) NEW_LINE best = window [ - 1 ] NEW_LINE for i in range ( len ( window ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT if window [ i ] >= best : NEW_LINE INDENT best = window [ i ] NEW_LINE right [ i ] = i NEW_LINE DEDENT else : NEW_LINE INDENT right [ i ] = right [ i + 1 ] NEW_LINE DEDENT DEDENT print ( right ) NEW_LINE res = [ ] NEW_LINE for j in range ( k , len ( window ) - k ) : NEW_LINE INDENT l , r = left [ j - k ] , right [ j + k ] NEW_LINE if not res or ( window [ l ] + window [ j ] + window [ r ] ) > window [ res [ 0 ] ] + window [ res [ 1 ] ] + window [ res [ 2 ] ] : NEW_LINE INDENT res = [ l , j , r ] NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT window = [ ] NEW_LINE for i in range ( len ( nums ) - k + 1 ) : NEW_LINE INDENT window += sum ( nums [ i : i + k ] ) , NEW_LINE DEDENT print ( window ) NEW_LINE left = [ 0 ] NEW_LINE best = window [ 0 ] NEW_LINE for i in range ( 1 , len ( window ) ) : NEW_LINE INDENT if window [ i ] > best : NEW_LINE INDENT best = window [ i ] NEW_LINE left += i , NEW_LINE DEDENT else : NEW_LINE INDENT left += left [ i - 1 ] , NEW_LINE DEDENT DEDENT right = [ len ( window ) - 1 ] * len ( window ) NEW_LINE best = window [ - 1 ] NEW_LINE for i in range ( len ( window ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT if window [ i ] >= best : NEW_LINE INDENT best = window [ i ] NEW_LINE right [ i ] = i NEW_LINE DEDENT else : NEW_LINE INDENT right [ i ] = right [ i + 1 ] NEW_LINE DEDENT DEDENT print ( right ) NEW_LINE res = [ ] NEW_LINE for j in range ( k , len ( window ) - k ) : NEW_LINE INDENT l , r = left [ j - k ] , right [ j + k ] NEW_LINE print ( l , j , r , res ) NEW_LINE if not res or ( window [ l ] + window [ j ] + window [ r ] ) > window [ res [ 0 ] ] + window [ res [ 1 ] ] + window [ res [ 2 ] ] : NEW_LINE INDENT res = [ l , j , r ] NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT window = [ ] NEW_LINE for i in range ( len ( nums ) - k + 1 ) : NEW_LINE INDENT window += sum ( nums [ i : i + k ] ) , NEW_LINE DEDENT print ( window ) NEW_LINE left = [ 0 ] NEW_LINE best = window [ 0 ] NEW_LINE for i in range ( 1 , len ( window ) ) : NEW_LINE INDENT if window [ i ] > best : NEW_LINE INDENT best = window [ i ] NEW_LINE left += i , NEW_LINE DEDENT else : NEW_LINE INDENT left += left [ i - 1 ] , NEW_LINE DEDENT DEDENT right = [ len ( window ) - 1 ] * len ( window ) NEW_LINE best = window [ - 1 ] NEW_LINE for i in range ( len ( window ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT if window [ i ] >= best : NEW_LINE INDENT best = window [ i ] NEW_LINE right [ i ] = i NEW_LINE DEDENT else : NEW_LINE INDENT right [ i ] = right [ i + 1 ] NEW_LINE DEDENT DEDENT print ( right ) NEW_LINE res = [ ] NEW_LINE for j in range ( k , len ( window ) - k ) : NEW_LINE INDENT l , r = left [ j - k ] , right [ j + k ] NEW_LINE print ( l , j , r , res ) NEW_LINE if not res or ( window [ l ] + window [ j ] + window [ r ] ) > window [ res [ 0 ] ] + window [ res [ 1 ] ] + window [ res [ 2 ] ] : NEW_LINE INDENT res = [ l , j , r ] NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT ksum = [ sum ( nums [ i : i + k ] ) for i in range ( len ( nums ) - k + 1 ) ] NEW_LINE largest_ksum = [ [ 0 , 0 ] ] * len ( ksum ) NEW_LINE largest_ksum [ - 1 ] = [ ksum [ - 1 ] , len ( ksum ) - 1 ] NEW_LINE for i in range ( len ( ksum ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT if ksum [ i ] >= largest_ksum [ i + 1 ] [ 0 ] : NEW_LINE INDENT largest_ksum [ i ] = [ ksum [ i ] , i ] NEW_LINE DEDENT else : NEW_LINE INDENT largest_ksum [ i ] = largest_ksum [ i + 1 ] NEW_LINE DEDENT DEDENT two_ksum = [ [ 0 , 0 , 0 ] ] * ( len ( largest_ksum ) - k ) NEW_LINE for i in range ( len ( two_ksum ) ) : NEW_LINE INDENT two_ksum [ i ] = [ ksum [ i ] + largest_ksum [ i + k ] [ 0 ] , i , largest_ksum [ i + k ] [ 1 ] ] NEW_LINE DEDENT for i in range ( len ( two_ksum ) - 2 , - 1 , - 1 ) : NEW_LINE INDENT if two_ksum [ i ] [ 0 ] < two_ksum [ i + 1 ] [ 0 ] : NEW_LINE INDENT two_ksum [ i ] = two_ksum [ i + 1 ] NEW_LINE DEDENT DEDENT three_ksum = [ [ 0 , 0 , 0 , 0 ] ] * ( len ( two_ksum ) - k ) NEW_LINE max_3_ksum = 0 NEW_LINE for i in range ( len ( three_ksum ) ) : NEW_LINE INDENT three_ksum [ i ] = [ ksum [ i ] + two_ksum [ i + k ] [ 0 ] , i , two_ksum [ i + k ] [ 1 ] , two_ksum [ i + k ] [ 2 ] ] NEW_LINE max_3_ksum = max ( max_3_ksum , three_ksum [ i ] [ 0 ] ) NEW_LINE DEDENT for i in range ( len ( three_ksum ) ) : NEW_LINE INDENT if three_ksum [ i ] [ 0 ] == max_3_ksum : NEW_LINE INDENT return three_ksum [ i ] [ 1 : ] NEW_LINE DEDENT DEDENT DEDENT DEDENT
class Solution : NEW_LINE INDENT def maxSumOfThreeSubarrays ( self , nums : List [ int ] , k : int ) -> List [ int ] : NEW_LINE INDENT n = len ( nums ) NEW_LINE sumk = [ 0 ] * ( n - k + 1 ) NEW_LINE for i in range ( len ( sumk ) ) : NEW_LINE INDENT sumk [ i ] = sum ( nums [ i : i + k ] ) NEW_LINE DEDENT left , right = [ 0 ] * len ( sumk ) , [ 0 ] * len ( sumk ) NEW_LINE cur , cur_max = 0 , sumk [ 0 ] NEW_LINE for i in range ( len ( sumk ) ) : NEW_LINE INDENT if sumk [ i ] > cur_max : NEW_LINE INDENT cur , cur_max = i , sumk [ i ] NEW_LINE DEDENT left [ i ] = cur NEW_LINE DEDENT cur , cur_max = len ( sumk ) - 1 , sumk [ - 1 ] NEW_LINE for j in range ( len ( sumk ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if sumk [ j ] >= cur_max : NEW_LINE INDENT cur , cur_max = j , sumk [ j ] NEW_LINE DEDENT right [ j ] = cur NEW_LINE DEDENT res , idx = 0 , [ 0 , 1 , 2 ] NEW_LINE for i in range ( k , len ( sumk ) - k ) : NEW_LINE INDENT cur = sumk [ i ] + sumk [ left [ i - k ] ] + sumk [ right [ i + k ] ] NEW_LINE if cur > res : NEW_LINE INDENT res , idx = cur , [ left [ i - k ] , i , right [ i + k ] ] NEW_LINE DEDENT DEDENT return idx NEW_LINE DEDENT DEDENT
